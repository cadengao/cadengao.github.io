{
  "UUID": "54197715.119594211",
  "id": 0,
  "type": null,
  "format": null,
  "title": "WPF-MVVM(使用MvvmLight插件)【Area】",
  "tags": null,
  "slug": null,
  "Tags": null,
  "description": null,
  "cover": null,
  "book_id": 0,
  "BookName": null,
  "public": 0,
  "word_count": 0,
  "created_at": "0001-01-01T00:00:00",
  "updated_at": "0001-01-01T00:00:00",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"fLXK4\"><span class=\"ne-text\" style=\"color: rgb(64, 64, 64)\">MVVM介绍</span></h1><p id=\"ufc5e08c0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(64, 64, 64); font-size: 16px\">其实就是：Model 、view、viewmodel三个的简称，就像MVC一样。</span></p><p id=\"u0b76fa39\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(64, 64, 64); font-size: 16px\">model就是模型。view就是视图。viewmodel就是和view进行绑定的。</span></p><p id=\"u31ed2480\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">MVVM示意图如下所示：</span></p><p id=\"u0a8c2d41\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119594211/image/0.png\" width=\"673\" id=\"ub57c3b62\" class=\"ne-image\"></p><p id=\"udc100748\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119594211/image/1.png\" width=\"374\" id=\"u2863a747\" class=\"ne-image\"></p><h1 id=\"dlKo5\"><span class=\"ne-text\">安装MvvmLight插件</span></h1><p id=\"u81c92e46\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119594211/image/2.png\" width=\"1332\" id=\"u315da18d\" class=\"ne-image\"></p><p id=\"ua58075e0\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119594211/image/3.png\" width=\"1903\" id=\"u97eee1e3\" class=\"ne-image\"></p><h1 id=\"KcKZg\"><span class=\"ne-text\">MVVM开发步骤</span></h1><p id=\"u1ee5f213\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 16px\">主要通过MVVM实现数据的CRUD【增删改查】基础操作，如下所示：</span></p><ol class=\"ne-ol\"><li id=\"u5a08a216\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(128, 0, 128)\">创建Model层</span></li></ol><p id=\"u96ff0fb9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">本例主要是对学生信息的增删改查，所以创建Student模型类，如下所示：</span></p><pre data-language=\"csharp\" id=\"g0V04\" class=\"ne-codeblock language-csharp\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace WpfMVVM.Models\n{\n    /// &lt;summary&gt;\n    /// 学生类\n    /// &lt;/summary&gt;\n    public class Student\n    {\n        /// &lt;summary&gt;\n        /// 唯一标识\n        /// &lt;/summary&gt;\n        public int Id { get; set; }\n\n        /// &lt;summary&gt;\n        /// 学生姓名\n        /// &lt;/summary&gt;\n        public string Name { get; set; }\n\n        /// &lt;summary&gt;\n        /// 年龄\n        /// &lt;/summary&gt;\n        public int Age { get; set; }\n\n        /// &lt;summary&gt;\n        /// 班级\n        /// &lt;/summary&gt;\n        public string Classes { get; set; }\n    }\n}\n</code></pre><ol start=\"2\" class=\"ne-ol\"><li id=\"ub70e1ae7\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(128, 0, 128)\">创建DAL层</span></li></ol><p id=\"ufc91e468\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">为了简化示例，模拟数据库操作，构建基础数据，如下所示：</span></p><pre data-language=\"csharp\" id=\"MC6Ji\" class=\"ne-codeblock language-csharp\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing WpfMVVM.Models;\n\nnamespace WpfMVVM.DAL\n{\n    public class LocalDb\n    {\n        private List&lt;Student&gt; students;\n\n        public LocalDb()\n        {\n            init();\n        }\n\n        /// &lt;summary&gt;\n        /// 初始化数据\n        /// &lt;/summary&gt;\n        private void init()\n        {\n            students = new List&lt;Student&gt;();\n            for (int i = 0; i &lt; 30; i++)\n            {\n                students.Add(new Student()\n                {\n                    Id = i,\n                    Name = string.Format(&quot;学生{0}&quot;, i),\n                    Age = new Random(i).Next(0, 100),\n                    Classes = i % 2 == 0 ? &quot;一班&quot; : &quot;二班&quot;\n                });\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 查询数据\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public List&lt;Student&gt; Query()\n        {\n            return students;\n        }\n\n        /// &lt;summary&gt;\n        /// 按名字查询\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;name&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public List&lt;Student&gt; QueryByName(string name)\n        {\n            return students.Where((t) =&gt; t.Name.Contains(name)).ToList();//FindAll((t) =&gt; t.Name.Contains(name));\n        }\n\n        public Student QueryById(int Id)\n        {\n            var student = students.FirstOrDefault((t) =&gt; t.Id == Id);\n            if (student != null)\n            {\n                return new Student()\n                {\n                    Id = student.Id,\n                    Name = student.Name,\n                    Age = student.Age,\n                    Classes = student.Classes\n                };\n            }\n            return null;\n        }\n\n\n        /// &lt;summary&gt;\n        /// 新增学生\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;student&quot;&gt;&lt;/param&gt;\n        public void AddStudent(Student student)\n        {\n            if (student != null)\n            {\n                students.Add(student);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 删除学生\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;Id&quot;&gt;&lt;/param&gt;\n        public void DelStudent(int Id)\n        {\n            var student = students.FirstOrDefault((t) =&gt; t.Id == Id); //students.Find((t) =&gt; t.Id == Id);\n            if (student != null)\n            {\n                students.Remove(student);\n            }\n\n        }\n    }\n\n}</code></pre><ol start=\"3\" class=\"ne-ol\"><li id=\"uc80bd9bf\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(128, 0, 128)\">创建View层</span></li></ol><p id=\"u36b4bc46\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">View层与用户进行交互，用户数据的展示，及事件的响应。在本例中，View层主要有数据查询展示，新增及编辑页面。</span></p><p id=\"uc7ebd77f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">在View层，主要是命令的绑定，及数据的绑定。</span></p><ol class=\"ne-list-wrap\"><ol ne-level=\"1\" data-index-type=\"2\" class=\"ne-ol\"><li id=\"u18ff5a23\" data-lake-index-type=\"2\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">DataGridTextColum</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">中通过</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">Binding=&quot;{Binding Id}</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">的形式绑定要展示的列属性名。</span></li><li id=\"u4bf5e16f\" data-lake-index-type=\"2\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">Butto</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">按钮上通过</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">Command=&quot;{Binding AddCommand}</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">的形式绑定要响应的命令。</span></li><li id=\"ua46e7348\" data-lake-index-type=\"2\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">TextBo</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">文本框中通过</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">Text=&quot;{Binding Search}</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">的形式绑定查询条件属性。</span></li></ol></ol><p id=\"u27d0d232\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">数据展示窗口，如下所示：</span></p><pre data-language=\"xml\" id=\"xfmp8\" class=\"ne-codeblock language-xml\"><code>&lt;Window x:Class=&quot;WpfMVVM.MainWindow&quot;\n  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n  xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n  xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n  xmlns:local=&quot;clr-namespace:WpfMVVM&quot;\n  mc:Ignorable=&quot;d&quot;\n  Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;\n  &lt;Grid&gt;\n    &lt;Grid.RowDefinitions&gt;\n      &lt;RowDefinition Height=&quot;80&quot;&gt;&lt;/RowDefinition&gt;\n      &lt;RowDefinition Height=&quot;*&quot;&gt;&lt;/RowDefinition&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;StackPanel Orientation=&quot;Horizontal&quot; Grid.Row=&quot;0&quot; Margin=&quot;5&quot; VerticalAlignment=&quot;Center&quot;&gt;\n      &lt;TextBlock Text=&quot;姓名：&quot; Margin=&quot;10&quot; Padding=&quot;5&quot;&gt;&lt;/TextBlock&gt;\n      &lt;TextBox x:Name=&quot;sname&quot; Text=&quot;{Binding Search}&quot; Width=&quot;120&quot; Margin=&quot;10&quot; Padding=&quot;5&quot;&gt;&lt;/TextBox&gt;\n      &lt;Button x:Name=&quot;btnQuery&quot; Content=&quot;查询&quot; Margin=&quot;10&quot; Padding=&quot;5&quot; Width=&quot;80&quot; Command=&quot;{Binding QueryCommand}&quot;&gt;&lt;/Button&gt;\n      &lt;Button x:Name=&quot;btnReset&quot; Content=&quot;重置&quot; Margin=&quot;10&quot; Padding=&quot;5&quot; Width=&quot;80&quot; Command=&quot;{Binding ResetCommand}&quot;&gt;&lt;/Button&gt;\n      &lt;Button x:Name=&quot;btnAdd&quot; Content=&quot;创建&quot; Margin=&quot;10&quot; Padding=&quot;5&quot; Width=&quot;80&quot;  Command=&quot;{Binding AddCommand}&quot;&gt;&lt;/Button&gt;\n    &lt;/StackPanel&gt;\n    &lt;DataGrid x:Name=&quot;dgInfo&quot; Grid.Row=&quot;1&quot; AutoGenerateColumns=&quot;False&quot; CanUserAddRows=&quot;False&quot; CanUserSortColumns=&quot;False&quot; Margin=&quot;10&quot; ItemsSource=&quot;{Binding GridModelList}&quot;&gt;\n      &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=&quot;Id&quot; Width=&quot;100&quot;  Binding=&quot;{Binding Id}&quot;&gt;&lt;/DataGridTextColumn&gt;\n        &lt;DataGridTextColumn Header=&quot;姓名&quot; Width=&quot;100&quot; Binding=&quot;{Binding Name}&quot;&gt;&lt;/DataGridTextColumn&gt;\n        &lt;DataGridTextColumn Header=&quot;年龄&quot; Width=&quot;100&quot; Binding=&quot;{Binding Age}&quot;&gt;&lt;/DataGridTextColumn&gt;\n        &lt;DataGridTextColumn Header=&quot;班级&quot; Width=&quot;100&quot; Binding=&quot;{Binding Classes}&quot;&gt;&lt;/DataGridTextColumn&gt;\n        &lt;DataGridTemplateColumn Header=&quot;操作&quot; Width=&quot;*&quot;&gt;\n          &lt;DataGridTemplateColumn.CellTemplate&gt;\n            &lt;DataTemplate&gt;\n              &lt;StackPanel Orientation=&quot;Horizontal&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot;&gt;\n                &lt;Button x:Name=&quot;edit&quot; Content=&quot;编辑&quot; Width=&quot;60&quot; Margin=&quot;3&quot; Height=&quot;25&quot; CommandParameter=&quot;{Binding Id}&quot; Command=&quot;{Binding DataContext.EditCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}&quot;&gt;&lt;/Button&gt;\n                &lt;Button x:Name=&quot;delete&quot; Content=&quot;删除&quot; Width=&quot;60&quot; Margin=&quot;3&quot; Height=&quot;25&quot;  CommandParameter=&quot;{Binding Id}&quot; Command=&quot;{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}&quot;&gt;&lt;/Button&gt;\n              &lt;/StackPanel&gt;\n            &lt;/DataTemplate&gt;\n          &lt;/DataGridTemplateColumn.CellTemplate&gt;\n        &lt;/DataGridTemplateColumn&gt;\n      &lt;/DataGrid.Columns&gt;\n    &lt;/DataGrid&gt;\n  &lt;/Grid&gt;\n&lt;/Window&gt;</code></pre><p id=\"ueed2708c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">新增及编辑页面，如下所示：</span></p><pre data-language=\"xml\" id=\"fGdvs\" class=\"ne-codeblock language-xml\"><code>&lt;Window x:Class=&quot;WpfMVVM.Views.StudentWindow&quot;\n  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n  xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n  xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n  xmlns:local=&quot;clr-namespace:WpfMVVM.Views&quot;\n  mc:Ignorable=&quot;d&quot;\n  Title=&quot;StudentWindow&quot; Height=&quot;440&quot; Width=&quot;500&quot; AllowsTransparency=&quot;False&quot; WindowStartupLocation=&quot;CenterScreen&quot; WindowStyle=&quot;None&quot;&gt;\n  &lt;Grid&gt;\n    &lt;Grid.RowDefinitions&gt;\n      &lt;RowDefinition Height=&quot;60&quot;&gt;&lt;/RowDefinition&gt;\n      &lt;RowDefinition&gt;&lt;/RowDefinition&gt;\n      &lt;RowDefinition Height=&quot;60&quot;&gt;&lt;/RowDefinition&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;TextBlock FontSize=&quot;30&quot; Margin=&quot;10&quot;&gt;修改学生信息&lt;/TextBlock&gt;\n    &lt;StackPanel Grid.Row=&quot;1&quot; Orientation=&quot;Vertical&quot;&gt;\n      &lt;TextBlock FontSize=&quot;20&quot; Margin=&quot;10&quot; Padding=&quot;5&quot;&gt;姓名&lt;/TextBlock&gt;\n      &lt;TextBox x:Name=&quot;txtName&quot; FontSize=&quot;20&quot;  Padding=&quot;5&quot; Text=&quot;{Binding Model.Name}&quot;&gt;&lt;/TextBox&gt;\n      &lt;TextBlock FontSize=&quot;20&quot; Margin=&quot;10&quot;  Padding=&quot;5&quot;&gt;年龄&lt;/TextBlock&gt;\n      &lt;TextBox x:Name=&quot;txtAge&quot; FontSize=&quot;20&quot;  Padding=&quot;5&quot; Text=&quot;{Binding Model.Age}&quot;&gt;&lt;/TextBox&gt;\n      &lt;TextBlock FontSize=&quot;20&quot; Margin=&quot;10&quot;  Padding=&quot;5&quot;&gt;班级&lt;/TextBlock&gt;\n      &lt;TextBox x:Name=&quot;txtClasses&quot; FontSize=&quot;20&quot;  Padding=&quot;5&quot; Text=&quot;{Binding Model.Classes}&quot;&gt;&lt;/TextBox&gt;\n    &lt;/StackPanel&gt;\n    &lt;StackPanel Grid.Row=&quot;2&quot; Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Right&quot;&gt;\n      &lt;Button x:Name=&quot;btnSave&quot; Content=&quot;保存&quot; Margin=&quot;10&quot; FontSize=&quot;20&quot; Width=&quot;100&quot; Click=&quot;btnSave_Click&quot; &gt;&lt;/Button&gt;\n      &lt;Button x:Name=&quot;btnCancel&quot; Content=&quot;取消&quot; Margin=&quot;10&quot; FontSize=&quot;20&quot; Width=&quot;100&quot; Click=&quot;btnCancel_Click&quot; &gt;&lt;/Button&gt;\n    &lt;/StackPanel&gt;\n  &lt;/Grid&gt;\n&lt;/Window&gt;</code></pre><ol start=\"4\" class=\"ne-ol\"><li id=\"u37234057\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(128, 0, 128)\">创建ViewModel层</span></li></ol><p id=\"uff9d9c2e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">ViewModel层是MVVM的核心所在，起到承上启下的作用。ViewModel需要继承GalaSoft.MvvmLight.ViewModelBase基类。</span></p><p id=\"u57c81a67\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">ViewModel中属性实现数据的绑定，命令实现用户交互的响应。如下所示：</span></p><pre data-language=\"csharp\" id=\"iGyYR\" class=\"ne-codeblock language-csharp\"><code>using GalaSoft.MvvmLight;\nusing GalaSoft.MvvmLight.Command;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Windows;\nusing WpfMVVM.DAL;\nusing WpfMVVM.Models;\nusing WpfMVVM.Views;\n\nnamespace WpfMVVM.ViewModel\n{\n    public class MainViewModel : ViewModelBase\n    {\n        #region 属性及构造函数\n\n        private LocalDb localDb;\n\n        private ObservableCollection&lt;Student&gt; gridModelList;\n\n        public ObservableCollection&lt;Student&gt; GridModelList\n        {\n            get { return gridModelList; }\n            set\n            {\n                gridModelList = value;\n                RaisePropertyChanged();\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 查询条件\n        /// &lt;/summary&gt;\n        private string search;\n\n        public string Search\n        {\n            get { return search; }\n            set\n            {\n                search = value;\n                RaisePropertyChanged();\n            }\n        }\n\n\n        /// &lt;summary&gt;\n        ///\n        /// &lt;/summary&gt;\n        public MainViewModel()\n        {\n            localDb = new LocalDb();\n            QueryCommand = new RelayCommand(this.Query);\n            ResetCommand = new RelayCommand(this.Reset);\n            EditCommand = new RelayCommand&lt;int&gt;(this.Edit);\n            DeleteCommand = new RelayCommand&lt;int&gt;(this.Delete);\n            AddCommand = new RelayCommand(this.Add);\n        }\n\n        #endregion\n\n        #region command\n\n        /// &lt;summary&gt;\n        /// 查询命令\n        /// &lt;/summary&gt;\n        public RelayCommand QueryCommand { get; set; }\n\n        /// &lt;summary&gt;\n        /// 重置命令\n        /// &lt;/summary&gt;\n        public RelayCommand ResetCommand { get; set; }\n\n        /// &lt;summary&gt;\n        /// 编辑\n        /// &lt;/summary&gt;\n        public RelayCommand&lt;int&gt; EditCommand { get; set; }\n\n        /// &lt;summary&gt;\n        /// 删除\n        /// &lt;/summary&gt;\n        public RelayCommand&lt;int&gt; DeleteCommand { get; set; }\n\n        /// &lt;summary&gt;\n        /// 新增\n        /// &lt;/summary&gt;\n        public RelayCommand AddCommand { get; set; }\n\n        #endregion\n\n        public void Query()\n        {\n            List&lt;Student&gt; students;\n            if (string.IsNullOrEmpty(search))\n            {\n                students = localDb.Query();\n            }\n            else\n            {\n                students = localDb.QueryByName(search);\n            }\n\n            GridModelList = new ObservableCollection&lt;Student&gt;();\n            if (students != null)\n            {\n                students.ForEach((t) =&gt;\n                {\n                    GridModelList.Add(t);\n                });\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 重置\n        /// &lt;/summary&gt;\n        public void Reset()\n        {\n            this.Search = string.Empty;\n            this.Query();\n        }\n\n        /// &lt;summary&gt;\n        /// 编辑\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;Id&quot;&gt;&lt;/param&gt;\n        public void Edit(int Id)\n        {\n            var model = localDb.QueryById(Id);\n            if (model != null)\n            {\n                StudentWindow view = new StudentWindow(model);\n                var r = view.ShowDialog();\n                if (r.Value)\n                {\n                    var newModel = GridModelList.FirstOrDefault(t =&gt; t.Id == model.Id);\n                    if (newModel != null)\n                    {\n                        newModel.Name = model.Name;\n                        newModel.Age = model.Age;\n                        newModel.Classes = model.Classes;\n                    }\n                    this.Query();\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 删除\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;Id&quot;&gt;&lt;/param&gt;\n        public void Delete(int Id)\n        {\n            var model = localDb.QueryById(Id);\n            if (model != null)\n            {\n                var r = MessageBox.Show($&quot;确定要删除吗【{model.Name}】？&quot;, &quot;提示&quot;, MessageBoxButton.YesNo);\n                if (r == MessageBoxResult.Yes)\n                {\n                    localDb.DelStudent(Id);\n                    this.Query();\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 新增\n        /// &lt;/summary&gt;\n        public void Add()\n        {\n            Student model = new Student();\n            StudentWindow view = new StudentWindow(model);\n            var r = view.ShowDialog();\n            if (r.Value)\n            {\n                model.Id = GridModelList.Max(t =&gt; t.Id) + 1;\n                localDb.AddStudent(model);\n                this.Query();\n            }\n        }\n    }\n}</code></pre><ol start=\"5\" class=\"ne-ol\"><li id=\"uc84d591e\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(128, 0, 128)\">数据上下文</span></li></ol><p id=\"u77a6e992\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">当各个层分别创建好后，那如何关联起来呢？答案就是</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px; background-color: #74B602\">DataContext</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">【数据上下文】。</span></p><p id=\"u21a23ae2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">查询页面上下文，如下所示：</span></p><pre data-language=\"csharp\" id=\"ZKC1c\" class=\"ne-codeblock language-csharp\"><code>using System.Windows;\nusing WpfMVVM.ViewModel;\n\nnamespace WpfMVVM\n{\n    /// &lt;summary&gt;\n    /// MainWindow.xaml 的交互逻辑\n    /// &lt;/summary&gt;\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n            MainViewModel viewModel = new MainViewModel();\n            viewModel.Query();\n            this.DataContext = viewModel;\n        }\n    }\n}</code></pre><p id=\"u7d55551e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">新增页面上下文，如下所示：</span></p><pre data-language=\"csharp\" id=\"xGY5L\" class=\"ne-codeblock language-csharp\"><code>using System.Windows;\nusing WpfMVVM.Models;\n\nnamespace WpfMVVM.Views\n{\n    /// &lt;summary&gt;\n    /// StudentWindow.xaml 的交互逻辑\n    /// &lt;/summary&gt;\n    public partial class StudentWindow : Window\n    {\n        public StudentWindow(Student student)\n        {\n            InitializeComponent();\n            this.DataContext = new\n            {\n                Model = student\n            };\n        }\n\n        private void btnSave_Click(object sender, RoutedEventArgs e)\n        {\n            this.DialogResult = true;\n        }\n\n        private void btnCancel_Click(object sender, RoutedEventArgs e)\n        {\n            this.DialogResult = false;\n        }\n    }\n}</code></pre><h1 id=\"RNSBL\"><span class=\"ne-text\">示例截图</span></h1><p id=\"u76b08740\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119594211/image/4.png\" width=\"829\" id=\"uc523f4b7\" class=\"ne-image\"></p><p id=\"u4d507497\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119594211/image/5.png\" width=\"829\" id=\"u55091b00\" class=\"ne-image\"></p><h1 id=\"Q9Buj\"><span class=\"ne-text\">源码</span></h1><div id=\"nxolX\" class=\"ne-bookmark\"><a href=\"https://svn.coding.net/cadengao/dev/demo/WpfMVVM\" target=\"_blank\">https://svn.coding.net/cadengao/dev/demo/WpfMVVM</a></div></div>",
  "body": null,
  "CosUpdatedAt": "0001-01-01T00:00:00",
  "BodyHtmlCosUrl": null
}