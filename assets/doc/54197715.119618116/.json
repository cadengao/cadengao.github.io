{
  "UUID": "54197715.119618116",
  "id": 0,
  "type": null,
  "format": null,
  "title": "WPF-通知更改INotifyPropertyChanged【Area】",
  "tags": null,
  "slug": null,
  "Tags": null,
  "description": null,
  "cover": null,
  "book_id": 0,
  "BookName": null,
  "public": 0,
  "word_count": 0,
  "created_at": "0001-01-01T00:00:00",
  "updated_at": "0001-01-01T00:00:00",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u529d98cb\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 44, 44); background-color: rgb(250, 250, 250); font-size: 16px\">有两种方式</span></p><ol class=\"ne-ol\"><li id=\"u6b1091e7\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 44, 44); background-color: rgb(250, 250, 250)\">简单方式-</span></strong><strong><span class=\"ne-text\" style=\"color: #DF2A3F; background-color: rgb(250, 250, 250)\">在赋值的时候调用PropertyChanged</span></strong></li></ol><pre data-language=\"csharp\" id=\"u8XD7\" class=\"ne-codeblock language-csharp\"><code>namespace WpfApp1\n{\n    public class MainViewModel:INotifyPropertyChanged\n    {\n        public MyCommand ShowCommand { get; set; }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public string Name\n        {\n            get { return name; }\n            set { \n\t\t\t\t\tname = value;\n                \t//通知客户端内容更改的方式一种\n                \tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(&quot;Name&quot;)); \n                }\n        }\n\n        public string name;\n\n        public MainViewModel()\n        {\n            Name = &quot;Hello World&quot;;\n            ShowCommand = new MyCommand(Show);\n        }\n\n\n        public void Show()\n        {\n            Name = &quot;点击了Button&quot;;\n            MessageBox.Show(Name);\n\n        }\n    }\n}</code></pre><ol start=\"2\" class=\"ne-ol\"><li id=\"ue30dde24\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 44, 44)\">自动绑定-</span></strong><strong><span class=\"ne-text\" style=\"color: #DF2A3F; background-color: rgb(250, 250, 250)\">封装一个事件调用OnPropertyChanged</span></strong></li></ol><pre data-language=\"csharp\" id=\"KhCml\" class=\"ne-codeblock language-csharp\"><code>namespace WpfApp1\n{\n    public class MainViewModel:INotifyPropertyChanged\n    {\n        public MyCommand ShowCommand { get; set; }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public void OnPropertyChanged([CallerMemberName]string propertyName=&quot;&quot;)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        public string Name\n        {\n            get { return name; }\n            set { \n\t\t\t\t\tname = value;\n                \t//通知客户端内容更改的方式一种\n                \tOnPropertyChanged();\n                }\n        }\n\n        public string name;\n          \n        public MainViewModel()\n        {\n            Name = &quot;Hello World&quot;;\n            ShowCommand = new MyCommand(Show);\n        }\n\n\n        public void Show()\n        {\n            Name = &quot;点击了Button&quot;;\n            MessageBox.Show(Name);\n\n        }\n    }\n}</code></pre></div>",
  "body": null,
  "CosUpdatedAt": "0001-01-01T00:00:00",
  "BodyHtmlCosUrl": null
}