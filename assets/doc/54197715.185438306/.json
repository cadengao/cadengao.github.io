{
  "UUID": "54197715.185438306",
  "id": 0,
  "type": null,
  "format": null,
  "title": "WPF-Prism【Area】",
  "tags": null,
  "slug": null,
  "Tags": null,
  "description": null,
  "cover": null,
  "book_id": 0,
  "BookName": null,
  "public": 0,
  "word_count": 0,
  "created_at": "0001-01-01T00:00:00",
  "updated_at": "0001-01-01T00:00:00",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"YTlE3\"><span class=\"ne-text\">安装Prism.DryIoc包</span></h1><p id=\"uf79fef12\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2024/png/123299/1725591106886-f8a2ca4a-8cc9-4d79-80b5-c41f7d928ca8.png\" width=\"2059\" id=\"u679ea78c\" class=\"ne-image\"></p><h1 id=\"WPkam\"><span class=\"ne-text\">Prism的初始化过程</span></h1><h1 id=\"Pltrf\"><img src=\"https://cdn.nlark.com/yuque/0/2024/webp/123299/1725602089749-df952467-97cb-404e-82e0-d6dcbfd3f285.webp\" width=\"693\" id=\"u05b0f025\" class=\"ne-image\"></h1><h1 id=\"DZ96w\"><span class=\"ne-text\">Prism Region</span></h1><p id=\"uf4dd5c3b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(35, 38, 59); font-size: 16px\">Region是Prism当中模块化的核心功能。Region可以理解为View的动态占位符，在View上进行视图占位，其主要目的是弱化模块与模块之间的耦合关系。</span></p><p id=\"ub184738c\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.185438306/image/0.png\" width=\"1211\" id=\"u82f9d427\" class=\"ne-image\"></p><p id=\"ub2a7ea90\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(35, 38, 59); font-size: 16px\">在一般的界面设计中,界面上的元素及内容往往是被固定，如上图。</span></p><ul class=\"ne-ul\"><li id=\"u95454f23\" data-lake-index-type=\"0\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(35, 38, 59)\">Header区域放置ToolBar</span></li><li id=\"u048d27e1\" data-lake-index-type=\"0\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(35, 38, 59)\">Menu 区域放置ListBox</span></li><li id=\"u247cd40d\" data-lake-index-type=\"0\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(35, 38, 59)\">Content 区域放置ContentControl</span></li></ul><p id=\"u6fe08948\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(35, 38, 59); font-size: 16px\">这使得各个区域的内容被固定下来，不能直接对该区域的元素或内容进行替换。在Prism当中，可以将页面区域定义为Region，此时可以通过修改Region设置，使得页面区域展示的内容不再固定，可以动态分配区域所展示的内容。</span></p><p id=\"ube46bc13\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\" style=\"color: rgb(35, 38, 59); font-size: 16px\">此时Region的功能类似于一个视图容器，可以通过设置将视图界面放到Region中，实现视图的管理</span></em></strong></p><p id=\"u17fb1ae8\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://file.cadengao.com/assets/doc/54197715.185438306/image/2.png\" width=\"530\" id=\"uefaaeb69\" class=\"ne-image\"></p><h2 id=\"f8yfz\"><span class=\"ne-text\">使用Prism Region进行自动区域切换</span></h2><p id=\"ue37578d6\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">创建Views、ViewModels两个目录，名称不要错</span></p><p id=\"u8f8381fe\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">注意：MainWindow的命名空间必须加上</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"font-size: 14px\">.Views</span></code></p><p id=\"u538e8dc2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">新建三个用户控件，并在App注入服务。</span></p><p id=\"uc51f073f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #a9b7c6; background-color: #2b2b2b; font-size: 16px\"></span><img src=\"https://file.cadengao.com/assets/doc/54197715.185438306/image/1.png\" width=\"2162\" id=\"u4f52aad5\" class=\"ne-image\"></p><h3 id=\"c8783b55\"><span class=\"ne-text\" style=\"color: rgb(79, 79, 79)\">数据缓存设置</span></h3><p id=\"u796c2f03\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">在</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); font-size: 14px\">Region</span></code><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">切换</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); font-size: 14px\">View</span></code><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">时，Prism框架默认会将原来的</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); font-size: 14px\">View</span></code><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">对象数据进行缓存，等下次切换回来时，数据原样展示。但在实际开发过程中，有时候需要在切换</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); font-size: 14px\">View</span></code><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">时，清除原来的</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); font-size: 14px\">View</span></code><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">数据，这个时候有两种设置方式。</span></p><pre data-language=\"csharp\" id=\"gZ0Ma\" class=\"ne-codeblock language-csharp\"><code>//方法1：\n[RegionMemberLifetime(KeepAlive = false)]\npublic class MainWindowViewModel : BindableBase\n{\n    ...\n}\n\n//方法2：\npublic class MainWindowViewModel : BindableBase, IRegionMemberLifetime\n{\n    public bool KeepAlive =&gt; false;\n    ...\n}\n</code></pre></div>",
  "body": null,
  "CosUpdatedAt": "0001-01-01T00:00:00",
  "BodyHtmlCosUrl": null
}