{
  "UUID": "54197715.182325971",
  "id": 0,
  "type": null,
  "format": null,
  "title": "QT-信号槽机制【Area】",
  "tags": null,
  "slug": null,
  "Tags": null,
  "description": null,
  "cover": null,
  "book_id": 0,
  "BookName": null,
  "public": 0,
  "word_count": 0,
  "created_at": "0001-01-01T00:00:00",
  "updated_at": "0001-01-01T00:00:00",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"hlJjw\"><span class=\"ne-text\">QT-信号槽机制</span></h1><p id=\"u39072306\" class=\"ne-p\"><span class=\"ne-text\">QT 中的信号和槽机制是一种</span><span class=\"ne-text\" style=\"color: #DF2A3F\">事件驱动</span><span class=\"ne-text\">的编程模型，用于在对象之间进行通信。信号是一种特殊的函数，当某个事件发生时会被发射出去，槽是一种函数，用于接收信号并执行相应的操作。</span></p><p id=\"ud01fb8c7\" class=\"ne-p\"><span class=\"ne-text\">使用信号和槽机制需要以下步骤：</span></p><ol class=\"ne-ol\"><li id=\"u4ab66848\" data-lake-index-type=\"0\"><span class=\"ne-text\">定义信号：在类中声明一个信号，例如：</span></li></ol><pre data-language=\"cpp\" id=\"DygPc\" class=\"ne-codeblock language-cpp\"><code>signals:\n    void buttonClicked();</code></pre><ol start=\"2\" class=\"ne-ol\"><li id=\"u85ab1e8d\" data-lake-index-type=\"0\"><span class=\"ne-text\">发射信号：在某个事件发生时，调用 </span><code class=\"ne-code\"><span class=\"ne-text\">emit</span></code><span class=\"ne-text\"> 函数发射信号，例如：</span></li></ol><pre data-language=\"cpp\" id=\"PQiG9\" class=\"ne-codeblock language-cpp\"><code>emit buttonClicked();</code></pre><ol start=\"3\" class=\"ne-ol\"><li id=\"u7632f483\" data-lake-index-type=\"0\"><span class=\"ne-text\">定义槽：在类中定义一个槽，该槽会在接收到信号时执行相应的操作，例如：</span></li></ol><pre data-language=\"cpp\" id=\"VBrdk\" class=\"ne-codeblock language-cpp\"><code>public slots:\n    void doSomething();</code></pre><ol start=\"4\" class=\"ne-ol\"><li id=\"u78f2c439\" data-lake-index-type=\"0\"><span class=\"ne-text\">连接信号和槽：使用 </span><code class=\"ne-code\"><span class=\"ne-text\">connect</span></code><span class=\"ne-text\"> 函数将信号和槽连接起来，例如：</span></li></ol><pre data-language=\"cpp\" id=\"nUBDh\" class=\"ne-codeblock language-cpp\"><code>connect(button, SIGNAL(clicked()), this, SLOT(doSomething()));</code></pre><p id=\"u9a5ed7a6\" class=\"ne-p\"><span class=\"ne-text\">这个例子中，当按钮被点击时，会发射 </span><code class=\"ne-code\"><span class=\"ne-text\">clicked</span></code><span class=\"ne-text\"> 信号，该信号会被连接到槽函数 </span><code class=\"ne-code\"><span class=\"ne-text\">doSomething</span></code><span class=\"ne-text\">，在执行 </span><code class=\"ne-code\"><span class=\"ne-text\">doSomething</span></code><span class=\"ne-text\">函数时，按钮被点击的事件就被处理了。</span></p><p id=\"u82ff3982\" class=\"ne-p\"><span class=\"ne-text\">注意事项：</span></p><div class=\"ne-quote\"><p id=\"ufb598fe7\" class=\"ne-p\"><span class=\"ne-text\">信号和槽的参数类型和数量必须匹配，否则连接失败。</span></p></div><div class=\"ne-quote\"><p id=\"u889d1998\" class=\"ne-p\"><span class=\"ne-text\">信号和槽都可以是类的成员函数，但必须在 </span><code class=\"ne-code\"><span class=\"ne-text\">signals</span></code><span class=\"ne-text\">和 </span><code class=\"ne-code\"><span class=\"ne-text\">slots</span></code><span class=\"ne-text\">关键字的作用域内声明。</span></p></div><div class=\"ne-quote\"><p id=\"u1006b8e3\" class=\"ne-p\"><span class=\"ne-text\">信号和槽可以连接到多个对象上，也可以连接到同一个对象的不同槽函数上。</span></p></div><div class=\"ne-quote\"><p id=\"uea41c987\" class=\"ne-p\"><span class=\"ne-text\">信号和槽可以断开连接，使用 </span><code class=\"ne-code\"><span class=\"ne-text\">disconnect</span></code><span class=\"ne-text\">函数即可。</span></p></div><div class=\"ne-quote\"><p id=\"u1e82f31a\" class=\"ne-p\"><span class=\"ne-text\">QT 中内置了很多常用的信号和槽，例如 </span><code class=\"ne-code\"><span class=\"ne-text\">clicked()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">valueChanged()</span></code><span class=\"ne-text\">等，可以直接使用。</span></p></div><h1 id=\"eRzUA\"><span class=\"ne-text\">信号槽机制的优缺点</span></h1><div data-type=\"color2\" class=\"ne-alert\"><p id=\"u18cfb2e3\" class=\"ne-p\"><strong><span class=\"ne-text\">优点</span></strong></p><ol class=\"ne-ol\"><li id=\"ucfbcb54e\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: #74B602\">模块之间的解耦：信号槽机制可以实现模块之间的松耦合，一个模块只需要知道信号的存在，而不需要知道具体的槽的实现，这样可以让模块之间的耦合度更低，降低模块之间的依赖关系。</span></li><li id=\"u1a20cfa0\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: #74B602\">灵活性：使用信号槽机制可以对代码进行灵活的设计和重构，当需要修改或者扩展代码时，只需要修改或添加与之对应的信号和槽即可，不会对其他的代码产生影响。</span></li><li id=\"ueaa565ed\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: #74B602\">可维护性：信号槽机制能够使代码更加易读、易懂、易维护，对于一些比较复杂的事件处理，使用信号槽机制可以使代码的结构更加清晰。</span></li></ol></div><div data-type=\"danger\" class=\"ne-alert\"><p id=\"ue12a23ab\" class=\"ne-p\"><strong><span class=\"ne-text\">缺点：</span></strong></p><ol class=\"ne-ol\"><li id=\"u206eed4f\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: #DF2A3F\">不支持属性和方法：信号槽机制只能传递信号，而不能传递属性和方法，如果需要传递属性和方法，需要额外地进行处理。</span></li><li id=\"u73a42c45\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: #DF2A3F\">调试麻烦：由于信号槽机制的特殊性，当存在信号槽连接出现问题时，调试可能会相对麻烦。</span></li><li id=\"u2ffee865\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: #DF2A3F\">运行效率问题：由于信号槽机制本质上是一种事件处理机制，而事件的发生和处理需要一些时间，所以使用信号槽机制可能会影响程序的运行效率。</span></li></ol></div><h1 id=\"KtZrO\"><span class=\"ne-text\">connect使用方法</span></h1><pre data-language=\"cpp\" id=\"plz83\" class=\"ne-codeblock language-cpp\"><code>//1.使用函数指针(qt推荐)\nconnect(ui-&gt;btnStart,&amp;QPushButton::clicked,this,&amp;MainWindow::Start);\n//2.使用宏(较为常见)\nconnect(ui-&gt;btnStart,SIGNAL(clicked()),this,SLOT(Start()));\n//3.使用Lambda\nconnect(ui-&gt;btnStart,&amp;QPushButton::clicked,[=](){/* todo*/});</code></pre><h1 id=\"nFzEQ\"><span class=\"ne-text\">connect连接方式</span></h1><div class=\"ne-quote\"><p id=\"ue29bdf01\" class=\"ne-p\"><span class=\"ne-text\">通过connect(....)第5个参数控制信号槽执行所在线程，如下：</span></p></div><div class=\"ne-quote\"><p id=\"u0fabc579\" class=\"ne-p\"><span class=\"ne-text\">队列连接 </span><code class=\"ne-code\"><span class=\"ne-text\">Qt::QueuedConnection</span></code><span class=\"ne-text\">;</span></p></div><div class=\"ne-quote\"><p id=\"ua48b8dfd\" class=\"ne-p\"><span class=\"ne-text\">自动连接 </span><code class=\"ne-code\"><span class=\"ne-text\">Qt::AutoConnection</span></code><span class=\"ne-text\">;</span></p></div><div class=\"ne-quote\"><p id=\"ua6e0d654\" class=\"ne-p\"><span class=\"ne-text\">直接连接 </span><code class=\"ne-code\"><span class=\"ne-text\">Qt::DirectConnection</span></code></p></div></div>",
  "body": null,
  "CosUpdatedAt": "0001-01-01T00:00:00",
  "BodyHtmlCosUrl": null
}