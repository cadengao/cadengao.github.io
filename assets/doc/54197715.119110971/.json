{
  "UUID": "54197715.119110971",
  "id": 0,
  "type": null,
  "format": null,
  "title": "C#-资源类型(托管资源和非托管资源)【Area】",
  "tags": null,
  "slug": null,
  "Tags": null,
  "description": null,
  "cover": null,
  "book_id": 0,
  "BookName": null,
  "public": 0,
  "word_count": 0,
  "created_at": "0001-01-01T00:00:00",
  "updated_at": "0001-01-01T00:00:00",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u9bfed4fb\" class=\"ne-p\"><strong><span class=\"ne-text\">分为托管资源和非托管资源：</span></strong></p><ul class=\"ne-ul\"><li id=\"ucecff33c\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\">托管资源</span></strong><span class=\"ne-text\">指的是.NET可以</span><strong><span class=\"ne-text\">自动进行回收</span></strong><span class=\"ne-text\">的资源，主要是指</span><strong><span class=\"ne-text\">托管堆</span></strong><span class=\"ne-text\">上分配的内存资源。托管资源的回收工作是不需要人工干预的，由.NET运行库在合适时机</span><strong><span class=\"ne-text\">调用垃圾回收器</span></strong><span class=\"ne-text\">进行回收。</span></li><li id=\"u1afb8757\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\">非托管资源</span></strong><span class=\"ne-text\">指的是.NET</span><strong><span class=\"ne-text\">不知道如何回收</span></strong><span class=\"ne-text\">的资源，最常见的一类非托管资源是包装操作系统资源的对象，例如：文件、窗口、网络连接、数据库连接、画刷、图标等。这类资源需要手动实现Finalize()或Dispose()方法释放资源。</span></li></ul><h1 id=\"qORm4\"><span class=\"ne-text\" style=\"color: rgb(79, 79, 79)\">托管资源</span></h1><p id=\"ufaef4d49\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">.NET中的所有类型都是（直接或间接）从System.Object类型派生的。</span><span class=\"ne-text\"><br /></span><strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">通用类型系统（CTS）区分两种基本类型：值类型和引用类型</span></strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">。它们之间的根本区别在于它们在内存中的存储方式。.NET使用两种不同的物理内存快来存储数据------</span><strong><span class=\"ne-text\" style=\"color: #DF2A3F; font-size: 16px\">栈和托管堆</span></strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">：</span></p><p id=\"u9c9bc215\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119110971/image/1.png\" width=\"464\" id=\"u3536a082\" class=\"ne-image\"></p><p id=\"u496f487f\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119110971/image/3.png\" width=\"500\" id=\"u4c09561a\" class=\"ne-image\"></p><p id=\"u15768528\" class=\"ne-p\"><strong><span class=\"ne-text\">值类型在栈里，先进后出</span></strong><span class=\"ne-text\">，值类型变量的生命有先后顺序，这个确保了值类型变量在退出作用域以前会释放资源。比引用类型更简单和高效。</span><strong><span class=\"ne-text\">栈是从高地址往低地址分配内存。</span></strong></p><p id=\"ue4e0e974\" class=\"ne-p\"><strong><span class=\"ne-text\">引用类型分配在托管堆(Managed Heap)上</span></strong><span class=\"ne-text\">，声明一个变量在栈上保存，当使用new创建对象时，会把</span><strong><span class=\"ne-text\">对象的地址存储在这个变量里</span></strong><span class=\"ne-text\">。</span><strong><span class=\"ne-text\">托管堆相反，从低地址往高地址分配内存</span></strong><span class=\"ne-text\">，如图：</span></p><p id=\"u08467987\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119110971/image/2.png\" width=\"413\" id=\"u783747aa\" class=\"ne-image\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119110971/image/4.png\" width=\"669\" id=\"u8a28e1a8\" class=\"ne-image\"></p><h1 id=\"F19yc\"><span class=\"ne-text\">非托管资源</span></h1><p id=\"u67981141\" class=\"ne-p\"><span class=\"ne-text\">ApplicationContext, Brush, Component, ComponentDesigner, Container, Context, Cursor, FileStream, Font, Icon, Image, Matrix, Object, OdbcDataReader, OleDBDataReader, Pen, Regex, Socket, StreamWriter, Timer, Tooltip, 文件句柄, GDI资源, 数据库连接等等资源。</span></p><h1 id=\"xI3we\"></h1></div>",
  "body": null,
  "CosUpdatedAt": "0001-01-01T00:00:00",
  "BodyHtmlCosUrl": null
}