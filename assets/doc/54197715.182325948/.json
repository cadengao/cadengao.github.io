{
  "UUID": "54197715.182325948",
  "id": 0,
  "type": null,
  "format": null,
  "title": "QT-MVC模式【Area】",
  "tags": null,
  "slug": null,
  "Tags": null,
  "description": null,
  "cover": null,
  "book_id": 0,
  "BookName": null,
  "public": 0,
  "word_count": 0,
  "created_at": "0001-01-01T00:00:00",
  "updated_at": "0001-01-01T00:00:00",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"iiYGa\"><span class=\"ne-text\">什么是MVC模式？</span></h1><p id=\"u1145b9a0\" class=\"ne-p\"><span class=\"ne-text\">Qt中的</span><span class=\"ne-text\" style=\"background-color: #8CCF17\">MVC（Model-View-Controller）模式是一种设计模式</span><span class=\"ne-text\">，用于实现 GUI 应用程序的分层和模块化开发。MVC 分为三个组件：</span><strong><span class=\"ne-text\">模型（Model）</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">视图（View）和控制器（Controller）</span></strong><span class=\"ne-text\">。</span></p><div class=\"ne-quote\"><p id=\"u4db6d7f4\" class=\"ne-p\"><span class=\"ne-text\">模型（Model）：模型是应用程序中数据的表示，用于管理数据的读取、存储和更新。模型可以是简单的数据结构，如变量或结构体，也可以是复杂的业务对象。模型提供了访问数据的接口，通常会实现一个或多个接口类，用来管理数据的读取和更新。</span></p></div><div class=\"ne-quote\"><p id=\"u59fb900f\" class=\"ne-p\"><span class=\"ne-text\">视图（View）：视图是应用程序中用户界面的显示和呈现部分。视图负责将模型数据呈现给用户，以及响应用户的操作。视图通常是由多个控件构成，如按钮、文本框等。</span></p></div><div class=\"ne-quote\"><p id=\"uf36ede62\" class=\"ne-p\"><span class=\"ne-text\">控制器（Controller）：控制器是应用程序中的业务逻辑处理部分，控制器响应用户的操作，并更新模型和视图。控制器通常是由事件处理程序和信号槽机制实现的。</span></p></div><h1 id=\"JUU3u\"><span class=\"ne-text\">Model/View编程的优点如下：</span></h1><div data-type=\"color2\" class=\"ne-alert\"><p id=\"u3417823c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #74B602\">在处理圈套的数据集时每个组件各司其职，不至于降低性能。</span></p><p id=\"uce961c49\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #74B602\">一个Model可以映射到多个View，这样可以以不同的方式查看同一份数据。</span></p><p id=\"u9b136a1e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #74B602\">如果底层数据源的存储改变了，我们只需要处理Model就可以了。</span></p></div><h1 id=\"UT4YF\"><span class=\"ne-text\">代码示例：</span></h1><ol class=\"ne-ol\"><li id=\"ueef664d7\" data-lake-index-type=\"0\"><span class=\"ne-text\">在ui中添加TabelView</span></li></ol><p id=\"u6d82ae46\" class=\"ne-p\"><img src=\"QT-MVC%E6%A8%A1%E5%BC%8F.assets/Image%20(2).png\" id=\"eWEVg\" class=\"ne-image\"><img src=\"https://file.cadengao.com/assets/doc/54197715.182325948/image/0.png\" width=\"1274.6666666666667\" id=\"ua6228574\" class=\"ne-image\"></p><ol start=\"2\" class=\"ne-ol\"><li id=\"uaf3aa2b9\" data-lake-index-type=\"0\"><span class=\"ne-text\">在</span><code class=\"ne-code\"><span class=\"ne-text\">ModelView.h</span></code><span class=\"ne-text\">文件中创建模型对象</span></li></ol><pre data-language=\"cpp\" id=\"AxnhR\" class=\"ne-codeblock language-cpp\"><code>#ifndef MODELVIEW_H\n#define MODELVIEW_H\n\n#include &lt;QWidget&gt;\n\n#include&lt;QStandardItemModel&gt;//需要引入头文件\n\nQT_BEGIN_NAMESPACE\nnamespace Ui { class ModelView; }\nQT_END_NAMESPACE\n\nclass ModelView : public QWidget\n{\n    Q_OBJECT\n\npublic:\n    ModelView(QWidget *parent = nullptr);\n    ~ModelView();\n\nprivate:\n    Ui::ModelView *ui;\n    \n    QStandardItemModel* m_pModel;//创建对象\n};\n#endif // MODELVIEW_H</code></pre><ol start=\"3\" class=\"ne-ol\"><li id=\"u39e49355\" data-lake-index-type=\"0\"><span class=\"ne-text\">在</span><code class=\"ne-code\"><span class=\"ne-text\">ModelView.cpp</span></code><span class=\"ne-text\">文件中对模型对象进行实例化</span></li></ol><pre data-language=\"cpp\" id=\"EQiQS\" class=\"ne-codeblock language-cpp\"><code>#include &quot;modelview.h&quot;\n#include &quot;./ui_modelview.h&quot;\n\nModelView::ModelView(QWidget *parent)\n    : QWidget(parent)\n    , ui(new Ui::ModelView)\n{\n    ui-&gt;setupUi(this);\n    \n    //设成20行5列\n    m_pModel=new QStandardItemModel(20,5);\n    //设置5行列名\n    m_pModel-&gt;setHorizontalHeaderLabels(QStringList&lt;&lt;&quot;Name&quot;&lt;&lt;&quot;Class&quot;&lt;&lt;&quot;Age&quot;&lt;&lt;&quot;Sex&quot;&lt;&lt;&quot;Grade&quot;);\n    //tableView1、TableView2同时绑定到m_pModel上  \n    ui-&gt;tableView1-&gt;setModel(m_pModel);\n    ui-&gt;tableView2-&gt;setModel(m_pModel);\n}\n\nModelView::~ModelView()\n{\n    delete ui;\n}</code></pre><ol start=\"4\" class=\"ne-ol\"><li id=\"u3a848cc2\" data-lake-index-type=\"0\"><span class=\"ne-text\">运行结果，左右两个表的数据会保持一致</span></li></ol><p id=\"u43f03faf\" class=\"ne-p\"><img src=\"QT-MVC%E6%A8%A1%E5%BC%8F.assets/Image.png\" id=\"eHZ67\" class=\"ne-image\"><img src=\"https://file.cadengao.com/assets/doc/54197715.182325948/image/2.png\" width=\"1682.6666666666667\" id=\"ub4bba281\" class=\"ne-image\"></p><ol start=\"5\" class=\"ne-ol\"><li id=\"u6b35c82c\" data-lake-index-type=\"0\"><span class=\"ne-text\">示例结构图</span></li></ol><p id=\"u31698da2\" class=\"ne-p\"><img src=\"QT-MVC%E6%A8%A1%E5%BC%8F.assets/Image%20(3).png\" id=\"jyIjZ\" class=\"ne-image\"><img src=\"https://file.cadengao.com/assets/doc/54197715.182325948/image/1.png\" width=\"598.6666666666666\" id=\"uf3ed7998\" class=\"ne-image\"></p></div>",
  "body": null,
  "CosUpdatedAt": "0001-01-01T00:00:00",
  "BodyHtmlCosUrl": null
}