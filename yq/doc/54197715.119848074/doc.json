{
  "uuid": "54197715.119848074",
  "id": 119848074,
  "title": "WPF-路由事件【Area】",
  "cover": "https://cdn.nlark.com/yuque/0/2023/png/123299/1680073099641-0e1218c2-d6f6-4903-a3ab-b8fe0bf6ca89.png",
  "book_id": 54197715,
  "book_name": "Area",
  "public": 0,
  "word_count": 855,
  "created_at": "2023-03-29T06:56:48",
  "updated_at": "2024-08-17T03:31:21",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"iSxoG\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">什么是路由事件</span></h1><p id=\"uf5f69075\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">简单说，路由事件可以沿着视觉树VisualTree进行传递，在这视觉树中的所有对象都可以收到这个事件。前提是添加了检测。</span></p><h2 id=\"WxEXB\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">什么是逻辑树LogicalTree</span></h2><p id=\"ua34c4531\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">简单理解：逻辑树就是我们在xaml中写的布局逻辑</span></p><p id=\"ub37fa002\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">如xaml代码：</span></p><pre data-language=\"xml\" id=\"IhxYC\" class=\"ne-codeblock language-xml\">&lt;Grid&gt;\n   　　&lt;StackPanel Orientation=&quot;Vertical&quot;&gt;\n        　　&lt;DockPanel ButtonBase.Click=&quot;Button_Click&quot;&gt;\n                &lt;Button Click=&quot;Button_Click&quot; Content=&quot;right&quot; DockPanel.Dock=&quot;Right&quot;/&gt;\n                &lt;Button Content=&quot;left&quot; DockPanel.Dock=&quot;Left&quot;/&gt;\n                &lt;Button Content=&quot;top&quot; DockPanel.Dock=&quot;Top&quot;/&gt;\n                &lt;Button Content=&quot;bottom&quot; DockPanel.Dock=&quot;Bottom&quot;/&gt;\n            &lt;/DockPanel&gt;\n      &lt;/StackPanel&gt;\n&lt;/Grid&gt;</pre><p id=\"ue3fd70a8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">逻辑就是Grid--StackPanel--CockPanel--Button</span></p><p id=\"u2c83029f\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119848074/image/0.png\" width=\"416\" id=\"u944852d5\" class=\"ne-image\"></p><h2 id=\"ly3wy\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">什么是视觉树VisualTree</span></h2><p id=\"u233453c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">视觉树更复杂，在逻辑树上又添加了更详细的布局，包含看不见的对象，和控件模板内部的对象，如Button的控件模板内部有一个Border--ConentPresenter--TextBlock</span></p><p id=\"u31155d61\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119848074/image/1.png\" width=\"491\" id=\"uce0ef560\" class=\"ne-image\"></p><p id=\"ueff34426\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">在视觉树上，红色框是逻辑树上有的，蓝色框是button内部的控件</span></p><p id=\"u08f1af7e\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">在这个视觉树上，顶部元素是window（最外边），最内部是TextBlock，那就会有2个方向，从最外到最内，从最内到最外，</span></p><div data-type=\"color2\" class=\"ne-alert\"><p id=\"u873b95e2\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: #DF2A3F; font-size: 14px\">冒泡事件：从内到外叫  不带Preview</span></strong></p><p id=\"u740a05bc\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: #DF2A3F; font-size: 14px\">隧道事件：从外到内叫  以Preview开头</span></strong></p></div><p id=\"u1e79aae3\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: #DF2A3F; font-size: 14px\">一个完整的路由事件的执行顺序是先隧道从window传递到内部，再冒泡从最内传递到最外。</span></strong></p><p id=\"uc2031daf\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119848074/image/2.png\" width=\"518\" id=\"ubd6bb72c\" class=\"ne-image\"></p><p id=\"u0bd63628\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">比如Button的Click事件，是先由窗体接收到鼠标的点击操作，先隧道传到Button，在冒泡传回窗体，在这个过程中，视觉树VisualTree中的任何对象都可以接收到Button的Click事件，前提是已添加了接收的操作</span></p><p id=\"u287b90ef\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">简单来说，逻辑树是在xaml中我们布局时的逻辑，视觉树是在逻辑树的基础上还包含了看不见的对象和控件模板内的对象</span></p><p id=\"u1dd146fa\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">一个路由事件可以使用e.Handl=True，结束传递。</span></p><h1 id=\"EXDip\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">自定义路由事件</span></h1><p id=\"ucfa27559\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">假如右键3次单击的事件 名叫ThreeRightClick，那么ThreeRightClick和MouseLeftButtonDown、MouseRightButtonDown、Click等是一个级别的，也可以是冒泡的隧道的。在调用时的形式和他们没有区别</span></p><h2 id=\"OWTkE\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">如何自定义</span></h2><pre data-language=\"csharp\" id=\"s4uVR\" class=\"ne-codeblock language-csharp\">public class Mybutton:Button\n{\n    public Mybutton()\n    {\n        // 给Mybutton添加内置的MouseRightButtonDownEvent事件，用于触发自定义路由事件ThreeRightClick\n        this.AddHandler(Button.MouseRightButtonDownEvent, new RoutedEventHandler(OnRightClick));\n        // 给Mybutton添加内置的PreviewMouseRightButtonDownEvent事件，用于触发自定义路由事件PreviewThreeRightClick\n        this.AddHandler(Button.PreviewMouseRightButtonDownEvent, new RoutedEventHandler(OnPreviewRightClick));\n        // 给Mybutton添加自定义的ThreeRightClickEvent事件，\n        //this.AddHandler(Mybutton.ThreeRightClickEvent, new RoutedEventHandler(OnThreeRightClick));\n      \n    }\n    private int cnt1 = 0;\n    //PreviewMouseRightButtonDownEvent的回调函数，在里面去触发自定义路由事件PreviewThreeRightClick\n    private void OnPreviewRightClick(object sender, RoutedEventArgs e)\n    {\n        cnt1++;\n        if (cnt1 == 3)\n        {                                                                  //自定义路由事件PreviewThreeRightClick 隧道形式\n            RoutedEventArgs routedEventArgs = new RoutedEventArgs(Mybutton.PreviewThreeRightClickEvent);\n            this.RaiseEvent(routedEventArgs);\n            cnt1 = 0;\n        }\n    }\n  \n     private int cnt = 0;\n    //MouseRightButtonDownEvent的回调函数，在里面去触发自定义路由事件ThreeRightClick\n    private void OnRightClick(object sender, RoutedEventArgs e)\n    {\n        cnt++;\n        if(cnt==3)\n        {                                                                //自定义路由事件PreviewThreeRightClick 冒泡形式\n            RoutedEventArgs routedEventArgs = new RoutedEventArgs(Mybutton.ThreeRightClickEvent);\n            this.RaiseEvent(routedEventArgs);\n            cnt=0;\n        }\n    }\n    //此自定义路由事件是冒泡的\n    public static readonly RoutedEvent ThreeRightClickEvent = EventManager.RegisterRoutedEvent(&quot;ThreeRightClick&quot;, RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(Mybutton));\n    public event RoutedEventHandler ThreeRightClick\n    {\n        add { AddHandler(ThreeRightClickEvent, value); }\n        remove\n        {\n            RemoveHandler(ThreeRightClickEvent, value);\n        }\n    }\n    //此自定义路由事件是隧道的\n    public static readonly RoutedEvent PreviewThreeRightClickEvent = EventManager.RegisterRoutedEvent(&quot;PreviewThreeRightClick&quot;, RoutingStrategy.Tunnel, typeof(RoutedEventHandler), typeof(Mybutton));\n    public event RoutedEventHandler PreviewThreeRightClick\n    {\n        add { AddHandler(PreviewThreeRightClickEvent, value); }\n        remove\n        {\n            RemoveHandler(PreviewThreeRightClickEvent, value);\n        }\n    }\n}</pre><h2 id=\"cwKtg\"><span class=\"ne-text\">如何调用</span></h2><pre data-language=\"plain\" id=\"NG754\" class=\"ne-codeblock language-plain\">调用方式1\n&lt;local:Mybutton ThreeRightClick=&quot;OnThreeRightClick&quot; PreviewMouseLeftButtonDown=&quot;PreMouseLeftButtonDown&quot; Height=&quot;30&quot; Width=&quot;50&quot; Content=&quot;右键3击&quot; /&gt;\n调用方式2\nthis.AddHandler(Mybutton.ThreeRightClickEvent, new RoutedEventHandler(OnThreeRightClick));</pre><p id=\"u88ff3e6c\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.119848074/image/3.png\" width=\"1501\" id=\"u84cc5dd3\" class=\"ne-image\"></p></div>"
}