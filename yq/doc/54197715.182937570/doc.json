{
  "uuid": "54197715.182937570",
  "id": 182937570,
  "title": "WPF-MVVM(使用ReactiveUI、Prism)【Area】",
  "tag": "MVVM、ReactiveUI、wpf",
  "cover": "https://cdn.nlark.com/yuque/0/2024/png/123299/1724070877943-cbc9be0b-40ef-4a3e-b7e4-57d0765a4b18.png",
  "book_id": 54197715,
  "book_name": "Area",
  "public": 0,
  "word_count": 1128,
  "created_at": "2024-08-19T12:28:00",
  "updated_at": "2024-09-06T02:51:52",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"ITokl\"><span class=\"ne-text\">ReactiveUI</span><span class=\"ne-text\" style=\"color: rgb(51, 51, 51)\">框架的特点：</span></h1><h4 id=\"552f15af\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51) !important\">响应式编程</span></h4><p id=\"u8da155e4\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">ReactiveUI框架使用Rx.NET库，提供了一种基于事件流和数据流的响应式编程模型。开发人员可以使用LINQ查询语法和链式调用来处理事件和数据流，从而实现应用程序的响应式行为。</span></p><h4 id=\"c3b274f3\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51) !important\">支持多平台</span></h4><p id=\"ufd4b014e\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">ReactiveUI框架支持多种平台，包括WPF、UWP、Xamarin、Avalonia和Blazor等。这意味着开发人员可以使用相同的代码和技术来构建不同的应用程序，并且能够从一个平台迁移到另一个平台。</span></p><h4 id=\"a2a31bc2\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51) !important\">自动绑定</span></h4><p id=\"ub86e7642\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">ReactiveUI框架采用自动绑定的方式，使得开发人员无需手动编写大量的代码来实现View和ViewModel之间的数据绑定。它支持INotifyPropertyChanged接口和Command绑定，以及其他常见的数据绑定功能。</span></p><h4 id=\"0ead3a73\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51) !important\">依赖注入</span></h4><p id=\"ud27f56b2\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">ReactiveUI框架内置了Splat依赖注入库，使得开发人员可以轻松地管理应用程序中的服务和依赖项。它还支持ViewModelLocator模式，使得开发人员可以轻松地定位和创建视图模型实例。</span></p><h4 id=\"3d31b399\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51) !important\">测试友好</span></h4><p id=\"u2b2f9e0e\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">ReactiveUI框架支持单元测试和集成测试，使得开发人员可以更加容易地编写可测试的代码。它提供了一组测试工具和库，包括TestScheduler、TestHelper和TestObservable等。</span></p><h4 id=\"b32dde5c\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51) !important\">可扩展性</span></h4><p id=\"u339aca1d\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">ReactiveUI框架具有良好的可扩展性，使得开发人员可以轻松地添加新的功能和模块。它支持插件机制和模块化设计，使得应用程序更加灵活和可维护。</span></p><h1 id=\"UknR7\"><span class=\"ne-text\">WPF-ReactiveUI使用步骤</span></h1><p id=\"uaba1a518\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 16px\">请实现：</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); background-color: rgb(210, 249, 209); font-size: 14px\">顶部有个导航栏NavBar，下面左侧有个边栏SideBar，剩下部分是ContentControl。其中SideBar有很多按钮，如检票场次管理、检票群组管理、检票明细查询、检证场次管理、检证群组管理、检证明细查询、设备管理等，所有按钮都有对应的UserControl，要求每点击按钮后，ContentControl需要显示对应的UserControl</span></p><ol class=\"ne-ol\"><li id=\"u8b740315\" data-lake-index-type=\"0\"><span class=\"ne-text\">添加包</span></li></ol><p id=\"ude067289\" class=\"ne-p\" style=\"margin-left: 2em\"><img src=\"https://file.cadengao.com/assets/doc/54197715.182937570/image/0.png\" width=\"1383.3333333333333\" id=\"u47e53168\" class=\"ne-image\"></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u125f79b3\" data-lake-index-type=\"0\"><span class=\"ne-text\">代码主要部分</span></li></ol><span style=\"margin-left: 2em\"><pre data-language=\"csharp\" id=\"fNd9T\" class=\"ne-codeblock language-csharp\"><code>//MainWindow.xaml\n&lt;Window x:Class=&quot;CadenTool.MainWindow&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:CadenTool&quot; xmlns:view=&quot;clr-namespace:CadenTool.View&quot;\n        mc:Ignorable=&quot;d&quot;  \n        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;\n    &lt;DockPanel&gt;\n        &lt;!-- NavBar --&gt;\n        &lt;StackPanel DockPanel.Dock=&quot;Top&quot; Orientation=&quot;Horizontal&quot; Height=&quot;30&quot; Background=&quot;LightSeaGreen&quot;&gt;\n            &lt;!-- Your NavBar content here --&gt;\n            &lt;TextBlock Text=&quot;菜单栏&quot;/&gt;\n        &lt;/StackPanel&gt;\n\n        &lt;!-- SideBar --&gt;\n        &lt;StackPanel DockPanel.Dock=&quot;Left&quot; Background=&quot;#F9F9F9&quot;&gt;\n            &lt;view:SideBar DataContext=&quot;{Binding}&quot;/&gt;\n            &lt;!-- Other buttons --&gt;\n        &lt;/StackPanel&gt;\n\n        &lt;!-- ContentControl --&gt;\n        &lt;ContentControl Content=&quot;{Binding CurrentView}&quot;/&gt;\n    &lt;/DockPanel&gt;\n&lt;/Window&gt;\n\n\n//MainWindow.xaml.cs\npublic partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n        DataContext = new MainViewModel();\n    }\n}\n\n//SideBar.xaml\n&lt;UserControl x:Class=&quot;CadenTool.View.SideBar&quot;\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; \n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; \n             xmlns:local=&quot;clr-namespace:CadenTool.View&quot;\n             mc:Ignorable=&quot;d&quot; \n             d:DesignHeight=&quot;450&quot; d:DesignWidth=&quot;800&quot;&gt;\n    &lt;StackPanel&gt;\n        &lt;Button Content=&quot;我的博客&quot; Command=&quot;{Binding DataContext.CadenBaseCommand, RelativeSource={RelativeSource AncestorType=UserControl}}&quot;/&gt;\n        &lt;Button Content=&quot;生成博客&quot; Command=&quot;{Binding DataContext.CadenBaseGeneCommand, RelativeSource={RelativeSource AncestorType=UserControl}}&quot;/&gt;\n        &lt;Button Content=&quot;设置&quot; Command=&quot;{Binding DataContext.SettingCommand, RelativeSource={RelativeSource AncestorType=UserControl}}&quot;/&gt;\n    &lt;/StackPanel&gt;\n&lt;/UserControl&gt;\n\n//MainViewModel\ninternal class MainViewModel : ReactiveObject\n{\n    private UserControl _currentView;\n    public UserControl CurrentView\n    {\n        get =&gt; _currentView;\n        set =&gt; this.RaiseAndSetIfChanged(ref _currentView, value);\n    }\n    public ReactiveCommand&lt;Unit, UserControl&gt; CadenBaseCommand { get; private set; }\n    public ReactiveCommand&lt;Unit, UserControl&gt; CadenBaseGeneCommand { get; private set; }\n    public ReactiveCommand&lt;Unit, UserControl&gt; SettingCommand { get; private set; }\n    public MainViewModel()\n    {\n        CurrentView = new CadenBaseControl();\n        CadenBaseCommand = ReactiveCommand.Create(() =&gt; CurrentView = new CadenBaseControl());\n        CadenBaseGeneCommand = ReactiveCommand.Create(() =&gt; CurrentView = new CadenBaseGeneControl());\n        SettingCommand = ReactiveCommand.Create(() =&gt; CurrentView = new SettingControl());\n    }\n}\n</code></pre></span><h1 id=\"HiC84\"><span class=\"ne-text\">WPF-Prism使用步骤</span></h1><h2 id=\"CkxnV\"><span class=\"ne-text\">安装包</span></h2><p id=\"u14298e77\" class=\"ne-p\"><img src=\"https://file.cadengao.com/assets/doc/54197715.182937570/image/1.png\" width=\"2059\" id=\"u679ea78c\" class=\"ne-image\"></p><h2 id=\"n3UC3\"><span class=\"ne-text\">代码</span></h2><pre data-language=\"csharp\" id=\"OKw5H\" class=\"ne-codeblock language-csharp\"><code>App.xaml\n&lt;prism:PrismApplication x:Class=&quot;CadenTool.App&quot;\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:local=&quot;clr-namespace:CadenTool&quot;\n             xmlns:prism=&quot;http://prismlibrary.com/&quot;&gt;\n    &lt;Application.Resources&gt;\n        &lt;!-- 这里可以声明一些全局资源 --&gt;\n\n    &lt;/Application.Resources&gt;\n&lt;/prism:PrismApplication&gt;\n\nApp.xaml.cs\nusing CadenTool.Common;\nusing CadenTool.View;\nusing System.Windows;\nusing Prism.Unity;\n\nnamespace CadenTool\n{\n    /// &lt;summary&gt;\n    /// Interaction logic for App.xaml\n    /// &lt;/summary&gt;\n    public partial class App : PrismApplication\n    {\n        protected override void RegisterTypes(IContainerRegistry containerRegistry)\n        {\n            // 注册你的服务和窗口\n            containerRegistry.RegisterSingleton&lt;DataService&gt;();\n            containerRegistry.RegisterSingleton&lt;MainWindow&gt;();\n\n            // 如果有其他视图和视图模型也可以在这里注册\n            containerRegistry.RegisterForNavigation&lt;CadenBaseControl&gt;();\n            containerRegistry.RegisterForNavigation&lt;CadenBaseGeneControl&gt;();\n            containerRegistry.RegisterForNavigation&lt;SettingControl&gt;();\n        }\n\n        protected override Window CreateShell()\n        {\n            // 创建并返回主窗口\n            return Container.Resolve&lt;MainWindow&gt;();\n        }\n    }\n}\n\nMainWindow.xaml\n&lt;Window x:Class=&quot;CadenTool.MainWindow&quot; WindowStartupLocation=&quot;CenterScreen&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:CadenTool&quot; xmlns:view=&quot;clr-namespace:CadenTool.View&quot;\n        mc:Ignorable=&quot;d&quot;  \n        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;\n    &lt;DockPanel&gt;\n        &lt;!-- NavBar --&gt;\n        &lt;StackPanel DockPanel.Dock=&quot;Top&quot; Orientation=&quot;Horizontal&quot; Height=&quot;30&quot; Background=&quot;LightSeaGreen&quot;&gt;\n            &lt;!-- Your NavBar content here --&gt;\n            &lt;TextBlock Text=&quot;导航栏&quot;/&gt;\n        &lt;/StackPanel&gt;\n\n        &lt;!-- SideBar --&gt;\n        &lt;StackPanel DockPanel.Dock=&quot;Left&quot; Background=&quot;#F9F9F9&quot;&gt;\n            &lt;view:SideBar DataContext=&quot;{Binding}&quot;/&gt;\n        &lt;/StackPanel&gt;\n\n        &lt;!-- ContentControl --&gt;\n        &lt;ContentControl Content=&quot;{Binding CurrentView}&quot;/&gt;\n    &lt;/DockPanel&gt;\n&lt;/Window&gt;\n\nMainWindow.xaml.cs\nusing CadenTool.ViewModel;\nusing System.Windows;\n\nnamespace CadenTool\n{\n    /// &lt;summary&gt;\n    /// Interaction logic for MainWindow.xaml\n    /// &lt;/summary&gt;\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n            DataContext = new MainViewModel();\n        }\n    }\n}\n\nSideBar.xaml\n&lt;UserControl x:Class=&quot;CadenTool.View.SideBar&quot;\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; \n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; \n             xmlns:local=&quot;clr-namespace:CadenTool.View&quot;\n             mc:Ignorable=&quot;d&quot; \n             d:DesignHeight=&quot;450&quot; d:DesignWidth=&quot;800&quot;&gt;\n    &lt;StackPanel&gt;\n        &lt;Button Content=&quot;我的博客&quot; Command=&quot;{Binding CadenBaseCommand}&quot;/&gt;\n        &lt;Button Content=&quot;生成博客&quot; Command=&quot;{Binding CadenBaseGeneCommand}&quot;/&gt;\n        &lt;Button Content=&quot;设置&quot; Command=&quot;{Binding SettingCommand}&quot;/&gt;\n    &lt;/StackPanel&gt;\n&lt;/UserControl&gt;\n\nMainViewModel.cs\nusing CadenTool.View;\nusing System.Windows.Controls;\n\nnamespace CadenTool.ViewModel\n{\n    public class MainViewModel : BindableBase\n    {\n        private UserControl _currentView;\n        public UserControl CurrentView\n        {\n            get { return _currentView; }\n            set { SetProperty(ref _currentView, value); }\n        }\n\n        public DelegateCommand CadenBaseCommand { get; private set; }\n        public DelegateCommand CadenBaseGeneCommand { get; private set; }\n        public DelegateCommand SettingCommand { get; private set; }\n\n        public MainViewModel()\n        {\n            CurrentView = new CadenBaseControl();\n\n            CadenBaseCommand = new DelegateCommand(() =&gt; CurrentView = new CadenBaseControl());\n            CadenBaseGeneCommand = new DelegateCommand(() =&gt; CurrentView = new CadenBaseGeneControl());\n            SettingCommand = new DelegateCommand(() =&gt; CurrentView = new SettingControl());\n        }\n    }\n}\n</code></pre></div>"
}