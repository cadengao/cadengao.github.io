[
  {
    "uuid": "54197715.119109318",
    "id": 119109318,
    "title": "C#-垃圾回收机制(GC)【Area】",
    "description": "什么是GC官网中有这么一句话：The garbage collector is a common language runtime component that controls the allocation and release of managed memory。垃圾回收机制（Garba...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 5795,
    "created_at": "2023-03-22T10:18:37",
    "updated_at": "2024-08-17T03:29:43"
  },
  {
    "uuid": "54197715.119110971",
    "id": 119110971,
    "title": "C#-资源类型(托管资源和非托管资源)【Area】",
    "description": "分为托管资源和非托管资源：托管资源指的是.NET可以自动进行回收的资源，主要是指托管堆上分配的内存资源。托管资源的回收工作是不需要人工干预的，由.NET运行库在合适时机调用垃圾回收器进行回收。非托管资源指的是.NET不知道如何回收的资源，最常见的一类非托管资源是包装操作系统资源的对象，例如：文...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 480,
    "created_at": "2023-03-22T10:30:50",
    "updated_at": "2024-08-20T07:17:36"
  },
  {
    "uuid": "54197715.119116988",
    "id": 119116988,
    "title": "C#-内存管理(Stack和Heap)【Area】",
    "description": "每个线程对应一个stack，线程创建的时候CLR为其创建这个stack，stack主要作用是记录函数的执行情况。值类型变量（函数的参数、局部变量 等非成员变量）都分配在stack中，引用类型的对象分配在heap中，在stack中保存heap对象的引用指针。GC只负责heap对象的释放，heap...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 1228,
    "created_at": "2023-03-22T11:38:10",
    "updated_at": "2024-10-22T10:57:58"
  },
  {
    "uuid": "54197715.119122075",
    "id": 119122075,
    "title": "C#-CLR、内存分配和内存回收【Area】",
    "description": "CLRCLR：即公共语言运行时(Common Language Runtime)，是中间语言（IL）的运行时环境，负责将编译生成的MSIL编译成计算机可以识别的机器码，负责资源管理（内存分配和垃圾回收等）。可能有人会提问：为什么不直接编译成机器码，而要先编译成IL，然后在编译成机器码呢？原因是...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 4503,
    "created_at": "2023-03-22T12:29:01",
    "updated_at": "2024-08-17T03:29:32"
  },
  {
    "uuid": "54197715.119475983",
    "id": 119475983,
    "title": "C#-异步编程【Area】",
    "description": "什么是异步同步和异步主要用于修饰方法。当一个方法被调用时，调用者需要等待该方法执行完毕并返回才能继续执行，我们称这个方法是同步方法；当一个方法被调用时立即返回，并获取一个线程执行该方法内部的业务，调用者不用等待该方法执行完毕，我们称这个方法为异步方法。Thread < ThreadPoll <...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 4977,
    "created_at": "2023-03-26T06:11:43",
    "updated_at": "2024-08-19T12:04:28"
  },
  {
    "uuid": "54197715.119594211",
    "id": 119594211,
    "title": "WPF-MVVM(使用MvvmLight插件)【Area】",
    "description": "MVVM介绍其实就是：Model 、view、viewmodel三个的简称，就像MVC一样。model就是模型。view就是视图。viewmodel就是和view进行绑定的。MVVM示意图如下所示：安装MvvmLight插件MVVM开发步骤主要通过MVVM实现数据的CRUD【增删改查】基础操作...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 1562,
    "created_at": "2023-03-27T07:43:01",
    "updated_at": "2024-08-17T03:31:43"
  },
  {
    "uuid": "54197715.119613878",
    "id": 119613878,
    "title": "WPF-命令(ICommand)【Area】",
    "description": "使用Command可以实现UI层跟业务层分离，不必在UI层定义事件方法，近而减少耦合。开发示例界面展示_UI层<Window x:Class=\"WpfCommand.MainWindow\"         xmlns=\"http://schemas.microsoft.com/winfx/20...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 211,
    "created_at": "2023-03-27T09:15:40",
    "updated_at": "2024-08-22T14:47:51"
  },
  {
    "uuid": "54197715.119618116",
    "id": 119618116,
    "title": "WPF-通知更改INotifyPropertyChanged【Area】",
    "description": "有两种方式简单方式-在赋值的时候调用PropertyChangednamespace WpfApp1 {     public class MainViewModel:INotifyPropertyChanged     {         public MyCommand ShowComma...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 204,
    "created_at": "2023-03-27T09:40:54",
    "updated_at": "2024-08-22T14:47:42"
  },
  {
    "uuid": "54197715.119618807",
    "id": 119618807,
    "title": "WPF-绑定【Area】",
    "description": "开发示例前端ui",
    "book_id": 54197715,
    "public": 0,
    "word_count": 249,
    "created_at": "2023-03-27T09:45:29",
    "updated_at": "2024-10-20T10:01:06"
  },
  {
    "uuid": "54197715.119619453",
    "id": 119619453,
    "title": "WPF-依赖属性【Area】",
    "description": "依赖属性介绍WPF提供了一组服务，这些服务可用于扩展公共语言运行时 (CLR) 属性的功能。 这些服务通常统称为 WPF 属性系统。 由 WPF 属性系统支持的属性称为依赖属性。为什么要使用依赖属性场景一：一个界面有100个按钮，每个按钮有100个属性，那么系统需要为10000个属性分配内存，...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 1102,
    "created_at": "2023-03-27T09:50:09",
    "updated_at": "2024-10-20T09:59:20"
  },
  {
    "uuid": "54197715.119848074",
    "id": 119848074,
    "title": "WPF-路由事件【Area】",
    "description": "什么是路由事件简单说，路由事件可以沿着视觉树VisualTree进行传递，在这视觉树中的所有对象都可以收到这个事件。前提是添加了检测。什么是逻辑树LogicalTree简单理解：逻辑树就是我们在xaml中写的布局逻辑如xaml代码：<Grid>    　　<StackPanel Orienta...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 855,
    "created_at": "2023-03-29T06:56:48",
    "updated_at": "2024-08-17T03:31:21"
  },
  {
    "uuid": "54197715.119850854",
    "id": 119850854,
    "title": "WPF-模板【Area】",
    "description": "两类模板控件模板（ControlTemplate）是算法内容的表现形式，一个控件怎么组织其内部的结构才能让它更符合业务逻辑，让用户操作更舒服，都是由她控制的。它决定了控件长什么样子，并让程序员有机会在控件原有的内部逻辑基础上扩展自己的逻辑。数据模板（DataTemplate）是数据内容的表现形...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 2769,
    "created_at": "2023-03-29T07:11:03",
    "updated_at": "2024-10-06T14:15:05"
  },
  {
    "uuid": "54197715.119863763",
    "id": 119863763,
    "title": "网络协议-SOCKET【Area】",
    "description": "分层介绍以下是各层功能描述：物理层协议：负责0、1 比特流（0/1序列）与电压的高低、逛的闪灭之间的转换。规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性；该层为上层协议提供了一个传输数据的物理媒体，只是说明标准。在这一层，数据的单位称为比特（bit）（注：bit和...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 9498,
    "created_at": "2023-03-29T08:07:03",
    "updated_at": "2024-08-17T03:30:38"
  },
  {
    "uuid": "54197715.119879742",
    "id": 119879742,
    "title": "C#-线程同步【Area】",
    "description": "简介本章介绍在C#中实现线程同步的几种方法。因为多个线程同时访问共享数据时，可能会造成共享数据的损坏，从而导致与预期的结果不相符。为了解决这个问题，所以需要用到线程同步，也被俗称为“加锁”。但是加锁绝对不对提高性能，最多也就是不增不减，要实现性能不增不减还得靠高质量的同步源语(Synchron...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 4626,
    "created_at": "2023-03-29T09:29:13",
    "updated_at": "2024-10-22T11:00:59"
  },
  {
    "uuid": "54197715.119888540",
    "id": 119888540,
    "title": "WPF-Invoke与BeginInvoke的区别【Area】",
    "description": "在WPF多线程编程中，经常要在工作线程中更新界面显示，Invoke和BeginInvoke即是为了解决此类问题。在WPF多线程编程模型中，通过Dispatcher调度程序，来管理UI工作项队列，并拥有应用程序主线程，在大多数WPF应用程序中，只存在一个用户界面线程和一个调度器。在非UI线程更新...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 565,
    "created_at": "2023-03-29T10:20:47",
    "updated_at": "2024-10-22T08:13:38"
  },
  {
    "uuid": "54197715.119889687",
    "id": 119889687,
    "title": "Windows消息机制【Area】",
    "description": "Windows 是一个事件驱动的操作系统。事件驱动围绕着消息的产生与处理展开，事件驱动是靠消息循环机制来实现的。也可以理解为消息是一种报告有关事件发生的通知，消息是Windows 操作系统的灵魂。在屏幕显示一个窗口一般是以下几个步骤：得到应用程序的句柄（GetMouduleHandle，一个程...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 6836,
    "created_at": "2023-03-29T10:25:06",
    "updated_at": "2024-08-17T03:30:22"
  },
  {
    "uuid": "54197715.182315379",
    "id": 182315379,
    "title": "C#-值类型vs引用类型【Area】",
    "description": "问题：“谈谈值类型和引用的区别”。对于这个问题，绝大部分人都只会给我两个简洁的答案：“值类型分配在栈中，引用类型分配在堆中”，“在默认情况下，值类型参数传值（拷贝），引用类型参数传引用”。其实这个问题有很大的发挥空间，如果能够从内存布局、GC、互操作、跨AppDomain传递等方面展开，相信会...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 4461,
    "created_at": "2024-08-15T02:30:53",
    "updated_at": "2024-10-22T10:59:40"
  },
  {
    "uuid": "54197715.182323652",
    "id": 182323652,
    "title": "Modbus-RTU通信模式【Area】",
    "description": "通信格式RTU模式下，每一个字符传送格式，在该模式下发送一个字符需要11位二进制。位说明起始位1位数据数据长度8位，低位先发送校验位1位(有校验)，0位(无校验)停止位1位(有校验)，2位(无校验)波特率用户自选选数据格式帧结构帧结构 = 起始位(1位) + 地址码(1位) + 功能码(1位)...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 1821,
    "created_at": "2024-08-15T03:15:23",
    "updated_at": "2024-08-17T03:31:00"
  },
  {
    "uuid": "54197715.182325053",
    "id": 182325053,
    "title": "排序算法【Area】",
    "description": "介绍冒泡排序:时间复杂度O(n2),空间复杂度O(1),稳定。选择排序:时间复杂度O(n2),空间复杂度O(1),不稳定。插入排序:时间复杂度O(n2),空间复杂度O(1),稳定。快速排序:时间复杂度O(nlogn),空间复杂度O(logn),不稳定。归并排序:时间复杂度O(nlogn),空间...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 394,
    "created_at": "2024-08-15T03:22:35",
    "updated_at": "2024-08-17T03:31:15"
  },
  {
    "uuid": "54197715.182325948",
    "id": 182325948,
    "title": "QT-MVC模式【Area】",
    "description": "什么是MVC模式？Qt中的MVC（Model-View-Controller）模式是一种设计模式，用于实现 GUI 应用程序的分层和模块化开发。MVC 分为三个组件：模型（Model）、视图（View）和控制器（Controller）。模型（Model）：模型是应用程序中数据的表示，用于管理数...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 571,
    "created_at": "2024-08-15T03:26:58",
    "updated_at": "2024-08-19T11:46:34"
  },
  {
    "uuid": "54197715.182325971",
    "id": 182325971,
    "title": "QT-信号槽机制【Area】",
    "description": "QT-信号槽机制QT 中的信号和槽机制是一种事件驱动的编程模型，用于在对象之间进行通信。信号是一种特殊的函数，当某个事件发生时会被发射出去，槽是一种函数，用于接收信号并执行相应的操作。使用信号和槽机制需要以下步骤：定义信号：在类中声明一个信号，例如：signals:     void butt...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 890,
    "created_at": "2024-08-15T03:27:04",
    "updated_at": "2024-08-19T11:46:35"
  },
  {
    "uuid": "54197715.182328346",
    "id": 182328346,
    "title": "Windbg的使用【Area】",
    "description": "首先，需要在编译时启用调试信息（/Zi 或 /ZI）和禁用优化（/Od），以便生成可调试的程序。打开Windbg，并在File菜单中选择Open Executable，选择被调试的可执行文件。在Windbg中输入以下命令，启用符号路径：.sympath SRV*C:\\\\Symbols*http...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 467,
    "created_at": "2024-08-15T03:40:36",
    "updated_at": "2024-08-17T03:30:34"
  },
  {
    "uuid": "54197715.182937570",
    "id": 182937570,
    "title": "WPF-MVVM(使用ReactiveUI、Prism)【Area】",
    "tag": "MVVM、ReactiveUI、wpf",
    "description": "ReactiveUI框架的特点：响应式编程ReactiveUI框架使用Rx.NET库，提供了一种基于事件流和数据流的响应式编程模型。开发人员可以使用LINQ查询语法和链式调用来处理事件和数据流，从而实现应用程序的响应式行为。支持多平台ReactiveUI框架支持多种平台，包括WPF、UWP、X...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 1128,
    "created_at": "2024-08-19T12:28:00",
    "updated_at": "2024-09-06T02:51:52"
  },
  {
    "uuid": "54197715.185438306",
    "id": 185438306,
    "title": "WPF-Prism【Area】",
    "description": "安装Prism.DryIoc包Prism的初始化过程Prism RegionRegion是Prism当中模块化的核心功能。Region可以理解为View的动态占位符，在View上进行视图占位，其主要目的是弱化模块与模块之间的耦合关系。在一般的界面设计中,界面上的元素及内容往往是被固定，如上图。...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 438,
    "created_at": "2024-09-06T03:34:10",
    "updated_at": "2024-09-10T12:04:42"
  },
  {
    "uuid": "54197723.115104070",
    "id": 115104070,
    "title": "hexo更换markdown渲染器【Resource】",
    "tag": "hexo、markdown",
    "description": "先卸载原来的，默认的为“hexo-renderer-marked”npm un hexo-renderer-marked --save再安装新的npm i hexo-renderer-markdown-it-plus --save最后安装新的渲染器的依赖npm i markdown-it-ch...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 76,
    "created_at": "2023-02-20T02:30:22",
    "updated_at": "2024-08-27T07:18:15"
  },
  {
    "uuid": "54197723.115155527",
    "id": 115155527,
    "title": "魔方总结【Resource】",
    "description": "拼好白面并对齐底层中间块中间块：Ｒ'ＵＦ'Ｕ'角块：Ｒ'Ｄ'ＲＤ拼好白面底层和中间层公式１：ＦＵＦＵＦＵ'Ｆ'Ｕ'Ｆ'公式２：Ｒ'Ｕ'Ｒ'Ｕ'Ｒ'ＵＲＵＲ拼好顶层黄色十字ＦＲＵＲ'Ｕ'Ｆ'拼好顶面黄色放置：黄色十字面非白色块的个数对应“２后４左”小鱼１：Ｒ'Ｕ'ＲＵ'Ｒ'Ｕ2Ｒ，侧面黄色在左，...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 271,
    "created_at": "2023-02-20T07:15:52",
    "updated_at": "2024-08-17T03:32:50"
  },
  {
    "uuid": "54197723.182340326",
    "id": 182340326,
    "title": "frp-内网穿透【Resource】",
    "description": "安装包地址Releases · fatedier/frp服务器端（Ubuntu）下载📎frp_0.48.0_linux_amd64.tar.gzwget https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 340,
    "created_at": "2024-08-15T06:03:39",
    "updated_at": "2024-08-17T03:32:33"
  },
  {
    "uuid": "54197723.182340826",
    "id": 182340826,
    "title": "scrcpy-Android投屏【Resource】",
    "description": "介绍scrcpy就是通过adb调试的方式来将手机屏幕投到电脑上，并可以通过电脑控制您的Android设备。它可以通过USB连接，也可以通过Wifi连接（类似于隔空投屏），而且不需要任何root权限，不需要在手机里安装任何程序。scrcpy同时适用于GNU / Linux，Windows和mac...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 169,
    "created_at": "2024-08-15T06:05:23",
    "updated_at": "2024-08-17T03:32:30"
  },
  {
    "uuid": "54197723.182341042",
    "id": 182341042,
    "title": "mac上编译.net core【Resource】",
    "description": "mac上安装.net8下载下图中的安装包，并安装\t或者/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install --cask dotn...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 155,
    "created_at": "2024-08-15T06:06:37",
    "updated_at": "2024-08-21T22:50:05"
  },
  {
    "uuid": "54197723.182341503",
    "id": 182341503,
    "title": "Matlab使用【Resource】",
    "description": "matlab5.3_lite单文件（win）📎matlab5.3chs.zipMatlab 变量变量命名原则：以字母或者下划线开头(很少用下划线打头啊)；后面可以跟字母、数字和下划线；变量名区分字母的大小写.Matlab 语句的通常形式变量 = 表达式;表达式是用运算符将有关运算量连接起来的...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 408,
    "created_at": "2024-08-15T06:09:03",
    "updated_at": "2024-08-17T03:32:42"
  },
  {
    "uuid": "54197723.182341760",
    "id": 182341760,
    "title": "hexo常用命令【Resource】",
    "description": "用于安装 hexo 博客框架npm install -g hexo-cli用于创建并初始化\"blog\"目录hexo init blog用新建一篇文章hexo new title该用于生成静态文件hexo g用于启动本地服务器hexo s注：可以添加一些参数-p     选项，指定服务器端口，默...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 214,
    "created_at": "2024-08-15T06:10:27",
    "updated_at": "2024-08-27T07:13:33"
  },
  {
    "uuid": "54197723.182342173",
    "id": 182342173,
    "title": "Windows技巧【Resource】",
    "description": "Win10 关闭下载目录的分组显示win10 1903 以后的版本, 下载目录会始终用分组+按时间排序方式显示, 是因为微软给下载目录单独设置了一个目录模板想修改成自己要的显示风格就只能改注册表的模板了:regedit  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsof...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 506,
    "created_at": "2024-08-15T06:11:48",
    "updated_at": "2024-08-20T08:09:40"
  },
  {
    "uuid": "54197723.182342424",
    "id": 182342424,
    "title": "ubuntu设置中文环境【Resource】",
    "description": "修改步骤检查当前环境：执行echo $LANG注：如果屏幕显示en_US.UTF-8，说明是英语环境(有中文字符文件时会乱码)，需要切换到中文环境，中文环境下会显示zh_CN.UTF-8。安装中文语言包：执行apt-get update &amp;&amp; apt-get install language-...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 266,
    "created_at": "2024-08-15T06:13:10",
    "updated_at": "2024-10-22T08:06:27"
  },
  {
    "uuid": "54197723.183049799",
    "id": 183049799,
    "title": "windows部署hexo【Resource】",
    "description": "下载并安装node.js，官网地址：Node.js — 在任何地方运行 JavaScript (nodejs.org)下载并安装git，官网地址：Git - Downloads (git-scm.com)用管理员打开cmd，执行//1.检查node-v是否安装成功，成功后会提示v20.16.0...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 114,
    "created_at": "2024-08-20T07:23:49",
    "updated_at": "2024-10-22T08:06:32"
  },
  {
    "uuid": "54197723.189486255",
    "id": 189486255,
    "title": "在netlify上部署云函数【Resource】",
    "description": "推送代码到github上安装node.js执行语句npm install mysql2根目录新建netlify.toml文件和functions目录下hello.js和mysql.js文件[build]  functions = \"functions\"const mysql = require...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 465,
    "created_at": "2024-10-09T07:22:53",
    "updated_at": "2024-10-09T09:13:33"
  },
  {
    "uuid": "54197723.190787904",
    "id": 190787904,
    "title": "npm常用命令【Resource】",
    "description": "查看镜像源 npm config get registry更换为淘宝源npm config set registry https://registry.npmmirror.comnpm、yarn等对比特性npmYarnTinyBun速度较慢快更快非常快锁文件package-lock.jsony...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 411,
    "created_at": "2024-10-18T02:51:20",
    "updated_at": "2024-10-22T08:08:29"
  },
  {
    "uuid": "54197723.191308248",
    "id": 191308248,
    "title": "ubuntu22.04换源【Resource】",
    "description": "备份原来的源列表sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak编辑源列表sudo vim /etc/apt/sources.list注：清空命令为:%d替换为阿里源或清华源阿里源：deb https://mirrors.aliyu...",
    "book_id": 54197723,
    "public": 0,
    "word_count": 171,
    "created_at": "2024-10-22T07:24:51",
    "updated_at": "2024-10-22T07:53:32"
  }
]