[
  {
    "uuid": "54197715.119848074",
    "id": 119848074,
    "title": "WPF-路由事件【Area】",
    "description": "什么是路由事件简单说，路由事件可以沿着视觉树VisualTree进行传递，在这视觉树中的所有对象都可以收到这个事件。前提是添加了检测。什么是逻辑树LogicalTree简单理解：逻辑树就是我们在xaml中写的布局逻辑如xaml代码：<Grid>    　　<StackPanel Orienta...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 855,
    "created_at": "2023-03-29T06:56:48",
    "updated_at": "2024-08-17T03:31:21"
  },
  {
    "uuid": "54197715.119850854",
    "id": 119850854,
    "title": "WPF-模板【Area】",
    "description": "两类模板控件模板（ControlTemplate）是算法内容的表现形式，一个控件怎么组织其内部的结构才能让它更符合业务逻辑，让用户操作更舒服，都是由她控制的。它决定了控件长什么样子，并让程序员有机会在控件原有的内部逻辑基础上扩展自己的逻辑。数据模板（DataTemplate）是数据内容的表现形...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 2769,
    "created_at": "2023-03-29T07:11:03",
    "updated_at": "2024-10-06T14:15:05"
  },
  {
    "uuid": "54197715.119863763",
    "id": 119863763,
    "title": "网络协议-SOCKET【Area】",
    "description": "分层介绍以下是各层功能描述：物理层协议：负责0、1 比特流（0/1序列）与电压的高低、逛的闪灭之间的转换。规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性；该层为上层协议提供了一个传输数据的物理媒体，只是说明标准。在这一层，数据的单位称为比特（bit）（注：bit和...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 9498,
    "created_at": "2023-03-29T08:07:03",
    "updated_at": "2024-08-17T03:30:38"
  },
  {
    "uuid": "54197715.119879742",
    "id": 119879742,
    "title": "C#-线程同步【Area】",
    "description": "简介本章介绍在C#中实现线程同步的几种方法。因为多个线程同时访问共享数据时，可能会造成共享数据的损坏，从而导致与预期的结果不相符。为了解决这个问题，所以需要用到线程同步，也被俗称为“加锁”。但是加锁绝对不对提高性能，最多也就是不增不减，要实现性能不增不减还得靠高质量的同步源语(Synchron...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 4626,
    "created_at": "2023-03-29T09:29:13",
    "updated_at": "2024-10-22T11:00:59"
  },
  {
    "uuid": "54197715.119888540",
    "id": 119888540,
    "title": "WPF-Invoke与BeginInvoke的区别【Area】",
    "description": "在WPF多线程编程中，经常要在工作线程中更新界面显示，Invoke和BeginInvoke即是为了解决此类问题。在WPF多线程编程模型中，通过Dispatcher调度程序，来管理UI工作项队列，并拥有应用程序主线程，在大多数WPF应用程序中，只存在一个用户界面线程和一个调度器。在非UI线程更新...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 565,
    "created_at": "2023-03-29T10:20:47",
    "updated_at": "2024-10-22T08:13:38"
  },
  {
    "uuid": "54197715.119889687",
    "id": 119889687,
    "title": "Windows消息机制【Area】",
    "description": "Windows 是一个事件驱动的操作系统。事件驱动围绕着消息的产生与处理展开，事件驱动是靠消息循环机制来实现的。也可以理解为消息是一种报告有关事件发生的通知，消息是Windows 操作系统的灵魂。在屏幕显示一个窗口一般是以下几个步骤：得到应用程序的句柄（GetMouduleHandle，一个程...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 6836,
    "created_at": "2023-03-29T10:25:06",
    "updated_at": "2024-08-17T03:30:22"
  },
  {
    "uuid": "54197715.182315379",
    "id": 182315379,
    "title": "C#-值类型vs引用类型【Area】",
    "description": "问题：“谈谈值类型和引用的区别”。对于这个问题，绝大部分人都只会给我两个简洁的答案：“值类型分配在栈中，引用类型分配在堆中”，“在默认情况下，值类型参数传值（拷贝），引用类型参数传引用”。其实这个问题有很大的发挥空间，如果能够从内存布局、GC、互操作、跨AppDomain传递等方面展开，相信会...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 4461,
    "created_at": "2024-08-15T02:30:53",
    "updated_at": "2024-10-22T10:59:40"
  },
  {
    "uuid": "54197715.182323652",
    "id": 182323652,
    "title": "Modbus-RTU通信模式【Area】",
    "description": "通信格式RTU模式下，每一个字符传送格式，在该模式下发送一个字符需要11位二进制。位说明起始位1位数据数据长度8位，低位先发送校验位1位(有校验)，0位(无校验)停止位1位(有校验)，2位(无校验)波特率用户自选选数据格式帧结构帧结构 = 起始位(1位) + 地址码(1位) + 功能码(1位)...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 1821,
    "created_at": "2024-08-15T03:15:23",
    "updated_at": "2024-08-17T03:31:00"
  },
  {
    "uuid": "54197715.182325053",
    "id": 182325053,
    "title": "排序算法【Area】",
    "description": "介绍冒泡排序:时间复杂度O(n2),空间复杂度O(1),稳定。选择排序:时间复杂度O(n2),空间复杂度O(1),不稳定。插入排序:时间复杂度O(n2),空间复杂度O(1),稳定。快速排序:时间复杂度O(nlogn),空间复杂度O(logn),不稳定。归并排序:时间复杂度O(nlogn),空间...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 394,
    "created_at": "2024-08-15T03:22:35",
    "updated_at": "2024-08-17T03:31:15"
  },
  {
    "uuid": "54197715.182325948",
    "id": 182325948,
    "title": "QT-MVC模式【Area】",
    "description": "什么是MVC模式？Qt中的MVC（Model-View-Controller）模式是一种设计模式，用于实现 GUI 应用程序的分层和模块化开发。MVC 分为三个组件：模型（Model）、视图（View）和控制器（Controller）。模型（Model）：模型是应用程序中数据的表示，用于管理数...",
    "book_id": 54197715,
    "public": 0,
    "word_count": 571,
    "created_at": "2024-08-15T03:26:58",
    "updated_at": "2024-08-19T11:46:34"
  }
]