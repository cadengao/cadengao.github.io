/*! For license information please see 962.17ccdb75.chunk.js.LICENSE.txt */
"use strict";
(self.webpackChunk_craft_internal_sharepage = self.webpackChunk_craft_internal_sharepage || []).push([[962], {
    17941: (e, t, n) => {
        function i(e) {
            return `-webkit-user-select: ${e}; user-select: ${e};`
        }
        n.d(t, {
            _: () => i
        })
    }
    ,
    5496: e => {
        var t = Object.getOwnPropertySymbols
            , n = Object.prototype.hasOwnProperty
            , i = Object.prototype.propertyIsEnumerable;
        e.exports = function () {
            try {
                if (!Object.assign)
                    return !1;
                var e = new String("abc");
                if (e[5] = "de",
                    "5" === Object.getOwnPropertyNames(e)[0])
                    return !1;
                for (var t = {}, n = 0; n < 10; n++)
                    t["_" + String.fromCharCode(n)] = n;
                if ("0123456789" !== Object.getOwnPropertyNames(t).map((function (e) {
                    return t[e]
                }
                )).join(""))
                    return !1;
                var i = {};
                return "abcdefghijklmnopqrst".split("").forEach((function (e) {
                    i[e] = e
                }
                )),
                    "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, i)).join("")
            } catch (r) {
                return !1
            }
        }() ? Object.assign : function (e, r) {
            for (var a, o, O = function (e) {
                if (null === e || void 0 === e)
                    throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(e)
            }(e), s = 1; s < arguments.length; s++) {
                for (var l in a = Object(arguments[s]))
                    n.call(a, l) && (O[l] = a[l]);
                if (t) {
                    o = t(a);
                    for (var c = 0; c < o.length; c++)
                        i.call(a, o[c]) && (O[o[c]] = a[o[c]])
                }
            }
            return O
        }
    }
    ,
    23896: (e, t, n) => {
        n(5496);
        var i = n(65043)
            , r = 60103;
        if ("function" === typeof Symbol && Symbol.for) {
            var a = Symbol.for;
            r = a("react.element"),
                a("react.fragment")
        }
        var o = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner
            , O = Object.prototype.hasOwnProperty
            , s = {
                key: !0,
                ref: !0,
                __self: !0,
                __source: !0
            };
        function l(e, t, n) {
            var i, a = {}, l = null, c = null;
            for (i in void 0 !== n && (l = "" + n),
                void 0 !== t.key && (l = "" + t.key),
                void 0 !== t.ref && (c = t.ref),
                t)
                O.call(t, i) && !s.hasOwnProperty(i) && (a[i] = t[i]);
            if (e && e.defaultProps)
                for (i in t = e.defaultProps)
                    void 0 === a[i] && (a[i] = t[i]);
            return {
                $$typeof: r,
                type: e,
                key: l,
                ref: c,
                props: a,
                _owner: o.current
            }
        }
        t.jsx = l,
            t.jsxs = l
    }
    ,
    8036: (e, t, n) => {
        e.exports = n(23896)
    }
    ,
    24392: (e, t, n) => {
        n.d(t, {
            JU: () => ms,
            Ay: () => hs
        });
        var i = n(27051)
            , r = n(65043);
        function a() {
            return a = Object.assign ? Object.assign.bind() : function (e) {
                for (var t = 1; t < arguments.length; t++) {
                    var n = arguments[t];
                    for (var i in n)
                        ({}).hasOwnProperty.call(n, i) && (e[i] = n[i])
                }
                return e
            }
                ,
                a.apply(null, arguments)
        }
        var o = n(17471)
            , O = n(32043)
            , s = n(25956)
            , l = n(45615);
        function c(e, t) {
            return n => {
                let { state: i, dispatch: r } = n;
                if (i.readOnly)
                    return !1;
                let a = e(t, i);
                return !!a && (r(i.update(a)),
                    !0)
            }
        }
        const u = c(g, 0)
            , d = c(m, 0)
            , h = c(((e, t) => m(e, t, function (e) {
                let t = [];
                for (let n of e.selection.ranges) {
                    let i = e.doc.lineAt(n.from)
                        , r = n.to <= i.to ? i : e.doc.lineAt(n.to)
                        , a = t.length - 1;
                    a >= 0 && t[a].to > i.from ? t[a].to = r.to : t.push({
                        from: i.from + /^\s*/.exec(i.text)[0].length,
                        to: r.to
                    })
                }
                return t
            }(t))), 0);
        function f(e, t) {
            let n = e.languageDataAt("commentTokens", t);
            return n.length ? n[0] : {}
        }
        const p = 50;
        function m(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t.selection.ranges
                , i = n.map((e => f(t, e.from).block));
            if (!i.every((e => e)))
                return null;
            let r = n.map(((e, n) => function (e, t, n, i) {
                let r, a, { open: o, close: O } = t, s = e.sliceDoc(n - p, n), l = e.sliceDoc(i, i + p), c = /\s*$/.exec(s)[0].length, u = /^\s*/.exec(l)[0].length, d = s.length - c;
                if (s.slice(d - o.length, d) == o && l.slice(u, u + O.length) == O)
                    return {
                        open: {
                            pos: n - c,
                            margin: c && 1
                        },
                        close: {
                            pos: i + u,
                            margin: u && 1
                        }
                    };
                i - n <= 2 * p ? r = a = e.sliceDoc(n, i) : (r = e.sliceDoc(n, n + p),
                    a = e.sliceDoc(i - p, i));
                let h = /^\s*/.exec(r)[0].length
                    , f = /\s*$/.exec(a)[0].length
                    , m = a.length - f - O.length;
                return r.slice(h, h + o.length) == o && a.slice(m, m + O.length) == O ? {
                    open: {
                        pos: n + h + o.length,
                        margin: /\s/.test(r.charAt(h + o.length)) ? 1 : 0
                    },
                    close: {
                        pos: i - f - O.length,
                        margin: /\s/.test(a.charAt(m - 1)) ? 1 : 0
                    }
                } : null
            }(t, i[n], e.from, e.to)));
            if (2 != e && !r.every((e => e)))
                return {
                    changes: t.changes(n.map(((e, t) => r[t] ? [] : [{
                        from: e.from,
                        insert: i[t].open + " "
                    }, {
                        from: e.to,
                        insert: " " + i[t].close
                    }])))
                };
            if (1 != e && r.some((e => e))) {
                let e = [];
                for (let t, n = 0; n < r.length; n++)
                    if (t = r[n]) {
                        let r = i[n]
                            , { open: a, close: o } = t;
                        e.push({
                            from: a.pos - r.open.length,
                            to: a.pos + a.margin
                        }, {
                            from: o.pos - o.margin,
                            to: o.pos + r.close.length
                        })
                    }
                return {
                    changes: e
                }
            }
            return null
        }
        function g(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t.selection.ranges
                , i = []
                , r = -1;
            for (let { from: a, to: o } of n) {
                let e = i.length
                    , n = 1e9
                    , O = f(t, a).line;
                if (O) {
                    for (let e = a; e <= o;) {
                        let s = t.doc.lineAt(e);
                        if (s.from > r && (a == o || o > s.from)) {
                            r = s.from;
                            let e = /^\s*/.exec(s.text)[0].length
                                , t = e == s.length
                                , a = s.text.slice(e, e + O.length) == O ? e : -1;
                            e < s.text.length && e < n && (n = e),
                                i.push({
                                    line: s,
                                    comment: a,
                                    token: O,
                                    indent: e,
                                    empty: t,
                                    single: !1
                                })
                        }
                        e = s.to + 1
                    }
                    if (n < 1e9)
                        for (let t = e; t < i.length; t++)
                            i[t].indent < i[t].line.text.length && (i[t].indent = n);
                    i.length == e + 1 && (i[e].single = !0)
                }
            }
            if (2 != e && i.some((e => e.comment < 0 && (!e.empty || e.single)))) {
                let e = [];
                for (let { line: t, token: r, indent: a, empty: o, single: O } of i)
                    !O && o || e.push({
                        from: t.from + a,
                        insert: r + " "
                    });
                let n = t.changes(e);
                return {
                    changes: n,
                    selection: t.selection.map(n, 1)
                }
            }
            if (1 != e && i.some((e => e.comment >= 0))) {
                let e = [];
                for (let { line: t, comment: n, token: r } of i)
                    if (n >= 0) {
                        let i = t.from + n
                            , a = i + r.length;
                        " " == t.text[a - t.from] && a++,
                            e.push({
                                from: i,
                                to: a
                            })
                    }
                return {
                    changes: e
                }
            }
            return null
        }
        const Q = o.YH.define()
            , $ = o.YH.define()
            , b = o.sj.define()
            , y = o.sj.define({
                combine: e => (0,
                    o.QR)(e, {
                        minDepth: 100,
                        newGroupDelay: 500,
                        joinToEvent: (e, t) => t
                    }, {
                        minDepth: Math.max,
                        newGroupDelay: Math.min,
                        joinToEvent: (e, t) => (n, i) => e(n, i) || t(n, i)
                    })
            })
            , S = o.sU.define({
                create: () => A.empty,
                update(e, t) {
                    let n = t.state.facet(y)
                        , i = t.annotation(Q);
                    if (i) {
                        let r = X.fromTransaction(t, i.selection)
                            , a = i.side
                            , o = 0 == a ? e.undone : e.done;
                        return o = r ? _(o, o.length, n.minDepth, r) : W(o, t.startState.selection),
                            new A(0 == a ? i.rest : o, 0 == a ? o : i.rest)
                    }
                    let r = t.annotation($);
                    if ("full" != r && "before" != r || (e = e.isolate()),
                        !1 === t.annotation(o.ZX.addToHistory))
                        return t.changes.empty ? e : e.addMapping(t.changes.desc);
                    let a = X.fromTransaction(t)
                        , O = t.annotation(o.ZX.time)
                        , s = t.annotation(o.ZX.userEvent);
                    return a ? e = e.addChanges(a, O, s, n, t) : t.selection && (e = e.addSelection(t.startState.selection, O, s, n.newGroupDelay)),
                        "full" != r && "after" != r || (e = e.isolate()),
                        e
                },
                toJSON: e => ({
                    done: e.done.map((e => e.toJSON())),
                    undone: e.undone.map((e => e.toJSON()))
                }),
                fromJSON: e => new A(e.done.map(X.fromJSON), e.undone.map(X.fromJSON))
            });
        function P(e, t) {
            return function (n) {
                let { state: i, dispatch: r } = n;
                if (!t && i.readOnly)
                    return !1;
                let a = i.field(S, !1);
                if (!a)
                    return !1;
                let o = a.pop(e, i, t);
                return !!o && (r(o),
                    !0)
            }
        }
        const v = P(0, !1)
            , x = P(1, !1)
            , k = P(0, !0)
            , w = P(1, !0);
        class X {
            constructor(e, t, n, i, r) {
                this.changes = e,
                    this.effects = t,
                    this.mapped = n,
                    this.startSelection = i,
                    this.selectionsAfter = r
            }
            setSelAfter(e) {
                return new X(this.changes, this.effects, this.mapped, this.startSelection, e)
            }
            toJSON() {
                var e, t, n;
                return {
                    changes: null === (e = this.changes) || void 0 === e ? void 0 : e.toJSON(),
                    mapped: null === (t = this.mapped) || void 0 === t ? void 0 : t.toJSON(),
                    startSelection: null === (n = this.startSelection) || void 0 === n ? void 0 : n.toJSON(),
                    selectionsAfter: this.selectionsAfter.map((e => e.toJSON()))
                }
            }
            static fromJSON(e) {
                return new X(e.changes && o.VR.fromJSON(e.changes), [], e.mapped && o.Gu.fromJSON(e.mapped), e.startSelection && o.OF.fromJSON(e.startSelection), e.selectionsAfter.map(o.OF.fromJSON))
            }
            static fromTransaction(e, t) {
                let n = z;
                for (let i of e.startState.facet(b)) {
                    let t = i(e);
                    t.length && (n = n.concat(t))
                }
                return !n.length && e.changes.empty ? null : new X(e.changes.invert(e.startState.doc), n, void 0, t || e.startState.selection, z)
            }
            static selection(e) {
                return new X(void 0, z, void 0, void 0, e)
            }
        }
        function _(e, t, n, i) {
            let r = t + 1 > n + 20 ? t - n - 1 : 0
                , a = e.slice(r, t);
            return a.push(i),
                a
        }
        function T(e, t) {
            return e.length ? t.length ? e.concat(t) : e : t
        }
        const z = []
            , R = 200;
        function W(e, t) {
            if (e.length) {
                let n = e[e.length - 1]
                    , i = n.selectionsAfter.slice(Math.max(0, n.selectionsAfter.length - R));
                return i.length && i[i.length - 1].eq(t) ? e : (i.push(t),
                    _(e, e.length - 1, 1e9, n.setSelAfter(i)))
            }
            return [X.selection([t])]
        }
        function Z(e) {
            let t = e[e.length - 1]
                , n = e.slice();
            return n[e.length - 1] = t.setSelAfter(t.selectionsAfter.slice(0, t.selectionsAfter.length - 1)),
                n
        }
        function q(e, t) {
            if (!e.length)
                return e;
            let n = e.length
                , i = z;
            for (; n;) {
                let r = U(e[n - 1], t, i);
                if (r.changes && !r.changes.empty || r.effects.length) {
                    let t = e.slice(0, n);
                    return t[n - 1] = r,
                        t
                }
                t = r.mapped,
                    n--,
                    i = r.selectionsAfter
            }
            return i.length ? [X.selection(i)] : z
        }
        function U(e, t, n) {
            let i = T(e.selectionsAfter.length ? e.selectionsAfter.map((e => e.map(t))) : z, n);
            if (!e.changes)
                return X.selection(i);
            let r = e.changes.map(t)
                , a = t.mapDesc(e.changes, !0)
                , O = e.mapped ? e.mapped.composeDesc(a) : a;
            return new X(r, o.Pe.mapEffects(e.effects, t), O, e.startSelection.map(a), i)
        }
        const Y = /^(input\.type|delete)($|\.)/;
        class A {
            constructor(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : void 0;
                this.done = e,
                    this.undone = t,
                    this.prevTime = n,
                    this.prevUserEvent = i
            }
            isolate() {
                return this.prevTime ? new A(this.done, this.undone) : this
            }
            addChanges(e, t, n, i, r) {
                let a = this.done
                    , o = a[a.length - 1];
                return a = o && o.changes && !o.changes.empty && e.changes && (!n || Y.test(n)) && (!o.selectionsAfter.length && t - this.prevTime < i.newGroupDelay && i.joinToEvent(r, function (e, t) {
                    let n = []
                        , i = !1;
                    return e.iterChangedRanges(((e, t) => n.push(e, t))),
                        t.iterChangedRanges(((e, t, r, a) => {
                            for (let o = 0; o < n.length;) {
                                let e = n[o++]
                                    , t = n[o++];
                                a >= e && r <= t && (i = !0)
                            }
                        }
                        )),
                        i
                }(o.changes, e.changes)) || "input.type.compose" == n) ? _(a, a.length - 1, i.minDepth, new X(e.changes.compose(o.changes), T(e.effects, o.effects), o.mapped, o.startSelection, z)) : _(a, a.length, i.minDepth, e),
                    new A(a, z, t, n)
            }
            addSelection(e, t, n, i) {
                let r = this.done.length ? this.done[this.done.length - 1].selectionsAfter : z;
                return r.length > 0 && t - this.prevTime < i && n == this.prevUserEvent && n && /^select($|\.)/.test(n) && (a = r[r.length - 1],
                    o = e,
                    a.ranges.length == o.ranges.length && 0 === a.ranges.filter(((e, t) => e.empty != o.ranges[t].empty)).length) ? this : new A(W(this.done, e), this.undone, t, n);
                var a, o
            }
            addMapping(e) {
                return new A(q(this.done, e), q(this.undone, e), this.prevTime, this.prevUserEvent)
            }
            pop(e, t, n) {
                let i = 0 == e ? this.done : this.undone;
                if (0 == i.length)
                    return null;
                let r = i[i.length - 1]
                    , a = r.selectionsAfter[0] || t.selection;
                if (n && r.selectionsAfter.length)
                    return t.update({
                        selection: r.selectionsAfter[r.selectionsAfter.length - 1],
                        annotations: Q.of({
                            side: e,
                            rest: Z(i),
                            selection: a
                        }),
                        userEvent: 0 == e ? "select.undo" : "select.redo",
                        scrollIntoView: !0
                    });
                if (r.changes) {
                    let n = 1 == i.length ? z : i.slice(0, i.length - 1);
                    return r.mapped && (n = q(n, r.mapped)),
                        t.update({
                            changes: r.changes,
                            selection: r.startSelection,
                            effects: r.effects,
                            annotations: Q.of({
                                side: e,
                                rest: n,
                                selection: a
                            }),
                            filter: !1,
                            userEvent: 0 == e ? "undo" : "redo",
                            scrollIntoView: !0
                        })
                }
                return null
            }
        }
        A.empty = new A(z, z);
        const V = [{
            key: "Mod-z",
            run: v,
            preventDefault: !0
        }, {
            key: "Mod-y",
            mac: "Mod-Shift-z",
            run: x,
            preventDefault: !0
        }, {
            linux: "Ctrl-Shift-z",
            run: x,
            preventDefault: !0
        }, {
            key: "Mod-u",
            run: k,
            preventDefault: !0
        }, {
            key: "Alt-u",
            mac: "Mod-Shift-u",
            run: w,
            preventDefault: !0
        }];
        function E(e, t) {
            return o.OF.create(e.ranges.map(t), e.mainIndex)
        }
        function j(e, t) {
            return e.update({
                selection: t,
                scrollIntoView: !0,
                userEvent: "select"
            })
        }
        function C(e, t) {
            let { state: n, dispatch: i } = e
                , r = E(n.selection, t);
            return !r.eq(n.selection, !0) && (i(j(n, r)),
                !0)
        }
        function G(e, t) {
            return o.OF.cursor(t ? e.to : e.from)
        }
        function I(e, t) {
            return C(e, (n => n.empty ? e.moveByChar(n, t) : G(n, t)))
        }
        function D(e) {
            return e.textDirectionAt(e.state.selection.main.head) == O.OP.LTR
        }
        const N = e => I(e, !D(e))
            , L = e => I(e, D(e));
        function M(e, t) {
            return C(e, (n => n.empty ? e.moveByGroup(n, t) : G(n, t)))
        }
        "undefined" != typeof Intl && Intl.Segmenter;
        function F(e, t, n) {
            if (t.type.prop(n))
                return !0;
            let i = t.to - t.from;
            return i && (i > 2 || /[^\s,.;:]/.test(e.sliceDoc(t.from, t.to))) || t.firstChild
        }
        function B(e, t, n) {
            let i, r, a = (0,
                s.mv)(e).resolveInner(t.head), O = n ? l.uY.closedBy : l.uY.openedBy;
            for (let o = t.head; ;) {
                let t = n ? a.childAfter(o) : a.childBefore(o);
                if (!t)
                    break;
                F(e, t, O) ? a = t : o = n ? t.to : t.from
            }
            return r = a.type.prop(O) && (i = n ? (0,
                s.jU)(e, a.from, 1) : (0,
                    s.jU)(e, a.to, -1)) && i.matched ? n ? i.end.to : i.end.from : n ? a.to : a.from,
                o.OF.cursor(r, n ? -1 : 1)
        }
        function H(e, t) {
            return C(e, (n => {
                if (!n.empty)
                    return G(n, t);
                let i = e.moveVertically(n, t);
                return i.head != n.head ? i : e.moveToLineBoundary(n, t)
            }
            ))
        }
        const K = e => H(e, !1)
            , J = e => H(e, !0);
        function ee(e) {
            let t, n = e.scrollDOM.clientHeight < e.scrollDOM.scrollHeight - 2, i = 0, r = 0;
            if (n) {
                for (let t of e.state.facet(O.Lz.scrollMargins)) {
                    let n = t(e);
                    (null === n || void 0 === n ? void 0 : n.top) && (i = Math.max(null === n || void 0 === n ? void 0 : n.top, i)),
                        (null === n || void 0 === n ? void 0 : n.bottom) && (r = Math.max(null === n || void 0 === n ? void 0 : n.bottom, r))
                }
                t = e.scrollDOM.clientHeight - i - r
            } else
                t = (e.dom.ownerDocument.defaultView || window).innerHeight;
            return {
                marginTop: i,
                marginBottom: r,
                selfScroll: n,
                height: Math.max(e.defaultLineHeight, t - 5)
            }
        }
        function te(e, t) {
            let n, i = ee(e), { state: r } = e, a = E(r.selection, (n => n.empty ? e.moveVertically(n, t, i.height) : G(n, t)));
            if (a.eq(r.selection))
                return !1;
            if (i.selfScroll) {
                let t = e.coordsAtPos(r.selection.main.head)
                    , o = e.scrollDOM.getBoundingClientRect()
                    , s = o.top + i.marginTop
                    , l = o.bottom - i.marginBottom;
                t && t.top > s && t.bottom < l && (n = O.Lz.scrollIntoView(a.main.head, {
                    y: "start",
                    yMargin: t.top - s
                }))
            }
            return e.dispatch(j(r, a), {
                effects: n
            }),
                !0
        }
        const ne = e => te(e, !1)
            , ie = e => te(e, !0);
        function re(e, t, n) {
            let i = e.lineBlockAt(t.head)
                , r = e.moveToLineBoundary(t, n);
            if (r.head == t.head && r.head != (n ? i.to : i.from) && (r = e.moveToLineBoundary(t, n, !1)),
                !n && r.head == i.from && i.length) {
                let n = /^\s*/.exec(e.state.sliceDoc(i.from, Math.min(i.from + 100, i.to)))[0].length;
                n && t.head != i.from + n && (r = o.OF.cursor(i.from + n))
            }
            return r
        }
        function ae(e, t, n) {
            let i = !1
                , r = E(e.selection, (t => {
                    let r = (0,
                        s.jU)(e, t.head, -1) || (0,
                            s.jU)(e, t.head, 1) || t.head > 0 && (0,
                                s.jU)(e, t.head - 1, 1) || t.head < e.doc.length && (0,
                                    s.jU)(e, t.head + 1, -1);
                    if (!r || !r.end)
                        return t;
                    i = !0;
                    let a = r.start.from == t.head ? r.end.to : r.end.from;
                    return n ? o.OF.range(t.anchor, a) : o.OF.cursor(a)
                }
                ));
            return !!i && (t(j(e, r)),
                !0)
        }
        function oe(e, t) {
            let n = E(e.state.selection, (e => {
                let n = t(e);
                return o.OF.range(e.anchor, n.head, n.goalColumn, n.bidiLevel || void 0)
            }
            ));
            return !n.eq(e.state.selection) && (e.dispatch(j(e.state, n)),
                !0)
        }
        function Oe(e, t) {
            return oe(e, (n => e.moveByChar(n, t)))
        }
        const se = e => Oe(e, !D(e))
            , le = e => Oe(e, D(e));
        function ce(e, t) {
            return oe(e, (n => e.moveByGroup(n, t)))
        }
        function ue(e, t) {
            return oe(e, (n => e.moveVertically(n, t)))
        }
        const de = e => ue(e, !1)
            , he = e => ue(e, !0);
        function fe(e, t) {
            return oe(e, (n => e.moveVertically(n, t, ee(e).height)))
        }
        const pe = e => fe(e, !1)
            , me = e => fe(e, !0)
            , ge = e => {
                let { state: t, dispatch: n } = e;
                return n(j(t, {
                    anchor: 0
                })),
                    !0
            }
            , Qe = e => {
                let { state: t, dispatch: n } = e;
                return n(j(t, {
                    anchor: t.doc.length
                })),
                    !0
            }
            , $e = e => {
                let { state: t, dispatch: n } = e;
                return n(j(t, {
                    anchor: t.selection.main.anchor,
                    head: 0
                })),
                    !0
            }
            , be = e => {
                let { state: t, dispatch: n } = e;
                return n(j(t, {
                    anchor: t.selection.main.anchor,
                    head: t.doc.length
                })),
                    !0
            }
            ;
        function ye(e, t) {
            if (e.state.readOnly)
                return !1;
            let n = "delete.selection"
                , { state: i } = e
                , r = i.changeByRange((i => {
                    let { from: r, to: a } = i;
                    if (r == a) {
                        let o = t(i);
                        o < r ? (n = "delete.backward",
                            o = Se(e, o, !1)) : o > r && (n = "delete.forward",
                                o = Se(e, o, !0)),
                            r = Math.min(r, o),
                            a = Math.max(a, o)
                    } else
                        r = Se(e, r, !1),
                            a = Se(e, a, !0);
                    return r == a ? {
                        range: i
                    } : {
                        changes: {
                            from: r,
                            to: a
                        },
                        range: o.OF.cursor(r, r < i.head ? -1 : 1)
                    }
                }
                ));
            return !r.changes.empty && (e.dispatch(i.update(r, {
                scrollIntoView: !0,
                userEvent: n,
                effects: "delete.selection" == n ? O.Lz.announce.of(i.phrase("Selection deleted")) : void 0
            })),
                !0)
        }
        function Se(e, t, n) {
            if (e instanceof O.Lz)
                for (let i of e.state.facet(O.Lz.atomicRanges).map((t => t(e))))
                    i.between(t, t, ((e, i) => {
                        e < t && i > t && (t = n ? i : e)
                    }
                    ));
            return t
        }
        const Pe = (e, t, n) => ye(e, (i => {
            let r, a, O = i.from, { state: l } = e, c = l.doc.lineAt(O);
            if (n && !t && O > c.from && O < c.from + 200 && !/[^ \t]/.test(r = c.text.slice(0, O - c.from))) {
                if ("\t" == r[r.length - 1])
                    return O - 1;
                let e = (0,
                    o.y$)(r, l.tabSize) % (0,
                        s.tp)(l) || (0,
                            s.tp)(l);
                for (let t = 0; t < e && " " == r[r.length - 1 - t]; t++)
                    O--;
                a = O
            } else
                a = (0,
                    o.zK)(c.text, O - c.from, t, t) + c.from,
                    a == O && c.number != (t ? l.doc.lines : 1) ? a += t ? 1 : -1 : !t && /[\ufe00-\ufe0f]/.test(c.text.slice(a - c.from, O - c.from)) && (a = (0,
                        o.zK)(c.text, a - c.from, !1, !1) + c.from);
            return a
        }
        ))
            , ve = e => Pe(e, !1, !0)
            , xe = e => Pe(e, !0, !1)
            , ke = (e, t) => ye(e, (n => {
                let i = n.head
                    , { state: r } = e
                    , a = r.doc.lineAt(i)
                    , O = r.charCategorizer(i);
                for (let e = null; ;) {
                    if (i == (t ? a.to : a.from)) {
                        i == n.head && a.number != (t ? r.doc.lines : 1) && (i += t ? 1 : -1);
                        break
                    }
                    let s = (0,
                        o.zK)(a.text, i - a.from, t) + a.from
                        , l = a.text.slice(Math.min(i, s) - a.from, Math.max(i, s) - a.from)
                        , c = O(l);
                    if (null != e && c != e)
                        break;
                    " " == l && i == n.head || (e = c),
                        i = s
                }
                return i
            }
            ))
            , we = e => ke(e, !1);
        function Xe(e) {
            let t = []
                , n = -1;
            for (let i of e.selection.ranges) {
                let r = e.doc.lineAt(i.from)
                    , a = e.doc.lineAt(i.to);
                if (i.empty || i.to != a.from || (a = e.doc.lineAt(i.to - 1)),
                    n >= r.number) {
                    let e = t[t.length - 1];
                    e.to = a.to,
                        e.ranges.push(i)
                } else
                    t.push({
                        from: r.from,
                        to: a.to,
                        ranges: [i]
                    });
                n = a.number + 1
            }
            return t
        }
        function _e(e, t, n) {
            if (e.readOnly)
                return !1;
            let i = []
                , r = [];
            for (let a of Xe(e)) {
                if (n ? a.to == e.doc.length : 0 == a.from)
                    continue;
                let t = e.doc.lineAt(n ? a.to + 1 : a.from - 1)
                    , O = t.length + 1;
                if (n) {
                    i.push({
                        from: a.to,
                        to: t.to
                    }, {
                        from: a.from,
                        insert: t.text + e.lineBreak
                    });
                    for (let t of a.ranges)
                        r.push(o.OF.range(Math.min(e.doc.length, t.anchor + O), Math.min(e.doc.length, t.head + O)))
                } else {
                    i.push({
                        from: t.from,
                        to: a.from
                    }, {
                        from: a.to,
                        insert: e.lineBreak + t.text
                    });
                    for (let e of a.ranges)
                        r.push(o.OF.range(e.anchor - O, e.head - O))
                }
            }
            return !!i.length && (t(e.update({
                changes: i,
                scrollIntoView: !0,
                selection: o.OF.create(r, e.selection.mainIndex),
                userEvent: "move.line"
            })),
                !0)
        }
        function Te(e, t, n) {
            if (e.readOnly)
                return !1;
            let i = [];
            for (let r of Xe(e))
                n ? i.push({
                    from: r.from,
                    insert: e.doc.slice(r.from, r.to) + e.lineBreak
                }) : i.push({
                    from: r.to,
                    insert: e.lineBreak + e.doc.slice(r.from, r.to)
                });
            return t(e.update({
                changes: i,
                scrollIntoView: !0,
                userEvent: "input.copyline"
            })),
                !0
        }
        const ze = Re(!1);
        function Re(e) {
            return t => {
                let { state: n, dispatch: i } = t;
                if (n.readOnly)
                    return !1;
                let r = n.changeByRange((t => {
                    let { from: i, to: r } = t
                        , a = n.doc.lineAt(i)
                        , O = !e && i == r && function (e, t) {
                            if (/\(\)|\[\]|\{\}/.test(e.sliceDoc(t - 1, t + 1)))
                                return {
                                    from: t,
                                    to: t
                                };
                            let n, i = (0,
                                s.mv)(e).resolveInner(t), r = i.childBefore(t), a = i.childAfter(t);
                            return r && a && r.to <= t && a.from >= t && (n = r.type.prop(l.uY.closedBy)) && n.indexOf(a.name) > -1 && e.doc.lineAt(r.to).from == e.doc.lineAt(a.from).from && !/\S/.test(e.sliceDoc(r.to, a.from)) ? {
                                from: r.to,
                                to: a.from
                            } : null
                        }(n, i);
                    e && (i = r = (r <= a.to ? a : n.doc.lineAt(r)).to);
                    let c = new s.KB(n, {
                        simulateBreak: i,
                        simulateDoubleBreak: !!O
                    })
                        , u = (0,
                            s._v)(c, i);
                    for (null == u && (u = (0,
                        o.y$)(/^\s*/.exec(n.doc.lineAt(i).text)[0], n.tabSize)); r < a.to && /\s/.test(a.text[r - a.from]);)
                        r++;
                    O ? ({ from: i, to: r } = O) : i > a.from && i < a.from + 100 && !/\S/.test(a.text.slice(0, i)) && (i = a.from);
                    let d = ["", (0,
                        s.EI)(n, u)];
                    return O && d.push((0,
                        s.EI)(n, c.lineIndent(a.from, -1))),
                    {
                        changes: {
                            from: i,
                            to: r,
                            insert: o.EY.of(d)
                        },
                        range: o.OF.cursor(i + 1 + d[1].length)
                    }
                }
                ));
                return i(n.update(r, {
                    scrollIntoView: !0,
                    userEvent: "input"
                })),
                    !0
            }
        }
        function We(e, t) {
            let n = -1;
            return e.changeByRange((i => {
                let r = [];
                for (let o = i.from; o <= i.to;) {
                    let a = e.doc.lineAt(o);
                    a.number > n && (i.empty || i.to > a.from) && (t(a, r, i),
                        n = a.number),
                        o = a.to + 1
                }
                let a = e.changes(r);
                return {
                    changes: r,
                    range: o.OF.range(a.mapPos(i.anchor, 1), a.mapPos(i.head, 1))
                }
            }
            ))
        }
        const Ze = e => {
            let { state: t, dispatch: n } = e;
            return !t.readOnly && (n(t.update(We(t, ((e, n) => {
                n.push({
                    from: e.from,
                    insert: t.facet(s.Xt)
                })
            }
            )), {
                userEvent: "input.indent"
            })),
                !0)
        }
            , qe = e => {
                let { state: t, dispatch: n } = e;
                return !t.readOnly && (n(t.update(We(t, ((e, n) => {
                    let i = /^\s*/.exec(e.text)[0];
                    if (!i)
                        return;
                    let r = (0,
                        o.y$)(i, t.tabSize)
                        , a = 0
                        , O = (0,
                            s.EI)(t, Math.max(0, r - (0,
                                s.tp)(t)));
                    for (; a < i.length && a < O.length && i.charCodeAt(a) == O.charCodeAt(a);)
                        a++;
                    n.push({
                        from: e.from + a,
                        to: e.from + i.length,
                        insert: O.slice(a)
                    })
                }
                )), {
                    userEvent: "delete.dedent"
                })),
                    !0)
            }
            , Ue = [{
                key: "Alt-ArrowLeft",
                mac: "Ctrl-ArrowLeft",
                run: e => C(e, (t => B(e.state, t, !D(e)))),
                shift: e => oe(e, (t => B(e.state, t, !D(e))))
            }, {
                key: "Alt-ArrowRight",
                mac: "Ctrl-ArrowRight",
                run: e => C(e, (t => B(e.state, t, D(e)))),
                shift: e => oe(e, (t => B(e.state, t, D(e))))
            }, {
                key: "Alt-ArrowUp",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    return _e(t, n, !1)
                }
            }, {
                key: "Shift-Alt-ArrowUp",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    return Te(t, n, !1)
                }
            }, {
                key: "Alt-ArrowDown",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    return _e(t, n, !0)
                }
            }, {
                key: "Shift-Alt-ArrowDown",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    return Te(t, n, !0)
                }
            }, {
                key: "Escape",
                run: e => {
                    let { state: t, dispatch: n } = e
                        , i = t.selection
                        , r = null;
                    return i.ranges.length > 1 ? r = o.OF.create([i.main]) : i.main.empty || (r = o.OF.create([o.OF.cursor(i.main.head)])),
                        !!r && (n(j(t, r)),
                            !0)
                }
            }, {
                key: "Mod-Enter",
                run: Re(!0)
            }, {
                key: "Alt-l",
                mac: "Ctrl-l",
                run: e => {
                    let { state: t, dispatch: n } = e
                        , i = Xe(t).map((e => {
                            let { from: n, to: i } = e;
                            return o.OF.range(n, Math.min(i + 1, t.doc.length))
                        }
                        ));
                    return n(t.update({
                        selection: o.OF.create(i),
                        userEvent: "select"
                    })),
                        !0
                }
            }, {
                key: "Mod-i",
                run: e => {
                    let { state: t, dispatch: n } = e
                        , i = E(t.selection, (e => {
                            var n;
                            for (let i = (0,
                                s.mv)(t).resolveStack(e.from, 1); i; i = i.next) {
                                let { node: t } = i;
                                if ((t.from < e.from && t.to >= e.to || t.to > e.to && t.from <= e.from) && (null === (n = t.parent) || void 0 === n ? void 0 : n.parent))
                                    return o.OF.range(t.to, t.from)
                            }
                            return e
                        }
                        ));
                    return n(j(t, i)),
                        !0
                }
                ,
                preventDefault: !0
            }, {
                key: "Mod-[",
                run: qe
            }, {
                key: "Mod-]",
                run: Ze
            }, {
                key: "Mod-Alt-\\",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    if (t.readOnly)
                        return !1;
                    let i = Object.create(null)
                        , r = new s.KB(t, {
                            overrideIndentation: e => {
                                let t = i[e];
                                return null == t ? -1 : t
                            }
                        })
                        , a = We(t, ((e, n, a) => {
                            let o = (0,
                                s._v)(r, e.from);
                            if (null == o)
                                return;
                            /\S/.test(e.text) || (o = 0);
                            let O = /^\s*/.exec(e.text)[0]
                                , l = (0,
                                    s.EI)(t, o);
                            (O != l || a.from < e.from + O.length) && (i[e.from] = o,
                                n.push({
                                    from: e.from,
                                    to: e.from + O.length,
                                    insert: l
                                }))
                        }
                        ));
                    return a.changes.empty || n(t.update(a, {
                        userEvent: "indent"
                    })),
                        !0
                }
            }, {
                key: "Shift-Mod-k",
                run: e => {
                    if (e.state.readOnly)
                        return !1;
                    let { state: t } = e
                        , n = t.changes(Xe(t).map((e => {
                            let { from: n, to: i } = e;
                            return n > 0 ? n-- : i < t.doc.length && i++,
                            {
                                from: n,
                                to: i
                            }
                        }
                        )))
                        , i = E(t.selection, (t => {
                            let n;
                            if (e.lineWrapping) {
                                let i = e.lineBlockAt(t.head)
                                    , r = e.coordsAtPos(t.head, t.assoc || 1);
                                r && (n = i.bottom + e.documentTop - r.bottom + e.defaultLineHeight / 2)
                            }
                            return e.moveVertically(t, !0, n)
                        }
                        )).map(n);
                    return e.dispatch({
                        changes: n,
                        selection: i,
                        scrollIntoView: !0,
                        userEvent: "delete.line"
                    }),
                        !0
                }
            }, {
                key: "Shift-Mod-\\",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    return ae(t, n, !1)
                }
            }, {
                key: "Mod-/",
                run: e => {
                    let { state: t } = e
                        , n = t.doc.lineAt(t.selection.main.from)
                        , i = f(e.state, n.from);
                    return i.line ? u(e) : !!i.block && h(e)
                }
            }, {
                key: "Alt-A",
                run: d
            }, {
                key: "Ctrl-m",
                mac: "Shift-Alt-m",
                run: e => (e.setTabFocusMode(),
                    !0)
            }].concat([{
                key: "ArrowLeft",
                run: N,
                shift: se,
                preventDefault: !0
            }, {
                key: "Mod-ArrowLeft",
                mac: "Alt-ArrowLeft",
                run: e => M(e, !D(e)),
                shift: e => ce(e, !D(e)),
                preventDefault: !0
            }, {
                mac: "Cmd-ArrowLeft",
                run: e => C(e, (t => re(e, t, !D(e)))),
                shift: e => oe(e, (t => re(e, t, !D(e)))),
                preventDefault: !0
            }, {
                key: "ArrowRight",
                run: L,
                shift: le,
                preventDefault: !0
            }, {
                key: "Mod-ArrowRight",
                mac: "Alt-ArrowRight",
                run: e => M(e, D(e)),
                shift: e => ce(e, D(e)),
                preventDefault: !0
            }, {
                mac: "Cmd-ArrowRight",
                run: e => C(e, (t => re(e, t, D(e)))),
                shift: e => oe(e, (t => re(e, t, D(e)))),
                preventDefault: !0
            }, {
                key: "ArrowUp",
                run: K,
                shift: de,
                preventDefault: !0
            }, {
                mac: "Cmd-ArrowUp",
                run: ge,
                shift: $e
            }, {
                mac: "Ctrl-ArrowUp",
                run: ne,
                shift: pe
            }, {
                key: "ArrowDown",
                run: J,
                shift: he,
                preventDefault: !0
            }, {
                mac: "Cmd-ArrowDown",
                run: Qe,
                shift: be
            }, {
                mac: "Ctrl-ArrowDown",
                run: ie,
                shift: me
            }, {
                key: "PageUp",
                run: ne,
                shift: pe
            }, {
                key: "PageDown",
                run: ie,
                shift: me
            }, {
                key: "Home",
                run: e => C(e, (t => re(e, t, !1))),
                shift: e => oe(e, (t => re(e, t, !1))),
                preventDefault: !0
            }, {
                key: "Mod-Home",
                run: ge,
                shift: $e
            }, {
                key: "End",
                run: e => C(e, (t => re(e, t, !0))),
                shift: e => oe(e, (t => re(e, t, !0))),
                preventDefault: !0
            }, {
                key: "Mod-End",
                run: Qe,
                shift: be
            }, {
                key: "Enter",
                run: ze
            }, {
                key: "Mod-a",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    return n(t.update({
                        selection: {
                            anchor: 0,
                            head: t.doc.length
                        },
                        userEvent: "select"
                    })),
                        !0
                }
            }, {
                key: "Backspace",
                run: ve,
                shift: ve
            }, {
                key: "Delete",
                run: xe
            }, {
                key: "Mod-Backspace",
                mac: "Alt-Backspace",
                run: we
            }, {
                key: "Mod-Delete",
                mac: "Alt-Delete",
                run: e => ke(e, !0)
            }, {
                mac: "Mod-Backspace",
                run: e => ye(e, (t => {
                    let n = e.moveToLineBoundary(t, !1).head;
                    return t.head > n ? n : Math.max(0, t.head - 1)
                }
                ))
            }, {
                mac: "Mod-Delete",
                run: e => ye(e, (t => {
                    let n = e.moveToLineBoundary(t, !0).head;
                    return t.head < n ? n : Math.min(e.state.doc.length, t.head + 1)
                }
                ))
            }].concat([{
                key: "Ctrl-b",
                run: N,
                shift: se,
                preventDefault: !0
            }, {
                key: "Ctrl-f",
                run: L,
                shift: le
            }, {
                key: "Ctrl-p",
                run: K,
                shift: de
            }, {
                key: "Ctrl-n",
                run: J,
                shift: he
            }, {
                key: "Ctrl-a",
                run: e => C(e, (t => o.OF.cursor(e.lineBlockAt(t.head).from, 1))),
                shift: e => oe(e, (t => o.OF.cursor(e.lineBlockAt(t.head).from)))
            }, {
                key: "Ctrl-e",
                run: e => C(e, (t => o.OF.cursor(e.lineBlockAt(t.head).to, -1))),
                shift: e => oe(e, (t => o.OF.cursor(e.lineBlockAt(t.head).to)))
            }, {
                key: "Ctrl-d",
                run: xe
            }, {
                key: "Ctrl-h",
                run: ve
            }, {
                key: "Ctrl-k",
                run: e => ye(e, (t => {
                    let n = e.lineBlockAt(t.head).to;
                    return t.head < n ? n : Math.min(e.state.doc.length, t.head + 1)
                }
                ))
            }, {
                key: "Ctrl-Alt-h",
                run: we
            }, {
                key: "Ctrl-o",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    if (t.readOnly)
                        return !1;
                    let i = t.changeByRange((e => ({
                        changes: {
                            from: e.from,
                            to: e.to,
                            insert: o.EY.of(["", ""])
                        },
                        range: o.OF.cursor(e.from)
                    })));
                    return n(t.update(i, {
                        scrollIntoView: !0,
                        userEvent: "input"
                    })),
                        !0
                }
            }, {
                key: "Ctrl-t",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    if (t.readOnly)
                        return !1;
                    let i = t.changeByRange((e => {
                        if (!e.empty || 0 == e.from || e.from == t.doc.length)
                            return {
                                range: e
                            };
                        let n = e.from
                            , i = t.doc.lineAt(n)
                            , r = n == i.from ? n - 1 : (0,
                                o.zK)(i.text, n - i.from, !1) + i.from
                            , a = n == i.to ? n + 1 : (0,
                                o.zK)(i.text, n - i.from, !0) + i.from;
                        return {
                            changes: {
                                from: r,
                                to: a,
                                insert: t.doc.slice(n, a).append(t.doc.slice(r, n))
                            },
                            range: o.OF.cursor(a)
                        }
                    }
                    ));
                    return !i.changes.empty && (n(t.update(i, {
                        scrollIntoView: !0,
                        userEvent: "move.character"
                    })),
                        !0)
                }
            }, {
                key: "Ctrl-v",
                run: ie
            }].map((e => ({
                mac: e.key,
                run: e.run,
                shift: e.shift
            })))))
            , Ye = {
                key: "Tab",
                run: Ze,
                shift: qe
            };
        function Ae() {
            var e = arguments[0];
            "string" == typeof e && (e = document.createElement(e));
            var t = 1
                , n = arguments[1];
            if (n && "object" == typeof n && null == n.nodeType && !Array.isArray(n)) {
                for (var i in n)
                    if (Object.prototype.hasOwnProperty.call(n, i)) {
                        var r = n[i];
                        "string" == typeof r ? e.setAttribute(i, r) : null != r && (e[i] = r)
                    }
                t++
            }
            for (; t < arguments.length; t++)
                Ve(e, arguments[t]);
            return e
        }
        function Ve(e, t) {
            if ("string" == typeof t)
                e.appendChild(document.createTextNode(t));
            else if (null == t)
                ;
            else if (null != t.nodeType)
                e.appendChild(t);
            else {
                if (!Array.isArray(t))
                    throw new RangeError("Unsupported child node: " + t);
                for (var n = 0; n < t.length; n++)
                    Ve(e, t[n])
            }
        }
        const Ee = "function" == typeof String.prototype.normalize ? e => e.normalize("NFKD") : e => e;
        class je {
            constructor(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : e.length
                    , r = arguments.length > 4 ? arguments[4] : void 0
                    , a = arguments.length > 5 ? arguments[5] : void 0;
                this.test = a,
                    this.value = {
                        from: 0,
                        to: 0
                    },
                    this.done = !1,
                    this.matches = [],
                    this.buffer = "",
                    this.bufferPos = 0,
                    this.iter = e.iterRange(n, i),
                    this.bufferStart = n,
                    this.normalize = r ? e => r(Ee(e)) : Ee,
                    this.query = this.normalize(t)
            }
            peek() {
                if (this.bufferPos == this.buffer.length) {
                    if (this.bufferStart += this.buffer.length,
                        this.iter.next(),
                        this.iter.done)
                        return -1;
                    this.bufferPos = 0,
                        this.buffer = this.iter.value
                }
                return (0,
                    o.vS)(this.buffer, this.bufferPos)
            }
            next() {
                for (; this.matches.length;)
                    this.matches.pop();
                return this.nextOverlapping()
            }
            nextOverlapping() {
                for (; ;) {
                    let e = this.peek();
                    if (e < 0)
                        return this.done = !0,
                            this;
                    let t = (0,
                        o.MK)(e)
                        , n = this.bufferStart + this.bufferPos;
                    this.bufferPos += (0,
                        o.Fh)(e);
                    let i = this.normalize(t);
                    for (let r = 0, a = n; ; r++) {
                        let e = i.charCodeAt(r)
                            , o = this.match(e, a, this.bufferPos + this.bufferStart);
                        if (r == i.length - 1) {
                            if (o)
                                return this.value = o,
                                    this;
                            break
                        }
                        a == n && r < t.length && t.charCodeAt(r) == e && a++
                    }
                }
            }
            match(e, t, n) {
                let i = null;
                for (let r = 0; r < this.matches.length; r += 2) {
                    let t = this.matches[r]
                        , a = !1;
                    this.query.charCodeAt(t) == e && (t == this.query.length - 1 ? i = {
                        from: this.matches[r + 1],
                        to: n
                    } : (this.matches[r]++,
                        a = !0)),
                        a || (this.matches.splice(r, 2),
                            r -= 2)
                }
                return this.query.charCodeAt(0) == e && (1 == this.query.length ? i = {
                    from: t,
                    to: n
                } : this.matches.push(1, t)),
                    i && this.test && !this.test(i.from, i.to, this.buffer, this.bufferStart) && (i = null),
                    i
            }
        }
        "undefined" != typeof Symbol && (je.prototype[Symbol.iterator] = function () {
            return this
        }
        );
        const Ce = {
            from: -1,
            to: -1,
            match: /.*/.exec("")
        }
            , Ge = "gm" + (null == /x/.unicode ? "" : "u");
        class Ie {
            constructor(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
                    , r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : e.length;
                if (this.text = e,
                    this.to = r,
                    this.curLine = "",
                    this.done = !1,
                    this.value = Ce,
                    /\\[sWDnr]|\n|\r|\[\^/.test(t))
                    return new Le(e, t, n, i, r);
                this.re = new RegExp(t, Ge + ((null === n || void 0 === n ? void 0 : n.ignoreCase) ? "i" : "")),
                    this.test = null === n || void 0 === n ? void 0 : n.test,
                    this.iter = e.iter();
                let a = e.lineAt(i);
                this.curLineStart = a.from,
                    this.matchPos = Me(e, i),
                    this.getLine(this.curLineStart)
            }
            getLine(e) {
                this.iter.next(e),
                    this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value,
                        this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)),
                        this.iter.next())
            }
            nextLine() {
                this.curLineStart = this.curLineStart + this.curLine.length + 1,
                    this.curLineStart > this.to ? this.curLine = "" : this.getLine(0)
            }
            next() {
                for (let e = this.matchPos - this.curLineStart; ;) {
                    this.re.lastIndex = e;
                    let t = this.matchPos <= this.to && this.re.exec(this.curLine);
                    if (t) {
                        let n = this.curLineStart + t.index
                            , i = n + t[0].length;
                        if (this.matchPos = Me(this.text, i + (n == i ? 1 : 0)),
                            n == this.curLineStart + this.curLine.length && this.nextLine(),
                            (n < i || n > this.value.to) && (!this.test || this.test(n, i, t)))
                            return this.value = {
                                from: n,
                                to: i,
                                match: t
                            },
                                this;
                        e = this.matchPos - this.curLineStart
                    } else {
                        if (!(this.curLineStart + this.curLine.length < this.to))
                            return this.done = !0,
                                this;
                        this.nextLine(),
                            e = 0
                    }
                }
            }
        }
        const De = new WeakMap;
        class Ne {
            constructor(e, t) {
                this.from = e,
                    this.text = t
            }
            get to() {
                return this.from + this.text.length
            }
            static get(e, t, n) {
                let i = De.get(e);
                if (!i || i.from >= n || i.to <= t) {
                    let i = new Ne(t, e.sliceString(t, n));
                    return De.set(e, i),
                        i
                }
                if (i.from == t && i.to == n)
                    return i;
                let { text: r, from: a } = i;
                return a > t && (r = e.sliceString(t, a) + r,
                    a = t),
                    i.to < n && (r += e.sliceString(i.to, n)),
                    De.set(e, new Ne(a, r)),
                    new Ne(t, r.slice(t - a, n - a))
            }
        }
        class Le {
            constructor(e, t, n, i, r) {
                this.text = e,
                    this.to = r,
                    this.done = !1,
                    this.value = Ce,
                    this.matchPos = Me(e, i),
                    this.re = new RegExp(t, Ge + ((null === n || void 0 === n ? void 0 : n.ignoreCase) ? "i" : "")),
                    this.test = null === n || void 0 === n ? void 0 : n.test,
                    this.flat = Ne.get(e, i, this.chunkEnd(i + 5e3))
            }
            chunkEnd(e) {
                return e >= this.to ? this.to : this.text.lineAt(e).to
            }
            next() {
                for (; ;) {
                    let e = this.re.lastIndex = this.matchPos - this.flat.from
                        , t = this.re.exec(this.flat.text);
                    if (t && !t[0] && t.index == e && (this.re.lastIndex = e + 1,
                        t = this.re.exec(this.flat.text)),
                        t) {
                        let e = this.flat.from + t.index
                            , n = e + t[0].length;
                        if ((this.flat.to >= this.to || t.index + t[0].length <= this.flat.text.length - 10) && (!this.test || this.test(e, n, t)))
                            return this.value = {
                                from: e,
                                to: n,
                                match: t
                            },
                                this.matchPos = Me(this.text, n + (e == n ? 1 : 0)),
                                this
                    }
                    if (this.flat.to == this.to)
                        return this.done = !0,
                            this;
                    this.flat = Ne.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + 2 * this.flat.text.length))
                }
            }
        }
        function Me(e, t) {
            if (t >= e.length)
                return t;
            let n, i = e.lineAt(t);
            for (; t < i.to && (n = i.text.charCodeAt(t - i.from)) >= 56320 && n < 57344;)
                t++;
            return t
        }
        function Fe(e) {
            let t = Ae("input", {
                class: "cm-textfield",
                name: "line",
                value: String(e.state.doc.lineAt(e.state.selection.main.head).number)
            });
            function n() {
                let n = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value);
                if (!n)
                    return;
                let { state: i } = e
                    , r = i.doc.lineAt(i.selection.main.head)
                    , [, a, s, l, c] = n
                    , u = l ? +l.slice(1) : 0
                    , d = s ? +s : r.number;
                if (s && c) {
                    let e = d / 100;
                    a && (e = e * ("-" == a ? -1 : 1) + r.number / i.doc.lines),
                        d = Math.round(i.doc.lines * e)
                } else
                    s && a && (d = d * ("-" == a ? -1 : 1) + r.number);
                let h = i.doc.line(Math.max(1, Math.min(i.doc.lines, d)))
                    , f = o.OF.cursor(h.from + Math.max(0, Math.min(u, h.length)));
                e.dispatch({
                    effects: [Be.of(!1), O.Lz.scrollIntoView(f.from, {
                        y: "center"
                    })],
                    selection: f
                }),
                    e.focus()
            }
            return {
                dom: Ae("form", {
                    class: "cm-gotoLine",
                    onkeydown: t => {
                        27 == t.keyCode ? (t.preventDefault(),
                            e.dispatch({
                                effects: Be.of(!1)
                            }),
                            e.focus()) : 13 == t.keyCode && (t.preventDefault(),
                                n())
                    }
                    ,
                    onsubmit: e => {
                        e.preventDefault(),
                            n()
                    }
                }, Ae("label", e.state.phrase("Go to line"), ": ", t), " ", Ae("button", {
                    class: "cm-button",
                    type: "submit"
                }, e.state.phrase("go")))
            }
        }
        "undefined" != typeof Symbol && (Ie.prototype[Symbol.iterator] = Le.prototype[Symbol.iterator] = function () {
            return this
        }
        );
        const Be = o.Pe.define()
            , He = o.sU.define({
                create: () => !0,
                update(e, t) {
                    for (let n of t.effects)
                        n.is(Be) && (e = n.value);
                    return e
                },
                provide: e => O.S7.from(e, (e => e ? Fe : null))
            })
            , Ke = O.Lz.baseTheme({
                ".cm-panel.cm-gotoLine": {
                    padding: "2px 6px 4px",
                    "& label": {
                        fontSize: "80%"
                    }
                }
            })
            , Je = {
                highlightWordAroundCursor: !1,
                minSelectionLength: 1,
                maxMatches: 100,
                wholeWords: !1
            }
            , et = o.sj.define({
                combine: e => (0,
                    o.QR)(e, Je, {
                        highlightWordAroundCursor: (e, t) => e || t,
                        minSelectionLength: Math.min,
                        maxMatches: Math.min
                    })
            });
        const tt = O.NZ.mark({
            class: "cm-selectionMatch"
        })
            , nt = O.NZ.mark({
                class: "cm-selectionMatch cm-selectionMatch-main"
            });
        function it(e, t, n, i) {
            return (0 == n || e(t.sliceDoc(n - 1, n)) != o.Je.Word) && (i == t.doc.length || e(t.sliceDoc(i, i + 1)) != o.Je.Word)
        }
        const rt = O.Z9.fromClass(class {
            constructor(e) {
                this.decorations = this.getDeco(e)
            }
            update(e) {
                (e.selectionSet || e.docChanged || e.viewportChanged) && (this.decorations = this.getDeco(e.view))
            }
            getDeco(e) {
                let t = e.state.facet(et)
                    , { state: n } = e
                    , i = n.selection;
                if (i.ranges.length > 1)
                    return O.NZ.none;
                let r, a = i.main, s = null;
                if (a.empty) {
                    if (!t.highlightWordAroundCursor)
                        return O.NZ.none;
                    let e = n.wordAt(a.head);
                    if (!e)
                        return O.NZ.none;
                    s = n.charCategorizer(a.head),
                        r = n.sliceDoc(e.from, e.to)
                } else {
                    let e = a.to - a.from;
                    if (e < t.minSelectionLength || e > 200)
                        return O.NZ.none;
                    if (t.wholeWords) {
                        if (r = n.sliceDoc(a.from, a.to),
                            s = n.charCategorizer(a.head),
                            !it(s, n, a.from, a.to) || !function (e, t, n, i) {
                                return e(t.sliceDoc(n, n + 1)) == o.Je.Word && e(t.sliceDoc(i - 1, i)) == o.Je.Word
                            }(s, n, a.from, a.to))
                            return O.NZ.none
                    } else if (r = n.sliceDoc(a.from, a.to),
                        !r)
                        return O.NZ.none
                }
                let l = [];
                for (let o of e.visibleRanges) {
                    let e = new je(n.doc, r, o.from, o.to);
                    for (; !e.next().done;) {
                        let { from: i, to: r } = e.value;
                        if ((!s || it(s, n, i, r)) && (a.empty && i <= a.from && r >= a.to ? l.push(nt.range(i, r)) : (i >= a.to || r <= a.from) && l.push(tt.range(i, r)),
                            l.length > t.maxMatches))
                            return O.NZ.none
                    }
                }
                return O.NZ.set(l)
            }
        }
            , {
                decorations: e => e.decorations
            })
            , at = O.Lz.baseTheme({
                ".cm-selectionMatch": {
                    backgroundColor: "#99ff7780"
                },
                ".cm-searchMatch .cm-selectionMatch": {
                    backgroundColor: "transparent"
                }
            });
        const ot = o.sj.define({
            combine: e => (0,
                o.QR)(e, {
                    top: !1,
                    caseSensitive: !1,
                    literal: !1,
                    regexp: !1,
                    wholeWord: !1,
                    createPanel: e => new qt(e),
                    scrollToMatch: e => O.Lz.scrollIntoView(e)
                })
        });
        class Ot {
            constructor(e) {
                this.search = e.search,
                    this.caseSensitive = !!e.caseSensitive,
                    this.literal = !!e.literal,
                    this.regexp = !!e.regexp,
                    this.replace = e.replace || "",
                    this.valid = !!this.search && (!this.regexp || function (e) {
                        try {
                            return new RegExp(e, Ge),
                                !0
                        } catch (t) {
                            return !1
                        }
                    }(this.search)),
                    this.unquoted = this.unquote(this.search),
                    this.wholeWord = !!e.wholeWord
            }
            unquote(e) {
                return this.literal ? e : e.replace(/\\([nrt\\])/g, ((e, t) => "n" == t ? "\n" : "r" == t ? "\r" : "t" == t ? "\t" : "\\"))
            }
            eq(e) {
                return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp && this.wholeWord == e.wholeWord
            }
            create() {
                return this.regexp ? new ft(this) : new ct(this)
            }
            getCursor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = arguments.length > 2 ? arguments[2] : void 0
                    , i = e.doc ? e : o.$t.create({
                        doc: e
                    });
                return null == n && (n = i.doc.length),
                    this.regexp ? ut(this, i, t, n) : lt(this, i, t, n)
            }
        }
        class st {
            constructor(e) {
                this.spec = e
            }
        }
        function lt(e, t, n, i) {
            return new je(t.doc, e.unquoted, n, i, e.caseSensitive ? void 0 : e => e.toLowerCase(), e.wholeWord ? (r = t.doc,
                a = t.charCategorizer(t.selection.main.head),
                (e, t, n, i) => ((i > e || i + n.length < t) && (i = Math.max(0, e - 2),
                    n = r.sliceString(i, Math.min(r.length, t + 2))),
                    (a(dt(n, e - i)) != o.Je.Word || a(ht(n, e - i)) != o.Je.Word) && (a(ht(n, t - i)) != o.Je.Word || a(dt(n, t - i)) != o.Je.Word))) : void 0);
            var r, a
        }
        class ct extends st {
            constructor(e) {
                super(e)
            }
            nextMatch(e, t, n) {
                let i = lt(this.spec, e, n, e.doc.length).nextOverlapping();
                return i.done && (i = lt(this.spec, e, 0, t).nextOverlapping()),
                    i.done ? null : i.value
            }
            prevMatchInRange(e, t, n) {
                for (let i = n; ;) {
                    let n = Math.max(t, i - 1e4 - this.spec.unquoted.length)
                        , r = lt(this.spec, e, n, i)
                        , a = null;
                    for (; !r.nextOverlapping().done;)
                        a = r.value;
                    if (a)
                        return a;
                    if (n == t)
                        return null;
                    i -= 1e4
                }
            }
            prevMatch(e, t, n) {
                return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, n, e.doc.length)
            }
            getReplacement(e) {
                return this.spec.unquote(this.spec.replace)
            }
            matchAll(e, t) {
                let n = lt(this.spec, e, 0, e.doc.length)
                    , i = [];
                for (; !n.next().done;) {
                    if (i.length >= t)
                        return null;
                    i.push(n.value)
                }
                return i
            }
            highlight(e, t, n, i) {
                let r = lt(this.spec, e, Math.max(0, t - this.spec.unquoted.length), Math.min(n + this.spec.unquoted.length, e.doc.length));
                for (; !r.next().done;)
                    i(r.value.from, r.value.to)
            }
        }
        function ut(e, t, n, i) {
            return new Ie(t.doc, e.search, {
                ignoreCase: !e.caseSensitive,
                test: e.wholeWord ? (r = t.charCategorizer(t.selection.main.head),
                    (e, t, n) => !n[0].length || (r(dt(n.input, n.index)) != o.Je.Word || r(ht(n.input, n.index)) != o.Je.Word) && (r(ht(n.input, n.index + n[0].length)) != o.Je.Word || r(dt(n.input, n.index + n[0].length)) != o.Je.Word)) : void 0
            }, n, i);
            var r
        }
        function dt(e, t) {
            return e.slice((0,
                o.zK)(e, t, !1), t)
        }
        function ht(e, t) {
            return e.slice(t, (0,
                o.zK)(e, t))
        }
        class ft extends st {
            nextMatch(e, t, n) {
                let i = ut(this.spec, e, n, e.doc.length).next();
                return i.done && (i = ut(this.spec, e, 0, t).next()),
                    i.done ? null : i.value
            }
            prevMatchInRange(e, t, n) {
                for (let i = 1; ; i++) {
                    let r = Math.max(t, n - 1e4 * i)
                        , a = ut(this.spec, e, r, n)
                        , o = null;
                    for (; !a.next().done;)
                        o = a.value;
                    if (o && (r == t || o.from > r + 10))
                        return o;
                    if (r == t)
                        return null
                }
            }
            prevMatch(e, t, n) {
                return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, n, e.doc.length)
            }
            getReplacement(e) {
                return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, ((t, n) => "$" == n ? "$" : "&" == n ? e.match[0] : "0" != n && +n < e.match.length ? e.match[n] : t))
            }
            matchAll(e, t) {
                let n = ut(this.spec, e, 0, e.doc.length)
                    , i = [];
                for (; !n.next().done;) {
                    if (i.length >= t)
                        return null;
                    i.push(n.value)
                }
                return i
            }
            highlight(e, t, n, i) {
                let r = ut(this.spec, e, Math.max(0, t - 250), Math.min(n + 250, e.doc.length));
                for (; !r.next().done;)
                    i(r.value.from, r.value.to)
            }
        }
        const pt = o.Pe.define()
            , mt = o.Pe.define()
            , gt = o.sU.define({
                create: e => new Qt(_t(e).create(), null),
                update(e, t) {
                    for (let n of t.effects)
                        n.is(pt) ? e = new Qt(n.value.create(), e.panel) : n.is(mt) && (e = new Qt(e.query, n.value ? Xt : null));
                    return e
                },
                provide: e => O.S7.from(e, (e => e.panel))
            });
        class Qt {
            constructor(e, t) {
                this.query = e,
                    this.panel = t
            }
        }
        const $t = O.NZ.mark({
            class: "cm-searchMatch"
        })
            , bt = O.NZ.mark({
                class: "cm-searchMatch cm-searchMatch-selected"
            })
            , yt = O.Z9.fromClass(class {
                constructor(e) {
                    this.view = e,
                        this.decorations = this.highlight(e.state.field(gt))
                }
                update(e) {
                    let t = e.state.field(gt);
                    (t != e.startState.field(gt) || e.docChanged || e.selectionSet || e.viewportChanged) && (this.decorations = this.highlight(t))
                }
                highlight(e) {
                    let { query: t, panel: n } = e;
                    if (!n || !t.spec.valid)
                        return O.NZ.none;
                    let { view: i } = this
                        , r = new o.vB;
                    for (let a = 0, o = i.visibleRanges, O = o.length; a < O; a++) {
                        let { from: e, to: n } = o[a];
                        for (; a < O - 1 && n > o[a + 1].from - 500;)
                            n = o[++a].to;
                        t.highlight(i.state, e, n, ((e, t) => {
                            let n = i.state.selection.ranges.some((n => n.from == e && n.to == t));
                            r.add(e, t, n ? bt : $t)
                        }
                        ))
                    }
                    return r.finish()
                }
            }
                , {
                    decorations: e => e.decorations
                });
        function St(e) {
            return t => {
                let n = t.state.field(gt, !1);
                return n && n.query.spec.valid ? e(t, n) : Rt(t)
            }
        }
        const Pt = St(((e, t) => {
            let { query: n } = t
                , { to: i } = e.state.selection.main
                , r = n.nextMatch(e.state, i, i);
            if (!r)
                return !1;
            let a = o.OF.single(r.from, r.to)
                , O = e.state.facet(ot);
            return e.dispatch({
                selection: a,
                effects: [Vt(e, r), O.scrollToMatch(a.main, e)],
                userEvent: "select.search"
            }),
                zt(e),
                !0
        }
        ))
            , vt = St(((e, t) => {
                let { query: n } = t
                    , { state: i } = e
                    , { from: r } = i.selection.main
                    , a = n.prevMatch(i, r, r);
                if (!a)
                    return !1;
                let O = o.OF.single(a.from, a.to)
                    , s = e.state.facet(ot);
                return e.dispatch({
                    selection: O,
                    effects: [Vt(e, a), s.scrollToMatch(O.main, e)],
                    userEvent: "select.search"
                }),
                    zt(e),
                    !0
            }
            ))
            , xt = St(((e, t) => {
                let { query: n } = t
                    , i = n.matchAll(e.state, 1e3);
                return !(!i || !i.length) && (e.dispatch({
                    selection: o.OF.create(i.map((e => o.OF.range(e.from, e.to)))),
                    userEvent: "select.search.matches"
                }),
                    !0)
            }
            ))
            , kt = St(((e, t) => {
                let { query: n } = t
                    , { state: i } = e
                    , { from: r, to: a } = i.selection.main;
                if (i.readOnly)
                    return !1;
                let s = n.nextMatch(i, r, r);
                if (!s)
                    return !1;
                let l, c, u = [], d = [];
                if (s.from == r && s.to == a && (c = i.toText(n.getReplacement(s)),
                    u.push({
                        from: s.from,
                        to: s.to,
                        insert: c
                    }),
                    s = n.nextMatch(i, s.from, s.to),
                    d.push(O.Lz.announce.of(i.phrase("replaced match on line $", i.doc.lineAt(r).number) + "."))),
                    s) {
                    let t = 0 == u.length || u[0].from >= s.to ? 0 : s.to - s.from - c.length;
                    l = o.OF.single(s.from - t, s.to - t),
                        d.push(Vt(e, s)),
                        d.push(i.facet(ot).scrollToMatch(l.main, e))
                }
                return e.dispatch({
                    changes: u,
                    selection: l,
                    effects: d,
                    userEvent: "input.replace"
                }),
                    !0
            }
            ))
            , wt = St(((e, t) => {
                let { query: n } = t;
                if (e.state.readOnly)
                    return !1;
                let i = n.matchAll(e.state, 1e9).map((e => {
                    let { from: t, to: i } = e;
                    return {
                        from: t,
                        to: i,
                        insert: n.getReplacement(e)
                    }
                }
                ));
                if (!i.length)
                    return !1;
                let r = e.state.phrase("replaced $ matches", i.length) + ".";
                return e.dispatch({
                    changes: i,
                    effects: O.Lz.announce.of(r),
                    userEvent: "input.replace.all"
                }),
                    !0
            }
            ));
        function Xt(e) {
            return e.state.facet(ot).createPanel(e)
        }
        function _t(e, t) {
            var n, i, r, a, o;
            let O = e.selection.main
                , s = O.empty || O.to > O.from + 100 ? "" : e.sliceDoc(O.from, O.to);
            if (t && !s)
                return t;
            let l = e.facet(ot);
            return new Ot({
                search: (null !== (n = null === t || void 0 === t ? void 0 : t.literal) && void 0 !== n ? n : l.literal) ? s : s.replace(/\n/g, "\\n"),
                caseSensitive: null !== (i = null === t || void 0 === t ? void 0 : t.caseSensitive) && void 0 !== i ? i : l.caseSensitive,
                literal: null !== (r = null === t || void 0 === t ? void 0 : t.literal) && void 0 !== r ? r : l.literal,
                regexp: null !== (a = null === t || void 0 === t ? void 0 : t.regexp) && void 0 !== a ? a : l.regexp,
                wholeWord: null !== (o = null === t || void 0 === t ? void 0 : t.wholeWord) && void 0 !== o ? o : l.wholeWord
            })
        }
        function Tt(e) {
            let t = (0,
                O.ld)(e, Xt);
            return t && t.dom.querySelector("[main-field]")
        }
        function zt(e) {
            let t = Tt(e);
            t && t == e.root.activeElement && t.select()
        }
        const Rt = e => {
            let t = e.state.field(gt, !1);
            if (t && t.panel) {
                let n = Tt(e);
                if (n && n != e.root.activeElement) {
                    let i = _t(e.state, t.query.spec);
                    i.valid && e.dispatch({
                        effects: pt.of(i)
                    }),
                        n.focus(),
                        n.select()
                }
            } else
                e.dispatch({
                    effects: [mt.of(!0), t ? pt.of(_t(e.state, t.query.spec)) : o.Pe.appendConfig.of(jt)]
                });
            return !0
        }
            , Wt = e => {
                let t = e.state.field(gt, !1);
                if (!t || !t.panel)
                    return !1;
                let n = (0,
                    O.ld)(e, Xt);
                return n && n.dom.contains(e.root.activeElement) && e.focus(),
                    e.dispatch({
                        effects: mt.of(!1)
                    }),
                    !0
            }
            , Zt = [{
                key: "Mod-f",
                run: Rt,
                scope: "editor search-panel"
            }, {
                key: "F3",
                run: Pt,
                shift: vt,
                scope: "editor search-panel",
                preventDefault: !0
            }, {
                key: "Mod-g",
                run: Pt,
                shift: vt,
                scope: "editor search-panel",
                preventDefault: !0
            }, {
                key: "Escape",
                run: Wt,
                scope: "editor search-panel"
            }, {
                key: "Mod-Shift-l",
                run: e => {
                    let { state: t, dispatch: n } = e
                        , i = t.selection;
                    if (i.ranges.length > 1 || i.main.empty)
                        return !1;
                    let { from: r, to: a } = i.main
                        , O = []
                        , s = 0;
                    for (let l = new je(t.doc, t.sliceDoc(r, a)); !l.next().done;) {
                        if (O.length > 1e3)
                            return !1;
                        l.value.from == r && (s = O.length),
                            O.push(o.OF.range(l.value.from, l.value.to))
                    }
                    return n(t.update({
                        selection: o.OF.create(O, s),
                        userEvent: "select.search.matches"
                    })),
                        !0
                }
            }, {
                key: "Mod-Alt-g",
                run: e => {
                    let t = (0,
                        O.ld)(e, Fe);
                    if (!t) {
                        let n = [Be.of(!0)];
                        null == e.state.field(He, !1) && n.push(o.Pe.appendConfig.of([He, Ke])),
                            e.dispatch({
                                effects: n
                            }),
                            t = (0,
                                O.ld)(e, Fe)
                    }
                    return t && t.dom.querySelector("input").select(),
                        !0
                }
            }, {
                key: "Mod-d",
                run: e => {
                    let { state: t, dispatch: n } = e
                        , { ranges: i } = t.selection;
                    if (i.some((e => e.from === e.to)))
                        return (e => {
                            let { state: t, dispatch: n } = e
                                , { selection: i } = t
                                , r = o.OF.create(i.ranges.map((e => t.wordAt(e.head) || o.OF.cursor(e.head))), i.mainIndex);
                            return !r.eq(i) && (n(t.update({
                                selection: r
                            })),
                                !0)
                        }
                        )({
                            state: t,
                            dispatch: n
                        });
                    let r = t.sliceDoc(i[0].from, i[0].to);
                    if (t.selection.ranges.some((e => t.sliceDoc(e.from, e.to) != r)))
                        return !1;
                    let a = function (e, t) {
                        let { main: n, ranges: i } = e.selection
                            , r = e.wordAt(n.head)
                            , a = r && r.from == n.from && r.to == n.to;
                        for (let o = !1, O = new je(e.doc, t, i[i.length - 1].to); ;) {
                            if (O.next(),
                                !O.done) {
                                if (o && i.some((e => e.from == O.value.from)))
                                    continue;
                                if (a) {
                                    let t = e.wordAt(O.value.from);
                                    if (!t || t.from != O.value.from || t.to != O.value.to)
                                        continue
                                }
                                return O.value
                            }
                            if (o)
                                return null;
                            O = new je(e.doc, t, 0, Math.max(0, i[i.length - 1].from - 1)),
                                o = !0
                        }
                    }(t, r);
                    return !!a && (n(t.update({
                        selection: t.selection.addRange(o.OF.range(a.from, a.to), !1),
                        effects: O.Lz.scrollIntoView(a.to)
                    })),
                        !0)
                }
                ,
                preventDefault: !0
            }];
        class qt {
            constructor(e) {
                this.view = e;
                let t = this.query = e.state.field(gt).query.spec;
                function n(e, t, n) {
                    return Ae("button", {
                        class: "cm-button",
                        name: e,
                        onclick: t,
                        type: "button"
                    }, n)
                }
                this.commit = this.commit.bind(this),
                    this.searchField = Ae("input", {
                        value: t.search,
                        placeholder: Ut(e, "Find"),
                        "aria-label": Ut(e, "Find"),
                        class: "cm-textfield",
                        name: "search",
                        form: "",
                        "main-field": "true",
                        onchange: this.commit,
                        onkeyup: this.commit
                    }),
                    this.replaceField = Ae("input", {
                        value: t.replace,
                        placeholder: Ut(e, "Replace"),
                        "aria-label": Ut(e, "Replace"),
                        class: "cm-textfield",
                        name: "replace",
                        form: "",
                        onchange: this.commit,
                        onkeyup: this.commit
                    }),
                    this.caseField = Ae("input", {
                        type: "checkbox",
                        name: "case",
                        form: "",
                        checked: t.caseSensitive,
                        onchange: this.commit
                    }),
                    this.reField = Ae("input", {
                        type: "checkbox",
                        name: "re",
                        form: "",
                        checked: t.regexp,
                        onchange: this.commit
                    }),
                    this.wordField = Ae("input", {
                        type: "checkbox",
                        name: "word",
                        form: "",
                        checked: t.wholeWord,
                        onchange: this.commit
                    }),
                    this.dom = Ae("div", {
                        onkeydown: e => this.keydown(e),
                        class: "cm-search"
                    }, [this.searchField, n("next", (() => Pt(e)), [Ut(e, "next")]), n("prev", (() => vt(e)), [Ut(e, "previous")]), n("select", (() => xt(e)), [Ut(e, "all")]), Ae("label", null, [this.caseField, Ut(e, "match case")]), Ae("label", null, [this.reField, Ut(e, "regexp")]), Ae("label", null, [this.wordField, Ut(e, "by word")]), ...e.state.readOnly ? [] : [Ae("br"), this.replaceField, n("replace", (() => kt(e)), [Ut(e, "replace")]), n("replaceAll", (() => wt(e)), [Ut(e, "replace all")])], Ae("button", {
                        name: "close",
                        onclick: () => Wt(e),
                        "aria-label": Ut(e, "close"),
                        type: "button"
                    }, ["\xd7"])])
            }
            commit() {
                let e = new Ot({
                    search: this.searchField.value,
                    caseSensitive: this.caseField.checked,
                    regexp: this.reField.checked,
                    wholeWord: this.wordField.checked,
                    replace: this.replaceField.value
                });
                e.eq(this.query) || (this.query = e,
                    this.view.dispatch({
                        effects: pt.of(e)
                    }))
            }
            keydown(e) {
                (0,
                    O.TS)(this.view, e, "search-panel") ? e.preventDefault() : 13 == e.keyCode && e.target == this.searchField ? (e.preventDefault(),
                        (e.shiftKey ? vt : Pt)(this.view)) : 13 == e.keyCode && e.target == this.replaceField && (e.preventDefault(),
                            kt(this.view))
            }
            update(e) {
                for (let t of e.transactions)
                    for (let e of t.effects)
                        e.is(pt) && !e.value.eq(this.query) && this.setQuery(e.value)
            }
            setQuery(e) {
                this.query = e,
                    this.searchField.value = e.search,
                    this.replaceField.value = e.replace,
                    this.caseField.checked = e.caseSensitive,
                    this.reField.checked = e.regexp,
                    this.wordField.checked = e.wholeWord
            }
            mount() {
                this.searchField.select()
            }
            get pos() {
                return 80
            }
            get top() {
                return this.view.state.facet(ot).top
            }
        }
        function Ut(e, t) {
            return e.state.phrase(t)
        }
        const Yt = 30
            , At = /[\s\.,:;?!]/;
        function Vt(e, t) {
            let { from: n, to: i } = t
                , r = e.state.doc.lineAt(n)
                , a = e.state.doc.lineAt(i).to
                , o = Math.max(r.from, n - Yt)
                , s = Math.min(a, i + Yt)
                , l = e.state.sliceDoc(o, s);
            if (o != r.from)
                for (let O = 0; O < Yt; O++)
                    if (!At.test(l[O + 1]) && At.test(l[O])) {
                        l = l.slice(O);
                        break
                    }
            if (s != a)
                for (let O = l.length - 1; O > l.length - Yt; O--)
                    if (!At.test(l[O - 1]) && At.test(l[O])) {
                        l = l.slice(0, O);
                        break
                    }
            return O.Lz.announce.of(`${e.state.phrase("current match")}. ${l} ${e.state.phrase("on line")} ${r.number}.`)
        }
        const Et = O.Lz.baseTheme({
            ".cm-panel.cm-search": {
                padding: "2px 6px 4px",
                position: "relative",
                "& [name=close]": {
                    position: "absolute",
                    top: "0",
                    right: "4px",
                    backgroundColor: "inherit",
                    border: "none",
                    font: "inherit",
                    padding: 0,
                    margin: 0
                },
                "& input, & button, & label": {
                    margin: ".2em .6em .2em 0"
                },
                "& input[type=checkbox]": {
                    marginRight: ".2em"
                },
                "& label": {
                    fontSize: "80%",
                    whiteSpace: "pre"
                }
            },
            "&light .cm-searchMatch": {
                backgroundColor: "#ffff0054"
            },
            "&dark .cm-searchMatch": {
                backgroundColor: "#00ffff8a"
            },
            "&light .cm-searchMatch-selected": {
                backgroundColor: "#ff6a0054"
            },
            "&dark .cm-searchMatch-selected": {
                backgroundColor: "#ff00ff8a"
            }
        })
            , jt = [gt, o.Nb.low(yt), Et];
        var Ct = n(46774);
        class Gt {
            constructor(e, t, n) {
                this.from = e,
                    this.to = t,
                    this.diagnostic = n
            }
        }
        class It {
            constructor(e, t, n) {
                this.diagnostics = e,
                    this.panel = t,
                    this.selected = n
            }
            static init(e, t, n) {
                let i = e
                    , r = n.facet(rn).markerFilter;
                r && (i = r(i, n));
                let a = O.NZ.set(i.map((e => e.from == e.to || e.from == e.to - 1 && n.doc.lineAt(e.from).to == e.from ? O.NZ.widget({
                    widget: new On(e),
                    diagnostic: e
                }).range(e.from) : O.NZ.mark({
                    attributes: {
                        class: "cm-lintRange cm-lintRange-" + e.severity + (e.markClass ? " " + e.markClass : "")
                    },
                    diagnostic: e
                }).range(e.from, e.to))), !0);
                return new It(a, t, Dt(a))
            }
        }
        function Dt(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null
                , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                , i = null;
            return e.between(n, 1e9, ((e, n, r) => {
                let { spec: a } = r;
                if (!t || a.diagnostic == t)
                    return i = new Gt(e, n, a.diagnostic),
                        !1
            }
            )),
                i
        }
        function Nt(e, t) {
            let n = t.pos
                , i = t.end || n
                , r = e.state.facet(rn).hideOn(e, n, i);
            if (null != r)
                return r;
            let a = e.startState.doc.lineAt(t.pos);
            return !(!e.effects.some((e => e.is(Mt))) && !e.changes.touchesRange(a.from, Math.max(a.to, i)))
        }
        function Lt(e, t) {
            return e.field(Ht, !1) ? t : t.concat(o.Pe.appendConfig.of(hn))
        }
        const Mt = o.Pe.define()
            , Ft = o.Pe.define()
            , Bt = o.Pe.define()
            , Ht = o.sU.define({
                create: () => new It(O.NZ.none, null, null),
                update(e, t) {
                    if (t.docChanged && e.diagnostics.size) {
                        let n = e.diagnostics.map(t.changes)
                            , i = null
                            , r = e.panel;
                        if (e.selected) {
                            let r = t.changes.mapPos(e.selected.from, 1);
                            i = Dt(n, e.selected.diagnostic, r) || Dt(n, null, r)
                        }
                        !n.size && r && t.state.facet(rn).autoPanel && (r = null),
                            e = new It(n, r, i)
                    }
                    for (let n of t.effects)
                        if (n.is(Mt)) {
                            let i = t.state.facet(rn).autoPanel ? n.value.length ? ln.open : null : e.panel;
                            e = It.init(n.value, i, t.state)
                        } else
                            n.is(Ft) ? e = new It(e.diagnostics, n.value ? ln.open : null, e.selected) : n.is(Bt) && (e = new It(e.diagnostics, e.panel, n.value));
                    return e
                },
                provide: e => [O.S7.from(e, (e => e.panel)), O.Lz.decorations.from(e, (e => e.diagnostics))]
            });
        const Kt = O.NZ.mark({
            class: "cm-lintRange cm-lintRange-active"
        });
        function Jt(e, t, n) {
            let { diagnostics: i } = e.state.field(Ht)
                , r = []
                , a = 2e8
                , o = 0;
            i.between(t - (n < 0 ? 1 : 0), t + (n > 0 ? 1 : 0), ((e, i, O) => {
                let { spec: s } = O;
                t >= e && t <= i && (e == i || (t > e || n > 0) && (t < i || n < 0)) && (r.push(s.diagnostic),
                    a = Math.min(e, a),
                    o = Math.max(i, o))
            }
            ));
            let O = e.state.facet(rn).tooltipFilter;
            return O && (r = O(r, e.state)),
                r.length ? {
                    pos: a,
                    end: o,
                    above: e.state.doc.lineAt(a).to < o,
                    create: () => ({
                        dom: en(e, r)
                    })
                } : null
        }
        function en(e, t) {
            return Ae("ul", {
                class: "cm-tooltip-lint"
            }, t.map((t => on(e, t, !1))))
        }
        const tn = e => {
            let t = e.state.field(Ht, !1);
            return !(!t || !t.panel) && (e.dispatch({
                effects: Ft.of(!1)
            }),
                !0)
        }
            , nn = [{
                key: "Mod-Shift-m",
                run: e => {
                    let t = e.state.field(Ht, !1);
                    t && t.panel || e.dispatch({
                        effects: Lt(e.state, [Ft.of(!0)])
                    });
                    let n = (0,
                        O.ld)(e, ln.open);
                    return n && n.dom.querySelector(".cm-panel-lint ul").focus(),
                        !0
                }
                ,
                preventDefault: !0
            }, {
                key: "F8",
                run: e => {
                    let t = e.state.field(Ht, !1);
                    if (!t)
                        return !1;
                    let n = e.state.selection.main
                        , i = t.diagnostics.iter(n.to + 1);
                    return !(!i.value && (i = t.diagnostics.iter(0),
                        !i.value || i.from == n.from && i.to == n.to)) && (e.dispatch({
                            selection: {
                                anchor: i.from,
                                head: i.to
                            },
                            scrollIntoView: !0
                        }),
                            !0)
                }
            }]
            , rn = o.sj.define({
                combine: e => Object.assign({
                    sources: e.map((e => e.source)).filter((e => null != e))
                }, (0,
                    o.QR)(e.map((e => e.config)), {
                        delay: 750,
                        markerFilter: null,
                        tooltipFilter: null,
                        needsRefresh: null,
                        hideOn: () => null
                    }, {
                        needsRefresh: (e, t) => e ? t ? n => e(n) || t(n) : e : t
                    }))
            });
        function an(e) {
            let t = [];
            if (e)
                e: for (let { name: n } of e) {
                    for (let e = 0; e < n.length; e++) {
                        let i = n[e];
                        if (/[a-zA-Z]/.test(i) && !t.some((e => e.toLowerCase() == i.toLowerCase()))) {
                            t.push(i);
                            continue e
                        }
                    }
                    t.push("")
                }
            return t
        }
        function on(e, t, n) {
            var i;
            let r = n ? an(t.actions) : [];
            return Ae("li", {
                class: "cm-diagnostic cm-diagnostic-" + t.severity
            }, Ae("span", {
                class: "cm-diagnosticText"
            }, t.renderMessage ? t.renderMessage(e) : t.message), null === (i = t.actions) || void 0 === i ? void 0 : i.map(((n, i) => {
                let a = !1
                    , o = i => {
                        if (i.preventDefault(),
                            a)
                            return;
                        a = !0;
                        let r = Dt(e.state.field(Ht).diagnostics, t);
                        r && n.apply(e, r.from, r.to)
                    }
                    , { name: O } = n
                    , s = r[i] ? O.indexOf(r[i]) : -1
                    , l = s < 0 ? O : [O.slice(0, s), Ae("u", O.slice(s, s + 1)), O.slice(s + 1)];
                return Ae("button", {
                    type: "button",
                    class: "cm-diagnosticAction",
                    onclick: o,
                    onmousedown: o,
                    "aria-label": ` Action: ${O}${s < 0 ? "" : ` (access key "${r[i]})"`}.`
                }, l)
            }
            )), t.source && Ae("div", {
                class: "cm-diagnosticSource"
            }, t.source))
        }
        class On extends O.xO {
            constructor(e) {
                super(),
                    this.diagnostic = e
            }
            eq(e) {
                return e.diagnostic == this.diagnostic
            }
            toDOM() {
                return Ae("span", {
                    class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
                })
            }
        }
        class sn {
            constructor(e, t) {
                this.diagnostic = t,
                    this.id = "item_" + Math.floor(4294967295 * Math.random()).toString(16),
                    this.dom = on(e, t, !0),
                    this.dom.id = this.id,
                    this.dom.setAttribute("role", "option")
            }
        }
        class ln {
            constructor(e) {
                this.view = e,
                    this.items = [];
                this.list = Ae("ul", {
                    tabIndex: 0,
                    role: "listbox",
                    "aria-label": this.view.state.phrase("Diagnostics"),
                    onkeydown: t => {
                        if (27 == t.keyCode)
                            tn(this.view),
                                this.view.focus();
                        else if (38 == t.keyCode || 33 == t.keyCode)
                            this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                        else if (40 == t.keyCode || 34 == t.keyCode)
                            this.moveSelection((this.selectedIndex + 1) % this.items.length);
                        else if (36 == t.keyCode)
                            this.moveSelection(0);
                        else if (35 == t.keyCode)
                            this.moveSelection(this.items.length - 1);
                        else if (13 == t.keyCode)
                            this.view.focus();
                        else {
                            if (!(t.keyCode >= 65 && t.keyCode <= 90 && this.selectedIndex >= 0))
                                return;
                            {
                                let { diagnostic: n } = this.items[this.selectedIndex]
                                    , i = an(n.actions);
                                for (let r = 0; r < i.length; r++)
                                    if (i[r].toUpperCase().charCodeAt(0) == t.keyCode) {
                                        let t = Dt(this.view.state.field(Ht).diagnostics, n);
                                        t && n.actions[r].apply(e, t.from, t.to)
                                    }
                            }
                        }
                        t.preventDefault()
                    }
                    ,
                    onclick: e => {
                        for (let t = 0; t < this.items.length; t++)
                            this.items[t].dom.contains(e.target) && this.moveSelection(t)
                    }
                }),
                    this.dom = Ae("div", {
                        class: "cm-panel-lint"
                    }, this.list, Ae("button", {
                        type: "button",
                        name: "close",
                        "aria-label": this.view.state.phrase("close"),
                        onclick: () => tn(this.view)
                    }, "\xd7")),
                    this.update()
            }
            get selectedIndex() {
                let e = this.view.state.field(Ht).selected;
                if (!e)
                    return -1;
                for (let t = 0; t < this.items.length; t++)
                    if (this.items[t].diagnostic == e.diagnostic)
                        return t;
                return -1
            }
            update() {
                let { diagnostics: e, selected: t } = this.view.state.field(Ht)
                    , n = 0
                    , i = !1
                    , r = null;
                for (e.between(0, this.view.state.doc.length, ((e, a, o) => {
                    let O, { spec: s } = o, l = -1;
                    for (let t = n; t < this.items.length; t++)
                        if (this.items[t].diagnostic == s.diagnostic) {
                            l = t;
                            break
                        }
                    l < 0 ? (O = new sn(this.view, s.diagnostic),
                        this.items.splice(n, 0, O),
                        i = !0) : (O = this.items[l],
                            l > n && (this.items.splice(n, l - n),
                                i = !0)),
                        t && O.diagnostic == t.diagnostic ? O.dom.hasAttribute("aria-selected") || (O.dom.setAttribute("aria-selected", "true"),
                            r = O) : O.dom.hasAttribute("aria-selected") && O.dom.removeAttribute("aria-selected"),
                        n++
                }
                )); n < this.items.length && !(1 == this.items.length && this.items[0].diagnostic.from < 0);)
                    i = !0,
                        this.items.pop();
                0 == this.items.length && (this.items.push(new sn(this.view, {
                    from: -1,
                    to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                })),
                    i = !0),
                    r ? (this.list.setAttribute("aria-activedescendant", r.id),
                        this.view.requestMeasure({
                            key: this,
                            read: () => ({
                                sel: r.dom.getBoundingClientRect(),
                                panel: this.list.getBoundingClientRect()
                            }),
                            write: e => {
                                let { sel: t, panel: n } = e
                                    , i = n.height / this.list.offsetHeight;
                                t.top < n.top ? this.list.scrollTop -= (n.top - t.top) / i : t.bottom > n.bottom && (this.list.scrollTop += (t.bottom - n.bottom) / i)
                            }
                        })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"),
                    i && this.sync()
            }
            sync() {
                let e = this.list.firstChild;
                function t() {
                    let t = e;
                    e = t.nextSibling,
                        t.remove()
                }
                for (let n of this.items)
                    if (n.dom.parentNode == this.list) {
                        for (; e != n.dom;)
                            t();
                        e = n.dom.nextSibling
                    } else
                        this.list.insertBefore(n.dom, e);
                for (; e;)
                    t()
            }
            moveSelection(e) {
                if (this.selectedIndex < 0)
                    return;
                let t = Dt(this.view.state.field(Ht).diagnostics, this.items[e].diagnostic);
                t && this.view.dispatch({
                    selection: {
                        anchor: t.from,
                        head: t.to
                    },
                    scrollIntoView: !0,
                    effects: Bt.of(t)
                })
            }
            static open(e) {
                return new ln(e)
            }
        }
        function cn(e) {
            return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 'viewBox="0 0 40 40"'}>${encodeURIComponent(e)}</svg>')`
        }
        function un(e) {
            return cn(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${e}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"')
        }
        const dn = O.Lz.baseTheme({
            ".cm-diagnostic": {
                padding: "3px 6px 3px 8px",
                marginLeft: "-1px",
                display: "block",
                whiteSpace: "pre-wrap"
            },
            ".cm-diagnostic-error": {
                borderLeft: "5px solid #d11"
            },
            ".cm-diagnostic-warning": {
                borderLeft: "5px solid orange"
            },
            ".cm-diagnostic-info": {
                borderLeft: "5px solid #999"
            },
            ".cm-diagnostic-hint": {
                borderLeft: "5px solid #66d"
            },
            ".cm-diagnosticAction": {
                font: "inherit",
                border: "none",
                padding: "2px 4px",
                backgroundColor: "#444",
                color: "white",
                borderRadius: "3px",
                marginLeft: "8px",
                cursor: "pointer"
            },
            ".cm-diagnosticSource": {
                fontSize: "70%",
                opacity: .7
            },
            ".cm-lintRange": {
                backgroundPosition: "left bottom",
                backgroundRepeat: "repeat-x",
                paddingBottom: "0.7px"
            },
            ".cm-lintRange-error": {
                backgroundImage: un("#d11")
            },
            ".cm-lintRange-warning": {
                backgroundImage: un("orange")
            },
            ".cm-lintRange-info": {
                backgroundImage: un("#999")
            },
            ".cm-lintRange-hint": {
                backgroundImage: un("#66d")
            },
            ".cm-lintRange-active": {
                backgroundColor: "#ffdd9980"
            },
            ".cm-tooltip-lint": {
                padding: 0,
                margin: 0
            },
            ".cm-lintPoint": {
                position: "relative",
                "&:after": {
                    content: '""',
                    position: "absolute",
                    bottom: 0,
                    left: "-2px",
                    borderLeft: "3px solid transparent",
                    borderRight: "3px solid transparent",
                    borderBottom: "4px solid #d11"
                }
            },
            ".cm-lintPoint-warning": {
                "&:after": {
                    borderBottomColor: "orange"
                }
            },
            ".cm-lintPoint-info": {
                "&:after": {
                    borderBottomColor: "#999"
                }
            },
            ".cm-lintPoint-hint": {
                "&:after": {
                    borderBottomColor: "#66d"
                }
            },
            ".cm-panel.cm-panel-lint": {
                position: "relative",
                "& ul": {
                    maxHeight: "100px",
                    overflowY: "auto",
                    "& [aria-selected]": {
                        backgroundColor: "#ddd",
                        "& u": {
                            textDecoration: "underline"
                        }
                    },
                    "&:focus [aria-selected]": {
                        background_fallback: "#bdf",
                        backgroundColor: "Highlight",
                        color_fallback: "white",
                        color: "HighlightText"
                    },
                    "& u": {
                        textDecoration: "none"
                    },
                    padding: 0,
                    margin: 0
                },
                "& [name=close]": {
                    position: "absolute",
                    top: "0",
                    right: "2px",
                    background: "inherit",
                    border: "none",
                    font: "inherit",
                    padding: 0,
                    margin: 0
                }
            }
        });
        O.wJ;
        const hn = [Ht, O.Lz.decorations.compute([Ht], (e => {
            let { selected: t, panel: n } = e.field(Ht);
            return t && n && t.from != t.to ? O.NZ.set([Kt.range(t.from, t.to)]) : O.NZ.none
        }
        )), (0,
            O.Ux)(Jt, {
                hideOn: Nt
            }), dn];
        var fn = function (e) {
            void 0 === e && (e = {});
            var t = [];
            !1 !== e.closeBracketsKeymap && (t = t.concat(Ct.Bc)),
                !1 !== e.defaultKeymap && (t = t.concat(Ue)),
                !1 !== e.searchKeymap && (t = t.concat(Zt)),
                !1 !== e.historyKeymap && (t = t.concat(V)),
                !1 !== e.foldKeymap && (t = t.concat(s.f7)),
                !1 !== e.completionKeymap && (t = t.concat(Ct.OO)),
                !1 !== e.lintKeymap && (t = t.concat(nn));
            var n = [];
            return !1 !== e.lineNumbers && n.push((0,
                O.$K)()),
                !1 !== e.highlightActiveLineGutter && n.push((0,
                    O.Wu)()),
                !1 !== e.highlightSpecialChars && n.push((0,
                    O.N$)()),
                !1 !== e.history && n.push(function () {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    return [S, y.of(e), O.Lz.domEventHandlers({
                        beforeinput(e, t) {
                            let n = "historyUndo" == e.inputType ? v : "historyRedo" == e.inputType ? x : null;
                            return !!n && (e.preventDefault(),
                                n(t))
                        }
                    })]
                }()),
                !1 !== e.foldGutter && n.push((0,
                    s.Lv)()),
                !1 !== e.drawSelection && n.push((0,
                    O.VH)()),
                !1 !== e.dropCursor && n.push((0,
                    O.A)()),
                !1 !== e.allowMultipleSelections && n.push(o.$t.allowMultipleSelections.of(!0)),
                !1 !== e.indentOnInput && n.push((0,
                    s.WD)()),
                !1 !== e.syntaxHighlighting && n.push((0,
                    s.y9)(s.Zt, {
                        fallback: !0
                    })),
                !1 !== e.bracketMatching && n.push((0,
                    s.SG)()),
                !1 !== e.closeBrackets && n.push((0,
                    Ct.wm)()),
                !1 !== e.autocompletion && n.push((0,
                    Ct.yU)()),
                !1 !== e.rectangularSelection && n.push((0,
                    O.D4)()),
                !1 !== e.crosshairCursor && n.push((0,
                    O.HJ)()),
                !1 !== e.highlightActiveLine && n.push((0,
                    O.dz)()),
                !1 !== e.highlightSelectionMatches && n.push(function (e) {
                    let t = [at, rt];
                    return e && t.push(et.of(e)),
                        t
                }()),
                e.tabSize && "number" === typeof e.tabSize && n.push(s.Xt.of(" ".repeat(e.tabSize))),
                n.concat([O.w4.of(t.flat())]).filter(Boolean)
        }
            , pn = n(14462);
        const mn = "#e5c07b"
            , gn = "#e06c75"
            , Qn = "#56b6c2"
            , $n = "#ffffff"
            , bn = "#abb2bf"
            , yn = "#7d8799"
            , Sn = "#61afef"
            , Pn = "#98c379"
            , vn = "#d19a66"
            , xn = "#c678dd"
            , kn = "#21252b"
            , wn = "#2c313a"
            , Xn = "#282c34"
            , _n = "#353a42"
            , Tn = "#3E4451"
            , zn = "#528bff"
            , Rn = O.Lz.theme({
                "&": {
                    color: bn,
                    backgroundColor: Xn
                },
                ".cm-content": {
                    caretColor: zn
                },
                ".cm-cursor, .cm-dropCursor": {
                    borderLeftColor: zn
                },
                "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": {
                    backgroundColor: Tn
                },
                ".cm-panels": {
                    backgroundColor: kn,
                    color: bn
                },
                ".cm-panels.cm-panels-top": {
                    borderBottom: "2px solid black"
                },
                ".cm-panels.cm-panels-bottom": {
                    borderTop: "2px solid black"
                },
                ".cm-searchMatch": {
                    backgroundColor: "#72a1ff59",
                    outline: "1px solid #457dff"
                },
                ".cm-searchMatch.cm-searchMatch-selected": {
                    backgroundColor: "#6199ff2f"
                },
                ".cm-activeLine": {
                    backgroundColor: "#6699ff0b"
                },
                ".cm-selectionMatch": {
                    backgroundColor: "#aafe661a"
                },
                "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
                    backgroundColor: "#bad0f847"
                },
                ".cm-gutters": {
                    backgroundColor: Xn,
                    color: yn,
                    border: "none"
                },
                ".cm-activeLineGutter": {
                    backgroundColor: wn
                },
                ".cm-foldPlaceholder": {
                    backgroundColor: "transparent",
                    border: "none",
                    color: "#ddd"
                },
                ".cm-tooltip": {
                    border: "none",
                    backgroundColor: _n
                },
                ".cm-tooltip .cm-tooltip-arrow:before": {
                    borderTopColor: "transparent",
                    borderBottomColor: "transparent"
                },
                ".cm-tooltip .cm-tooltip-arrow:after": {
                    borderTopColor: _n,
                    borderBottomColor: _n
                },
                ".cm-tooltip-autocomplete": {
                    "& > ul > li[aria-selected]": {
                        backgroundColor: wn,
                        color: bn
                    }
                }
            }, {
                dark: !0
            })
            , Wn = s.cr.define([{
                tag: pn._A.keyword,
                color: xn
            }, {
                tag: [pn._A.name, pn._A.deleted, pn._A.character, pn._A.propertyName, pn._A.macroName],
                color: gn
            }, {
                tag: [pn._A.function(pn._A.variableName), pn._A.labelName],
                color: Sn
            }, {
                tag: [pn._A.color, pn._A.constant(pn._A.name), pn._A.standard(pn._A.name)],
                color: vn
            }, {
                tag: [pn._A.definition(pn._A.name), pn._A.separator],
                color: bn
            }, {
                tag: [pn._A.typeName, pn._A.className, pn._A.number, pn._A.changed, pn._A.annotation, pn._A.modifier, pn._A.self, pn._A.namespace],
                color: mn
            }, {
                tag: [pn._A.operator, pn._A.operatorKeyword, pn._A.url, pn._A.escape, pn._A.regexp, pn._A.link, pn._A.special(pn._A.string)],
                color: Qn
            }, {
                tag: [pn._A.meta, pn._A.comment],
                color: yn
            }, {
                tag: pn._A.strong,
                fontWeight: "bold"
            }, {
                tag: pn._A.emphasis,
                fontStyle: "italic"
            }, {
                tag: pn._A.strikethrough,
                textDecoration: "line-through"
            }, {
                tag: pn._A.link,
                color: yn,
                textDecoration: "underline"
            }, {
                tag: pn._A.heading,
                fontWeight: "bold",
                color: gn
            }, {
                tag: [pn._A.atom, pn._A.bool, pn._A.special(pn._A.variableName)],
                color: vn
            }, {
                tag: [pn._A.processingInstruction, pn._A.string, pn._A.inserted],
                color: Pn
            }, {
                tag: pn._A.invalid,
                color: $n
            }])
            , Zn = [Rn, (0,
                s.y9)(Wn)];
        function qn(e) {
            var { value: t, selection: n, onChange: i, onStatistics: a, onCreateEditor: s, onUpdate: l, extensions: c = [], autoFocus: u, theme: d = "light", height: h = "", minHeight: f = "", maxHeight: p = "", placeholder: m = "", width: g = "", minWidth: Q = "", maxWidth: $ = "", editable: b = !0, readOnly: y = !1, indentWithTab: S = !0, basicSetup: P = !0, root: v, initialState: x } = e
                , [k, w] = (0,
                    r.useState)()
                , [X, _] = (0,
                    r.useState)()
                , [T, z] = (0,
                    r.useState)()
                , R = O.Lz.theme({
                    "&": {
                        backgroundColor: "#fff"
                    }
                }, {
                    dark: !1
                })
                , W = O.Lz.theme({
                    "&": {
                        height: h,
                        minHeight: f,
                        maxHeight: p,
                        width: g,
                        minWidth: Q,
                        maxWidth: $
                    }
                })
                , Z = O.Lz.updateListener.of((e => {
                    if (e.docChanged && "function" === typeof i) {
                        var t = e.state.doc.toString();
                        i(t, e)
                    }
                    a && a((e => ({
                        line: e.state.doc.lineAt(e.state.selection.main.from),
                        lineCount: e.state.doc.lines,
                        lineBreak: e.state.lineBreak,
                        length: e.state.doc.length,
                        readOnly: e.state.readOnly,
                        tabSize: e.state.tabSize,
                        selection: e.state.selection,
                        selectionAsSingle: e.state.selection.asSingle().main,
                        ranges: e.state.selection.ranges,
                        selectionCode: e.state.sliceDoc(e.state.selection.main.from, e.state.selection.main.to),
                        selections: e.state.selection.ranges.map((t => e.state.sliceDoc(t.from, t.to))),
                        selectedText: e.state.selection.ranges.some((e => !e.empty))
                    }))(e))
                }
                ))
                , q = [Z, W];
            switch (S && q.unshift(O.w4.of([Ye])),
            P && ("boolean" === typeof P ? q.unshift(fn()) : q.unshift(fn(P))),
            m && q.unshift((0,
                O.qf)(m)),
            d) {
                case "light":
                    q.push(R);
                    break;
                case "dark":
                    q.push(Zn);
                    break;
                default:
                    q.push(d)
            }
            return !1 === b && q.push(O.Lz.editable.of(!1)),
                y && q.push(o.$t.readOnly.of(!0)),
                l && "function" === typeof l && q.push(O.Lz.updateListener.of(l)),
                q = q.concat(c),
                (0,
                    r.useEffect)((() => {
                        if (k && !T) {
                            var e = {
                                doc: t,
                                selection: n,
                                extensions: q
                            }
                                , i = x ? o.$t.fromJSON(x.json, e, x.fields) : o.$t.create(e);
                            if (z(i),
                                !X) {
                                var r = new O.Lz({
                                    state: i,
                                    parent: k,
                                    root: v
                                });
                                _(r),
                                    s && s(r, i)
                            }
                        }
                        return () => {
                            X && (z(void 0),
                                _(void 0))
                        }
                    }
                    ), [k, T]),
                (0,
                    r.useEffect)((() => w(e.container)), [e.container]),
                (0,
                    r.useEffect)((() => () => {
                        X && (X.destroy(),
                            _(void 0))
                    }
                    ), [X]),
                (0,
                    r.useEffect)((() => {
                        u && X && X.focus()
                    }
                    ), [u, X]),
                (0,
                    r.useEffect)((() => {
                        X && X.dispatch({
                            effects: o.Pe.reconfigure.of(q)
                        })
                    }
                    ), [d, c, h, f, p, g, Q, $, m, b, y, S, P, i, l]),
                (0,
                    r.useEffect)((() => {
                        var e = X ? X.state.doc.toString() : "";
                        X && t !== e && X.dispatch({
                            changes: {
                                from: 0,
                                to: e.length,
                                insert: t || ""
                            }
                        })
                    }
                    ), [t, X]),
            {
                state: T,
                setState: z,
                view: X,
                setView: _,
                container: k,
                setContainer: w
            }
        }
        var Un = n(8036)
            , Yn = ["className", "value", "selection", "extensions", "onChange", "onStatistics", "onCreateEditor", "onUpdate", "autoFocus", "theme", "height", "minHeight", "maxHeight", "width", "minWidth", "maxWidth", "basicSetup", "placeholder", "indentWithTab", "editable", "readOnly", "root", "initialState"]
            , An = (0,
                r.forwardRef)(((e, t) => {
                    var { className: n, value: i = "", selection: o, extensions: O = [], onChange: s, onStatistics: l, onCreateEditor: c, onUpdate: u, autoFocus: d, theme: h = "light", height: f, minHeight: p, maxHeight: m, width: g, minWidth: Q, maxWidth: $, basicSetup: b, placeholder: y, indentWithTab: S, editable: P, readOnly: v, root: x, initialState: k } = e
                        , w = function (e, t) {
                            if (null == e)
                                return {};
                            var n = {};
                            for (var i in e)
                                if ({}.hasOwnProperty.call(e, i)) {
                                    if (t.includes(i))
                                        continue;
                                    n[i] = e[i]
                                }
                            return n
                        }(e, Yn)
                        , X = (0,
                            r.useRef)(null)
                        , { state: _, view: T, container: z, setContainer: R } = qn({
                            container: X.current,
                            root: x,
                            value: i,
                            autoFocus: d,
                            theme: h,
                            height: f,
                            minHeight: p,
                            maxHeight: m,
                            width: g,
                            minWidth: Q,
                            maxWidth: $,
                            basicSetup: b,
                            placeholder: y,
                            indentWithTab: S,
                            editable: P,
                            readOnly: v,
                            selection: o,
                            onChange: s,
                            onStatistics: l,
                            onCreateEditor: c,
                            onUpdate: u,
                            extensions: O,
                            initialState: k
                        });
                    if ((0,
                        r.useImperativeHandle)(t, (() => ({
                            editor: X.current,
                            state: _,
                            view: T
                        })), [X, z, _, T]),
                        "string" !== typeof i)
                        throw new Error("value must be typeof string but got " + typeof i);
                    var W = "string" === typeof h ? "cm-theme-" + h : "cm-theme";
                    return (0,
                        Un.jsx)("div", a({
                            ref: X,
                            className: W + (n ? " " + n : "")
                        }, w))
                }
                ));
        An.displayName = "CodeMirror";
        const Vn = An;
        function En(e) {
            return new s.Yy(s.Tg.define(e))
        }
        function jn(e) {
            return n.e(374).then(n.bind(n, 42941)).then((t => t.sql({
                dialect: t[e]
            })))
        }
        const Cn = [s.t$.of({
            name: "C",
            extensions: ["c", "h", "ino"],
            load: () => Promise.resolve().then(n.bind(n, 18227)).then((e => e.cpp()))
        }), s.t$.of({
            name: "C++",
            alias: ["cpp"],
            extensions: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],
            load: () => Promise.resolve().then(n.bind(n, 18227)).then((e => e.cpp()))
        }), s.t$.of({
            name: "CQL",
            alias: ["cassandra"],
            extensions: ["cql"],
            load: () => jn("Cassandra")
        }), s.t$.of({
            name: "CSS",
            extensions: ["css"],
            load: () => Promise.resolve().then(n.bind(n, 72395)).then((e => e.css()))
        }), s.t$.of({
            name: "Go",
            extensions: ["go"],
            load: () => n.e(374).then(n.bind(n, 45517)).then((e => e.go()))
        }), s.t$.of({
            name: "HTML",
            alias: ["xhtml"],
            extensions: ["html", "htm", "handlebars", "hbs"],
            load: () => Promise.resolve().then(n.bind(n, 83182)).then((e => e.html()))
        }), s.t$.of({
            name: "Java",
            extensions: ["java"],
            load: () => Promise.resolve().then(n.bind(n, 62371)).then((e => e.java()))
        }), s.t$.of({
            name: "JavaScript",
            alias: ["ecmascript", "js", "node"],
            extensions: ["js", "mjs", "cjs"],
            load: () => Promise.resolve().then(n.bind(n, 74668)).then((e => e.javascript()))
        }), s.t$.of({
            name: "JSON",
            alias: ["json5"],
            extensions: ["json", "map"],
            load: () => Promise.resolve().then(n.bind(n, 19690)).then((e => e.json()))
        }), s.t$.of({
            name: "JSX",
            extensions: ["jsx"],
            load: () => Promise.resolve().then(n.bind(n, 74668)).then((e => e.javascript({
                jsx: !0
            })))
        }), s.t$.of({
            name: "LESS",
            extensions: ["less"],
            load: () => n.e(374).then(n.bind(n, 4274)).then((e => e.less()))
        }), s.t$.of({
            name: "Liquid",
            extensions: ["liquid"],
            load: () => n.e(374).then(n.bind(n, 91129)).then((e => e.liquid()))
        }), s.t$.of({
            name: "MariaDB SQL",
            load: () => jn("MariaSQL")
        }), s.t$.of({
            name: "Markdown",
            extensions: ["md", "markdown", "mkd"],
            load: () => n.e(374).then(n.bind(n, 31578)).then((e => e.markdown()))
        }), s.t$.of({
            name: "MS SQL",
            load: () => jn("MSSQL")
        }), s.t$.of({
            name: "MySQL",
            load: () => jn("MySQL")
        }), s.t$.of({
            name: "PHP",
            extensions: ["php", "php3", "php4", "php5", "php7", "phtml"],
            load: () => Promise.resolve().then(n.bind(n, 66195)).then((e => e.php()))
        }), s.t$.of({
            name: "PLSQL",
            extensions: ["pls"],
            load: () => jn("PLSQL")
        }), s.t$.of({
            name: "PostgreSQL",
            load: () => jn("PostgreSQL")
        }), s.t$.of({
            name: "Python",
            extensions: ["BUILD", "bzl", "py", "pyw"],
            filename: /^(BUCK|BUILD)$/,
            load: () => n.e(374).then(n.bind(n, 90539)).then((e => e.python()))
        }), s.t$.of({
            name: "Rust",
            extensions: ["rs"],
            load: () => Promise.resolve().then(n.bind(n, 96434)).then((e => e.rust()))
        }), s.t$.of({
            name: "Sass",
            extensions: ["sass"],
            load: () => n.e(374).then(n.bind(n, 11521)).then((e => e.sass({
                indented: !0
            })))
        }), s.t$.of({
            name: "SCSS",
            extensions: ["scss"],
            load: () => n.e(374).then(n.bind(n, 11521)).then((e => e.sass()))
        }), s.t$.of({
            name: "SQL",
            extensions: ["sql"],
            load: () => jn("StandardSQL")
        }), s.t$.of({
            name: "SQLite",
            load: () => jn("SQLite")
        }), s.t$.of({
            name: "TSX",
            extensions: ["tsx"],
            load: () => Promise.resolve().then(n.bind(n, 74668)).then((e => e.javascript({
                jsx: !0,
                typescript: !0
            })))
        }), s.t$.of({
            name: "TypeScript",
            alias: ["ts"],
            extensions: ["ts", "mts", "cts"],
            load: () => Promise.resolve().then(n.bind(n, 74668)).then((e => e.javascript({
                typescript: !0
            })))
        }), s.t$.of({
            name: "WebAssembly",
            extensions: ["wat", "wast"],
            load: () => Promise.resolve().then(n.bind(n, 80900)).then((e => e.wast()))
        }), s.t$.of({
            name: "XML",
            alias: ["rss", "wsdl", "xsd"],
            extensions: ["xml", "xsl", "xsd", "svg"],
            load: () => n.e(374).then(n.bind(n, 45938)).then((e => e.xml()))
        }), s.t$.of({
            name: "YAML",
            alias: ["yml"],
            extensions: ["yaml", "yml"],
            load: () => n.e(374).then(n.bind(n, 52474)).then((e => e.yaml()))
        }), s.t$.of({
            name: "APL",
            extensions: ["dyalog", "apl"],
            load: () => Promise.resolve().then(n.bind(n, 34480)).then((e => En(e.apl)))
        }), s.t$.of({
            name: "PGP",
            alias: ["asciiarmor"],
            extensions: ["asc", "pgp", "sig"],
            load: () => Promise.resolve().then(n.bind(n, 11121)).then((e => En(e.asciiArmor)))
        }), s.t$.of({
            name: "ASN.1",
            extensions: ["asn", "asn1"],
            load: () => n.e(374).then(n.bind(n, 19726)).then((e => En(e.asn1({}))))
        }), s.t$.of({
            name: "Asterisk",
            filename: /^extensions\.conf$/i,
            load: () => Promise.resolve().then(n.bind(n, 32951)).then((e => En(e.asterisk)))
        }), s.t$.of({
            name: "Brainfuck",
            extensions: ["b", "bf"],
            load: () => Promise.resolve().then(n.bind(n, 92872)).then((e => En(e.brainfuck)))
        }), s.t$.of({
            name: "Cobol",
            extensions: ["cob", "cpy"],
            load: () => Promise.resolve().then(n.bind(n, 39740)).then((e => En(e.cobol)))
        }), s.t$.of({
            name: "C#",
            alias: ["csharp", "cs"],
            extensions: ["cs"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.csharp)))
        }), s.t$.of({
            name: "Clojure",
            extensions: ["clj", "cljc", "cljx"],
            load: () => Promise.resolve().then(n.bind(n, 82143)).then((e => En(e.clojure)))
        }), s.t$.of({
            name: "ClojureScript",
            extensions: ["cljs"],
            load: () => Promise.resolve().then(n.bind(n, 82143)).then((e => En(e.clojure)))
        }), s.t$.of({
            name: "Closure Stylesheets (GSS)",
            extensions: ["gss"],
            load: () => Promise.resolve().then(n.bind(n, 39624)).then((e => En(e.gss)))
        }), s.t$.of({
            name: "CMake",
            extensions: ["cmake", "cmake.in"],
            filename: /^CMakeLists\.txt$/,
            load: () => Promise.resolve().then(n.bind(n, 56956)).then((e => En(e.cmake)))
        }), s.t$.of({
            name: "CoffeeScript",
            alias: ["coffee", "coffee-script"],
            extensions: ["coffee"],
            load: () => Promise.resolve().then(n.bind(n, 69976)).then((e => En(e.coffeeScript)))
        }), s.t$.of({
            name: "Common Lisp",
            alias: ["lisp"],
            extensions: ["cl", "lisp", "el"],
            load: () => Promise.resolve().then(n.bind(n, 11206)).then((e => En(e.commonLisp)))
        }), s.t$.of({
            name: "Cypher",
            extensions: ["cyp", "cypher"],
            load: () => Promise.resolve().then(n.bind(n, 43840)).then((e => En(e.cypher)))
        }), s.t$.of({
            name: "Cython",
            extensions: ["pyx", "pxd", "pxi"],
            load: () => n.e(374).then(n.bind(n, 90721)).then((e => En(e.cython)))
        }), s.t$.of({
            name: "Crystal",
            extensions: ["cr"],
            load: () => Promise.resolve().then(n.bind(n, 35833)).then((e => En(e.crystal)))
        }), s.t$.of({
            name: "D",
            extensions: ["d"],
            load: () => Promise.resolve().then(n.bind(n, 41191)).then((e => En(e.d)))
        }), s.t$.of({
            name: "Dart",
            extensions: ["dart"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.dart)))
        }), s.t$.of({
            name: "diff",
            extensions: ["diff", "patch"],
            load: () => Promise.resolve().then(n.bind(n, 63480)).then((e => En(e.diff)))
        }), s.t$.of({
            name: "Dockerfile",
            filename: /^Dockerfile$/,
            load: () => Promise.resolve().then(n.bind(n, 71081)).then((e => En(e.dockerFile)))
        }), s.t$.of({
            name: "DTD",
            extensions: ["dtd"],
            load: () => Promise.resolve().then(n.bind(n, 66687)).then((e => En(e.dtd)))
        }), s.t$.of({
            name: "Dylan",
            extensions: ["dylan", "dyl", "intr"],
            load: () => Promise.resolve().then(n.bind(n, 71257)).then((e => En(e.dylan)))
        }), s.t$.of({
            name: "EBNF",
            load: () => Promise.resolve().then(n.bind(n, 79624)).then((e => En(e.ebnf)))
        }), s.t$.of({
            name: "ECL",
            extensions: ["ecl"],
            load: () => Promise.resolve().then(n.bind(n, 5563)).then((e => En(e.ecl)))
        }), s.t$.of({
            name: "edn",
            extensions: ["edn"],
            load: () => Promise.resolve().then(n.bind(n, 82143)).then((e => En(e.clojure)))
        }), s.t$.of({
            name: "Eiffel",
            extensions: ["e"],
            load: () => Promise.resolve().then(n.bind(n, 56344)).then((e => En(e.eiffel)))
        }), s.t$.of({
            name: "Elm",
            extensions: ["elm"],
            load: () => Promise.resolve().then(n.bind(n, 93895)).then((e => En(e.elm)))
        }), s.t$.of({
            name: "Erlang",
            extensions: ["erl"],
            load: () => Promise.resolve().then(n.bind(n, 79448)).then((e => En(e.erlang)))
        }), s.t$.of({
            name: "Esper",
            load: () => n.e(374).then(n.bind(n, 7383)).then((e => En(e.esper)))
        }), s.t$.of({
            name: "Factor",
            extensions: ["factor"],
            load: () => Promise.resolve().then(n.bind(n, 8204)).then((e => En(e.factor)))
        }), s.t$.of({
            name: "FCL",
            load: () => Promise.resolve().then(n.bind(n, 5826)).then((e => En(e.fcl)))
        }), s.t$.of({
            name: "Forth",
            extensions: ["forth", "fth", "4th"],
            load: () => Promise.resolve().then(n.bind(n, 71540)).then((e => En(e.forth)))
        }), s.t$.of({
            name: "Fortran",
            extensions: ["f", "for", "f77", "f90", "f95"],
            load: () => Promise.resolve().then(n.bind(n, 81433)).then((e => En(e.fortran)))
        }), s.t$.of({
            name: "F#",
            alias: ["fsharp"],
            extensions: ["fs"],
            load: () => n.e(374).then(n.bind(n, 77769)).then((e => En(e.fSharp)))
        }), s.t$.of({
            name: "Gas",
            extensions: ["s"],
            load: () => Promise.resolve().then(n.bind(n, 79554)).then((e => En(e.gas)))
        }), s.t$.of({
            name: "Gherkin",
            extensions: ["feature"],
            load: () => Promise.resolve().then(n.bind(n, 31197)).then((e => En(e.gherkin)))
        }), s.t$.of({
            name: "Groovy",
            extensions: ["groovy", "gradle"],
            filename: /^Jenkinsfile$/,
            load: () => Promise.resolve().then(n.bind(n, 49673)).then((e => En(e.groovy)))
        }), s.t$.of({
            name: "Haskell",
            extensions: ["hs"],
            load: () => Promise.resolve().then(n.bind(n, 18647)).then((e => En(e.haskell)))
        }), s.t$.of({
            name: "Haxe",
            extensions: ["hx"],
            load: () => Promise.resolve().then(n.bind(n, 99071)).then((e => En(e.haxe)))
        }), s.t$.of({
            name: "HXML",
            extensions: ["hxml"],
            load: () => Promise.resolve().then(n.bind(n, 99071)).then((e => En(e.hxml)))
        }), s.t$.of({
            name: "HTTP",
            load: () => Promise.resolve().then(n.bind(n, 15747)).then((e => En(e.http)))
        }), s.t$.of({
            name: "IDL",
            extensions: ["pro"],
            load: () => Promise.resolve().then(n.bind(n, 32332)).then((e => En(e.idl)))
        }), s.t$.of({
            name: "JSON-LD",
            alias: ["jsonld"],
            extensions: ["jsonld"],
            load: () => n.e(460).then(n.bind(n, 6460)).then((e => En(e.jsonld)))
        }), s.t$.of({
            name: "Jinja2",
            extensions: ["j2", "jinja", "jinja2"],
            load: () => Promise.resolve().then(n.bind(n, 17269)).then((e => En(e.jinja2)))
        }), s.t$.of({
            name: "Julia",
            extensions: ["jl"],
            load: () => Promise.resolve().then(n.bind(n, 76974)).then((e => En(e.julia)))
        }), s.t$.of({
            name: "Kotlin",
            extensions: ["kt", "kts"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.kotlin)))
        }), s.t$.of({
            name: "LiveScript",
            alias: ["ls"],
            extensions: ["ls"],
            load: () => Promise.resolve().then(n.bind(n, 59702)).then((e => En(e.liveScript)))
        }), s.t$.of({
            name: "Lua",
            extensions: ["lua"],
            load: () => Promise.resolve().then(n.bind(n, 43093)).then((e => En(e.lua)))
        }), s.t$.of({
            name: "mIRC",
            extensions: ["mrc"],
            load: () => Promise.resolve().then(n.bind(n, 2206)).then((e => En(e.mirc)))
        }), s.t$.of({
            name: "Mathematica",
            extensions: ["m", "nb", "wl", "wls"],
            load: () => Promise.resolve().then(n.bind(n, 8083)).then((e => En(e.mathematica)))
        }), s.t$.of({
            name: "Modelica",
            extensions: ["mo"],
            load: () => Promise.resolve().then(n.bind(n, 1375)).then((e => En(e.modelica)))
        }), s.t$.of({
            name: "MUMPS",
            extensions: ["mps"],
            load: () => Promise.resolve().then(n.bind(n, 5091)).then((e => En(e.mumps)))
        }), s.t$.of({
            name: "Mbox",
            extensions: ["mbox"],
            load: () => Promise.resolve().then(n.bind(n, 20235)).then((e => En(e.mbox)))
        }), s.t$.of({
            name: "Nginx",
            filename: /nginx.*\.conf$/i,
            load: () => Promise.resolve().then(n.bind(n, 47239)).then((e => En(e.nginx)))
        }), s.t$.of({
            name: "NSIS",
            extensions: ["nsh", "nsi"],
            load: () => Promise.resolve().then(n.bind(n, 1440)).then((e => En(e.nsis)))
        }), s.t$.of({
            name: "NTriples",
            extensions: ["nt", "nq"],
            load: () => Promise.resolve().then(n.bind(n, 69144)).then((e => En(e.ntriples)))
        }), s.t$.of({
            name: "Objective-C",
            alias: ["objective-c", "objc"],
            extensions: ["m"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.objectiveC)))
        }), s.t$.of({
            name: "Objective-C++",
            alias: ["objective-c++", "objc++"],
            extensions: ["mm"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.objectiveCpp)))
        }), s.t$.of({
            name: "OCaml",
            extensions: ["ml", "mli", "mll", "mly"],
            load: () => n.e(374).then(n.bind(n, 77769)).then((e => En(e.oCaml)))
        }), s.t$.of({
            name: "Octave",
            extensions: ["m"],
            load: () => Promise.resolve().then(n.bind(n, 91811)).then((e => En(e.octave)))
        }), s.t$.of({
            name: "Oz",
            extensions: ["oz"],
            load: () => Promise.resolve().then(n.bind(n, 52138)).then((e => En(e.oz)))
        }), s.t$.of({
            name: "Pascal",
            extensions: ["p", "pas"],
            load: () => Promise.resolve().then(n.bind(n, 95319)).then((e => En(e.pascal)))
        }), s.t$.of({
            name: "Perl",
            extensions: ["pl", "pm"],
            load: () => Promise.resolve().then(n.bind(n, 89086)).then((e => En(e.perl)))
        }), s.t$.of({
            name: "Pig",
            extensions: ["pig"],
            load: () => Promise.resolve().then(n.bind(n, 28799)).then((e => En(e.pig)))
        }), s.t$.of({
            name: "PowerShell",
            extensions: ["ps1", "psd1", "psm1"],
            load: () => Promise.resolve().then(n.bind(n, 21706)).then((e => En(e.powerShell)))
        }), s.t$.of({
            name: "Properties files",
            alias: ["ini", "properties"],
            extensions: ["properties", "ini", "in"],
            load: () => Promise.resolve().then(n.bind(n, 73802)).then((e => En(e.properties)))
        }), s.t$.of({
            name: "ProtoBuf",
            extensions: ["proto"],
            load: () => Promise.resolve().then(n.bind(n, 21608)).then((e => En(e.protobuf)))
        }), s.t$.of({
            name: "Pug",
            alias: ["jade"],
            extensions: ["pug", "jade"],
            load: () => n.e(374).then(n.bind(n, 8075)).then((e => En(e.pug)))
        }), s.t$.of({
            name: "Puppet",
            extensions: ["pp"],
            load: () => Promise.resolve().then(n.bind(n, 44853)).then((e => En(e.puppet)))
        }), s.t$.of({
            name: "Q",
            extensions: ["q"],
            load: () => Promise.resolve().then(n.bind(n, 28780)).then((e => En(e.q)))
        }), s.t$.of({
            name: "R",
            alias: ["rscript"],
            extensions: ["r", "R"],
            load: () => Promise.resolve().then(n.bind(n, 87061)).then((e => En(e.r)))
        }), s.t$.of({
            name: "RPM Changes",
            load: () => n.e(374).then(n.bind(n, 60402)).then((e => En(e.rpmChanges)))
        }), s.t$.of({
            name: "RPM Spec",
            extensions: ["spec"],
            load: () => n.e(374).then(n.bind(n, 60402)).then((e => En(e.rpmSpec)))
        }), s.t$.of({
            name: "Ruby",
            alias: ["jruby", "macruby", "rake", "rb", "rbx"],
            extensions: ["rb"],
            filename: /^(Gemfile|Rakefile)$/,
            load: () => Promise.resolve().then(n.bind(n, 87179)).then((e => En(e.ruby)))
        }), s.t$.of({
            name: "SAS",
            extensions: ["sas"],
            load: () => Promise.resolve().then(n.bind(n, 254)).then((e => En(e.sas)))
        }), s.t$.of({
            name: "Scala",
            extensions: ["scala"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.scala)))
        }), s.t$.of({
            name: "Scheme",
            extensions: ["scm", "ss"],
            load: () => Promise.resolve().then(n.bind(n, 65736)).then((e => En(e.scheme)))
        }), s.t$.of({
            name: "Shell",
            alias: ["bash", "sh", "zsh"],
            extensions: ["sh", "ksh", "bash"],
            filename: /^PKGBUILD$/,
            load: () => Promise.resolve().then(n.bind(n, 79257)).then((e => En(e.shell)))
        }), s.t$.of({
            name: "Sieve",
            extensions: ["siv", "sieve"],
            load: () => Promise.resolve().then(n.bind(n, 36113)).then((e => En(e.sieve)))
        }), s.t$.of({
            name: "Smalltalk",
            extensions: ["st"],
            load: () => Promise.resolve().then(n.bind(n, 52202)).then((e => En(e.smalltalk)))
        }), s.t$.of({
            name: "Solr",
            load: () => Promise.resolve().then(n.bind(n, 2827)).then((e => En(e.solr)))
        }), s.t$.of({
            name: "SML",
            extensions: ["sml", "sig", "fun", "smackspec"],
            load: () => n.e(374).then(n.bind(n, 77769)).then((e => En(e.sml)))
        }), s.t$.of({
            name: "SPARQL",
            alias: ["sparul"],
            extensions: ["rq", "sparql"],
            load: () => Promise.resolve().then(n.bind(n, 36374)).then((e => En(e.sparql)))
        }), s.t$.of({
            name: "Spreadsheet",
            alias: ["excel", "formula"],
            load: () => Promise.resolve().then(n.bind(n, 85273)).then((e => En(e.spreadsheet)))
        }), s.t$.of({
            name: "Squirrel",
            extensions: ["nut"],
            load: () => Promise.resolve().then(n.bind(n, 49921)).then((e => En(e.squirrel)))
        }), s.t$.of({
            name: "Stylus",
            extensions: ["styl"],
            load: () => Promise.resolve().then(n.bind(n, 31353)).then((e => En(e.stylus)))
        }), s.t$.of({
            name: "Swift",
            extensions: ["swift"],
            load: () => Promise.resolve().then(n.bind(n, 16868)).then((e => En(e.swift)))
        }), s.t$.of({
            name: "sTeX",
            load: () => Promise.resolve().then(n.bind(n, 33201)).then((e => En(e.stex)))
        }), s.t$.of({
            name: "LaTeX",
            alias: ["tex"],
            extensions: ["text", "ltx", "tex"],
            load: () => Promise.resolve().then(n.bind(n, 33201)).then((e => En(e.stex)))
        }), s.t$.of({
            name: "SystemVerilog",
            extensions: ["v", "sv", "svh"],
            load: () => Promise.resolve().then(n.bind(n, 23157)).then((e => En(e.verilog)))
        }), s.t$.of({
            name: "Tcl",
            extensions: ["tcl"],
            load: () => Promise.resolve().then(n.bind(n, 86668)).then((e => En(e.tcl)))
        }), s.t$.of({
            name: "Textile",
            extensions: ["textile"],
            load: () => Promise.resolve().then(n.bind(n, 97834)).then((e => En(e.textile)))
        }), s.t$.of({
            name: "TiddlyWiki",
            load: () => Promise.resolve().then(n.bind(n, 31991)).then((e => En(e.tiddlyWiki)))
        }), s.t$.of({
            name: "Tiki wiki",
            load: () => Promise.resolve().then(n.bind(n, 31984)).then((e => En(e.tiki)))
        }), s.t$.of({
            name: "TOML",
            extensions: ["toml"],
            load: () => Promise.resolve().then(n.bind(n, 53187)).then((e => En(e.toml)))
        }), s.t$.of({
            name: "Troff",
            extensions: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
            load: () => Promise.resolve().then(n.bind(n, 92904)).then((e => En(e.troff)))
        }), s.t$.of({
            name: "TTCN",
            extensions: ["ttcn", "ttcn3", "ttcnpp"],
            load: () => Promise.resolve().then(n.bind(n, 50)).then((e => En(e.ttcn)))
        }), s.t$.of({
            name: "TTCN_CFG",
            extensions: ["cfg"],
            load: () => n.e(374).then(n.bind(n, 5821)).then((e => En(e.ttcnCfg)))
        }), s.t$.of({
            name: "Turtle",
            extensions: ["ttl"],
            load: () => Promise.resolve().then(n.bind(n, 83465)).then((e => En(e.turtle)))
        }), s.t$.of({
            name: "Web IDL",
            extensions: ["webidl"],
            load: () => Promise.resolve().then(n.bind(n, 68010)).then((e => En(e.webIDL)))
        }), s.t$.of({
            name: "VB.NET",
            extensions: ["vb"],
            load: () => Promise.resolve().then(n.bind(n, 90099)).then((e => En(e.vb)))
        }), s.t$.of({
            name: "VBScript",
            extensions: ["vbs"],
            load: () => Promise.resolve().then(n.bind(n, 69996)).then((e => En(e.vbScript)))
        }), s.t$.of({
            name: "Velocity",
            extensions: ["vtl"],
            load: () => Promise.resolve().then(n.bind(n, 46316)).then((e => En(e.velocity)))
        }), s.t$.of({
            name: "Verilog",
            extensions: ["v"],
            load: () => Promise.resolve().then(n.bind(n, 23157)).then((e => En(e.verilog)))
        }), s.t$.of({
            name: "VHDL",
            extensions: ["vhd", "vhdl"],
            load: () => Promise.resolve().then(n.bind(n, 77653)).then((e => En(e.vhdl)))
        }), s.t$.of({
            name: "XQuery",
            extensions: ["xy", "xquery"],
            load: () => Promise.resolve().then(n.bind(n, 41655)).then((e => En(e.xQuery)))
        }), s.t$.of({
            name: "Yacas",
            extensions: ["ys"],
            load: () => Promise.resolve().then(n.bind(n, 74012)).then((e => En(e.yacas)))
        }), s.t$.of({
            name: "Z80",
            extensions: ["z80"],
            load: () => Promise.resolve().then(n.bind(n, 52341)).then((e => En(e.z80)))
        }), s.t$.of({
            name: "MscGen",
            extensions: ["mscgen", "mscin", "msc"],
            load: () => Promise.resolve().then(n.bind(n, 32818)).then((e => En(e.mscgen)))
        }), s.t$.of({
            name: "X\xf9",
            extensions: ["xu"],
            load: () => Promise.resolve().then(n.bind(n, 32818)).then((e => En(e.xu)))
        }), s.t$.of({
            name: "MsGenny",
            extensions: ["msgenny"],
            load: () => Promise.resolve().then(n.bind(n, 32818)).then((e => En(e.msgenny)))
        }), s.t$.of({
            name: "Vue",
            extensions: ["vue"],
            load: () => n.e(374).then(n.bind(n, 75809)).then((e => e.vue()))
        }), s.t$.of({
            name: "Angular Template",
            load: () => n.e(374).then(n.bind(n, 50079)).then((e => e.angular()))
        })];
        var Gn = n(9347)
            , In = n(83182);
        const Dn = (0,
            s.p9)({
                block: {
                    open: "\x3c!--",
                    close: "--\x3e"
                }
            })
            , Nn = Gn.K3.configure({
                props: [s.b_.add((e => {
                    if (e.is("Block") && !e.is("Document"))
                        return (e, t) => ({
                            from: t.doc.lineAt(e.from).to,
                            to: e.to
                        })
                }
                )), s.Oh.add({
                    Document: () => null
                }), s.iB.add({
                    Document: Dn
                })]
            });
        function Ln(e) {
            return new s.TM(Dn, e, [], "markdown")
        }
        const Mn = Ln(Nn)
            , Fn = Ln(Nn.configure([Gn.Fz, Gn.E, Gn.Z3, Gn.zT]));
        class Bn {
            constructor(e, t, n, i, r, a, o) {
                this.node = e,
                    this.from = t,
                    this.to = n,
                    this.spaceBefore = i,
                    this.spaceAfter = r,
                    this.type = a,
                    this.item = o
            }
            blank(e) {
                let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                    , n = this.spaceBefore + ("Blockquote" == this.node.name ? ">" : "");
                if (null != e) {
                    for (; n.length < e;)
                        n += " ";
                    return n
                }
                for (let i = this.to - this.from - n.length - this.spaceAfter.length; i > 0; i--)
                    n += " ";
                return n + (t ? this.spaceAfter : "")
            }
            marker(e, t) {
                let n = "OrderedList" == this.node.name ? String(+Kn(this.item, e)[2] + t) : "";
                return this.spaceBefore + n + this.type + this.spaceAfter
            }
        }
        function Hn(e, t) {
            let n = [];
            for (let r = e; r && "Document" != r.name; r = r.parent)
                "ListItem" != r.name && "Blockquote" != r.name && "FencedCode" != r.name || n.push(r);
            let i = [];
            for (let r = n.length - 1; r >= 0; r--) {
                let e, a = n[r], o = t.lineAt(a.from), O = a.from - o.from;
                if ("FencedCode" == a.name)
                    i.push(new Bn(a, O, O, "", "", "", null));
                else if ("Blockquote" == a.name && (e = /^[ \t]*>( ?)/.exec(o.text.slice(O))))
                    i.push(new Bn(a, O, O + e[0].length, "", e[1], ">", null));
                else if ("ListItem" == a.name && "OrderedList" == a.parent.name && (e = /^([ \t]*)\d+([.)])([ \t]*)/.exec(o.text.slice(O)))) {
                    let t = e[3]
                        , n = e[0].length;
                    t.length >= 4 && (t = t.slice(0, t.length - 4),
                        n -= 4),
                        i.push(new Bn(a.parent, O, O + n, e[1], t, e[2], a))
                } else if ("ListItem" == a.name && "BulletList" == a.parent.name && (e = /^([ \t]*)([-+*])([ \t]{1,4}\[[ xX]\])?([ \t]+)/.exec(o.text.slice(O)))) {
                    let t = e[4]
                        , n = e[0].length;
                    t.length > 4 && (t = t.slice(0, t.length - 4),
                        n -= 4);
                    let r = e[2];
                    e[3] && (r += e[3].replace(/[xX]/, " ")),
                        i.push(new Bn(a.parent, O, O + n, e[1], t, r, a))
                }
            }
            return i
        }
        function Kn(e, t) {
            return /^(\s*)(\d+)(?=[.)])/.exec(t.sliceString(e.from, e.from + 10))
        }
        function Jn(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
            for (let r = -1, a = e; ;) {
                if ("ListItem" == a.name) {
                    let e = Kn(a, t)
                        , o = +e[2];
                    if (r >= 0) {
                        if (o != r + 1)
                            return;
                        n.push({
                            from: a.from + e[1].length,
                            to: a.from + e[0].length,
                            insert: String(r + 2 + i)
                        })
                    }
                    r = o
                }
                let e = a.nextSibling;
                if (!e)
                    break;
                a = e
            }
        }
        function ei(e) {
            return "QuoteMark" == e.name || "ListMark" == e.name
        }
        const ti = [{
            key: "Enter",
            run: e => {
                let { state: t, dispatch: n } = e
                    , i = (0,
                        s.mv)(t)
                    , { doc: r } = t
                    , a = null
                    , O = t.changeByRange((e => {
                        if (!e.empty || !Fn.isActiveAt(t, e.from))
                            return a = {
                                range: e
                            };
                        let n = e.from
                            , O = r.lineAt(n)
                            , s = Hn(i.resolveInner(n, -1), r);
                        for (; s.length && s[s.length - 1].from > n - O.from;)
                            s.pop();
                        if (!s.length)
                            return a = {
                                range: e
                            };
                        let l = s[s.length - 1];
                        if (l.to - l.spaceAfter.length > n - O.from)
                            return a = {
                                range: e
                            };
                        let c = n >= l.to - l.spaceAfter.length && !/\S/.test(O.text.slice(l.to));
                        if (l.item && c) {
                            if (l.node.firstChild.to >= n || O.from > 0 && !/[^\s>]/.test(r.lineAt(O.from - 1).text)) {
                                let e, t = s.length > 1 ? s[s.length - 2] : null, i = "";
                                t && t.item ? (e = O.from + t.from,
                                    i = t.marker(r, 1)) : e = O.from + (t ? t.to : 0);
                                let a = [{
                                    from: e,
                                    to: n,
                                    insert: i
                                }];
                                return "OrderedList" == l.node.name && Jn(l.item, r, a, -2),
                                    t && "OrderedList" == t.node.name && Jn(t.item, r, a),
                                {
                                    range: o.OF.cursor(e + i.length),
                                    changes: a
                                }
                            }
                            {
                                let e = "";
                                for (let t = 0, n = s.length - 2; t <= n; t++)
                                    e += s[t].blank(t < n ? s[t + 1].from - e.length : null, t < n);
                                return e += t.lineBreak,
                                {
                                    range: o.OF.cursor(n + e.length),
                                    changes: {
                                        from: O.from,
                                        insert: e
                                    }
                                }
                            }
                        }
                        if ("Blockquote" == l.node.name && c && O.from) {
                            let n = r.lineAt(O.from - 1)
                                , i = />\s*$/.exec(n.text);
                            if (i && i.index == l.from) {
                                let r = t.changes([{
                                    from: n.from + i.index,
                                    to: n.to
                                }, {
                                    from: O.from + l.from,
                                    to: O.to
                                }]);
                                return {
                                    range: e.map(r),
                                    changes: r
                                }
                            }
                        }
                        let u = [];
                        "OrderedList" == l.node.name && Jn(l.item, r, u);
                        let d = l.item && l.item.from < O.from
                            , h = "";
                        if (!d || /^[\s\d.)\-+*>]*/.exec(O.text)[0].length >= l.to)
                            for (let t = 0, i = s.length - 1; t <= i; t++)
                                h += t != i || d ? s[t].blank(t < i ? s[t + 1].from - h.length : null) : s[t].marker(r, 1);
                        let f = n;
                        for (; f > O.from && /\s/.test(O.text.charAt(f - O.from - 1));)
                            f--;
                        return h = t.lineBreak + h,
                            u.push({
                                from: f,
                                to: n,
                                insert: h
                            }),
                        {
                            range: o.OF.cursor(f + h.length),
                            changes: u
                        }
                    }
                    ));
                return !a && (n(t.update(O, {
                    scrollIntoView: !0,
                    userEvent: "input"
                })),
                    !0)
            }
        }, {
            key: "Backspace",
            run: e => {
                let { state: t, dispatch: n } = e
                    , i = (0,
                        s.mv)(t)
                    , r = null
                    , a = t.changeByRange((e => {
                        let n = e.from
                            , { doc: a } = t;
                        if (e.empty && Fn.isActiveAt(t, e.from)) {
                            let t = a.lineAt(n)
                                , r = Hn(function (e, t) {
                                    let n = e.resolveInner(t, -1)
                                        , i = t;
                                    ei(n) && (i = n.from,
                                        n = n.parent);
                                    for (let r; r = n.childBefore(i);)
                                        if (ei(r))
                                            i = r.from;
                                        else {
                                            if ("OrderedList" != r.name && "BulletList" != r.name)
                                                break;
                                            n = r.lastChild,
                                                i = n.to
                                        }
                                    return n
                                }(i, n), a);
                            if (r.length) {
                                let i = r[r.length - 1]
                                    , a = i.to - i.spaceAfter.length + (i.spaceAfter ? 1 : 0);
                                if (n - t.from > a && !/\S/.test(t.text.slice(a, n - t.from)))
                                    return {
                                        range: o.OF.cursor(t.from + a),
                                        changes: {
                                            from: t.from + a,
                                            to: n
                                        }
                                    };
                                if (n - t.from == a) {
                                    let r = t.from + i.from;
                                    if (i.item && i.node.from < i.item.from && /\S/.test(t.text.slice(i.from, i.to)))
                                        return {
                                            range: e,
                                            changes: {
                                                from: r,
                                                to: t.from + i.to,
                                                insert: i.blank(i.to - i.from)
                                            }
                                        };
                                    if (r < n)
                                        return {
                                            range: o.OF.cursor(r),
                                            changes: {
                                                from: r,
                                                to: n
                                            }
                                        }
                                }
                            }
                        }
                        return r = {
                            range: e
                        }
                    }
                    ));
                return !r && (n(t.update(a, {
                    scrollIntoView: !0,
                    userEvent: "delete"
                })),
                    !0)
            }
        }]
            , ni = (0,
                In.html)({
                    matchClosingTags: !1
                });
        function ii() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , { codeLanguages: t, defaultCodeLanguage: n, addKeymap: i = !0, base: { parser: r } = Mn } = e;
            if (!(r instanceof Gn.Fd))
                throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
            let a, l = e.extensions ? [e.extensions] : [], c = [ni.support];
            n instanceof s.Yy ? (c.push(n.support),
                a = n.language) : n && (a = n);
            let u = t || a ? function (e, t) {
                return n => {
                    if (n && e) {
                        let t = null;
                        if (n = /\S*/.exec(n)[0],
                            t = "function" == typeof e ? e(n) : s.t$.matchLanguageName(e, n, !0),
                            t instanceof s.t$)
                            return t.support ? t.support.language.parser : s.nq.getSkippingParser(t.load());
                        if (t)
                            return t.parser
                    }
                    return t ? t.parser : null
                }
            }(t, a) : void 0;
            return l.push((0,
                Gn.Xp)({
                    codeParser: u,
                    htmlParser: ni.language.parser
                })),
                i && c.push(o.Nb.high(O.w4.of(ti))),
                new s.Yy(Ln(r.configure(l)), c)
        }
        var ri = n(40193);
        const ai = [(0,
            Ct.Gw)("function ${name}(${params}) {\n\t${}\n}", {
                label: "function",
                detail: "definition",
                type: "keyword"
            }), (0,
                Ct.Gw)("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
                    label: "for",
                    detail: "loop",
                    type: "keyword"
                }), (0,
                    Ct.Gw)("for (let ${name} of ${collection}) {\n\t${}\n}", {
                        label: "for",
                        detail: "of loop",
                        type: "keyword"
                    }), (0,
                        Ct.Gw)("do {\n\t${}\n} while (${})", {
                            label: "do",
                            detail: "loop",
                            type: "keyword"
                        }), (0,
                            Ct.Gw)("while (${}) {\n\t${}\n}", {
                                label: "while",
                                detail: "loop",
                                type: "keyword"
                            }), (0,
                                Ct.Gw)("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
                                    label: "try",
                                    detail: "/ catch block",
                                    type: "keyword"
                                }), (0,
                                    Ct.Gw)("if (${}) {\n\t${}\n}", {
                                        label: "if",
                                        detail: "block",
                                        type: "keyword"
                                    }), (0,
                                        Ct.Gw)("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
                                            label: "if",
                                            detail: "/ else block",
                                            type: "keyword"
                                        }), (0,
                                            Ct.Gw)("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
                                                label: "class",
                                                detail: "definition",
                                                type: "keyword"
                                            }), (0,
                                                Ct.Gw)('import {${names}} from "${module}"\n${}', {
                                                    label: "import",
                                                    detail: "named",
                                                    type: "keyword"
                                                }), (0,
                                                    Ct.Gw)('import ${name} from "${module}"\n${}', {
                                                        label: "import",
                                                        detail: "default",
                                                        type: "keyword"
                                                    })]
            , oi = new l.RY
            , Oi = new Set(["Script", "Block", "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration", "ForStatement"]);
        function si(e) {
            return (t, n) => {
                let i = t.node.getChild("VariableDefinition");
                return i && n(i, e),
                    !0
            }
        }
        const li = ["FunctionDeclaration"]
            , ci = {
                FunctionDeclaration: si("function"),
                ClassDeclaration: si("class"),
                ClassExpression: () => !0,
                EnumDeclaration: si("constant"),
                TypeAliasDeclaration: si("type"),
                NamespaceDeclaration: si("namespace"),
                VariableDefinition(e, t) {
                    e.matchContext(li) || t(e, "variable")
                },
                TypeDefinition(e, t) {
                    t(e, "type")
                },
                __proto__: null
            };
        function ui(e, t) {
            let n = oi.get(t);
            if (n)
                return n;
            let i = []
                , r = !0;
            function a(t, n) {
                let r = e.sliceString(t.from, t.to);
                i.push({
                    label: r,
                    type: n
                })
            }
            return t.cursor(l.Qj.IncludeAnonymous).iterate((t => {
                if (r)
                    r = !1;
                else if (t.name) {
                    let e = ci[t.name];
                    if (e && e(t, a) || Oi.has(t.name))
                        return !1
                } else if (t.to - t.from > 8192) {
                    for (let n of ui(e, t.node))
                        i.push(n);
                    return !1
                }
            }
            )),
                oi.set(t, i),
                i
        }
        const di = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/
            , hi = ["TemplateString", "String", "RegExp", "LineComment", "BlockComment", "VariableDefinition", "TypeDefinition", "Label", "PropertyDefinition", "PropertyName", "PrivatePropertyDefinition", "PrivatePropertyName", ".", "?."];
        function fi(e) {
            let t = (0,
                s.mv)(e.state).resolveInner(e.pos, -1);
            if (hi.indexOf(t.name) > -1)
                return null;
            let n = "VariableName" == t.name || t.to - t.from < 20 && di.test(e.state.sliceDoc(t.from, t.to));
            if (!n && !e.explicit)
                return null;
            let i = [];
            for (let r = t; r; r = r.parent)
                Oi.has(r.name) && (i = i.concat(ui(e.state.doc, r)));
            return {
                options: i,
                from: n ? t.from : e.pos,
                validFor: di
            }
        }
        const pi = s.bj.define({
            name: "javascript",
            parser: ri.K.configure({
                props: [s.Oh.add({
                    IfStatement: (0,
                        s.mz)({
                            except: /^\s*({|else\b)/
                        }),
                    TryStatement: (0,
                        s.mz)({
                            except: /^\s*({|catch\b|finally\b)/
                        }),
                    LabeledStatement: s._Y,
                    SwitchBody: e => {
                        let t = e.textAfter
                            , n = /^\s*\}/.test(t)
                            , i = /^\s*(case|default)\b/.test(t);
                        return e.baseIndent + (n ? 0 : i ? 1 : 2) * e.unit
                    }
                    ,
                    Block: (0,
                        s.Ay)({
                            closing: "}"
                        }),
                    ArrowFunction: e => e.baseIndent + e.unit,
                    "TemplateString BlockComment": () => null,
                    "Statement Property": (0,
                        s.mz)({
                            except: /^{/
                        }),
                    JSXElement(e) {
                        let t = /^\s*<\//.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    JSXEscape(e) {
                        let t = /\s*\}/.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    "JSXOpenTag JSXSelfClosingTag": e => e.column(e.node.from) + e.unit
                }), s.b_.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": s.yd,
                    BlockComment: e => ({
                        from: e.from + 2,
                        to: e.to - 2
                    })
                })]
            }),
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "`"]
                },
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
                wordChars: "$"
            }
        })
            , mi = {
                test: e => /^JSX/.test(e.name),
                facet: (0,
                    s.p9)({
                        commentTokens: {
                            block: {
                                open: "{/*",
                                close: "*/}"
                            }
                        }
                    })
            }
            , gi = pi.configure({
                dialect: "ts"
            }, "typescript")
            , Qi = pi.configure({
                dialect: "jsx",
                props: [s.Q0.add((e => e.isTop ? [mi] : void 0))]
            })
            , $i = pi.configure({
                dialect: "jsx ts",
                props: [s.Q0.add((e => e.isTop ? [mi] : void 0))]
            }, "typescript")
            , bi = "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map((e => ({
                label: e,
                type: "keyword"
            })));
        function yi() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , t = e.jsx ? e.typescript ? $i : Qi : e.typescript ? gi : pi;
            return new s.Yy(t, [pi.data.of({
                autocomplete: (0,
                    Ct.Ar)(hi, (0,
                        Ct.et)(ai.concat(bi)))
            }), pi.data.of({
                autocomplete: fi
            }), e.jsx ? vi : []])
        }
        function Si(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length;
            for (let i = null === t || void 0 === t ? void 0 : t.firstChild; i; i = i.nextSibling)
                if ("JSXIdentifier" == i.name || "JSXBuiltin" == i.name || "JSXNamespacedName" == i.name || "JSXMemberExpression" == i.name)
                    return e.sliceString(i.from, Math.min(i.to, n));
            return ""
        }
        const Pi = "object" == typeof navigator && /Android\b/.test(navigator.userAgent)
            , vi = O.Lz.inputHandler.of(((e, t, n, i) => {
                if ((Pi ? e.composing : e.compositionStarted) || e.state.readOnly || t != n || ">" != i && "/" != i || !pi.isActiveAt(e.state, t, -1))
                    return !1;
                let { state: r } = e
                    , a = r.changeByRange((e => {
                        var t;
                        let n, { head: a } = e, O = (0,
                            s.mv)(r).resolveInner(a, -1);
                        if ("JSXStartTag" == O.name && (O = O.parent),
                            "JSXAttributeValue" == O.name && O.to > a)
                            ;
                        else {
                            if (">" == i && "JSXFragmentTag" == O.name)
                                return {
                                    range: o.OF.cursor(a + 1),
                                    changes: {
                                        from: a,
                                        insert: "></>"
                                    }
                                };
                            if ("/" == i && "JSXFragmentTag" == O.name) {
                                let e = O.parent
                                    , i = null === e || void 0 === e ? void 0 : e.parent;
                                if (e.from == a - 1 && "JSXEndTag" != (null === (t = i.lastChild) || void 0 === t ? void 0 : t.name) && (n = Si(r.doc, null === i || void 0 === i ? void 0 : i.firstChild, a))) {
                                    let e = `/${n}>`;
                                    return {
                                        range: o.OF.cursor(a + e.length),
                                        changes: {
                                            from: a,
                                            insert: e
                                        }
                                    }
                                }
                            } else if (">" == i) {
                                let e = function (e) {
                                    for (; ;) {
                                        if ("JSXOpenTag" == e.name || "JSXSelfClosingTag" == e.name || "JSXFragmentTag" == e.name)
                                            return e;
                                        if ("JSXEscape" == e.name || !e.parent)
                                            return null;
                                        e = e.parent
                                    }
                                }(O);
                                if (e && (!(l = e.lastChild) || "JSXEndTag" != l.name && "JSXSelfCloseEndTag" != l.name) && "</" != r.sliceDoc(a, a + 2) && (n = Si(r.doc, e, a)))
                                    return {
                                        range: o.OF.cursor(a + 1),
                                        changes: {
                                            from: a,
                                            insert: `></${n}>`
                                        }
                                    }
                            }
                        }
                        var l;
                        return {
                            range: e
                        }
                    }
                    ));
                return !a.changes.empty && (e.dispatch(a, {
                    userEvent: "input.type",
                    scrollIntoView: !0
                }),
                    !0)
            }
            ));
        var xi = n(92547)
            , ki = n(72395);
        const wi = [(0,
            Ct.Gw)("function ${name}(${params}) {\n\t${}\n}", {
                label: "function",
                detail: "definition",
                type: "keyword"
            }), (0,
                Ct.Gw)("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
                    label: "for",
                    detail: "loop",
                    type: "keyword"
                }), (0,
                    Ct.Gw)("for (let ${name} of ${collection}) {\n\t${}\n}", {
                        label: "for",
                        detail: "of loop",
                        type: "keyword"
                    }), (0,
                        Ct.Gw)("do {\n\t${}\n} while (${})", {
                            label: "do",
                            detail: "loop",
                            type: "keyword"
                        }), (0,
                            Ct.Gw)("while (${}) {\n\t${}\n}", {
                                label: "while",
                                detail: "loop",
                                type: "keyword"
                            }), (0,
                                Ct.Gw)("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
                                    label: "try",
                                    detail: "/ catch block",
                                    type: "keyword"
                                }), (0,
                                    Ct.Gw)("if (${}) {\n\t${}\n}", {
                                        label: "if",
                                        detail: "block",
                                        type: "keyword"
                                    }), (0,
                                        Ct.Gw)("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
                                            label: "if",
                                            detail: "/ else block",
                                            type: "keyword"
                                        }), (0,
                                            Ct.Gw)("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
                                                label: "class",
                                                detail: "definition",
                                                type: "keyword"
                                            }), (0,
                                                Ct.Gw)('import {${names}} from "${module}"\n${}', {
                                                    label: "import",
                                                    detail: "named",
                                                    type: "keyword"
                                                }), (0,
                                                    Ct.Gw)('import ${name} from "${module}"\n${}', {
                                                        label: "import",
                                                        detail: "default",
                                                        type: "keyword"
                                                    })]
            , Xi = wi.concat([(0,
                Ct.Gw)("interface ${name} {\n\t${}\n}", {
                    label: "interface",
                    detail: "definition",
                    type: "keyword"
                }), (0,
                    Ct.Gw)("type ${name} = ${type}", {
                        label: "type",
                        detail: "definition",
                        type: "keyword"
                    }), (0,
                        Ct.Gw)("enum ${name} {\n\t${}\n}", {
                            label: "enum",
                            detail: "definition",
                            type: "keyword"
                        })])
            , _i = new l.RY
            , Ti = new Set(["Script", "Block", "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration", "ForStatement"]);
        function zi(e) {
            return (t, n) => {
                let i = t.node.getChild("VariableDefinition");
                return i && n(i, e),
                    !0
            }
        }
        const Ri = ["FunctionDeclaration"]
            , Wi = {
                FunctionDeclaration: zi("function"),
                ClassDeclaration: zi("class"),
                ClassExpression: () => !0,
                EnumDeclaration: zi("constant"),
                TypeAliasDeclaration: zi("type"),
                NamespaceDeclaration: zi("namespace"),
                VariableDefinition(e, t) {
                    e.matchContext(Ri) || t(e, "variable")
                },
                TypeDefinition(e, t) {
                    t(e, "type")
                },
                __proto__: null
            };
        function Zi(e, t) {
            let n = _i.get(t);
            if (n)
                return n;
            let i = []
                , r = !0;
            function a(t, n) {
                let r = e.sliceString(t.from, t.to);
                i.push({
                    label: r,
                    type: n
                })
            }
            return t.cursor(l.Qj.IncludeAnonymous).iterate((t => {
                if (r)
                    r = !1;
                else if (t.name) {
                    let e = Wi[t.name];
                    if (e && e(t, a) || Ti.has(t.name))
                        return !1
                } else if (t.to - t.from > 8192) {
                    for (let n of Zi(e, t.node))
                        i.push(n);
                    return !1
                }
            }
            )),
                _i.set(t, i),
                i
        }
        const qi = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/
            , Ui = ["TemplateString", "String", "RegExp", "LineComment", "BlockComment", "VariableDefinition", "TypeDefinition", "Label", "PropertyDefinition", "PropertyName", "PrivatePropertyDefinition", "PrivatePropertyName", ".", "?."];
        function Yi(e) {
            let t = (0,
                s.mv)(e.state).resolveInner(e.pos, -1);
            if (Ui.indexOf(t.name) > -1)
                return null;
            let n = "VariableName" == t.name || t.to - t.from < 20 && qi.test(e.state.sliceDoc(t.from, t.to));
            if (!n && !e.explicit)
                return null;
            let i = [];
            for (let r = t; r; r = r.parent)
                Ti.has(r.name) && (i = i.concat(Zi(e.state.doc, r)));
            return {
                options: i,
                from: n ? t.from : e.pos,
                validFor: qi
            }
        }
        const Ai = s.bj.define({
            name: "javascript",
            parser: ri.K.configure({
                props: [s.Oh.add({
                    IfStatement: (0,
                        s.mz)({
                            except: /^\s*({|else\b)/
                        }),
                    TryStatement: (0,
                        s.mz)({
                            except: /^\s*({|catch\b|finally\b)/
                        }),
                    LabeledStatement: s._Y,
                    SwitchBody: e => {
                        let t = e.textAfter
                            , n = /^\s*\}/.test(t)
                            , i = /^\s*(case|default)\b/.test(t);
                        return e.baseIndent + (n ? 0 : i ? 1 : 2) * e.unit
                    }
                    ,
                    Block: (0,
                        s.Ay)({
                            closing: "}"
                        }),
                    ArrowFunction: e => e.baseIndent + e.unit,
                    "TemplateString BlockComment": () => null,
                    "Statement Property": (0,
                        s.mz)({
                            except: /^{/
                        }),
                    JSXElement(e) {
                        let t = /^\s*<\//.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    JSXEscape(e) {
                        let t = /\s*\}/.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    "JSXOpenTag JSXSelfClosingTag": e => e.column(e.node.from) + e.unit
                }), s.b_.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": s.yd,
                    BlockComment: e => ({
                        from: e.from + 2,
                        to: e.to - 2
                    })
                })]
            }),
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "`"]
                },
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
                wordChars: "$"
            }
        })
            , Vi = {
                test: e => /^JSX/.test(e.name),
                facet: (0,
                    s.p9)({
                        commentTokens: {
                            block: {
                                open: "{/*",
                                close: "*/}"
                            }
                        }
                    })
            }
            , Ei = Ai.configure({
                dialect: "ts"
            }, "typescript")
            , ji = Ai.configure({
                dialect: "jsx",
                props: [s.Q0.add((e => e.isTop ? [Vi] : void 0))]
            })
            , Ci = Ai.configure({
                dialect: "jsx ts",
                props: [s.Q0.add((e => e.isTop ? [Vi] : void 0))]
            }, "typescript");
        let Gi = e => ({
            label: e,
            type: "keyword"
        });
        const Ii = "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(Gi)
            , Di = Ii.concat(["declare", "implements", "private", "protected", "public"].map(Gi));
        function Ni() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , t = e.jsx ? e.typescript ? Ci : ji : e.typescript ? Ei : Ai
                , n = e.typescript ? Xi.concat(Di) : wi.concat(Ii);
            return new s.Yy(t, [Ai.data.of({
                autocomplete: (0,
                    Ct.Ar)(Ui, (0,
                        Ct.et)(n))
            }), Ai.data.of({
                autocomplete: Yi
            }), e.jsx ? Fi : []])
        }
        function Li(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length;
            for (let i = null === t || void 0 === t ? void 0 : t.firstChild; i; i = i.nextSibling)
                if ("JSXIdentifier" == i.name || "JSXBuiltin" == i.name || "JSXNamespacedName" == i.name || "JSXMemberExpression" == i.name)
                    return e.sliceString(i.from, Math.min(i.to, n));
            return ""
        }
        const Mi = "object" == typeof navigator && /Android\b/.test(navigator.userAgent)
            , Fi = O.Lz.inputHandler.of(((e, t, n, i, r) => {
                if ((Mi ? e.composing : e.compositionStarted) || e.state.readOnly || t != n || ">" != i && "/" != i || !Ai.isActiveAt(e.state, t, -1))
                    return !1;
                let a = r()
                    , { state: O } = a
                    , l = O.changeByRange((e => {
                        var t;
                        let n, { head: r } = e, a = (0,
                            s.mv)(O).resolveInner(r - 1, -1);
                        if ("JSXStartTag" == a.name && (a = a.parent),
                            O.doc.sliceString(r - 1, r) != i || "JSXAttributeValue" == a.name && a.to > r)
                            ;
                        else {
                            if (">" == i && "JSXFragmentTag" == a.name)
                                return {
                                    range: e,
                                    changes: {
                                        from: r,
                                        insert: "</>"
                                    }
                                };
                            if ("/" == i && "JSXStartCloseTag" == a.name) {
                                let e = a.parent
                                    , i = e.parent;
                                if (i && e.from == r - 2 && ((n = Li(O.doc, i.firstChild, r)) || "JSXFragmentTag" == (null === (t = i.firstChild) || void 0 === t ? void 0 : t.name))) {
                                    let e = `${n}>`;
                                    return {
                                        range: o.OF.cursor(r + e.length, -1),
                                        changes: {
                                            from: r,
                                            insert: e
                                        }
                                    }
                                }
                            } else if (">" == i) {
                                let t = function (e) {
                                    for (; ;) {
                                        if ("JSXOpenTag" == e.name || "JSXSelfClosingTag" == e.name || "JSXFragmentTag" == e.name)
                                            return e;
                                        if ("JSXEscape" == e.name || !e.parent)
                                            return null;
                                        e = e.parent
                                    }
                                }(a);
                                if (t && "JSXOpenTag" == t.name && !/^\/?>|^<\//.test(O.doc.sliceString(r, r + 2)) && (n = Li(O.doc, t, r)))
                                    return {
                                        range: e,
                                        changes: {
                                            from: r,
                                            insert: `</${n}>`
                                        }
                                    }
                            }
                        }
                        return {
                            range: e
                        }
                    }
                    ));
                return !l.changes.empty && (e.dispatch([a, O.update(l, {
                    userEvent: "input.complete",
                    scrollIntoView: !0
                })]),
                    !0)
            }
            ));
        const Bi = ["_blank", "_self", "_top", "_parent"]
            , Hi = ["ascii", "utf-8", "utf-16", "latin1", "latin1"]
            , Ki = ["get", "post", "put", "delete"]
            , Ji = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]
            , er = ["true", "false"]
            , tr = {}
            , nr = {
                a: {
                    attrs: {
                        href: null,
                        ping: null,
                        type: null,
                        media: null,
                        target: Bi,
                        hreflang: null
                    }
                },
                abbr: tr,
                address: tr,
                area: {
                    attrs: {
                        alt: null,
                        coords: null,
                        href: null,
                        target: null,
                        ping: null,
                        media: null,
                        hreflang: null,
                        type: null,
                        shape: ["default", "rect", "circle", "poly"]
                    }
                },
                article: tr,
                aside: tr,
                audio: {
                    attrs: {
                        src: null,
                        mediagroup: null,
                        crossorigin: ["anonymous", "use-credentials"],
                        preload: ["none", "metadata", "auto"],
                        autoplay: ["autoplay"],
                        loop: ["loop"],
                        controls: ["controls"]
                    }
                },
                b: tr,
                base: {
                    attrs: {
                        href: null,
                        target: Bi
                    }
                },
                bdi: tr,
                bdo: tr,
                blockquote: {
                    attrs: {
                        cite: null
                    }
                },
                body: tr,
                br: tr,
                button: {
                    attrs: {
                        form: null,
                        formaction: null,
                        name: null,
                        value: null,
                        autofocus: ["autofocus"],
                        disabled: ["autofocus"],
                        formenctype: Ji,
                        formmethod: Ki,
                        formnovalidate: ["novalidate"],
                        formtarget: Bi,
                        type: ["submit", "reset", "button"]
                    }
                },
                canvas: {
                    attrs: {
                        width: null,
                        height: null
                    }
                },
                caption: tr,
                center: tr,
                cite: tr,
                code: tr,
                col: {
                    attrs: {
                        span: null
                    }
                },
                colgroup: {
                    attrs: {
                        span: null
                    }
                },
                command: {
                    attrs: {
                        type: ["command", "checkbox", "radio"],
                        label: null,
                        icon: null,
                        radiogroup: null,
                        command: null,
                        title: null,
                        disabled: ["disabled"],
                        checked: ["checked"]
                    }
                },
                data: {
                    attrs: {
                        value: null
                    }
                },
                datagrid: {
                    attrs: {
                        disabled: ["disabled"],
                        multiple: ["multiple"]
                    }
                },
                datalist: {
                    attrs: {
                        data: null
                    }
                },
                dd: tr,
                del: {
                    attrs: {
                        cite: null,
                        datetime: null
                    }
                },
                details: {
                    attrs: {
                        open: ["open"]
                    }
                },
                dfn: tr,
                div: tr,
                dl: tr,
                dt: tr,
                em: tr,
                embed: {
                    attrs: {
                        src: null,
                        type: null,
                        width: null,
                        height: null
                    }
                },
                eventsource: {
                    attrs: {
                        src: null
                    }
                },
                fieldset: {
                    attrs: {
                        disabled: ["disabled"],
                        form: null,
                        name: null
                    }
                },
                figcaption: tr,
                figure: tr,
                footer: tr,
                form: {
                    attrs: {
                        action: null,
                        name: null,
                        "accept-charset": Hi,
                        autocomplete: ["on", "off"],
                        enctype: Ji,
                        method: Ki,
                        novalidate: ["novalidate"],
                        target: Bi
                    }
                },
                h1: tr,
                h2: tr,
                h3: tr,
                h4: tr,
                h5: tr,
                h6: tr,
                head: {
                    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
                },
                header: tr,
                hgroup: tr,
                hr: tr,
                html: {
                    attrs: {
                        manifest: null
                    }
                },
                i: tr,
                iframe: {
                    attrs: {
                        src: null,
                        srcdoc: null,
                        name: null,
                        width: null,
                        height: null,
                        sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
                        seamless: ["seamless"]
                    }
                },
                img: {
                    attrs: {
                        alt: null,
                        src: null,
                        ismap: null,
                        usemap: null,
                        width: null,
                        height: null,
                        crossorigin: ["anonymous", "use-credentials"]
                    }
                },
                input: {
                    attrs: {
                        alt: null,
                        dirname: null,
                        form: null,
                        formaction: null,
                        height: null,
                        list: null,
                        max: null,
                        maxlength: null,
                        min: null,
                        name: null,
                        pattern: null,
                        placeholder: null,
                        size: null,
                        src: null,
                        step: null,
                        value: null,
                        width: null,
                        accept: ["audio/*", "video/*", "image/*"],
                        autocomplete: ["on", "off"],
                        autofocus: ["autofocus"],
                        checked: ["checked"],
                        disabled: ["disabled"],
                        formenctype: Ji,
                        formmethod: Ki,
                        formnovalidate: ["novalidate"],
                        formtarget: Bi,
                        multiple: ["multiple"],
                        readonly: ["readonly"],
                        required: ["required"],
                        type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month", "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio", "file", "submit", "image", "reset", "button"]
                    }
                },
                ins: {
                    attrs: {
                        cite: null,
                        datetime: null
                    }
                },
                kbd: tr,
                keygen: {
                    attrs: {
                        challenge: null,
                        form: null,
                        name: null,
                        autofocus: ["autofocus"],
                        disabled: ["disabled"],
                        keytype: ["RSA"]
                    }
                },
                label: {
                    attrs: {
                        for: null,
                        form: null
                    }
                },
                legend: tr,
                li: {
                    attrs: {
                        value: null
                    }
                },
                link: {
                    attrs: {
                        href: null,
                        type: null,
                        hreflang: null,
                        media: null,
                        sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
                    }
                },
                map: {
                    attrs: {
                        name: null
                    }
                },
                mark: tr,
                menu: {
                    attrs: {
                        label: null,
                        type: ["list", "context", "toolbar"]
                    }
                },
                meta: {
                    attrs: {
                        content: null,
                        charset: Hi,
                        name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
                        "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
                    }
                },
                meter: {
                    attrs: {
                        value: null,
                        min: null,
                        low: null,
                        high: null,
                        max: null,
                        optimum: null
                    }
                },
                nav: tr,
                noscript: tr,
                object: {
                    attrs: {
                        data: null,
                        type: null,
                        name: null,
                        usemap: null,
                        form: null,
                        width: null,
                        height: null,
                        typemustmatch: ["typemustmatch"]
                    }
                },
                ol: {
                    attrs: {
                        reversed: ["reversed"],
                        start: null,
                        type: ["1", "a", "A", "i", "I"]
                    },
                    children: ["li", "script", "template", "ul", "ol"]
                },
                optgroup: {
                    attrs: {
                        disabled: ["disabled"],
                        label: null
                    }
                },
                option: {
                    attrs: {
                        disabled: ["disabled"],
                        label: null,
                        selected: ["selected"],
                        value: null
                    }
                },
                output: {
                    attrs: {
                        for: null,
                        form: null,
                        name: null
                    }
                },
                p: tr,
                param: {
                    attrs: {
                        name: null,
                        value: null
                    }
                },
                pre: tr,
                progress: {
                    attrs: {
                        value: null,
                        max: null
                    }
                },
                q: {
                    attrs: {
                        cite: null
                    }
                },
                rp: tr,
                rt: tr,
                ruby: tr,
                samp: tr,
                script: {
                    attrs: {
                        type: ["text/javascript"],
                        src: null,
                        async: ["async"],
                        defer: ["defer"],
                        charset: Hi
                    }
                },
                section: tr,
                select: {
                    attrs: {
                        form: null,
                        name: null,
                        size: null,
                        autofocus: ["autofocus"],
                        disabled: ["disabled"],
                        multiple: ["multiple"]
                    }
                },
                slot: {
                    attrs: {
                        name: null
                    }
                },
                small: tr,
                source: {
                    attrs: {
                        src: null,
                        type: null,
                        media: null
                    }
                },
                span: tr,
                strong: tr,
                style: {
                    attrs: {
                        type: ["text/css"],
                        media: null,
                        scoped: null
                    }
                },
                sub: tr,
                summary: tr,
                sup: tr,
                table: tr,
                tbody: tr,
                td: {
                    attrs: {
                        colspan: null,
                        rowspan: null,
                        headers: null
                    }
                },
                template: tr,
                textarea: {
                    attrs: {
                        dirname: null,
                        form: null,
                        maxlength: null,
                        name: null,
                        placeholder: null,
                        rows: null,
                        cols: null,
                        autofocus: ["autofocus"],
                        disabled: ["disabled"],
                        readonly: ["readonly"],
                        required: ["required"],
                        wrap: ["soft", "hard"]
                    }
                },
                tfoot: tr,
                th: {
                    attrs: {
                        colspan: null,
                        rowspan: null,
                        headers: null,
                        scope: ["row", "col", "rowgroup", "colgroup"]
                    }
                },
                thead: tr,
                time: {
                    attrs: {
                        datetime: null
                    }
                },
                title: tr,
                tr: tr,
                track: {
                    attrs: {
                        src: null,
                        label: null,
                        default: null,
                        kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
                        srclang: null
                    }
                },
                ul: {
                    children: ["li", "script", "template", "ul", "ol"]
                },
                var: tr,
                video: {
                    attrs: {
                        src: null,
                        poster: null,
                        width: null,
                        height: null,
                        crossorigin: ["anonymous", "use-credentials"],
                        preload: ["auto", "metadata", "none"],
                        autoplay: ["autoplay"],
                        mediagroup: ["movie"],
                        muted: ["muted"],
                        controls: ["controls"]
                    }
                },
                wbr: tr
            }
            , ir = {
                accesskey: null,
                class: null,
                contenteditable: er,
                contextmenu: null,
                dir: ["ltr", "rtl", "auto"],
                draggable: ["true", "false", "auto"],
                dropzone: ["copy", "move", "link", "string:", "file:"],
                hidden: ["hidden"],
                id: null,
                inert: ["inert"],
                itemid: null,
                itemprop: null,
                itemref: null,
                itemscope: ["itemscope"],
                itemtype: null,
                lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
                spellcheck: er,
                autocorrect: er,
                autocapitalize: er,
                style: null,
                tabindex: null,
                title: null,
                translate: ["yes", "no"],
                onclick: null,
                rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
                role: "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
                "aria-activedescendant": null,
                "aria-atomic": er,
                "aria-autocomplete": ["inline", "list", "both", "none"],
                "aria-busy": er,
                "aria-checked": ["true", "false", "mixed", "undefined"],
                "aria-controls": null,
                "aria-describedby": null,
                "aria-disabled": er,
                "aria-dropeffect": null,
                "aria-expanded": ["true", "false", "undefined"],
                "aria-flowto": null,
                "aria-grabbed": ["true", "false", "undefined"],
                "aria-haspopup": er,
                "aria-hidden": er,
                "aria-invalid": ["true", "false", "grammar", "spelling"],
                "aria-label": null,
                "aria-labelledby": null,
                "aria-level": null,
                "aria-live": ["off", "polite", "assertive"],
                "aria-multiline": er,
                "aria-multiselectable": er,
                "aria-owns": null,
                "aria-posinset": null,
                "aria-pressed": ["true", "false", "mixed", "undefined"],
                "aria-readonly": er,
                "aria-relevant": null,
                "aria-required": er,
                "aria-selected": ["true", "false", "undefined"],
                "aria-setsize": null,
                "aria-sort": ["ascending", "descending", "none", "other"],
                "aria-valuemax": null,
                "aria-valuemin": null,
                "aria-valuenow": null,
                "aria-valuetext": null
            };
        class rr {
            constructor(e, t) {
                this.tags = Object.assign(Object.assign({}, nr), e),
                    this.globalAttrs = Object.assign(Object.assign({}, ir), t),
                    this.allTags = Object.keys(this.tags),
                    this.globalAttrNames = Object.keys(this.globalAttrs)
            }
        }
        function ar(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length;
            if (!t)
                return "";
            let i = t.firstChild
                , r = i && i.getChild("TagName");
            return r ? e.sliceString(r.from, Math.min(r.to, n)) : ""
        }
        function or(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            for (let n = e.parent; n; n = n.parent)
                if ("Element" == n.name) {
                    if (!t)
                        return n;
                    t = !1
                }
            return null
        }
        function Or(e, t, n) {
            let i = n.tags[ar(e, or(t, !0))];
            return (null === i || void 0 === i ? void 0 : i.children) || n.allTags
        }
        function sr(e, t) {
            let n = [];
            for (let i = t; i = or(i);) {
                let r = ar(e, i);
                if (r && "CloseTag" == i.lastChild.name)
                    break;
                r && n.indexOf(r) < 0 && ("EndTag" == t.name || t.from >= i.firstChild.to) && n.push(r)
            }
            return n
        }
        rr.default = new rr;
        const lr = /^[:\-\.\w\u00b7-\uffff]*$/;
        function cr(e, t, n, i, r) {
            let a = /\s*>/.test(e.sliceDoc(r, r + 5)) ? "" : ">";
            return {
                from: i,
                to: r,
                options: Or(e.doc, n, t).map((e => ({
                    label: e,
                    type: "type"
                }))).concat(sr(e.doc, n).map(((e, t) => ({
                    label: "/" + e,
                    apply: "/" + e + a,
                    type: "type",
                    boost: 99 - t
                })))),
                validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
            }
        }
        function ur(e, t, n, i) {
            let r = /\s*>/.test(e.sliceDoc(i, i + 5)) ? "" : ">";
            return {
                from: n,
                to: i,
                options: sr(e.doc, t).map(((e, t) => ({
                    label: e,
                    apply: e + r,
                    type: "type",
                    boost: 99 - t
                }))),
                validFor: lr
            }
        }
        function dr(e, t) {
            let { state: n, pos: i } = t
                , r = (0,
                    s.mv)(n).resolveInner(i)
                , a = r.resolve(i, -1);
            for (let o, O = i; r == a && (o = a.childBefore(O));) {
                let e = o.lastChild;
                if (!e || !e.type.isError || e.from < e.to)
                    break;
                r = a = o,
                    O = e.from
            }
            return "TagName" == a.name ? a.parent && /CloseTag$/.test(a.parent.name) ? ur(n, a, a.from, i) : cr(n, e, a, a.from, i) : "StartTag" == a.name ? cr(n, e, a, i, i) : "StartCloseTag" == a.name || "IncompleteCloseTag" == a.name ? ur(n, a, i, i) : t.explicit && ("OpenTag" == a.name || "SelfClosingTag" == a.name) || "AttributeName" == a.name ? function (e, t, n, i, r) {
                let a = or(n)
                    , o = a ? t.tags[ar(e.doc, a)] : null;
                return {
                    from: i,
                    to: r,
                    options: (o && o.attrs ? Object.keys(o.attrs).concat(t.globalAttrNames) : t.globalAttrNames).map((e => ({
                        label: e,
                        type: "property"
                    }))),
                    validFor: lr
                }
            }(n, e, a, "AttributeName" == a.name ? a.from : i, i) : "Is" == a.name || "AttributeValue" == a.name || "UnquotedAttributeValue" == a.name ? function (e, t, n, i, r) {
                var a;
                let o, O = null === (a = n.parent) || void 0 === a ? void 0 : a.getChild("AttributeName"), s = [];
                if (O) {
                    let a = e.sliceDoc(O.from, O.to)
                        , l = t.globalAttrs[a];
                    if (!l) {
                        let i = or(n)
                            , r = i ? t.tags[ar(e.doc, i)] : null;
                        l = (null === r || void 0 === r ? void 0 : r.attrs) && r.attrs[a]
                    }
                    if (l) {
                        let t = e.sliceDoc(i, r).toLowerCase()
                            , n = '"'
                            , a = '"';
                        /^['"]/.test(t) ? (o = '"' == t[0] ? /^[^"]*$/ : /^[^']*$/,
                            n = "",
                            a = e.sliceDoc(r, r + 1) == t[0] ? "" : t[0],
                            t = t.slice(1),
                            i++) : o = /^[^\s<>='"]*$/;
                        for (let e of l)
                            s.push({
                                label: e,
                                apply: n + e + a,
                                type: "constant"
                            })
                    }
                }
                return {
                    from: i,
                    to: r,
                    options: s,
                    validFor: o
                }
            }(n, e, a, "Is" == a.name ? i : a.from, i) : !t.explicit || "Element" != r.name && "Text" != r.name && "Document" != r.name ? null : function (e, t, n, i) {
                let r = []
                    , a = 0;
                for (let o of Or(e.doc, n, t))
                    r.push({
                        label: "<" + o,
                        type: "type"
                    });
                for (let o of sr(e.doc, n))
                    r.push({
                        label: "</" + o + ">",
                        type: "type",
                        boost: 99 - a++
                    });
                return {
                    from: i,
                    to: i,
                    options: r,
                    validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
                }
            }(n, e, a, i)
        }
        function hr(e) {
            let { extraTags: t, extraGlobalAttributes: n } = e
                , i = n || t ? new rr(t, n) : rr.default;
            return e => dr(i, e)
        }
        const fr = s.bj.define({
            name: "html",
            parser: xi.K.configure({
                props: [s.Oh.add({
                    Element(e) {
                        let t = /^(\s*)(<\/)?/.exec(e.textAfter);
                        return e.node.to <= e.pos + t[0].length ? e.continue() : e.lineIndent(e.node.from) + (t[2] ? 0 : e.unit)
                    },
                    "OpenTag CloseTag SelfClosingTag": e => e.column(e.node.from) + e.unit,
                    Document(e) {
                        if (e.pos + /\s*/.exec(e.textAfter)[0].length < e.node.to)
                            return e.continue();
                        let t, n = null;
                        for (let i = e.node; ;) {
                            let e = i.lastChild;
                            if (!e || "Element" != e.name || e.to != i.to)
                                break;
                            n = i = e
                        }
                        return n && (!(t = n.lastChild) || "CloseTag" != t.name && "SelfClosingTag" != t.name) ? e.lineIndent(n.from) + e.unit : null
                    }
                }), s.b_.add({
                    Element(e) {
                        let t = e.firstChild
                            , n = e.lastChild;
                        return t && "OpenTag" == t.name ? {
                            from: t.to,
                            to: "CloseTag" == n.name ? n.from : e.to
                        } : null
                    }
                })],
                wrap: (0,
                    xi.n)([{
                        tag: "script",
                        attrs: e => "text/typescript" == e.type || "ts" == e.lang,
                        parser: Ei.parser
                    }, {
                        tag: "script",
                        attrs: e => "text/jsx" == e.type,
                        parser: ji.parser
                    }, {
                        tag: "script",
                        attrs: e => "text/typescript-jsx" == e.type,
                        parser: Ci.parser
                    }, {
                        tag: "script",
                        attrs: e => !e.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(e.type),
                        parser: Ai.parser
                    }, {
                        tag: "style",
                        attrs: e => (!e.lang || "css" == e.lang) && (!e.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(e.type)),
                        parser: ki.cssLanguage.parser
                    }])
            }),
            languageData: {
                commentTokens: {
                    block: {
                        open: "\x3c!--",
                        close: "--\x3e"
                    }
                },
                indentOnInput: /^\s*<\/\w+\W$/,
                wordChars: "-._"
            }
        });
        const pr = O.Lz.inputHandler.of(((e, t, n, i) => {
            if (e.composing || e.state.readOnly || t != n || ">" != i && "/" != i || !fr.isActiveAt(e.state, t, -1))
                return !1;
            let { state: r } = e
                , a = r.changeByRange((t => {
                    var n, a, O;
                    let l, { head: c } = t, u = (0,
                        s.mv)(r).resolveInner(c, -1);
                    if ("TagName" != u.name && "StartTag" != u.name || (u = u.parent),
                        ">" == i && "OpenTag" == u.name) {
                        if ("CloseTag" != (null === (a = null === (n = u.parent) || void 0 === n ? void 0 : n.lastChild) || void 0 === a ? void 0 : a.name) && (l = ar(r.doc, u.parent, c))) {
                            let t = ">" === e.state.doc.sliceString(c, c + 1)
                                , n = `${t ? "" : ">"}</${l}>`;
                            return {
                                range: o.OF.cursor(c + 1),
                                changes: {
                                    from: c + (t ? 1 : 0),
                                    insert: n
                                }
                            }
                        }
                    } else if ("/" == i && "OpenTag" == u.name) {
                        let t = u.parent
                            , n = null === t || void 0 === t ? void 0 : t.parent;
                        if (t.from == c - 1 && "CloseTag" != (null === (O = n.lastChild) || void 0 === O ? void 0 : O.name) && (l = ar(r.doc, n, c))) {
                            let t = ">" === e.state.doc.sliceString(c, c + 1)
                                , n = `/${l}${t ? "" : ">"}`
                                , i = c + n.length + (t ? 1 : 0);
                            return {
                                range: o.OF.cursor(i),
                                changes: {
                                    from: c,
                                    insert: n
                                }
                            }
                        }
                    }
                    return {
                        range: t
                    }
                }
                ));
            return !a.changes.empty && (e.dispatch(a, {
                userEvent: "input.type",
                scrollIntoView: !0
            }),
                !0)
        }
        ));
        var mr = n(19690)
            , gr = n(47090);
        function Qr(e, t) {
            let n = e.lineIndent(t.from)
                , i = e.lineAt(e.pos, -1)
                , r = i.from + i.text.length;
            return !/\S/.test(i.text) && e.node.to < r + 100 && !/\S/.test(e.state.sliceDoc(r, e.node.to)) && e.lineIndent(e.pos, -1) <= n || /^\s*(else:|elif |except |finally:)/.test(e.textAfter) && e.lineIndent(e.pos, -1) > n ? null : n + e.unit
        }
        const $r = s.bj.define({
            name: "python",
            parser: gr.K.configure({
                props: [s.Oh.add({
                    Body: e => {
                        var t;
                        return null !== (t = Qr(e, e.node)) && void 0 !== t ? t : e.continue()
                    }
                    ,
                    IfStatement: e => /^\s*(else:|elif )/.test(e.textAfter) ? e.baseIndent : e.continue(),
                    TryStatement: e => /^\s*(except |finally:|else:)/.test(e.textAfter) ? e.baseIndent : e.continue(),
                    "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": (0,
                        s.Ay)({
                            closing: ")"
                        }),
                    "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": (0,
                        s.Ay)({
                            closing: "}"
                        }),
                    "ArrayExpression ArrayComprehensionExpression": (0,
                        s.Ay)({
                            closing: "]"
                        }),
                    "String FormatString": () => null,
                    Script: e => {
                        if (e.pos + /\s*/.exec(e.textAfter)[0].length >= e.node.to) {
                            let t = null;
                            for (let n = e.node, i = n.to; n = n.lastChild,
                                n && n.to == i;)
                                "Body" == n.type.name && (t = n);
                            if (t) {
                                let n = Qr(e, t);
                                if (null != n)
                                    return n
                            }
                        }
                        return e.continue()
                    }
                }), s.b_.add({
                    "ArrayExpression DictionaryExpression SetExpression TupleExpression": s.yd,
                    Body: (e, t) => ({
                        from: e.from + 1,
                        to: e.to - (e.to == t.doc.length ? 0 : 1)
                    })
                })]
            }),
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
                    stringPrefixes: ["f", "fr", "rf", "r", "u", "b", "br", "rb", "F", "FR", "RF", "R", "U", "B", "BR", "RB"]
                },
                commentTokens: {
                    line: "#"
                },
                indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/
            }
        });
        var br = n(68197);
        function yr(e, t) {
            let n = t && t.getChild("TagName");
            return n ? e.sliceString(n.from, n.to) : ""
        }
        function Sr(e, t) {
            let n = t && t.firstChild;
            return n && "OpenTag" == n.name ? yr(e, n) : ""
        }
        function Pr(e) {
            for (let t = e && e.parent; t; t = t.parent)
                if ("Element" == t.name)
                    return t;
            return null
        }
        class vr {
            constructor(e, t, n) {
                this.attrs = t,
                    this.attrValues = n,
                    this.children = [],
                    this.name = e.name,
                    this.completion = Object.assign(Object.assign({
                        type: "type"
                    }, e.completion || {}), {
                        label: this.name
                    }),
                    this.openCompletion = Object.assign(Object.assign({}, this.completion), {
                        label: "<" + this.name
                    }),
                    this.closeCompletion = Object.assign(Object.assign({}, this.completion), {
                        label: "</" + this.name + ">",
                        boost: 2
                    }),
                    this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), {
                        label: this.name + ">"
                    }),
                    this.text = e.textContent ? e.textContent.map((e => ({
                        label: e,
                        type: "text"
                    }))) : []
            }
        }
        const xr = /^[:\-\.\w\u00b7-\uffff]*$/;
        function kr(e) {
            return Object.assign(Object.assign({
                type: "property"
            }, e.completion || {}), {
                label: e.name
            })
        }
        function wr(e) {
            return "string" == typeof e ? {
                label: `"${e}"`,
                type: "constant"
            } : /^"/.test(e.label) ? e : Object.assign(Object.assign({}, e), {
                label: `"${e.label}"`
            })
        }
        function Xr(e, t) {
            let n = []
                , i = []
                , r = Object.create(null);
            for (let s of t) {
                let e = kr(s);
                n.push(e),
                    s.global && i.push(e),
                    s.values && (r[s.name] = s.values.map(wr))
            }
            let a = []
                , o = []
                , O = Object.create(null);
            for (let s of e) {
                let e = i
                    , t = r;
                s.attributes && (e = e.concat(s.attributes.map((e => "string" == typeof e ? n.find((t => t.label == e)) || {
                    label: e,
                    type: "property"
                } : (e.values && (t == r && (t = Object.create(t)),
                    t[e.name] = e.values.map(wr)),
                    kr(e))))));
                let l = new vr(s, e, t);
                O[l.name] = l,
                    a.push(l),
                    s.top && o.push(l)
            }
            o.length || (o = a);
            for (let s = 0; s < a.length; s++) {
                let t = e[s]
                    , n = a[s];
                if (t.children)
                    for (let e of t.children)
                        O[e] && n.children.push(O[e]);
                else
                    n.children = a
            }
            return e => {
                var t;
                let { doc: n } = e.state
                    , l = function (e, t) {
                        var n;
                        let i = (0,
                            s.mv)(e).resolveInner(t, -1)
                            , r = null;
                        for (let a = i; !r && a.parent; a = a.parent)
                            "OpenTag" != a.name && "CloseTag" != a.name && "SelfClosingTag" != a.name && "MismatchedCloseTag" != a.name || (r = a);
                        if (r && (r.to > t || r.lastChild.type.isError)) {
                            let e = r.parent;
                            if ("TagName" == i.name)
                                return "CloseTag" == r.name || "MismatchedCloseTag" == r.name ? {
                                    type: "closeTag",
                                    from: i.from,
                                    context: e
                                } : {
                                    type: "openTag",
                                    from: i.from,
                                    context: Pr(e)
                                };
                            if ("AttributeName" == i.name)
                                return {
                                    type: "attrName",
                                    from: i.from,
                                    context: r
                                };
                            if ("AttributeValue" == i.name)
                                return {
                                    type: "attrValue",
                                    from: i.from,
                                    context: r
                                };
                            let n = i == r || "Attribute" == i.name ? i.childBefore(t) : i;
                            return "StartTag" == (null === n || void 0 === n ? void 0 : n.name) ? {
                                type: "openTag",
                                from: t,
                                context: Pr(e)
                            } : "StartCloseTag" == (null === n || void 0 === n ? void 0 : n.name) && n.to <= t ? {
                                type: "closeTag",
                                from: t,
                                context: e
                            } : "Is" == (null === n || void 0 === n ? void 0 : n.name) ? {
                                type: "attrValue",
                                from: t,
                                context: r
                            } : n ? {
                                type: "attrName",
                                from: t,
                                context: r
                            } : null
                        }
                        if ("StartCloseTag" == i.name)
                            return {
                                type: "closeTag",
                                from: t,
                                context: i.parent
                            };
                        for (; i.parent && i.to == t && !(null === (n = i.lastChild) || void 0 === n ? void 0 : n.type.isError);)
                            i = i.parent;
                        return "Element" == i.name || "Text" == i.name || "Document" == i.name ? {
                            type: "tag",
                            from: t,
                            context: "Element" == i.name ? i : Pr(i)
                        } : null
                    }(e.state, e.pos);
                if (!l || "tag" == l.type && !e.explicit)
                    return null;
                let { type: c, from: u, context: d } = l;
                if ("openTag" == c) {
                    let e = o
                        , t = Sr(n, d);
                    if (t) {
                        let n = O[t];
                        e = (null === n || void 0 === n ? void 0 : n.children) || a
                    }
                    return {
                        from: u,
                        options: e.map((e => e.completion)),
                        validFor: xr
                    }
                }
                if ("closeTag" == c) {
                    let i = Sr(n, d);
                    return i ? {
                        from: u,
                        to: e.pos + (">" == n.sliceString(e.pos, e.pos + 1) ? 1 : 0),
                        options: [(null === (t = O[i]) || void 0 === t ? void 0 : t.closeNameCompletion) || {
                            label: i + ">",
                            type: "type"
                        }],
                        validFor: xr
                    } : null
                }
                if ("attrName" == c) {
                    let e = O[yr(n, d)];
                    return {
                        from: u,
                        options: (null === e || void 0 === e ? void 0 : e.attrs) || i,
                        validFor: xr
                    }
                }
                if ("attrValue" == c) {
                    let t = function (e, t, n) {
                        let i = t && t.getChildren("Attribute").find((e => e.from <= n && e.to >= n))
                            , r = i && i.getChild("AttributeName");
                        return r ? e.sliceString(r.from, r.to) : ""
                    }(n, d, u);
                    if (!t)
                        return null;
                    let i = O[yr(n, d)]
                        , a = ((null === i || void 0 === i ? void 0 : i.attrValues) || r)[t];
                    return a && a.length ? {
                        from: u,
                        to: e.pos + ('"' == n.sliceString(e.pos, e.pos + 1) ? 1 : 0),
                        options: a,
                        validFor: /^"[^"]*"?$/
                    } : null
                }
                if ("tag" == c) {
                    let t = Sr(n, d)
                        , i = O[t]
                        , r = []
                        , s = d && d.lastChild;
                    !t || s && "CloseTag" == s.name && yr(n, s) == t || r.push(i ? i.closeCompletion : {
                        label: "</" + t + ">",
                        type: "type",
                        boost: 2
                    });
                    let l = r.concat(((null === i || void 0 === i ? void 0 : i.children) || (d ? a : o)).map((e => e.openCompletion)));
                    if (d && (null === i || void 0 === i ? void 0 : i.text.length)) {
                        let t = d.firstChild;
                        t.to > e.pos - 20 && !/\S/.test(e.state.sliceDoc(t.to, e.pos)) && (l = l.concat(i.text))
                    }
                    return {
                        from: u,
                        options: l,
                        validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
                    }
                }
                return null
            }
        }
        const _r = s.bj.define({
            name: "xml",
            parser: br.K.configure({
                props: [s.Oh.add({
                    Element(e) {
                        let t = /^\s*<\//.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    "OpenTag CloseTag SelfClosingTag": e => e.column(e.node.from) + e.unit
                }), s.b_.add({
                    Element(e) {
                        let t = e.firstChild
                            , n = e.lastChild;
                        return t && "OpenTag" == t.name ? {
                            from: t.to,
                            to: "CloseTag" == n.name ? n.from : e.to
                        } : null
                    }
                }), s.Q_.add({
                    "OpenTag CloseTag": e => e.getChild("TagName")
                })]
            }),
            languageData: {
                commentTokens: {
                    block: {
                        open: "\x3c!--",
                        close: "--\x3e"
                    }
                },
                indentOnInput: /^\s*<\/$/
            }
        });
        var Tr = n(5178);
        const zr = 5
            , Rr = 6
            , Wr = 20
            , Zr = 21
            , qr = 24;
        function Ur(e) {
            return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e >= 48 && e <= 57
        }
        function Yr(e, t, n) {
            for (let i = !1; ;) {
                if (e.next < 0)
                    return;
                if (e.next == t && !i)
                    return void e.advance();
                i = n && !i && 92 == e.next,
                    e.advance()
            }
        }
        function Ar(e, t) {
            for (; 95 == e.next || Ur(e.next);)
                null != t && (t += String.fromCharCode(e.next)),
                    e.advance();
            return t
        }
        function Vr(e, t) {
            for (; 48 == e.next || 49 == e.next;)
                e.advance();
            t && e.next == t && e.advance()
        }
        function Er(e, t) {
            for (; ;) {
                if (46 == e.next) {
                    if (t)
                        break;
                    t = !0
                } else if (e.next < 48 || e.next > 57)
                    break;
                e.advance()
            }
            if (69 == e.next || 101 == e.next)
                for (e.advance(),
                    43 != e.next && 45 != e.next || e.advance(); e.next >= 48 && e.next <= 57;)
                    e.advance()
        }
        function jr(e) {
            for (; !(e.next < 0 || 10 == e.next);)
                e.advance()
        }
        function Cr(e, t) {
            for (let n = 0; n < t.length; n++)
                if (t.charCodeAt(n) == e)
                    return !0;
            return !1
        }
        const Gr = " \t\r\n";
        function Ir(e, t, n) {
            let i = Object.create(null);
            i.true = i.false = zr,
                i.null = i.unknown = Rr;
            for (let r of e.split(" "))
                r && (i[r] = Wr);
            for (let r of t.split(" "))
                r && (i[r] = Zr);
            for (let r of (n || "").split(" "))
                r && (i[r] = qr);
            return i
        }
        const Dr = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying "
            , Nr = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone "
            , Lr = {
                backslashEscapes: !1,
                hashComments: !1,
                spaceAfterDashes: !1,
                slashComments: !1,
                doubleQuotedStrings: !1,
                doubleDollarQuotedStrings: !1,
                unquotedBitLiterals: !1,
                treatBitsAsBytes: !1,
                charSetCasts: !1,
                operatorChars: "*+-%<>!=&|~^/",
                specialVar: "?",
                identifierQuotes: '"',
                words: Ir(Nr, Dr)
            };
        function Mr(e) {
            return new Tr.Lu((t => {
                var n;
                let { next: i } = t;
                if (t.advance(),
                    Cr(i, Gr)) {
                    for (; Cr(t.next, Gr);)
                        t.advance();
                    t.acceptToken(36)
                } else if (36 == i && 36 == t.next && e.doubleDollarQuotedStrings)
                    !function (e) {
                        for (; ;) {
                            if (e.next < 0 || e.peek(1) < 0)
                                return;
                            if (36 == e.next && 36 == e.peek(1))
                                return void e.advance(2);
                            e.advance()
                        }
                    }(t),
                        t.acceptToken(3);
                else if (39 == i || 34 == i && e.doubleQuotedStrings)
                    Yr(t, i, e.backslashEscapes),
                        t.acceptToken(3);
                else if (35 == i && e.hashComments || 47 == i && 47 == t.next && e.slashComments)
                    jr(t),
                        t.acceptToken(1);
                else if (45 != i || 45 != t.next || e.spaceAfterDashes && 32 != t.peek(1))
                    if (47 == i && 42 == t.next) {
                        t.advance();
                        for (let e = -1, n = 1; !(t.next < 0);)
                            if (t.advance(),
                                42 == e && 47 == t.next) {
                                if (n--,
                                    !n) {
                                    t.advance();
                                    break
                                }
                                e = -1
                            } else
                                47 == e && 42 == t.next ? (n++,
                                    e = -1) : e = t.next;
                        t.acceptToken(2)
                    } else if (101 != i && 69 != i || 39 != t.next)
                        if (110 != i && 78 != i || 39 != t.next || !e.charSetCasts)
                            if (95 == i && e.charSetCasts)
                                for (let a = 0; ; a++) {
                                    if (39 == t.next && a > 1) {
                                        t.advance(),
                                            Yr(t, 39, e.backslashEscapes),
                                            t.acceptToken(3);
                                        break
                                    }
                                    if (!Ur(t.next))
                                        break;
                                    t.advance()
                                }
                            else if (40 == i)
                                t.acceptToken(7);
                            else if (41 == i)
                                t.acceptToken(8);
                            else if (123 == i)
                                t.acceptToken(9);
                            else if (125 == i)
                                t.acceptToken(10);
                            else if (91 == i)
                                t.acceptToken(11);
                            else if (93 == i)
                                t.acceptToken(12);
                            else if (59 == i)
                                t.acceptToken(13);
                            else if (e.unquotedBitLiterals && 48 == i && 98 == t.next)
                                t.advance(),
                                    Vr(t),
                                    t.acceptToken(22);
                            else if (98 != i && 66 != i || 39 != t.next && 34 != t.next) {
                                if (48 == i && (120 == t.next || 88 == t.next) || (120 == i || 88 == i) && 39 == t.next) {
                                    let e = 39 == t.next;
                                    for (t.advance(); (r = t.next) >= 48 && r <= 57 || r >= 97 && r <= 102 || r >= 65 && r <= 70;)
                                        t.advance();
                                    e && 39 == t.next && t.advance(),
                                        t.acceptToken(4)
                                } else if (46 == i && t.next >= 48 && t.next <= 57)
                                    Er(t, !0),
                                        t.acceptToken(4);
                                else if (46 == i)
                                    t.acceptToken(14);
                                else if (i >= 48 && i <= 57)
                                    Er(t, !1),
                                        t.acceptToken(4);
                                else if (Cr(i, e.operatorChars)) {
                                    for (; Cr(t.next, e.operatorChars);)
                                        t.advance();
                                    t.acceptToken(15)
                                } else if (Cr(i, e.specialVar))
                                    t.next == i && t.advance(),
                                        function (e) {
                                            if (39 == e.next || 34 == e.next || 96 == e.next) {
                                                let t = e.next;
                                                e.advance(),
                                                    Yr(e, t, !1)
                                            } else
                                                Ar(e)
                                        }(t),
                                        t.acceptToken(17);
                                else if (Cr(i, e.identifierQuotes))
                                    Yr(t, i, !1),
                                        t.acceptToken(19);
                                else if (58 == i || 44 == i)
                                    t.acceptToken(16);
                                else if (Ur(i)) {
                                    let r = Ar(t, String.fromCharCode(i));
                                    t.acceptToken(46 == t.next ? 18 : null !== (n = e.words[r.toLowerCase()]) && void 0 !== n ? n : 18)
                                }
                            } else {
                                const n = t.next;
                                t.advance(),
                                    e.treatBitsAsBytes ? (Yr(t, n, e.backslashEscapes),
                                        t.acceptToken(23)) : (Vr(t, n),
                                            t.acceptToken(22))
                            }
                        else
                            t.advance(),
                                Yr(t, 39, e.backslashEscapes),
                                t.acceptToken(3);
                    else
                        t.advance(),
                            Yr(t, 39, !0);
                else
                    jr(t),
                        t.acceptToken(1);
                var r
            }
            ))
        }
        const Fr = Mr(Lr)
            , Br = Tr.U1.deserialize({
                version: 14,
                states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
                stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
                goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
                nodeNames: "\u26a0 LineComment BlockComment String Number Bool Null ( ) [ ] { } ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
                maxTerm: 38,
                skippedNodes: [0, 1, 2],
                repeatNodeCount: 3,
                tokenData: "RORO",
                tokenizers: [0, Fr],
                topRules: {
                    Script: [0, 25]
                },
                tokenPrec: 0
            });
        function Hr(e) {
            let t = e.cursor().moveTo(e.from, -1);
            for (; /Comment/.test(t.name);)
                t.moveTo(t.from, -1);
            return t.node
        }
        function Kr(e, t) {
            let n = e.sliceString(t.from, t.to)
                , i = /^([`'"])(.*)\1$/.exec(n);
            return i ? i[2] : n
        }
        function Jr(e) {
            return e && ("Identifier" == e.name || "QuotedIdentifier" == e.name)
        }
        function ea(e, t) {
            if ("CompositeIdentifier" == t.name) {
                let n = [];
                for (let i = t.firstChild; i; i = i.nextSibling)
                    Jr(i) && n.push(Kr(e, i));
                return n
            }
            return [Kr(e, t)]
        }
        function ta(e, t) {
            for (let n = []; ;) {
                if (!t || "." != t.name)
                    return n;
                let i = Hr(t);
                if (!Jr(i))
                    return n;
                n.unshift(Kr(e, i)),
                    t = Hr(i)
            }
        }
        function na(e, t) {
            let n = (0,
                s.mv)(e).resolveInner(t, -1)
                , i = function (e, t) {
                    let n;
                    for (let r = t; !n; r = r.parent) {
                        if (!r)
                            return null;
                        "Statement" == r.name && (n = r)
                    }
                    let i = null;
                    for (let r = n.firstChild, a = !1, o = null; r; r = r.nextSibling) {
                        let t = "Keyword" == r.name ? e.sliceString(r.from, r.to).toLowerCase() : null
                            , n = null;
                        if (a)
                            if ("as" == t && o && Jr(r.nextSibling))
                                n = Kr(e, r.nextSibling);
                            else {
                                if (t && ia.has(t))
                                    break;
                                o && Jr(r) && (n = Kr(e, r))
                            }
                        else
                            a = "from" == t;
                        n && (i || (i = Object.create(null)),
                            i[n] = ea(e, o)),
                            o = /Identifier$/.test(r.name) ? r : null
                    }
                    return i
                }(e.doc, n);
            return "Identifier" == n.name || "QuotedIdentifier" == n.name || "Keyword" == n.name ? {
                from: n.from,
                quoted: "QuotedIdentifier" == n.name ? e.doc.sliceString(n.from, n.from + 1) : null,
                parents: ta(e.doc, Hr(n)),
                aliases: i
            } : "." == n.name ? {
                from: t,
                quoted: null,
                parents: ta(e.doc, n),
                aliases: i
            } : {
                from: t,
                quoted: null,
                parents: [],
                empty: !0,
                aliases: i
            }
        }
        const ia = new Set("where group having order union intersect except all distinct limit offset fetch for".split(" "));
        const ra = /^\w*$/
            , aa = /^[`'"]?\w*[`'"]?$/;
        class oa {
            constructor() {
                this.list = [],
                    this.children = void 0
            }
            child(e) {
                let t = this.children || (this.children = Object.create(null));
                return t[e] || (t[e] = new oa)
            }
            childCompletions(e) {
                return this.children ? Object.keys(this.children).filter((e => e)).map((t => ({
                    label: t,
                    type: e
                }))) : []
            }
        }
        let Oa = Br.configure({
            props: [s.Oh.add({
                Statement: (0,
                    s.mz)()
            }), s.b_.add({
                Statement: e => ({
                    from: e.firstChild.to,
                    to: e.to
                }),
                BlockComment: e => ({
                    from: e.from + 2,
                    to: e.to - 2
                })
            }), (0,
                pn.pn)({
                    Keyword: pn._A.keyword,
                    Type: pn._A.typeName,
                    Builtin: pn._A.standard(pn._A.name),
                    Bits: pn._A.number,
                    Bytes: pn._A.string,
                    Bool: pn._A.bool,
                    Null: pn._A.null,
                    Number: pn._A.number,
                    String: pn._A.string,
                    Identifier: pn._A.name,
                    QuotedIdentifier: pn._A.special(pn._A.string),
                    SpecialVar: pn._A.special(pn._A.name),
                    LineComment: pn._A.lineComment,
                    BlockComment: pn._A.blockComment,
                    Operator: pn._A.operator,
                    "Semi Punctuation": pn._A.punctuation,
                    "( )": pn._A.paren,
                    "{ }": pn._A.brace,
                    "[ ]": pn._A.squareBracket
                })]
        });
        class sa {
            constructor(e, t) {
                this.dialect = e,
                    this.language = t
            }
            get extension() {
                return this.language.extension
            }
            static define(e) {
                let t = function (e, t, n, i) {
                    let r = {};
                    for (let a in Lr)
                        r[a] = (e.hasOwnProperty(a) ? e : Lr)[a];
                    return t && (r.words = Ir(t, n || "", i)),
                        r
                }(e, e.keywords, e.types, e.builtin)
                    , n = s.bj.define({
                        name: "sql",
                        parser: Oa.configure({
                            tokenizers: [{
                                from: Fr,
                                to: Mr(t)
                            }]
                        }),
                        languageData: {
                            commentTokens: {
                                line: "--",
                                block: {
                                    open: "/*",
                                    close: "*/"
                                }
                            },
                            closeBrackets: {
                                brackets: ["(", "[", "{", "'", '"', "`"]
                            }
                        }
                    });
                return new sa(t, n)
            }
        }
        function la(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return function (e, t) {
                let n = Object.keys(e).map((n => ({
                    label: t ? n.toUpperCase() : n,
                    type: e[n] == Zr ? "type" : e[n] == Wr ? "keyword" : "variable",
                    boost: -1
                })));
                return (0,
                    Ct.Ar)(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], (0,
                        Ct.et)(n))
            }(e.dialect.words, t)
        }
        function ca(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return e.language.data.of({
                autocomplete: la(e, t)
            })
        }
        function ua(e) {
            return e.schema ? function (e, t, n, i) {
                let r = new oa
                    , a = r.child(i || "");
                for (let o in e) {
                    let t = o.indexOf(".");
                    (t > -1 ? r.child(o.slice(0, t)) : a).child(t > -1 ? o.slice(t + 1) : o).list = e[o].map((e => "string" == typeof e ? {
                        label: e,
                        type: "property"
                    } : e))
                }
                a.list = (t || a.childCompletions("type")).concat(n ? a.child(n).list : []);
                for (let o in r.children) {
                    let e = r.child(o);
                    e.list.length || (e.list = e.childCompletions("type"))
                }
                return r.list = a.list.concat(r.childCompletions("type")),
                    e => {
                        let { parents: t, from: i, quoted: o, empty: O, aliases: s } = na(e.state, e.pos);
                        if (O && !e.explicit)
                            return null;
                        s && 1 == t.length && (t = s[t[0]] || t);
                        let l = r;
                        for (let f of t) {
                            for (; !l.children || !l.children[f];)
                                if (l == r)
                                    l = a;
                                else {
                                    if (l != a || !n)
                                        return null;
                                    l = l.child(n)
                                }
                            l = l.child(f)
                        }
                        let c = o && e.state.sliceDoc(e.pos, e.pos + 1) == o
                            , u = l.list;
                        return l == r && s && (u = u.concat(Object.keys(s).map((e => ({
                            label: e,
                            type: "constant"
                        }))))),
                        {
                            from: i,
                            to: c ? e.pos + 1 : void 0,
                            options: (d = o,
                                h = u,
                                d ? h.map((e => Object.assign(Object.assign({}, e), {
                                    label: d + e.label + d,
                                    apply: void 0
                                }))) : h),
                            validFor: o ? aa : ra
                        };
                        var d, h
                    }
            }(e.schema, e.tables, e.defaultTable, e.defaultSchema) : () => null
        }
        function da(e) {
            return e.schema ? (e.dialect || fa).language.data.of({
                autocomplete: ua(e)
            }) : []
        }
        function ha() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , t = e.dialect || fa;
            return new s.Yy(t.language, [da(e), ca(t, !!e.upperCaseKeywords)])
        }
        const fa = sa.define({})
            , pa = sa.define({
                charSetCasts: !0,
                doubleDollarQuotedStrings: !0,
                operatorChars: "+-*/<>=~!@#%^&|`?",
                specialVar: "",
                keywords: Nr + "a abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom c cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion g generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull k key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower m mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner p parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time t table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes",
                types: Dr + "bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml"
            })
            , ma = "accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill"
            , ga = Dr + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed"
            , Qa = "charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee"
            , $a = sa.define({
                operatorChars: "*+-%<>!=&|^",
                charSetCasts: !0,
                doubleQuotedStrings: !0,
                unquotedBitLiterals: !0,
                hashComments: !0,
                spaceAfterDashes: !0,
                specialVar: "@?",
                identifierQuotes: "`",
                keywords: Nr + "group_concat " + ma,
                types: ga,
                builtin: Qa
            });
        var ba = n(62371)
            , ya = n(96434)
            , Sa = n(18227);
        const Pa = (0,
            pn.pn)({
                LineComment: pn._A.lineComment,
                BlockComment: pn._A.blockComment,
                AnyChar: pn._A.character,
                Literal: pn._A.string,
                "tokens from grammar as empty prop extend specialize AtName": pn._A.keyword,
                "@top @left @right @cut @external": pn._A.modifier,
                "@precedence @tokens @context @dialects @skip @detectDelim @conflict": pn._A.definitionKeyword,
                "@extend @specialize": pn._A.operatorKeyword,
                "CharSet InvertedCharSet": pn._A.regexp,
                CharClass: pn._A.atom,
                RuleName: pn._A.variableName,
                "RuleDeclaration/RuleName InlineRule/RuleName TokensBody/RuleName": pn._A.definition(pn._A.variableName),
                PrecedenceName: pn._A.labelName,
                Name: pn._A.name,
                "( )": pn._A.paren,
                "[ ]": pn._A.squareBracket,
                "{ }": pn._A.brace,
                '"!" ~ "*" + ? |': pn._A.operator
            })
            , va = {
                __proto__: null,
                "@asciiLetter": 244,
                "@asciiUpperCase": 244,
                "@asciiLowerCase": 244,
                "@digit": 244,
                "@whitespace": 244,
                "@eof": 244,
                "@specialize": 76,
                "@extend": 78,
                "@top": 98,
                "@precedence": 102,
                "@left": 108,
                "@right": 110,
                "@cut": 112,
                "@tokens": 116,
                "@conflict": 126,
                "@local": 134,
                "@else": 142,
                "@external": 146,
                "@context": 172,
                "@dialects": 176,
                "@skip": 182,
                "@detectDelim": 190
            }
            , xa = {
                __proto__: null,
                tokens: 136,
                from: 148,
                prop: 156,
                as: 158,
                propSource: 162,
                extend: 166,
                specialize: 168
            }
            , ka = Tr.U1.deserialize({
                version: 14,
                states: "<zQ]QPOOOOQO'#Ca'#CaO}QPO'#C`OOQO'#Eq'#EqOOQO'#E`'#E`Q]QPOOOxQPO'#D^O!YQPO'#D`O!_QPO'#DgO!dQQO'#DpO!iQQO'#D{O!zQPO'#ETO#PQPO'#EVO#UQPO'#EYOOQO'#E^'#E^O#ZQPO'#CdO#fQPO'#CnO$iQPO'#CoOOQO,58z,58zO#UQPO,58zO!QQPO,58zOOQO-E8^-E8^O}QPO,59xO$pQPO'#DbOOQO,59z,59zO$xQPO'#DiOOQO,5:R,5:RO%ZQPO,5:[O!zQPO,5:bO!zQPO,5:gO!zQPO,5:jO#UQPO,5:lOOQO'#Cg'#CgO%`QQO,5:oO%eQPO'#EXOOQO,5:q,5:qO%mQPO,5:tO&eQPO'#CeO&pQPO,59OO#^QPO,59OOOQO,59O,59OOOQO,59Y,59YO&xQPO,59YO(bQPO'#EyO(oQPO'#EyOOQO'#Ey'#EyOOQO'#Cv'#CvO)nQPO'#EwO#UQPO'#C}O*[QPO'#DQOOQO'#Ex'#ExO$sQPO'#DVO!zQPO'#DYOOQO'#E{'#E{O*cQPO'#DUOOQO'#Ew'#EwO*vQPO'#EfO+ZQPO'#D[O+lQPO'#EvOOQO'#Ev'#EvOOQO,59Z,59ZO+}QPO,59ZO,SQPO'#DROOQO1G.f1G.fO#UQPO1G.fOOQO1G/d1G/dO#UQPO1G/dO!QQPO1G/dOOQO'#DX'#DXO,[QPO'#DcO,pQPO'#EgO,{QPO,59|OOQO,59|,59|O-TQPO'#DoOOQO'#E|'#E|OOQO'#Eh'#EhO-lQPO,5:TOOQO,5:T,5:TO-}QPO'#DjO.SQPO'#DlO.jQPO'#DsOOQO1G/v1G/vO.qQQO1G/|O.vQQO1G0RO/OQQO1G0UO!zQPO1G0WO/TQPO1G0ZO/YQPO'#ElO/eQPO,5:sOOQO,5:s,5:sO/mQPO'#E]OOQO1G0b1G0bO/xQPO,59POOQO,5:{,5:{OOQO1G.j1G.jO0^QPO1G.jOOQO-E8_-E8_O!zQPO'#EcO0fQPO1G.tOOQO1G.t1G.tOxQPO,59_O0nQPO'#CuOOQO,59`,59`OOQO,59i,59iO#UQPO,59iO0uQPO'#EeOOQO,59d,59dOOQO,59f,59fOOQO,59h,59hOOQO'#Ee'#EeO2VQPO,59pOOQO,59l,59lO2jQPO,59lOOQO,59q,59qOOQO,59t,59tOOQO,5;Q,5;QOOQO-E8d-E8dO2oQPO,59vOOQO1G.u1G.uOOQO,59m,59mO,VQPO,59mOOQO7+$Q7+$QOOQO7+%O7+%OO#UQPO7+%OOOQO,59},59}OOQO,5;R,5;ROOQO-E8e-E8eOOQO1G/h1G/hOOQO,5:Z,5:ZOOQO-E8f-E8fOOQO1G/o1G/oO3QQPO'#DkOOQO,5:U,5:UO3]QPO'#DnOOQO,5:W,5:WOOQO'#Ej'#EjO3eQPO,5:_OOQO,5:_,5:_OxQPO'#DtO3lQPO7+%hO3qQPO7+%mO!zQPO7+%mO3vQPO7+%pO3{QQO7+%rOOQO7+%u7+%uOOQO,5;W,5;WOOQO-E8j-E8jOOQO1G0_1G0_OOQO'#Em'#EmO4QQPO,5:wOOQO,5:w,5:wOxQPO'#CmOOQO'#Eb'#EbO4]QPO1G.kOOQO7+$U7+$UP&sQPO'#EaOOQO,5:},5:}OOQO-E8a-E8aOOQO7+$`7+$`OOQO1G.y1G.yOOQO,59a,59aO4qQPO,59aOOQO1G/T1G/TOOQO-E8c-E8cOOQO1G/W1G/WOOQO1G/X1G/XOOQO<<Hj<<HjO4yQPO'#EyO5_QPO'#EiO5mQPO,5:VOOQO,5:V,5:VO5xQPO,5:YOOQO-E8h-E8hOOQO1G/y1G/yO6TQPO,5:`O6lQPO<<ISOOQO<<IX<<IXO6qQQO<<IXOOQO<<I[<<I[O6vQPO<<I^OOQO-E8k-E8kOOQO1G0c1G0cO6{QPO,59XOOQO-E8`-E8`O#nQPO'#EdO7QQPO1G.{OOQO1G.{1G.{OOQO,5;T,5;TOOQO-E8g-E8gOOQO1G/q1G/qO7YQPO1G/tO7_QPO1G/tOOQO1G/z1G/zO7gQPO'#DyOOQOAN>nAN>nO7oQPOAN>sO6lQPOAN>xOOQO1G.s1G.sOOQO,5;O,5;OOOQO-E8b-E8bOOQO7+$g7+$gOOQO7+%`7+%`O7tQPO7+%`O7yQPO'#DzO8XQPO'#EkO8dQPO,5:eOOQO,5:e,5:eOOQOG24_G24_OOQOG24dG24dOOQO<<Hz<<HzOOQO,5:f,5:fOOQO,5;V,5;VOOQO-E8i-E8iOOQO1G0P1G0P",
                stateData: "8s~O#dOSPOSQOS~O!RUO!TVO![WO!eXO!kYO!xZO!z[O!}]O#R^O#fPO~OV_O`aO#i`O~O`gO~O`iO~O!fkO~O!flO!pmO!snO!uoO!voO~O#fpO~O`rO~O`aO~OUxOYuO#fpO~O#fpO#hyO~OV_O]!SOd!SOe!SOf!SOs!ROv!`Ow!`Oz!TO}!UO!P!YO#fPO#n!OO~O_!^O~P#nO_!jO#f!fO~O]!kO_!oO!T!pO!a!qO#fPO~O`!rO~O!l!xO~O_!{O#fpO~O`!|O!R!|a!T!|a![!|a!e!|a!k!|a!x!|a!z!|a!}!|a#R!|a#b!|a#f!|a~O[#OOUXX#gXX~OU#QO#g#PO~O#g#TO#h#VO~O#i#XO]#mX_#mXd#mXe#mXf#mXk#mXm#mXo#mXs#mXv#mXw#mXz#mX}#mX!P#mX#f#mX#n#mXr#mX#g#mX#h#mX~OV_O^#WO`aO~P'QOV#mX~P'QOV_O]!SOd!SOe!SOf!SOs!ROv!`Ow!`Oz!TO}!UO#fPO#n!OO~Ok#^Om#_Oo#`O_#kX!P#kXr#kX#g#kX#h#kX~P(vOr#cO~P#nO_xX!PxXrxX#gxX#hxX~P(vO_#YX!P#YXr#YX#g#YX#h#YX~P(vO!P!YO_!OXr!OX#g!OX#h!OX~O!P!YO_#jXr#jX#g#jX#h#jX~O_#jO~OV_O#i#XO~O!W#pO!X#pO!Y#pO_!VX#f!VX#g!VX~O#g#qO_#ZX#f#ZX~O_#sO#f!fO~OV_O]!cX_!cX!T!cX!a!cX#f!cX!i!cX~O]!kO_#vO!T!pO!a!qO#fPO~O`#wO~O`#yO~O]!kO!T!pO!a!qO!i$OO#fPO~O_#}O~P.XO!l$PO~O!l$QO!q$RO~O!l$SO~O]$UO~O#g$VO_#`X#f#`X~O_$XO#fpO~O_$[O!RUO#fPO~O]$^O^$^O`$]O#fpOUXa#gXa~OU$`O#g#PO~O#g#TO#h$dO~O#h$fO~P#nOk#^Om#_Oo#`OV#XX]#XX_#XXd#XXe#XXf#XXs#XXv#XXw#XXz#XX}#XX!P#XX#f#XX#n#XXr#XX#g#XX#h#XX~O_xa!Pxarxa#gxa#hxa~P(vOr$jO~O!P!YO_!Oar!Oa#g!Oa#h!Oa~O]$nO_$pO#fPO~O]$qO#fPO~O_$sO~P.XO]$uO~O]$vO~O]$xO~O!l$yO~O_${O!RUO#fPO~O]$^O^$^O`$]O#fpOUXi#gXi~O#g%OO#h%QO~O^#WO#i#XO]#mX_#mX#f#mX#g#mX~O#g%RO]#]X_#]X#f#]X~O]$nO_%TO#fPO~O]%UO#fPO#g%VO~OV_O]!ha_!ha!T!ha!a!ha!i!ha#f!ha~O`%XO~O!l%ZO~O]%[O~O_%]O~O#g%OO#h%`O~O_%aO~O]%bO#fPO~O_%fO#fPO~O]%gO~O_%iO~OV_O_!nX#f!nX#g!nX~O#g%kO_#_X#f#_X~O_%mO#fPO~Oe#dfz#f#q~",
                goto: ".d#qPPPP#r$QPP$}%nP%tPPPPP&m&q&}PPP'p(P(`(kP(kP(kP(k(kPP(k(kPP(u(|P)W(|P)_P)eP)mP)q)tPPP)mP)x){*R){P*U){)mPP*X*[P)mPP*`*f)mPP)mP)mPP)mP)mP*j)mP)m*m)mP*p*v*|+S+Y+`+g+t+z,Q,W,^,d,jPPP,pPPPP,t-Q-Z-gP.O.[SROTW!li!n!r#|T$Y!|$Z`QOTi!n!r!|#|$ZQfU`{a!P!R!W!Y#X#b%OQ$e#WY$m#w#y$o$q%VQ$t$OQ$|$]T%c%X%eQdQ`!Qa!P!R!W!Y#X#b%OQ!efQ#[{Q#l!`Q#t!kQ%W$tR%j%cQv_R#RwQqZSu_wQz`Q!tlQ!umQ!vnS!yr!zQ#f!UQ$T!wS$^#O$_Q$b#TR$w$RT$^#O$_QcQQ!bdQ!dfR#o!eQbQQt]S!acdQ!cfQ!woS#Z{!QQ#m!bS#n!d!eQ$h#[R$l#ok|a!P!R!W!Y#X#b#w#y$o$q%O%Vk}a!P!R!W!Y#X#b#w#y$o$q%O%VU#Y{|$mQ#k!`R$k#la!Sa!P!R!W!Y#X#b%OZ!Xa!R!Y#X%Oa!Va!P!R!W!Y#X#b%OS!gg!iR#e!TX!]a!R#X%OSROTT$Y!|$ZTROTRhVT!hg!iRjWX!li!n!r#|R#x!pR#z!qR!skT#{!r#|Q%Y$uR%h%[T%d%X%eRs[R!}tQTOReTQw_R#SwQ$_#OR$}$_Q#UzR$c#UQ%P$gR%_%PS#b!P!WR$i#bW!Za!R#X%OS#h!Z#iR#i![Q!igR#r!iQ!niR#u!nQ$o#wR%S$oQ#|!rR$r#|Q%e%XR%l%eQ!zrR$W!zQ$Z!|R$z$ZTSOTQ!_aQ#d!RQ$g#XR%^%OW![a!R#X%OR#g!YY!Pa!R!Y#X%OV#]!P!W#b`!Sa!P!R!W!Y#X#b%OS$n#w$oQ$q#yQ%U$qR%b%VY!Wa!R!Y#X%OV#a!P!W#bS!mi!nT#{!r#|",
                nodeNames: "\u26a0 LineComment BlockComment Grammar RuleDeclaration RuleName ] [ Props Prop AtName Name = Literal . } { PropEsc ParamList Body CharSet AnyChar InvertedCharSet ScopedName Call ArgList CharClass ? Optional * Repeat + Repeat1 InlineRule ) ( ParenExpression Specialization @specialize @extend Sequence PrecedenceMarker ! PrecedenceName AmbiguityMarker ~ Choice | RuleDeclaration @top PrecedenceDeclaration @precedence PrecedenceBody Precedence @left @right @cut TokensDeclaration @tokens TokensBody TokenPrecedenceDeclaration PrecedenceBody TokenConflictDeclaration @conflict ConflictBody LiteralTokenDeclaration LocalTokensDeclaration @local tokens TokensBody ElseToken @else ExternalTokensDeclaration @external from TokensBody Token ExternalPropDeclaration prop as ExternalPropSourceDeclaration propSource ExternalSpecializeDeclaration extend specialize ContextDeclaration @context DialectsDeclaration @dialects DialectBody TopSkipDeclaration @skip SkipScope SkipBody DetectDelimDeclaration @detectDelim",
                maxTerm: 125,
                nodeProps: [["group", 4, "Declaration Declaration", -16, 5, 13, 20, 21, 22, 23, 24, 26, 28, 30, 32, 33, 36, 37, 40, 46, "Expression", -16, 48, 50, 57, 60, 62, 65, 66, 72, 77, 80, 82, 85, 87, 90, 92, 94, "Declaration"], ["openedBy", 6, "[", 15, "{", 34, "("], ["closedBy", 7, "]", 16, "}", 35, ")"]],
                propSources: [Pa],
                skippedNodes: [0, 1, 2],
                repeatNodeCount: 14,
                tokenData: "3w~R!OX^$Rpq$Rqr$vrs&ftu(^wx)zxy+myz+rz{+w{|+||},R}!O,W!O!P,}!P!Q-S!Q![,W!^!_.{!_!`/Q!`!a/V!a!b/[!b!c/a!c!},W!}#O0q#P#Q0v#R#S0{#T#o,W#o#p1n#p#q1s#q#r1x#r#s1}#y#z$R$f$g$R$g#BY,W#BY#BZ2S#BZ$IS,W$IS$I_2S$I_$I|,W$I|$JO2S$JO$JT,W$JT$JU2S$JU$KV,W$KV$KW2S$KW&FU,W&FU&FV2S&FV;'S,W;'S;=`,w<%lO,W~$WY#d~X^$Rpq$R#y#z$R$f$g$R#BY#BZ$R$IS$I_$R$I|$JO$R$JT$JU$R$KV$KW$R&FU&FV$R~${Pz~!}#O%O~%RUO#O%O#O#P%e#P#Q&Z#Q;'S%O;'S;=`&`<%lO%O~%hRO;'S%O;'S;=`%q;=`O%O~%tVO#O%O#O#P%e#P#Q&Z#Q;'S%O;'S;=`&`;=`<%l%O<%lO%O~&`Of~~&cP;=`<%l%O~&kW]~OY&fZr&frs'Ts#O&f#O#P'Y#P;'S&f;'S;=`(W<%lO&f~'YO]~~']RO;'S&f;'S;=`'f;=`O&f~'kX]~OY&fZr&frs'Ts#O&f#O#P'Y#P;'S&f;'S;=`(W;=`<%l&f<%lO&f~(ZP;=`<%l&f~(aP!}#O(d~(gUO#O(d#O#P(y#P#Q)o#Q;'S(d;'S;=`)t<%lO(d~(|RO;'S(d;'S;=`)V;=`O(d~)YVO#O(d#O#P(y#P#Q)o#Q;'S(d;'S;=`)t;=`<%l(d<%lO(d~)tOd~~)wP;=`<%l(d~*PW]~OY)zZw)zwx'Tx#O)z#O#P*i#P;'S)z;'S;=`+g<%lO)z~*lRO;'S)z;'S;=`*u;=`O)z~*zX]~OY)zZw)zwx'Tx#O)z#O#P*i#P;'S)z;'S;=`+g;=`<%l)z<%lO)z~+jP;=`<%l)z~+rOs~~+wOr~~+|Om~~,ROo~~,WO#g~R,_W#fP#qQ}!O,W!Q![,W!c!},W#R#S,W#T#o,W$g;'S,W;'S;=`,w<%lO,WR,zP;=`<%l,W~-SO^~~-VQz{-]!P!Q.d~-`TOz-]z{-o{;'S-];'S;=`.^<%lO-]~-rVOz-]z{-o{!P-]!P!Q.X!Q;'S-];'S;=`.^<%lO-]~.^OQ~~.aP;=`<%l-]~.iSP~OY.dZ;'S.d;'S;=`.u<%lO.d~.xP;=`<%l.d~/QO#i~~/VO[~~/[O#h~~/aOk~~/dW}!O/|!Q![/|!c!}/|#R#S/|#T#o/|$g;'S/|;'S;=`0k<%lO/|~0RWY~}!O/|!Q![/|!c!}/|#R#S/|#T#o/|$g;'S/|;'S;=`0k<%lO/|~0nP;=`<%l/|~0vOV~~0{OU~R1UWeP#fP#qQ}!O,W!Q![,W!c!},W#R#S,W#T#o,W$g;'S,W;'S;=`,w<%lO,W~1sO`~~1xO!P~~1}O_~~2SO}~~2]h#d~#fP#qQX^$Rpq$R}!O,W!Q![,W!c!},W#R#S,W#T#o,W#y#z$R$f$g$R$g#BY,W#BY#BZ2S#BZ$IS,W$IS$I_2S$I_$I|,W$I|$JO2S$JO$JT,W$JT$JU2S$JU$KV,W$KV$KW2S$KW&FU,W&FU&FV2S&FV;'S,W;'S;=`,w<%lO,W",
                tokenizers: [0, 1],
                topRules: {
                    Grammar: [0, 3]
                },
                specialized: [{
                    term: 10,
                    get: e => va[e] || -1
                }, {
                    term: 125,
                    get: e => xa[e] || -1
                }],
                tokenPrec: 1086
            })
            , wa = s.bj.define({
                name: "lezer",
                parser: ka.configure({
                    props: [s.b_.add({
                        "Body TokensBody SkipBody PrecedenceBody": s.yd
                    })]
                }),
                languageData: {
                    commentTokens: {
                        block: {
                            open: "/*",
                            close: "*/"
                        },
                        line: "//"
                    },
                    indentOnInput: /^\s*\}$/
                }
            });
        var Xa, _a = n(66195), Ta = n(80900), za = n(34480), Ra = n(11121), Wa = n(32951), Za = n(92872), qa = n(49921), Ua = n(82143), Ya = n(39624), Aa = n(56956), Va = n(39740), Ea = n(69976), ja = n(11206), Ca = n(35833), Ga = n(43840), Ia = n(41191), Da = n(63480), Na = n(71081), La = n(66687), Ma = n(71257), Fa = n(79624), Ba = n(5563), Ha = n(56344), Ka = n(93895), Ja = n(79448), eo = n(8204), to = n(5826), no = n(71540), io = n(81433), ro = n(79554), ao = n(31197), oo = {
            break: !0,
            case: !0,
            chan: !0,
            const: !0,
            continue: !0,
            default: !0,
            defer: !0,
            else: !0,
            fallthrough: !0,
            for: !0,
            func: !0,
            go: !0,
            goto: !0,
            if: !0,
            import: !0,
            interface: !0,
            map: !0,
            package: !0,
            range: !0,
            return: !0,
            select: !0,
            struct: !0,
            switch: !0,
            type: !0,
            var: !0,
            bool: !0,
            byte: !0,
            complex64: !0,
            complex128: !0,
            float32: !0,
            float64: !0,
            int8: !0,
            int16: !0,
            int32: !0,
            int64: !0,
            string: !0,
            uint8: !0,
            uint16: !0,
            uint32: !0,
            uint64: !0,
            int: !0,
            uint: !0,
            uintptr: !0,
            error: !0,
            rune: !0,
            any: !0,
            comparable: !0
        }, Oo = {
            true: !0,
            false: !0,
            iota: !0,
            nil: !0,
            append: !0,
            cap: !0,
            close: !0,
            complex: !0,
            copy: !0,
            delete: !0,
            imag: !0,
            len: !0,
            make: !0,
            new: !0,
            panic: !0,
            print: !0,
            println: !0,
            real: !0,
            recover: !0
        }, so = /[+\-*&^%:=<>!|\/]/;
        function lo(e, t) {
            var n, i = e.next();
            if ('"' == i || "'" == i || "`" == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "`" != n && "\\" == i
                        }
                        return (a || !r && "`" != n) && (t.tokenize = lo),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[\d\.]/.test(i))
                return "." == i ? e.match(/^[0-9]+([eE][\-+]?[0-9]+)?/) : "0" == i ? e.match(/^[xX][0-9a-fA-F]+/) || e.match(/^0[0-7]+/) : e.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/),
                    "number";
            if (/[\[\]{}\(\),;\:\.]/.test(i))
                return Xa = i,
                    null;
            if ("/" == i) {
                if (e.eat("*"))
                    return t.tokenize = co,
                        co(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment"
            }
            if (so.test(i))
                return e.eatWhile(so),
                    "operator";
            e.eatWhile(/[\w\$_\xa1-\uffff]/);
            var r = e.current();
            return oo.propertyIsEnumerable(r) ? ("case" != r && "default" != r || (Xa = "case"),
                "keyword") : Oo.propertyIsEnumerable(r) ? "atom" : "variable"
        }
        function co(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = lo;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function uo(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        function ho(e, t, n) {
            return e.context = new uo(e.indented, t, n, null, e.context)
        }
        function fo(e) {
            if (e.context.prev) {
                var t = e.context.type;
                return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                    e.context = e.context.prev
            }
        }
        const po = {
            name: "go",
            startState: function (e) {
                return {
                    tokenize: null,
                    context: new uo(-e, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0,
                    "case" == n.type && (n.type = "}")),
                    e.eatSpace())
                    return null;
                Xa = null;
                var i = (t.tokenize || lo)(e, t);
                return "comment" == i || (null == n.align && (n.align = !0),
                    "{" == Xa ? ho(t, e.column(), "}") : "[" == Xa ? ho(t, e.column(), "]") : "(" == Xa ? ho(t, e.column(), ")") : "case" == Xa ? n.type = "case" : ("}" == Xa && "}" == n.type || Xa == n.type) && fo(t),
                    t.startOfLine = !1),
                    i
            },
            indent: function (e, t, n) {
                if (e.tokenize != lo && null != e.tokenize)
                    return null;
                var i = e.context
                    , r = t && t.charAt(0);
                if ("case" == i.type && /^(?:case|default)\b/.test(t))
                    return i.indented;
                var a = r == i.type;
                return i.align ? i.column + (a ? 0 : 1) : i.indented + (a ? 0 : n.unit)
            },
            languageData: {
                indentOnInput: /^\s([{}]|case |default\s*:)$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        };
        var mo = n(49673)
            , go = n(18647)
            , Qo = n(99071)
            , $o = n(15747)
            , bo = n(32332)
            , yo = n(17269)
            , So = n(76974)
            , Po = n(59702)
            , vo = n(43093)
            , xo = n(8083)
            , ko = n(20235)
            , wo = n(2206)
            , Xo = n(1375)
            , _o = n(32818)
            , To = n(5091)
            , zo = n(47239)
            , Ro = n(1440)
            , Wo = n(69144)
            , Zo = n(91811)
            , qo = n(52138)
            , Uo = n(95319)
            , Yo = n(89086)
            , Ao = n(28799)
            , Vo = n(21706)
            , Eo = n(73802)
            , jo = n(21608)
            , Co = n(44853)
            , Go = n(28780)
            , Io = n(87061)
            , Do = n(87179)
            , No = n(254);
        const Lo = new Set(Ya.keywords.properties)
            , Mo = new Set(Ya.keywords.colors)
            , Fo = new Set(Ya.keywords.values)
            , Bo = new Set(Ya.keywords.fonts);
        let Ho = new RegExp("^" + ["true", "false", "null", "auto"].join("|"))
            , Ko = new RegExp("^" + ["\\(", "\\)", "=", ">", "<", "==", ">=", "<=", "\\+", "-", "\\!=", "/", "\\*", "%", "and", "or", "not", ";", "\\{", "\\}", ":"].join("|"));
        let Jo, eO = /^::?[a-zA-Z_][\w\-]*/;
        function tO(e) {
            return !e.peek() || e.match(/\s+$/, !1)
        }
        function nO(e, t) {
            let n = e.peek();
            return ")" === n ? (e.next(),
                t.tokenizer = sO,
                "operator") : "(" === n ? (e.next(),
                    e.eatSpace(),
                    "operator") : "'" === n || '"' === n ? (t.tokenizer = rO(e.next()),
                        "string") : (t.tokenizer = rO(")", !1),
                            "string")
        }
        function iO(e, t) {
            return function (n, i) {
                return n.sol() && n.indentation() <= e ? (i.tokenizer = sO,
                    sO(n, i)) : (t && n.skipTo("*/") ? (n.next(),
                        n.next(),
                        i.tokenizer = sO) : n.skipToEnd(),
                        "comment")
            }
        }
        function rO(e, t) {
            return null == t && (t = !0),
                function n(i, r) {
                    let a = i.next()
                        , o = i.peek()
                        , O = i.string.charAt(i.pos - 2);
                    return "\\" !== a && o === e || a === e && "\\" !== O ? (a !== e && t && i.next(),
                        tO(i) && (r.cursorHalf = 0),
                        r.tokenizer = sO,
                        "string") : "#" === a && "{" === o ? (r.tokenizer = aO(n),
                            i.next(),
                            "operator") : "string"
                }
        }
        function aO(e) {
            return function (t, n) {
                return "}" === t.peek() ? (t.next(),
                    n.tokenizer = e,
                    "operator") : sO(t, n)
            }
        }
        function oO(e, t) {
            if (0 == e.indentCount) {
                e.indentCount++;
                let n = e.scopes[0].offset + t.indentUnit;
                e.scopes.unshift({
                    offset: n
                })
            }
        }
        function OO(e) {
            1 != e.scopes.length && e.scopes.shift()
        }
        function sO(e, t) {
            let n = e.peek();
            if (e.match("/*"))
                return t.tokenizer = iO(e.indentation(), !0),
                    t.tokenizer(e, t);
            if (e.match("//"))
                return t.tokenizer = iO(e.indentation(), !1),
                    t.tokenizer(e, t);
            if (e.match("#{"))
                return t.tokenizer = aO(sO),
                    "operator";
            if ('"' === n || "'" === n)
                return e.next(),
                    t.tokenizer = rO(n),
                    "string";
            if (t.cursorHalf) {
                if ("#" === n && (e.next(),
                    e.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)))
                    return tO(e) && (t.cursorHalf = 0),
                        "number";
                if (e.match(/^-?[0-9\.]+/))
                    return tO(e) && (t.cursorHalf = 0),
                        "number";
                if (e.match(/^(px|em|in)\b/))
                    return tO(e) && (t.cursorHalf = 0),
                        "unit";
                if (e.match(Ho))
                    return tO(e) && (t.cursorHalf = 0),
                        "keyword";
                if (e.match(/^url/) && "(" === e.peek())
                    return t.tokenizer = nO,
                        tO(e) && (t.cursorHalf = 0),
                        "atom";
                if ("$" === n)
                    return e.next(),
                        e.eatWhile(/[\w-]/),
                        tO(e) && (t.cursorHalf = 0),
                        "variable-2";
                if ("!" === n)
                    return e.next(),
                        t.cursorHalf = 0,
                        e.match(/^[\w]+/) ? "keyword" : "operator";
                if (e.match(Ko))
                    return tO(e) && (t.cursorHalf = 0),
                        "operator";
                if (e.eatWhile(/[\w-]/))
                    return tO(e) && (t.cursorHalf = 0),
                        Jo = e.current().toLowerCase(),
                        Fo.has(Jo) ? "atom" : Mo.has(Jo) ? "keyword" : Lo.has(Jo) ? (t.prevProp = e.current().toLowerCase(),
                            "property") : "tag";
                if (tO(e))
                    return t.cursorHalf = 0,
                        null
            } else {
                if ("-" === n && e.match(/^-\w+-/))
                    return "meta";
                if ("." === n) {
                    if (e.next(),
                        e.match(/^[\w-]+/))
                        return oO(t, e),
                            "qualifier";
                    if ("#" === e.peek())
                        return oO(t, e),
                            "tag"
                }
                if ("#" === n) {
                    if (e.next(),
                        e.match(/^[\w-]+/))
                        return oO(t, e),
                            "builtin";
                    if ("#" === e.peek())
                        return oO(t, e),
                            "tag"
                }
                if ("$" === n)
                    return e.next(),
                        e.eatWhile(/[\w-]/),
                        "variable-2";
                if (e.match(/^-?[0-9\.]+/))
                    return "number";
                if (e.match(/^(px|em|in)\b/))
                    return "unit";
                if (e.match(Ho))
                    return "keyword";
                if (e.match(/^url/) && "(" === e.peek())
                    return t.tokenizer = nO,
                        "atom";
                if ("=" === n && e.match(/^=[\w-]+/))
                    return oO(t, e),
                        "meta";
                if ("+" === n && e.match(/^\+[\w-]+/))
                    return "meta";
                if ("@" === n && e.match("@extend") && (e.match(/\s*[\w]/) || OO(t)),
                    e.match(/^@(else if|if|media|else|for|each|while|mixin|function)/))
                    return oO(t, e),
                        "def";
                if ("@" === n)
                    return e.next(),
                        e.eatWhile(/[\w-]/),
                        "def";
                if (e.eatWhile(/[\w-]/)) {
                    if (e.match(/ *: *[\w-\+\$#!\("']/, !1)) {
                        Jo = e.current().toLowerCase();
                        let n = t.prevProp + "-" + Jo;
                        return Lo.has(n) ? "property" : Lo.has(Jo) ? (t.prevProp = Jo,
                            "property") : Bo.has(Jo) ? "property" : "tag"
                    }
                    return e.match(/ *:/, !1) ? (oO(t, e),
                        t.cursorHalf = 1,
                        t.prevProp = e.current().toLowerCase(),
                        "property") : (e.match(/ *,/, !1) || oO(t, e),
                            "tag")
                }
                if (":" === n)
                    return e.match(eO) ? "type" : (e.next(),
                        t.cursorHalf = 1,
                        "operator")
            }
            return e.match(Ko) ? "operator" : (e.next(),
                null)
        }
        const lO = {
            name: "sass",
            startState: function () {
                return {
                    tokenizer: sO,
                    scopes: [{
                        offset: 0,
                        type: "sass"
                    }],
                    indentCount: 0,
                    cursorHalf: 0,
                    definedVars: [],
                    definedMixins: []
                }
            },
            token: function (e, t) {
                let n = function (e, t) {
                    e.sol() && (t.indentCount = 0);
                    let n = t.tokenizer(e, t)
                        , i = e.current();
                    if ("@return" !== i && "}" !== i || OO(t),
                        null !== n) {
                        let n = e.pos - i.length + e.indentUnit * t.indentCount
                            , r = [];
                        for (let e = 0; e < t.scopes.length; e++) {
                            let i = t.scopes[e];
                            i.offset <= n && r.push(i)
                        }
                        t.scopes = r
                    }
                    return n
                }(e, t);
                return t.lastToken = {
                    style: n,
                    content: e.current()
                },
                    n
            },
            indent: function (e) {
                return e.scopes[0].offset
            },
            languageData: {
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                autocomplete: Ya.keywords.all
            }
        };
        var cO = n(65736)
            , uO = n(79257)
            , dO = n(36113)
            , hO = n(52202)
            , fO = n(2827)
            , pO = n(36374)
            , mO = n(85273)
            , gO = n(33201)
            , QO = n(31353)
            , $O = n(16868)
            , bO = n(86668)
            , yO = n(97834)
            , SO = n(31991)
            , PO = n(31984)
            , vO = n(53187)
            , xO = n(92904)
            , kO = n(50)
            , wO = n(83465)
            , XO = n(90099)
            , _O = n(69996)
            , TO = n(46316)
            , zO = n(23157)
            , RO = n(77653)
            , WO = n(68010)
            , ZO = n(41655)
            , qO = n(74012)
            , UO = new RegExp("\\b((" + ["true", "false", "on", "off", "yes", "no"].join(")|(") + "))$", "i");
        const YO = {
            name: "yaml",
            token: function (e, t) {
                var n = e.peek()
                    , i = t.escaped;
                if (t.escaped = !1,
                    "#" == n && (0 == e.pos || /\s/.test(e.string.charAt(e.pos - 1))))
                    return e.skipToEnd(),
                        "comment";
                if (e.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
                    return "string";
                if (t.literal && e.indentation() > t.keyCol)
                    return e.skipToEnd(),
                        "string";
                if (t.literal && (t.literal = !1),
                    e.sol()) {
                    if (t.keyCol = 0,
                        t.pair = !1,
                        t.pairStart = !1,
                        e.match("---"))
                        return "def";
                    if (e.match("..."))
                        return "def";
                    if (e.match(/^\s*-\s+/))
                        return "meta"
                }
                if (e.match(/^(\{|\}|\[|\])/))
                    return "{" == n ? t.inlinePairs++ : "}" == n ? t.inlinePairs-- : "[" == n ? t.inlineList++ : t.inlineList--,
                        "meta";
                if (t.inlineList > 0 && !i && "," == n)
                    return e.next(),
                        "meta";
                if (t.inlinePairs > 0 && !i && "," == n)
                    return t.keyCol = 0,
                        t.pair = !1,
                        t.pairStart = !1,
                        e.next(),
                        "meta";
                if (t.pairStart) {
                    if (e.match(/^\s*(\||\>)\s*/))
                        return t.literal = !0,
                            "meta";
                    if (e.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i))
                        return "variable";
                    if (0 == t.inlinePairs && e.match(/^\s*-?[0-9\.\,]+\s?$/))
                        return "number";
                    if (t.inlinePairs > 0 && e.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/))
                        return "number";
                    if (e.match(UO))
                        return "keyword"
                }
                return !t.pair && e.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/) ? (t.pair = !0,
                    t.keyCol = e.indentation(),
                    "atom") : t.pair && e.match(/^:\s*/) ? (t.pairStart = !0,
                        "meta") : (t.pairStart = !1,
                            t.escaped = "\\" == n,
                            e.next(),
                            null)
            },
            startState: function () {
                return {
                    pair: !1,
                    pairStart: !1,
                    keyCol: 0,
                    inlinePairs: 0,
                    inlineList: 0,
                    literal: !1,
                    escaped: !1
                }
            },
            languageData: {
                commentTokens: {
                    line: "#"
                }
            }
        };
        var AO = n(52341)
            , VO = {
                apl: () => s.Tg.define(za.apl),
                asciiArmor: () => s.Tg.define(Ra.asciiArmor),
                asterisk: () => s.Tg.define(Wa.asterisk),
                c: () => s.Tg.define(qa.c),
                csharp: () => s.Tg.define(qa.csharp),
                scala: () => s.Tg.define(qa.scala),
                kotlin: () => s.Tg.define(qa.kotlin),
                shader: () => s.Tg.define(qa.shader),
                nesC: () => s.Tg.define(qa.nesC),
                objectiveC: () => s.Tg.define(qa.objectiveC),
                objectiveCpp: () => s.Tg.define(qa.objectiveCpp),
                squirrel: () => s.Tg.define(qa.squirrel),
                ceylon: () => s.Tg.define(qa.ceylon),
                dart: () => s.Tg.define(qa.dart),
                cmake: () => s.Tg.define(Aa.cmake),
                cobol: () => s.Tg.define(Va.cobol),
                commonLisp: () => s.Tg.define(ja.commonLisp),
                crystal: () => s.Tg.define(Ca.crystal),
                cypher: () => s.Tg.define(Ga.cypher),
                d: () => s.Tg.define(Ia.d),
                diff: () => s.Tg.define(Da.diff),
                dtd: () => s.Tg.define(La.dtd),
                dylan: () => s.Tg.define(Ma.dylan),
                ebnf: () => s.Tg.define(Fa.ebnf),
                ecl: () => s.Tg.define(Ba.ecl),
                eiffel: () => s.Tg.define(Ha.eiffel),
                elm: () => s.Tg.define(Ka.elm),
                factor: () => s.Tg.define(eo.factor),
                fcl: () => s.Tg.define(to.fcl),
                forth: () => s.Tg.define(no.forth),
                fortran: () => s.Tg.define(io.fortran),
                gas: () => s.Tg.define(ro.gas),
                gherkin: () => s.Tg.define(ao.gherkin),
                groovy: () => s.Tg.define(mo.groovy),
                haskell: () => s.Tg.define(go.haskell),
                haxe: () => s.Tg.define(Qo.haxe),
                http: () => s.Tg.define($o.http),
                idl: () => s.Tg.define(bo.idl),
                jinja2: () => s.Tg.define(yo.jinja2),
                mathematica: () => s.Tg.define(xo.mathematica),
                mbox: () => s.Tg.define(ko.mbox),
                mirc: () => s.Tg.define(wo.mirc),
                modelica: () => s.Tg.define(Xo.modelica),
                mscgen: () => s.Tg.define(_o.mscgen),
                mumps: () => s.Tg.define(To.mumps),
                nsis: () => s.Tg.define(Ro.nsis),
                ntriples: () => s.Tg.define(Wo.ntriples),
                octave: () => s.Tg.define(Zo.octave),
                oz: () => s.Tg.define(qo.oz),
                pig: () => s.Tg.define(Ao.pig),
                properties: () => s.Tg.define(Eo.properties),
                protobuf: () => s.Tg.define(jo.protobuf),
                puppet: () => s.Tg.define(Co.puppet),
                q: () => s.Tg.define(Go.q),
                sas: () => s.Tg.define(No.sas),
                sass: () => s.Tg.define(lO),
                sieve: () => s.Tg.define(dO.sieve),
                smalltalk: () => s.Tg.define(hO.smalltalk),
                solr: () => s.Tg.define(fO.solr),
                sparql: () => s.Tg.define(pO.sparql),
                spreadsheet: () => s.Tg.define(mO.spreadsheet),
                stex: () => s.Tg.define(gO.stex),
                textile: () => s.Tg.define(yO.textile),
                tiddlyWiki: () => s.Tg.define(SO.tiddlyWiki),
                tiki: () => s.Tg.define(PO.tiki),
                troff: () => s.Tg.define(xO.troff),
                ttcn: () => s.Tg.define(kO.ttcn),
                turtle: () => s.Tg.define(wO.turtle),
                velocity: () => s.Tg.define(TO.velocity),
                verilog: () => s.Tg.define(zO.verilog),
                vhdl: () => s.Tg.define(RO.vhdl),
                webIDL: () => s.Tg.define(WO.webIDL),
                xQuery: () => s.Tg.define(ZO.xQuery),
                yacas: () => s.Tg.define(qO.yacas),
                z80: () => s.Tg.define(AO.z80),
                wast: Ta.wast,
                javascript: yi,
                jsx: () => yi({
                    jsx: !0
                }),
                typescript: () => yi({
                    typescript: !0
                }),
                tsx: () => yi({
                    jsx: !0,
                    typescript: !0
                }),
                json: mr.json,
                html: function () {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                        , t = fr;
                    return !1 === e.matchClosingTags && (t = t.configure({
                        dialect: "noMatch"
                    })),
                        new s.Yy(t, [fr.data.of({
                            autocomplete: hr(e)
                        }), !1 !== e.autoCloseTags ? pr : [], Ni().support, (0,
                            ki.css)().support])
                },
                css: ki.css,
                python: function () {
                    return new s.Yy($r)
                },
                markdown: () => ii({
                    base: Fn,
                    codeLanguages: Cn
                }),
                xml: function () {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    return new s.Yy(_r, _r.data.of({
                        autocomplete: Xr(e.elements || [], e.attributes || [])
                    }))
                },
                sql: ha,
                mysql: () => ha({
                    dialect: $a
                }),
                pgsql: () => ha({
                    dialect: pa
                }),
                java: ba.java,
                rust: ya.rust,
                cpp: Sa.cpp,
                lezer: function () {
                    return new s.Yy(wa)
                },
                php: _a.php,
                go: () => s.Tg.define(po),
                shell: () => s.Tg.define(uO.shell),
                lua: () => s.Tg.define(vo.lua),
                swift: () => s.Tg.define($O.swift),
                tcl: () => s.Tg.define(bO.tcl),
                yaml: () => s.Tg.define(YO),
                vb: () => s.Tg.define(XO.vb),
                powershell: () => s.Tg.define(Vo.powerShell),
                brainfuck: () => s.Tg.define(Za.brainfuck),
                stylus: () => s.Tg.define(QO.stylus),
                erlang: () => s.Tg.define(Ja.erlang),
                nginx: () => s.Tg.define(zo.nginx),
                perl: () => s.Tg.define(Yo.perl),
                ruby: () => s.Tg.define(Do.ruby),
                pascal: () => s.Tg.define(Uo.pascal),
                livescript: () => s.Tg.define(Po.liveScript),
                less: () => s.Tg.define(Ya.less),
                scheme: () => s.Tg.define(cO.scheme),
                toml: () => s.Tg.define(vO.toml),
                vbscript: () => s.Tg.define(_O.vbScript),
                clojure: () => s.Tg.define(Ua.clojure),
                coffeescript: () => s.Tg.define(Ea.coffeeScript),
                julia: () => s.Tg.define(So.julia),
                dockerfile: () => s.Tg.define(Na.dockerFile),
                r: () => s.Tg.define(Io.r)
            }
            , EO = Object.keys(VO);
        n(11113);
        var jO = n(5464);
        function CO(e) {
            var { type: t = "scroll", events: n } = e;
            return O.Z9.fromClass(class {
                constructor(e) {
                    this.dom = void 0,
                        this.view = void 0,
                        this.view = e,
                        this.dom = "dom" === t ? e.dom : "content" === t ? e.contentDOM : e.scrollDOM,
                        Object.keys(n || {}).forEach((e => {
                            n && n[e] && this.dom && this.dom.addEventListener(e, n[e])
                        }
                        ))
                }
                destroy() {
                    Object.keys(n || {}).forEach((e => {
                        n && n[e] && this.dom && this.dom.removeEventListener(e, n[e])
                    }
                    ))
                }
            }
            )
        }
        const GO = () => (0,
            r.useContext)(jO.Dx)
            , IO = jO.AH`
  font-family: ${e => {
                    let { theme: t } = e;
                    return "web" === t.platform ? '"Inter", -apple-system, BlinkMacSystemFont, sans-serif' : "-apple-system, BlinkMacSystemFont, sans-serif"
                }
                };
  -webkit-font-smoothing: antialiased;
  font-variant-numeric: lining-nums;
  font-feature-settings: "lnum" 1, "calt" 1;
`
            , DO = {
                XXS600: {
                    webDesktop: {
                        "font-size": "11px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "12px"
                    },
                    webMobile: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "14px"
                    }
                },
                XXS600Allcaps: {
                    webDesktop: {
                        "font-size": "11px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "12px",
                        "text-transform": "uppercase",
                        "font-feature-settings": "'cpsp' on, 'case' on"
                    },
                    webMobile: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "14px",
                        "text-transform": "uppercase",
                        "font-feature-settings": "'cpsp' on, 'case' on"
                    }
                },
                XS500: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "12px"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "14px"
                    }
                },
                XS600: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "12px"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "14px"
                    }
                },
                XS600Allcaps: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.15px",
                        "line-height": "12px",
                        "text-transform": "uppercase",
                        "font-feature-settings": "'cpsp' on, 'case' on"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.15px",
                        "line-height": "14px",
                        "text-transform": "uppercase",
                        "font-feature-settings": "'cpsp' on, 'case' on"
                    }
                },
                MD500: {
                    webDesktop: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "18px"
                    }
                },
                MD600: {
                    webDesktop: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "18px"
                    }
                }
            }
            , NO = {
                MD400: {
                    webDesktop: {
                        "font-size": "11px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "19px"
                    }
                },
                MD500: {
                    webDesktop: {
                        "font-size": "11px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "13.2px"
                    },
                    webMobile: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "15.6px"
                    }
                },
                LG400: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "18px"
                    }
                },
                LG500: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "18px"
                    }
                }
            }
            , LO = {
                MD400: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "15.6px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    }
                },
                MD400Italic: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "italic",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "15.6px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "italic",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    }
                },
                MD500: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "15.6px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    }
                },
                MD500Italic: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "italic",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "15.6px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "italic",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    }
                },
                MD600: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "15.6px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    }
                }
            }
            , MO = {
                XS500: {
                    webDesktop: {
                        "font-size": "11px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "13.2px"
                    },
                    webMobile: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.05px",
                        "line-height": "15.6px"
                    },
                    iOS: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.32px",
                        "line-height": "16.8px"
                    },
                    macOS: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0px",
                        "line-height": "14.4px"
                    }
                },
                SM400: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "14.4px"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "16.8px"
                    }
                },
                SM500: {
                    webDesktop: {
                        "font-size": "12px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "14.4px"
                    },
                    webMobile: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "0.01px",
                        "line-height": "16.8px"
                    },
                    iOS: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.32px",
                        "line-height": "18px"
                    },
                    macOS: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.08px",
                        "line-height": "15.6px"
                    }
                },
                MD400: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    },
                    iOS: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "300",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.32px",
                        "line-height": "19.2px"
                    },
                    macOS: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.15px",
                        "line-height": "16.8px"
                    }
                },
                MD500: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    },
                    iOS: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.32px",
                        "line-height": "19.2px"
                    },
                    macOS: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.15px",
                        "line-height": "16.8px"
                    }
                },
                MD600: {
                    webDesktop: {
                        "font-size": "13px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.04px",
                        "line-height": "18px"
                    },
                    iOS: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.32px",
                        "line-height": "19.2px"
                    },
                    macOS: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.15px",
                        "line-height": "16.8px"
                    }
                },
                LG400: {
                    webDesktop: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "18px"
                    }
                },
                LG500: {
                    webDesktop: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "18px"
                    }
                },
                LG600: {
                    webDesktop: {
                        "font-size": "14px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "16px"
                    },
                    webMobile: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.09px",
                        "line-height": "18px"
                    }
                },
                XL400: {
                    webDesktop: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.13px",
                        "line-height": "18px"
                    },
                    webMobile: {
                        "font-size": "17px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.13px",
                        "line-height": "20.4px"
                    }
                },
                XL500: {
                    webDesktop: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.13px",
                        "line-height": "18px"
                    },
                    webMobile: {
                        "font-size": "17px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.13px",
                        "line-height": "20.4px"
                    }
                },
                XL600: {
                    webDesktop: {
                        "font-size": "15px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.13px",
                        "line-height": "18px"
                    },
                    webMobile: {
                        "font-size": "17px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.13px",
                        "line-height": "20.4px"
                    }
                },
                XXL400: {
                    webDesktop: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.18px",
                        "line-height": "19.2px"
                    },
                    webMobile: {
                        "font-size": "18px",
                        "text-decoration": "none",
                        "font-weight": "400",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.18px",
                        "line-height": "21.6px"
                    }
                },
                XXL500: {
                    webDesktop: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.18px",
                        "line-height": "19.2px"
                    },
                    webMobile: {
                        "font-size": "18px",
                        "text-decoration": "none",
                        "font-weight": "500",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.18px",
                        "line-height": "21.6px"
                    }
                },
                XXL600: {
                    webDesktop: {
                        "font-size": "16px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.18px",
                        "line-height": "19.2px"
                    },
                    webMobile: {
                        "font-size": "18px",
                        "text-decoration": "none",
                        "font-weight": "600",
                        "font-style": "normal",
                        "font-stretch": "normal",
                        "letter-spacing": "-0.18px",
                        "line-height": "21.6px"
                    }
                }
            };
        function FO(e) {
            return jO.AH`
    ${IO};
    ${t => {
                    let { theme: n } = t;
                    return function (e) {
                        return null == e ? "" : Object.entries(e).map((e => {
                            let [t, n] = e;
                            return `${t}: ${n};`
                        }
                        )).join("\n")
                    }(e[function (e, t) {
                        const { platform: n, isTouchDevice: i } = e;
                        return "ios" === n && null != t.iOS ? "iOS" : "mac" === n && null != t.macOS ? "macOS" : i && null != t.webMobile ? "webMobile" : "webDesktop"
                    }(n, e)])
                }
                }
  `
        }
        FO(DO.XXS600),
            FO(DO.XXS600Allcaps),
            FO(DO.XS500),
            FO(DO.XS600),
            FO(DO.XS600Allcaps),
            FO(DO.MD500),
            FO(DO.MD600),
            FO(NO.MD400),
            FO(NO.MD500),
            FO(NO.LG400),
            FO(NO.LG500),
            FO(LO.MD400),
            FO(LO.MD400Italic),
            FO(LO.MD500),
            FO(LO.MD500Italic),
            FO(LO.MD600);
        const BO = {
            XS500: FO(MO.XS500),
            SM400: FO(MO.SM400),
            SM500: FO(MO.SM500),
            MD400: FO(MO.MD400),
            MD500: FO(MO.MD500),
            MD600: FO(MO.MD600),
            LG400: FO(MO.LG400),
            LG500: FO(MO.LG500),
            LG600: FO(MO.LG600),
            XL400: FO(MO.XL400),
            XL500: FO(MO.XL500),
            XL600: FO(MO.XL600),
            XXL400: FO(MO.XXL400),
            XXL500: FO(MO.XXL500),
            XXL600: FO(MO.XXL600)
        };
        var HO = n(80045);
        const KO = ["margin", "marginY", "marginTop", "marginBottom", "marginX", "marginRight", "marginLeft", "padding", "paddingY", "paddingTop", "paddingBottom", "paddingX", "paddingRight", "paddingLeft", "$height", "$width", "$minWidth", "$maxWidth", "$minHeight", "$maxHeight", "flex", "flexGrow", "flexShrink", "flexBasis", "position"]
            , JO = jO.Ay.div.attrs((e => {
                var t, n, r, a, o, O, s, l;
                let { margin: c, marginY: u, marginTop: d, marginBottom: h, marginX: f, marginRight: p, marginLeft: m, padding: g, paddingY: Q, paddingTop: $, paddingBottom: b, paddingX: y, paddingRight: S, paddingLeft: P, $height: v, $width: x, $minWidth: k, $maxWidth: w, $minHeight: X, $maxHeight: _, flex: T, flexGrow: z, flexShrink: R, flexBasis: W, position: Z } = e
                    , q = (0,
                        HO.A)(e, KO);
                return (0,
                    i.A)((0,
                        i.A)({}, q), {}, {
                        style: (0,
                            i.A)({
                                marginTop: es(null !== (t = null !== d && void 0 !== d ? d : u) && void 0 !== t ? t : c),
                                marginRight: es(null !== (n = null !== p && void 0 !== p ? p : f) && void 0 !== n ? n : c),
                                marginBottom: es(null !== (r = null !== h && void 0 !== h ? h : u) && void 0 !== r ? r : c),
                                marginLeft: es(null !== (a = null !== m && void 0 !== m ? m : f) && void 0 !== a ? a : c),
                                paddingTop: es(null !== (o = null !== $ && void 0 !== $ ? $ : Q) && void 0 !== o ? o : g),
                                paddingRight: es(null !== (O = null !== S && void 0 !== S ? S : y) && void 0 !== O ? O : g),
                                paddingBottom: es(null !== (s = null !== b && void 0 !== b ? b : Q) && void 0 !== s ? s : g),
                                paddingLeft: es(null !== (l = null !== P && void 0 !== P ? P : y) && void 0 !== l ? l : g),
                                height: es(v),
                                width: es(x),
                                minWidth: es(k),
                                maxWidth: es(w),
                                minHeight: es(X),
                                maxHeight: es(_),
                                flexGrow: null !== z && void 0 !== z ? z : ts(T, 0),
                                flexShrink: null !== R && void 0 !== R ? R : ts(T, 1),
                                flexBasis: null !== W && void 0 !== W ? W : ts(T, 2),
                                position: Z
                            }, q.style)
                    })
            }
            ))`
  display: block;
  box-sizing: border-box;
`
            , es = e => "number" === typeof e ? `${e}px` : e
            , ts = (e, t) => (null === e || void 0 === e ? void 0 : e.split(" ")[t]) || void 0;
        var ns = n(35382)
            , is = n(76846)
            , rs = n(17941);
        const as = r.forwardRef(((e, t) => {
            var i, a, o, O;
            let { initialValue: s, codeMirrorRef: l, isSplitView: c, langCode: u, isVisible: d, onClick: h, className: f, disableScroll: p, themeId: m, fontScale: g } = e;
            const { isDarkMode: Q } = GO()
                , [$, b] = (0,
                    r.useState)(null)
                , [y, S] = (0,
                    r.useState)(!0)
                , P = (0,
                    r.useCallback)((() => {
                        let e = s;
                        l.current && l.current.view && (e = l.current.view.state.doc.toString()),
                            "stex" === u && n.e(374).then(n.bind(n, 11057)).then((t => {
                                try {
                                    const n = t.renderMathFormula(e || "");
                                    b(n),
                                        S(!1)
                                } catch (n) {
                                    b(e.replace(/[&<"']/g, (function (e) {
                                        switch (e) {
                                            case "&":
                                                return "&amp;";
                                            case "<":
                                                return "&lt;";
                                            case '"':
                                                return "&quot;";
                                            default:
                                                return "&#039;"
                                        }
                                    }
                                    ))),
                                        S(!1)
                                }
                            }
                            ))
                    }
                    ), [l, s, u]);
            (0,
                r.useEffect)((() => {
                    P()
                }
                ), [u, P]),
                (0,
                    r.useImperativeHandle)(t, (() => ({
                        update: () => P()
                    })), [P]);
            const v = (0,
                r.useMemo)((() => (0,
                    ns.AT)(m, Q)), [Q, m]);
            let x;
            return y ? x = (0,
                Un.jsx)(Os, {
                    xWidth: 16,
                    children: (0,
                        Un.jsx)(ls, {
                            xWidth: 16
                        })
                }) : null != $ && (x = (0,
                    Un.jsx)("span", {
                        dangerouslySetInnerHTML: {
                            __html: $
                        }
                    })),
                (0,
                    Un.jsxs)(os, {
                        className: f,
                        isSplitView: c,
                        isVisible: d,
                        disableScroll: p,
                        background: null !== (i = null === v || void 0 === v || null === (a = v.settings) || void 0 === a ? void 0 : a.background) && void 0 !== i ? i : "",
                        color: null !== (o = null === v || void 0 === v || null === (O = v.settings) || void 0 === O ? void 0 : O.foreground) && void 0 !== o ? o : "",
                        isThemeDark: (null === v || void 0 === v ? void 0 : v.isDark) || !1,
                        children: [(0,
                            Un.jsx)(cs, {
                                fontScale: g
                            }), (0,
                                Un.jsx)(JO, {
                                    padding: 8,
                                    onClick: h,
                                    children: x
                                })]
                    })
        }
        ))
            , os = jO.Ay.div.attrs((e => {
                let { className: t, isSplitView: n, isVisible: i, disableScroll: r, background: a, color: o, isThemeDark: O } = e;
                return {
                    className: t,
                    isSplitView: n,
                    isVisible: i,
                    disableScroll: r,
                    background: a,
                    color: o,
                    isThemeDark: O
                }
            }
            ))`
  display: ${e => e.isVisible ? "block" : "none"};
  padding: 8px 12px;
  white-space: pre;
  box-sizing: border-box;
  overflow: inherit;

  ${e => {
                    let { isSplitView: t } = e;
                    if (t)
                        return jO.AH`
        overflow: unset;
        line-height: 1.8;
        font-size: 13px;
        white-space: pre;
        height: 100%;
        width: 100%;
      `
                }
                }

  ${e => {
                    let { disableScroll: t } = e;
                    return t ? jO.AH`
        overflow: hidden;
      ` : jO.AH`
        overflow: auto;
      `
                }
                }

  ${e => {
                    let { theme: t, isThemeDark: n } = e;
                    return (0,
                        is.V)({
                            isThemeDark: n,
                            isScrollbarPersistent: t.isScrollbarPersistent
                        })
                }
                };

  height: 100%;
  background: ${e => e.background};
  color: ${e => e.color};
  ${(0,
                    rs._)("none")}
`
            , Os = jO.Ay.div`
  position: absolute;
  top: 8px;
  right: 8px;
  width: ${e => e.xWidth}px;
  height: ${e => e.xWidth}px;
`
            , ss = jO.i7`
  to {
    transform: rotate(360deg);
  }
`
            , ls = jO.Ay.div`
  box-sizing: border-box;
  position: absolute;
  top: 50%;
  left: 50%;
  width: ${e => e.xWidth}px;
  height: ${e => e.xWidth}px;
  margin-top: ${e => -e.xWidth / 2}px;
  margin-left: ${e => -e.xWidth / 2}px;
  border-radius: 50%;
  border: 2px solid rgba(204, 204, 204, 0.25);
  border-top-color: rgba(204, 204, 204, 0.95);
  animation: ${ss} 0.6s linear infinite;
`
            , cs = jO.DU`
  .katex { font-size: ${e => {
                    var t;
                    return (1.21 * (null !== (t = e.fontScale) && void 0 !== t ? t : 1)).toFixed(2)
                }
                }em !important; }
`
            , us = r.memo(as)
            , ds = r.forwardRef(((e, t) => {
                let { value: n, inCodeEditing: a, onCodeEditorBlur: s, onCodeEditorClick: l, inFocusMode: c, children: u, isFocusModePreviewVisible: d, langCode: h, onChange: f, onEditorCreated: p, onCopy: m, onPaste: g, onCut: Q, onCharacterLimitReached: $, disableScroll: b = !1, editorTheme: y, extraExtensions: S = [], fontScale: P } = e;
                const { isDarkMode: v } = GO()
                    , x = (0,
                        r.useRef)(null)
                    , k = (0,
                        r.useRef)(null)
                    , w = (0,
                        r.useRef)(null)
                    , [X, _] = (0,
                        r.useState)(null)
                    , [T, z] = (0,
                        r.useState)((0,
                            ns.Rg)(y.id, v))
                    , R = (0,
                        r.useRef)([0, 0])
                    , W = (0,
                        r.useRef)(null)
                    , { platform: Z } = GO()
                    , q = "web" !== Z
                    , U = "stex" === h;
                (0,
                    r.useImperativeHandle)(t, (() => ({
                        getValue: () => {
                            var e, t;
                            return (null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t ? void 0 : t.state.doc.toString()) || ""
                        }
                        ,
                        replaceSelection: e => {
                            var t;
                            const n = null === (t = x.current) || void 0 === t ? void 0 : t.view;
                            if (n) {
                                const [t, i] = R.current;
                                n.dispatch({
                                    changes: {
                                        from: t,
                                        to: i,
                                        insert: e
                                    },
                                    scrollIntoView: !0,
                                    selection: {
                                        anchor: t + e.length
                                    }
                                })
                            }
                        }
                        ,
                        focus: () => {
                            var e, t;
                            null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t || t.focus()
                        }
                        ,
                        deselect: () => {
                            var e, t;
                            null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t || t.dispatch({
                                selection: {
                                    anchor: 0
                                }
                            })
                        }
                    })), []),
                    (0,
                        r.useEffect)((() => {
                            var e, t;
                            const n = document.querySelector(".preview-scroll")
                                , i = null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t ? void 0 : t.scrollDOM;
                            if (!i || !n)
                                return;
                            const r = () => {
                                W.current && clearTimeout(W.current);
                                const e = setTimeout((() => {
                                    const e = i.scrollTop / (i.scrollHeight - i.clientHeight);
                                    n.scroll({
                                        top: e * (n.scrollHeight - n.clientHeight),
                                        behavior: "smooth"
                                    })
                                }
                                ), 50);
                                W.current = e
                            }
                                ;
                            if (d) {
                                const e = i.scrollTop / (i.scrollHeight - i.clientHeight);
                                setTimeout((() => {
                                    n.scroll({
                                        top: e * (n.scrollHeight - n.clientHeight),
                                        behavior: "smooth"
                                    })
                                }
                                ), 50)
                            }
                            return i.addEventListener("scroll", r),
                                () => {
                                    i.removeEventListener("scroll", r),
                                        W.current && clearTimeout(W.current)
                                }
                        }
                        ), [d]),
                    (0,
                        r.useEffect)((() => {
                            if (c) {
                                const e = document.querySelector("[data-code-editor-popup='true']");
                                e && (w.current = e)
                            } else {
                                const e = document.querySelector("[data-page-section='page-body']");
                                if (e)
                                    w.current = e;
                                else {
                                    const e = document.getElementById("webview-root");
                                    w.current = e
                                }
                            }
                            if (!a) {
                                var e, t, n;
                                null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t || t.contentDOM.blur();
                                const i = null === (n = x.current) || void 0 === n ? void 0 : n.view;
                                i && i.dispatch({
                                    selection: {
                                        anchor: 0
                                    }
                                })
                            }
                        }
                        ), [a, c]),
                    (0,
                        r.useEffect)((() => {
                            if (h) {
                                if (EO.includes(h)) {
                                    const t = VO[e = h] ? VO[e]() : null;
                                    _(t)
                                }
                            } else
                                _(null);
                            var e
                        }
                        ), [h]),
                    (0,
                        r.useEffect)((() => {
                            z((0,
                                ns.Rg)(y.id, v))
                        }
                        ), [v, y.id]),
                    (0,
                        r.useEffect)((() => {
                            var e, t;
                            a && (null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t || t.focus())
                        }
                        ), [a]);
                const Y = CO({
                    type: "content",
                    events: {
                        blur: () => {
                            null === s || void 0 === s || s()
                        }
                        ,
                        paste: () => {
                            q && (null === g || void 0 === g || g())
                        }
                        ,
                        copy: () => {
                            var e, t, n, i, r;
                            const a = null === (e = x.current) || void 0 === e || null === (t = e.view) || void 0 === t ? void 0 : t.state.selection.ranges[0];
                            if (!a)
                                return;
                            const o = null === (n = x.current) || void 0 === n || null === (i = n.view) || void 0 === i || null === (r = i.state) || void 0 === r ? void 0 : r.doc.toString().substring(a.from, a.to);
                            null === m || void 0 === m || m(o || "")
                        }
                        ,
                        cut: e => {
                            var t;
                            null === Q || void 0 === Q || Q((null === e || void 0 === e || null === (t = e.clipboardData) || void 0 === t ? void 0 : t.getData("text/plain")) || "")
                        }
                    }
                });
                const A = [o.$t.changeFilter.of((e => {
                    if (q) {
                        if (e.isUserEvent("input.paste")) {
                            const { from: t, to: n } = e.startState.selection.ranges[0];
                            return R.current = [t, n],
                                !1
                        }
                    }
                    const t = e.newDoc.length < 1e4;
                    return t || null === $ || void 0 === $ || $(),
                        t
                }
                )), Y, ...X ? [X] : [], (0,
                    O.vX)({
                        parent: w.current,
                        position: "absolute"
                    }), ...S]
                    , V = () => {
                        var e;
                        null === (e = k.current) || void 0 === e || e.update()
                    }
                    , E = (0,
                        r.useMemo)((() => y.id === ns.Y5.AUTO ? (0,
                            ns.AT)(y.id, v).isDark : y.isDark), [y, v])
                    , j = (0,
                        r.useMemo)((() => !(a || !U || c) || "ios" === Z && d), [U, a, c, d, Z]);
                return (0,
                    Un.jsxs)(fs, {
                        isWebView: q,
                        inFocusMode: c,
                        isThemeDark: E,
                        children: [(0,
                            Un.jsxs)(ps, {
                                inCodeEditing: a,
                                onMouseDown: void 0,
                                isSplitView: d,
                                platform: Z,
                                children: [(0,
                                    Un.jsx)(Vn, {
                                        spellCheck: !1,
                                        ref: x,
                                        value: n,
                                        autoFocus: c,
                                        extensions: A,
                                        height: "100%",
                                        readOnly: !a,
                                        editable: a,
                                        basicSetup: {
                                            highlightActiveLineGutter: a,
                                            highlightActiveLine: a,
                                            searchKeymap: !1,
                                            foldGutter: !1,
                                            highlightSelectionMatches: !1,
                                            autocompletion: "web" === Z,
                                            closeBrackets: !0
                                        },
                                        theme: null !== T && void 0 !== T ? T : void 0,
                                        onMouseDown: e => {
                                            q && e.preventDefault(),
                                                null === l || void 0 === l || l(e)
                                        }
                                        ,
                                        onChange: (e, t) => {
                                            null === f || void 0 === f || f(e, t),
                                                V()
                                        }
                                        ,
                                        onCreateEditor: (e, t) => {
                                            V(),
                                                null === p || void 0 === p || p()
                                        }
                                        ,
                                        style: j ? {
                                            display: "none"
                                        } : {}
                                    }), U && (0,
                                        Un.jsx)(us, (0,
                                            i.A)((0,
                                                i.A)({
                                                    className: c ? "preview-scroll" : ""
                                                }, gs()), {}, {
                                                initialValue: n,
                                                ref: k,
                                                codeMirrorRef: x,
                                                isSplitView: d,
                                                langCode: h,
                                                isVisible: !a || c && d,
                                                onClick: l,
                                                disableScroll: b,
                                                themeId: y.id,
                                                fontScale: P
                                            }))]
                            }), u]
                    })
            }
            ))
            , hs = r.memo(ds)
            , fs = jO.Ay.div`
  ${e => {
                    let { isWebView: t } = e;
                    if (t)
                        return jO.AH`
        height: 100vh;
      `
                }
                }

  min-height: 48px; // account for empty Katex previews, making sure the three dots menu fits
  width: 100%;
  overflow: hidden;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  position: relative;

  .cm-scroller {
    ${e => {
                    let { theme: t, isThemeDark: n } = e;
                    return (0,
                        is.V)({
                            isThemeDark: n,
                            isScrollbarPersistent: t.isScrollbarPersistent
                        })
                }
                };

    background: inherit; // to make sure the default scrollbar picks up the color
  }
`
            , ps = jO.Ay.div`
  ${e => {
                    let { isSplitView: t, platform: n } = e;
                    return t && "ios" !== n ? jO.AH`
        display: grid;
        grid-template-columns: 1fr 1fr;

        .cm-theme {
          border-right: 1px solid ${e => {
                            let { theme: t } = e;
                            return t.colors.neutral[200]
                        }
                        };
        }
      ` : jO.AH`
        display: flex;
        flex-direction: column;
      `
                }
                }

  overflow: hidden;
  flex-grow: 1;
  position: relative;
  height: 100%;
`
            , ms = jO.Ay.div`
  ${BO.MD500};
  flex: 1;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
`;
        function gs(e) {
            var t, n;
            return {
                onClick: e => e.stopPropagation(),
                onMouseDown: null === (t = null === e || void 0 === e ? void 0 : e.mouseDownPreventBlur) || void 0 === t || t ? Qs : e => e.stopPropagation(),
                "data-no-print": null !== (n = null === e || void 0 === e ? void 0 : e.allowPrint) && void 0 !== n && n ? void 0 : ""
            }
        }
        function Qs(e) {
            e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLElement && e.target.isContentEditable || e.preventDefault(),
                e.stopPropagation()
        }
    }
    ,
    35382: (e, t, n) => {
        n.d(t, {
            Y5: () => B,
            $U: () => F,
            QU: () => H,
            AT: () => J,
            Rg: () => K
        });
        var i = n(27051)
            , r = n(14462)
            , a = n(32043)
            , o = n(25956)
            , O = e => {
                var { theme: t, settings: n, styles: i } = e
                    , r = {
                        "&": {
                            backgroundColor: n.background,
                            color: n.foreground
                        },
                        ".cm-gutters": {}
                    };
                n.fontFamily && (r["&.cm-editor .cm-scroller"] = {
                    fontFamily: n.fontFamily
                }),
                    n.gutterBackground && (r[".cm-gutters"].backgroundColor = n.gutterBackground),
                    n.gutterForeground && (r[".cm-gutters"].color = n.gutterForeground),
                    n.gutterBorder && (r[".cm-gutters"].borderRightColor = n.gutterBorder),
                    n.caret && (r[".cm-content"] = {
                        caretColor: n.caret
                    },
                        r[".cm-cursor, .cm-dropCursor"] = {
                            borderLeftColor: n.caret
                        });
                var O = {};
                n.gutterActiveForeground && (O.color = n.gutterActiveForeground),
                    n.lineHighlight && (r[".cm-activeLine"] = {
                        backgroundColor: n.lineHighlight
                    },
                        O.backgroundColor = n.lineHighlight),
                    r[".cm-activeLineGutter"] = O,
                    n.selection && (r["&.cm-focused .cm-selectionBackground, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection"] = {
                        backgroundColor: n.selection
                    }),
                    n.selectionMatch && (r["& .cm-selectionMatch"] = {
                        backgroundColor: n.selectionMatch
                    });
                var s = a.Lz.theme(r, {
                    dark: "dark" === t
                })
                    , l = o.cr.define(i);
                return [s, (0,
                    o.y9)(l)]
            }
            ;
        const s = {
            background: "#2B2B2B",
            foreground: "#f8f8f2",
            caret: "#FFFFFF",
            selection: "rgba(255, 255, 255, 0.1)",
            selectionMatch: "rgba(255, 255, 255, 0.2)",
            gutterBackground: "#414040",
            gutterForeground: "#999",
            gutterBorder: "transparent",
            lineHighlight: "rgba(255, 255, 255, 0.05)",
            fontFamily: "Roboto Mono, monospace"
        }
            , l = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, s), n),
                    styles: [{
                        tag: [r._A.atom, r._A.number],
                        color: "#bd93f9"
                    }, {
                        tag: [r._A.comment],
                        color: "#61A151"
                    }, {
                        tag: [r._A.string],
                        color: "#6A8759"
                    }, {
                        tag: [r._A.variableName, r._A.operator],
                        color: "#A9B7C6"
                    }, {
                        tag: [r._A.meta, r._A.className],
                        color: "#A9B7C6"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#FFC66D"
                    }, {
                        tag: [r._A.keyword],
                        color: "#CC7832"
                    }, {
                        tag: [r._A.tagName],
                        color: "#ff79c6"
                    }, {
                        tag: [r._A.typeName],
                        color: "#ffb86c"
                    }, ...a]
                })
            }
            )()
            , c = {
                background: "#272C35",
                foreground: "#9d9b97",
                caret: "#797977",
                selection: "#ffffff30",
                selectionMatch: "#2B323D",
                gutterBackground: "#272C35",
                gutterForeground: "#465063",
                gutterActiveForeground: "#8997b2",
                gutterBorder: "transparent",
                lineHighlight: "rgba(255,255,255,0.05)",
                fontFamily: "Roboto Mono, monospace"
            }
            , u = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, c), n),
                    styles: [{
                        tag: [r._A.function(r._A.variableName), r._A.function(r._A.propertyName), r._A.url, r._A.processingInstruction],
                        color: "hsl(207, 82%, 66%)"
                    }, {
                        tag: [r._A.tagName, r._A.heading],
                        color: "#e06c75"
                    }, {
                        tag: r._A.comment,
                        color: "#54636D"
                    }, {
                        tag: [r._A.propertyName],
                        color: "hsl(220, 14%, 71%)"
                    }, {
                        tag: [r._A.attributeName, r._A.number],
                        color: "hsl( 29, 54%, 61%)"
                    }, {
                        tag: r._A.className,
                        color: "hsl(38,71%,66%)"
                    }, {
                        tag: r._A.keyword,
                        color: "hsl(286, 60%, 67%)"
                    }, {
                        tag: [r._A.string, r._A.regexp, r._A.special(r._A.propertyName)],
                        color: "#98c379"
                    }, ...a]
                })
            }
            )()
            , d = {
                background: "#FBFBFB",
                foreground: "#3D3D3D",
                selection: "#BBDFFF",
                selectionMatch: "#BBDFFF",
                gutterBackground: "#FBFBFB",
                gutterForeground: "rgba(31,34,37,0.3)",
                gutterActiveForeground: "rgba(31,34,37,0.6)",
                lineHighlight: "rgba(0,0,0,0.03)",
                fontFamily: "Roboto Mono, monospace"
            }
            , h = (e => {
                const { theme: t = "light", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, d), n),
                    styles: [{
                        tag: [r._A.comment, r._A.bracket],
                        color: "#6a737d"
                    }, {
                        tag: [r._A.className, r._A.propertyName],
                        color: "#6f42c1"
                    }, {
                        tag: [r._A.variableName, r._A.attributeName, r._A.number, r._A.operator],
                        color: "#005cc5"
                    }, {
                        tag: [r._A.keyword, r._A.typeName, r._A.typeOperator, r._A.typeName],
                        color: "#d73a49"
                    }, {
                        tag: [r._A.string, r._A.meta, r._A.regexp],
                        color: "#032f62"
                    }, {
                        tag: [r._A.name, r._A.quote],
                        color: "#22863a"
                    }, {
                        tag: [r._A.heading],
                        color: "#24292e",
                        fontWeight: "bold"
                    }, {
                        tag: [r._A.emphasis],
                        color: "#24292e",
                        fontStyle: "italic"
                    }, {
                        tag: [r._A.deleted],
                        color: "#b31d28",
                        backgroundColor: "ffeef0"
                    }, ...a]
                })
            }
            )()
            , f = {
                background: "#28292B",
                foreground: "#CECFD0",
                caret: "#fff",
                selection: "#385576",
                selectionMatch: "#385576",
                lineHighlight: "rgba(255,255,255,0.05)",
                gutterBackground: "#28292B",
                gutterForeground: "rgba(255,255,255,0.4)",
                gutterActiveForeground: "rgba(255,255,255,0.7)",
                gutterBorder: "#f4f4f41f",
                fontFamily: "Roboto Mono, monospace"
            }
            , p = (e => {
                const { theme: t = "light", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, f), n),
                    styles: [{
                        tag: [r._A.comment, r._A.bracket],
                        color: "#8b949e"
                    }, {
                        tag: [r._A.className, r._A.propertyName],
                        color: "#d2a8ff"
                    }, {
                        tag: [r._A.variableName, r._A.attributeName, r._A.number, r._A.operator],
                        color: "#79c0ff"
                    }, {
                        tag: [r._A.keyword, r._A.typeName, r._A.typeOperator, r._A.typeName],
                        color: "#ff7b72"
                    }, {
                        tag: [r._A.string, r._A.meta, r._A.regexp],
                        color: "#a5d6ff"
                    }, {
                        tag: [r._A.name, r._A.quote],
                        color: "#7ee787"
                    }, {
                        tag: [r._A.heading],
                        color: "#d2a8ff",
                        fontWeight: "bold"
                    }, {
                        tag: [r._A.emphasis],
                        color: "#d2a8ff",
                        fontStyle: "italic"
                    }, {
                        tag: [r._A.deleted],
                        color: "#ffdcd7",
                        backgroundColor: "ffeef0"
                    }, ...a]
                })
            }
            )()
            , m = {
                background: "#21202e",
                foreground: "#edecee",
                caret: "#a277ff",
                selection: "#3d375e",
                selectionMatch: "#3d375e",
                gutterBackground: "#21202e",
                gutterForeground: "rgba(237,236,238,0.4)",
                gutterActiveForeground: "rgba(237,236,238,0.7)",
                gutterBorder: "transparent",
                lineHighlight: "rgba(255,255,255,0.05)",
                fontFamily: "Roboto Mono, monospace"
            }
            , g = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, m), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#a277ff"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName],
                        color: "#edecee"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#ffca85"
                    }, {
                        tag: [r._A.processingInstruction, r._A.string, r._A.inserted, r._A.special(r._A.string)],
                        color: "#61ffca"
                    }, {
                        tag: [r._A.function(r._A.variableName), r._A.labelName],
                        color: "#ffca85"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#61ffca"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#edecee"
                    }, {
                        tag: [r._A.className],
                        color: "#82e2ff"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#61ffca"
                    }, {
                        tag: [r._A.typeName],
                        color: "#82e2ff"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#a277ff"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.regexp, r._A.link],
                        color: "#61ffca"
                    }, {
                        tag: [r._A.meta, r._A.comment],
                        color: "#6d6d6d"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#a277ff"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#edecee"
                    }, {
                        tag: r._A.invalid,
                        color: "#ff6767"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, ...a]
                })
            }
            )()
            , Q = {
                background: "#FFFFFF",
                foreground: "#000000",
                caret: "#FBAC52",
                selection: "#fffca5",
                selectionMatch: "#FFFDCF",
                gutterBackground: "#f5f5f5",
                gutterForeground: "#4D4D4C",
                gutterBorder: "transparent",
                lineHighlight: "#00000012",
                fontFamily: "Roboto Mono, monospace"
            }
            , $ = (e => {
                const { theme: t = "light", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, Q), n),
                    styles: [{
                        tag: [r._A.meta, r._A.comment],
                        color: "#804000"
                    }, {
                        tag: [r._A.keyword, r._A.strong],
                        color: "#0000FF"
                    }, {
                        tag: [r._A.number],
                        color: "#FF0080"
                    }, {
                        tag: [r._A.string],
                        color: "#FF0080"
                    }, {
                        tag: [r._A.variableName],
                        color: "#006600"
                    }, {
                        tag: [r._A.escape],
                        color: "#33CC33"
                    }, {
                        tag: [r._A.tagName],
                        color: "#1C02FF"
                    }, {
                        tag: [r._A.heading],
                        color: "#0C07FF"
                    }, {
                        tag: [r._A.quote],
                        color: "#000000"
                    }, {
                        tag: [r._A.list],
                        color: "#B90690"
                    }, {
                        tag: [r._A.documentMeta],
                        color: "#888888"
                    }, {
                        tag: [r._A.function(r._A.variableName)],
                        color: "#0000A2"
                    }, {
                        tag: [r._A.definition(r._A.typeName), r._A.typeName],
                        color: "#6D79DE"
                    }, ...a]
                })
            }
            )()
            , b = {
                background: "#282a36",
                foreground: "#f8f8f2",
                caret: "#f8f8f0",
                selection: "rgba(255, 255, 255, 0.2)",
                selectionMatch: "rgba(255, 255, 255, 0.2)",
                gutterBackground: "#282a36",
                gutterForeground: "#6D8A88",
                gutterBorder: "transparent",
                lineHighlight: "rgba(255, 255, 255, 0.05)",
                fontFamily: "Roboto Mono, monospace"
            }
            , y = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, b), n),
                    styles: [{
                        tag: r._A.comment,
                        color: "#6272a4"
                    }, {
                        tag: r._A.string,
                        color: "#f1fa8c"
                    }, {
                        tag: r._A.atom,
                        color: "#bd93f9"
                    }, {
                        tag: r._A.meta,
                        color: "#f8f8f2"
                    }, {
                        tag: [r._A.keyword, r._A.operator, r._A.tagName],
                        color: "#ff79c6"
                    }, {
                        tag: [r._A.function(r._A.propertyName), r._A.propertyName],
                        color: "#66d9ef"
                    }, {
                        tag: [r._A.definition(r._A.variableName), r._A.function(r._A.variableName), r._A.className, r._A.attributeName],
                        color: "#50fa7b"
                    }, {
                        tag: r._A.atom,
                        color: "#bd93f9"
                    }, ...a]
                })
            }
            )()
            , S = {
                background: "#fff",
                foreground: "#24292e",
                selection: "#BBDFFF",
                selectionMatch: "#BBDFFF",
                gutterBackground: "#fff",
                gutterForeground: "#6e7781",
                fontFamily: "Roboto Mono, monospace"
            }
            , P = (e => {
                const { theme: t = "light", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, S), n),
                    styles: [{
                        tag: [r._A.standard(r._A.tagName), r._A.tagName],
                        color: "#116329"
                    }, {
                        tag: [r._A.comment, r._A.bracket],
                        color: "#6a737d"
                    }, {
                        tag: [r._A.className, r._A.propertyName],
                        color: "#6f42c1"
                    }, {
                        tag: [r._A.variableName, r._A.attributeName, r._A.number, r._A.operator],
                        color: "#005cc5"
                    }, {
                        tag: [r._A.keyword, r._A.typeName, r._A.typeOperator, r._A.typeName],
                        color: "#d73a49"
                    }, {
                        tag: [r._A.string, r._A.meta, r._A.regexp],
                        color: "#032f62"
                    }, {
                        tag: [r._A.name, r._A.quote],
                        color: "#22863a"
                    }, {
                        tag: [r._A.heading],
                        color: "#24292e",
                        fontWeight: "bold"
                    }, {
                        tag: [r._A.emphasis],
                        color: "#24292e",
                        fontStyle: "italic"
                    }, {
                        tag: [r._A.deleted],
                        color: "#b31d28",
                        backgroundColor: "ffeef0"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#e36209"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.regexp, r._A.link],
                        color: "#032f62"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: r._A.invalid,
                        color: "#cb2431"
                    }, ...a]
                })
            }
            )()
            , v = {
                background: "#0d1117",
                foreground: "#c9d1d9",
                caret: "#c9d1d9",
                selection: "#003d73",
                selectionMatch: "#003d73",
                lineHighlight: "#36334280",
                fontFamily: "Roboto Mono, monospace",
                gutterBorder: "#f4f4f41f"
            }
            , x = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, v), n),
                    styles: [{
                        tag: [r._A.standard(r._A.tagName), r._A.tagName],
                        color: "#7ee787"
                    }, {
                        tag: [r._A.comment, r._A.bracket],
                        color: "#8b949e"
                    }, {
                        tag: [r._A.className, r._A.propertyName],
                        color: "#d2a8ff"
                    }, {
                        tag: [r._A.variableName, r._A.attributeName, r._A.number, r._A.operator],
                        color: "#79c0ff"
                    }, {
                        tag: [r._A.keyword, r._A.typeName, r._A.typeOperator, r._A.typeName],
                        color: "#ff7b72"
                    }, {
                        tag: [r._A.string, r._A.meta, r._A.regexp],
                        color: "#a5d6ff"
                    }, {
                        tag: [r._A.name, r._A.quote],
                        color: "#7ee787"
                    }, {
                        tag: [r._A.heading],
                        color: "#d2a8ff",
                        fontWeight: "bold"
                    }, {
                        tag: [r._A.emphasis],
                        color: "#d2a8ff",
                        fontStyle: "italic"
                    }, {
                        tag: [r._A.deleted],
                        color: "#ffdcd7",
                        backgroundColor: "ffeef0"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#ffab70"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: r._A.invalid,
                        color: "#f97583"
                    }, ...a]
                })
            }
            )()
            , k = {
                background: "#282828",
                foreground: "#ebdbb2",
                caret: "#ebdbb2",
                selection: "rgba(189,174,147,0.5)",
                selectionMatch: "#bdae93",
                lineHighlight: "rgba(60,56,54,0.5)",
                gutterBackground: "#282828",
                gutterForeground: "#7c6f64",
                fontFamily: "Roboto Mono, monospace"
            }
            , w = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, k), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#fb4934"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.propertyName, r._A.macroName],
                        color: "#8ec07c"
                    }, {
                        tag: [r._A.variableName],
                        color: "#83a598"
                    }, {
                        tag: [r._A.function(r._A.variableName)],
                        color: "#b8bb26",
                        fontStyle: "bold"
                    }, {
                        tag: [r._A.labelName],
                        color: "#ebdbb2"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#d3869b"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#ebdbb2"
                    }, {
                        tag: [r._A.brace],
                        color: "#ebdbb2"
                    }, {
                        tag: [r._A.annotation],
                        color: "#fb4934d"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#d3869b"
                    }, {
                        tag: [r._A.typeName, r._A.className],
                        color: "#fabd2f"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#fb4934"
                    }, {
                        tag: [r._A.tagName],
                        color: "#8ec07c",
                        fontStyle: "bold"
                    }, {
                        tag: [r._A.squareBracket],
                        color: "#fe8019"
                    }, {
                        tag: [r._A.angleBracket],
                        color: "#83a598"
                    }, {
                        tag: [r._A.attributeName],
                        color: "#8ec07c"
                    }, {
                        tag: [r._A.regexp],
                        color: "#8ec07c"
                    }, {
                        tag: [r._A.quote],
                        color: "#928374"
                    }, {
                        tag: [r._A.string],
                        color: "#ebdbb2"
                    }, {
                        tag: r._A.link,
                        color: "#a89984",
                        textDecoration: "underline",
                        textUnderlinePosition: "under"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.special(r._A.string)],
                        color: "#d3869b"
                    }, {
                        tag: [r._A.meta],
                        color: "#fabd2f"
                    }, {
                        tag: [r._A.comment],
                        color: "#928374",
                        fontStyle: "italic"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold",
                        color: "#fe8019"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic",
                        color: "#b8bb26"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#b8bb26"
                    }, {
                        tag: [r._A.heading1, r._A.heading2],
                        fontWeight: "bold",
                        color: "#b8bb26"
                    }, {
                        tag: [r._A.heading3, r._A.heading4],
                        fontWeight: "bold",
                        color: "#fabd2f"
                    }, {
                        tag: [r._A.heading5, r._A.heading6],
                        color: "#fabd2f"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#d3869b"
                    }, {
                        tag: [r._A.processingInstruction, r._A.inserted],
                        color: "#83a598"
                    }, {
                        tag: [r._A.contentSeparator],
                        color: "#fb4934"
                    }, {
                        tag: r._A.invalid,
                        color: "#fe8019",
                        borderBottom: "1px dotted #fb4934d"
                    }, ...a]
                })
            }
            )()
            , X = {
                background: "#fbf1c7",
                foreground: "#3c3836",
                caret: "#af3a03",
                selection: "rgba(235,219,178)",
                selectionMatch: "#bdae93",
                lineHighlight: "rgba(235,219,178,0.4)",
                gutterBackground: "#ebdbb2",
                gutterForeground: "#665c54",
                gutterBorder: "transparent",
                fontFamily: "Roboto Mono, monospace"
            }
            , _ = (e => {
                const { theme: t = "light", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, X), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#9d0006"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.propertyName, r._A.macroName],
                        color: "#427b58"
                    }, {
                        tag: [r._A.variableName],
                        color: "#076678"
                    }, {
                        tag: [r._A.function(r._A.variableName)],
                        color: "#79740e",
                        fontStyle: "bold"
                    }, {
                        tag: [r._A.labelName],
                        color: "#3c3836"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#8f3f71"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#3c3836"
                    }, {
                        tag: [r._A.brace],
                        color: "#3c3836"
                    }, {
                        tag: [r._A.annotation],
                        color: "#9d0006"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#8f3f71"
                    }, {
                        tag: [r._A.typeName, r._A.className],
                        color: "#b57614"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#9d0006"
                    }, {
                        tag: [r._A.tagName],
                        color: "#427b58",
                        fontStyle: "bold"
                    }, {
                        tag: [r._A.squareBracket],
                        color: "#af3a03"
                    }, {
                        tag: [r._A.angleBracket],
                        color: "#076678"
                    }, {
                        tag: [r._A.attributeName],
                        color: "#427b58"
                    }, {
                        tag: [r._A.regexp],
                        color: "#427b58"
                    }, {
                        tag: [r._A.quote],
                        color: "#928374"
                    }, {
                        tag: [r._A.string],
                        color: "#3c3836"
                    }, {
                        tag: r._A.link,
                        color: "#7c6f64",
                        textDecoration: "underline",
                        textUnderlinePosition: "under"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.special(r._A.string)],
                        color: "#8f3f71"
                    }, {
                        tag: [r._A.meta],
                        color: "#b57614"
                    }, {
                        tag: [r._A.comment],
                        color: "#928374",
                        fontStyle: "italic"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold",
                        color: "#af3a03"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic",
                        color: "#79740e"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#79740e"
                    }, {
                        tag: [r._A.heading1, r._A.heading2],
                        fontWeight: "bold",
                        color: "#79740e"
                    }, {
                        tag: [r._A.heading3, r._A.heading4],
                        fontWeight: "bold",
                        color: "#b57614"
                    }, {
                        tag: [r._A.heading5, r._A.heading6],
                        color: "#b57614"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#8f3f71"
                    }, {
                        tag: [r._A.processingInstruction, r._A.inserted],
                        color: "#076678"
                    }, {
                        tag: [r._A.contentSeparator],
                        color: "#9d0006"
                    }, {
                        tag: r._A.invalid,
                        color: "#af3a03",
                        borderBottom: "1px dotted #9d0006"
                    }, ...a]
                })
            }
            )()
            , T = {
                background: "#2e3235",
                foreground: "#bdbdbd",
                caret: "#a0a4ae",
                selection: "rgba(215,212,240,0.7)",
                selectionMatch: "#d7d4f0",
                gutterBackground: "#2e3235",
                gutterForeground: "#999",
                gutterActiveForeground: "#c2c2c2",
                gutterBorder: "transparent",
                lineHighlight: "rgba(84,91,97,0.5)",
                fontFamily: "Roboto Mono, monospace"
            }
            , z = T
            , R = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, T), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#cf6edf"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName],
                        color: "#56c8d8"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#facf4e"
                    }, {
                        tag: [r._A.variableName],
                        color: "#bdbdbd"
                    }, {
                        tag: [r._A.function(r._A.variableName)],
                        color: "#56c8d8"
                    }, {
                        tag: [r._A.labelName],
                        color: "#cf6edf"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#facf4e"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#fa5788"
                    }, {
                        tag: [r._A.brace],
                        color: "#cf6edf"
                    }, {
                        tag: [r._A.annotation],
                        color: "#ff5f52"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#ffad42"
                    }, {
                        tag: [r._A.typeName, r._A.className],
                        color: "#ffad42"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#7186f0"
                    }, {
                        tag: [r._A.tagName],
                        color: "#99d066"
                    }, {
                        tag: [r._A.squareBracket],
                        color: "#ff5f52"
                    }, {
                        tag: [r._A.angleBracket],
                        color: "#606f7a"
                    }, {
                        tag: [r._A.attributeName],
                        color: "#bdbdbd"
                    }, {
                        tag: [r._A.regexp],
                        color: "#ff5f52"
                    }, {
                        tag: [r._A.quote],
                        color: "#6abf69"
                    }, {
                        tag: [r._A.string],
                        color: "#99d066"
                    }, {
                        tag: r._A.link,
                        color: "#56c8d8",
                        textDecoration: "underline",
                        textUnderlinePosition: "under"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.special(r._A.string)],
                        color: "#facf4e"
                    }, {
                        tag: [r._A.meta],
                        color: "#707d8b"
                    }, {
                        tag: [r._A.comment],
                        color: "#707d8b",
                        fontStyle: "italic"
                    }, {
                        tag: r._A.monospace,
                        color: "#bdbdbd"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold",
                        color: "#ff5f52"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic",
                        color: "#99d066"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#facf4e"
                    }, {
                        tag: r._A.heading1,
                        fontWeight: "bold",
                        color: "#facf4e"
                    }, {
                        tag: [r._A.heading2, r._A.heading3, r._A.heading4],
                        fontWeight: "bold",
                        color: "#facf4e"
                    }, {
                        tag: [r._A.heading5, r._A.heading6],
                        color: "#facf4e"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#56c8d8"
                    }, {
                        tag: [r._A.processingInstruction, r._A.inserted],
                        color: "#ff5f52"
                    }, {
                        tag: [r._A.contentSeparator],
                        color: "#56c8d8"
                    }, {
                        tag: r._A.invalid,
                        color: "#606f7a",
                        borderBottom: "1px dotted #ff5f52"
                    }, ...a]
                })
            }
            )()
            , W = {
                background: "#FAFAFA",
                foreground: "#90A4AE",
                caret: "#272727",
                selection: "#80CBC440",
                selectionMatch: "#FAFAFA",
                gutterBackground: "#FAFAFA",
                gutterForeground: "#90A4AE",
                gutterBorder: "transparent",
                lineHighlight: "#CCD7DA50",
                fontFamily: "Roboto Mono, monospace"
            }
            , Z = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, W), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#39ADB5"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName],
                        color: "#90A4AE"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#6182B8"
                    }, {
                        tag: [r._A.processingInstruction, r._A.string, r._A.inserted, r._A.special(r._A.string)],
                        color: "#91B859"
                    }, {
                        tag: [r._A.function(r._A.variableName), r._A.labelName],
                        color: "#6182B8"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#39ADB5"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#90A4AE"
                    }, {
                        tag: [r._A.className],
                        color: "#E2931D"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#F76D47"
                    }, {
                        tag: [r._A.typeName],
                        color: "#E2931D",
                        fontStyle: "#E2931D"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#39ADB5"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.regexp, r._A.link],
                        color: "#91B859"
                    }, {
                        tag: [r._A.meta, r._A.comment],
                        color: "#90A4AE"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#39ADB5"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#90A4AE"
                    }, {
                        tag: r._A.invalid,
                        color: "#E5393570"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, ...a]
                })
            }
            )()
            , q = {
                background: "#f2f1f8",
                foreground: "#0c006b",
                caret: "#5c49e9",
                selection: "#d5d1f2",
                selectionMatch: "#d5d1f2",
                gutterBackground: "#f2f1f8",
                gutterForeground: "#0c006b70",
                lineHighlight: "rgba(225,222,243,0.5)",
                fontFamily: "Roboto Mono, monospace"
            }
            , U = (e => {
                const { theme: t = "light", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, q), n),
                    styles: [{
                        tag: r._A.comment,
                        color: "#9995b7"
                    }, {
                        tag: r._A.keyword,
                        color: "#ff5792",
                        fontWeight: "bold"
                    }, {
                        tag: [r._A.definitionKeyword, r._A.modifier],
                        color: "#ff5792"
                    }, {
                        tag: [r._A.className, r._A.tagName, r._A.definition(r._A.typeName)],
                        color: "#0094f0"
                    }, {
                        tag: [r._A.number, r._A.bool, r._A.null, r._A.special(r._A.brace)],
                        color: "#5842ff"
                    }, {
                        tag: [r._A.definition(r._A.propertyName), r._A.function(r._A.variableName)],
                        color: "#0095a8"
                    }, {
                        tag: r._A.typeName,
                        color: "#b3694d"
                    }, {
                        tag: [r._A.propertyName, r._A.variableName],
                        color: "#fa8900"
                    }, {
                        tag: r._A.operator,
                        color: "#ff5792"
                    }, {
                        tag: r._A.self,
                        color: "#e64100"
                    }, {
                        tag: [r._A.string, r._A.regexp],
                        color: "#00b368"
                    }, {
                        tag: [r._A.paren, r._A.bracket],
                        color: "#0431fa"
                    }, {
                        tag: r._A.labelName,
                        color: "#00bdd6"
                    }, {
                        tag: r._A.attributeName,
                        color: "#e64100"
                    }, {
                        tag: r._A.angleBracket,
                        color: "#9995b7"
                    }, ...a]
                })
            }
            )()
            , Y = {
                background: "#2e3440",
                foreground: "#FFFFFF",
                caret: "#FFFFFF",
                selection: "#4c566a",
                selectionMatch: "#e5e9f0",
                gutterBackground: "#2e3440",
                gutterForeground: "#4c566a",
                gutterActiveForeground: "#d8dee9",
                lineHighlight: "rgba(255,255,255,0.05)",
                gutterBorder: "transparent",
                fontFamily: "Roboto Mono, monospace"
            }
            , A = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, Y), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#5e81ac"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.propertyName, r._A.macroName],
                        color: "#88c0d0"
                    }, {
                        tag: [r._A.variableName],
                        color: "#8fbcbb"
                    }, {
                        tag: [r._A.function(r._A.variableName)],
                        color: "#8fbcbb"
                    }, {
                        tag: [r._A.labelName],
                        color: "#81a1c1"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#5e81ac"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#a3be8c"
                    }, {
                        tag: [r._A.brace],
                        color: "#8fbcbb"
                    }, {
                        tag: [r._A.annotation],
                        color: "#d30102"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#b48ead"
                    }, {
                        tag: [r._A.typeName, r._A.className],
                        color: "#ebcb8b"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#a3be8c"
                    }, {
                        tag: [r._A.tagName],
                        color: "#b48ead"
                    }, {
                        tag: [r._A.squareBracket],
                        color: "#bf616a"
                    }, {
                        tag: [r._A.angleBracket],
                        color: "#d08770"
                    }, {
                        tag: [r._A.attributeName],
                        color: "#ebcb8b"
                    }, {
                        tag: [r._A.regexp],
                        color: "#5e81ac"
                    }, {
                        tag: [r._A.quote],
                        color: "#b48ead"
                    }, {
                        tag: [r._A.string],
                        color: "#a3be8c"
                    }, {
                        tag: r._A.link,
                        color: "#a3be8c",
                        textDecoration: "underline",
                        textUnderlinePosition: "under"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.special(r._A.string)],
                        color: "#8fbcbb"
                    }, {
                        tag: [r._A.meta],
                        color: "#88c0d0"
                    }, {
                        tag: [r._A.monospace],
                        color: "#d8dee9",
                        fontStyle: "italic"
                    }, {
                        tag: [r._A.comment],
                        color: "#4c566a",
                        fontStyle: "italic"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold",
                        color: "#5e81ac"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic",
                        color: "#5e81ac"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#5e81ac"
                    }, {
                        tag: r._A.special(r._A.heading1),
                        fontWeight: "bold",
                        color: "#5e81ac"
                    }, {
                        tag: r._A.heading1,
                        fontWeight: "bold",
                        color: "#5e81ac"
                    }, {
                        tag: [r._A.heading2, r._A.heading3, r._A.heading4],
                        fontWeight: "bold",
                        color: "#5e81ac"
                    }, {
                        tag: [r._A.heading5, r._A.heading6],
                        color: "#5e81ac"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#d08770"
                    }, {
                        tag: [r._A.processingInstruction, r._A.inserted],
                        color: "#8fbcbb"
                    }, {
                        tag: [r._A.contentSeparator],
                        color: "#ebcb8b"
                    }, {
                        tag: r._A.invalid,
                        color: "#434c5e",
                        borderBottom: "1px dotted #d30102"
                    }, ...a]
                })
            }
            )()
            , V = {
                background: "#303841",
                foreground: "#FFFFFF",
                caret: "#FBAC52",
                selection: "#4C5964",
                selectionMatch: "#3A546E",
                gutterBackground: "#303841",
                gutterForeground: "#FFFFFF70",
                lineHighlight: "#00000059",
                gutterBorder: "transparent",
                fontFamily: "Roboto Mono, monospace"
            };
        const E = function (e) {
            const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
            return O({
                theme: t,
                settings: (0,
                    i.A)((0,
                        i.A)({}, V), n),
                styles: [{
                    tag: [r._A.meta, r._A.comment],
                    color: "#A2A9B5"
                }, {
                    tag: [r._A.attributeName, r._A.keyword],
                    color: "#B78FBA"
                }, {
                    tag: r._A.function(r._A.variableName),
                    color: "#5AB0B0"
                }, {
                    tag: [r._A.string, r._A.regexp, r._A.attributeValue],
                    color: "#99C592"
                }, {
                    tag: r._A.operator,
                    color: "#f47954"
                }, {
                    tag: [r._A.tagName, r._A.modifier],
                    color: "#E35F63"
                }, {
                    tag: [r._A.number, r._A.definition(r._A.tagName), r._A.className, r._A.definition(r._A.variableName)],
                    color: "#fbac52"
                }, {
                    tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                    color: "#E35F63"
                }, {
                    tag: r._A.variableName,
                    color: "#539ac4"
                }, {
                    tag: [r._A.propertyName, r._A.typeName],
                    color: "#629ccd"
                }, {
                    tag: r._A.propertyName,
                    color: "#36b7b5"
                }, ...a]
            })
        }()
            , j = {
                background: "#e1e2e7",
                foreground: "#3760bf",
                caret: "#3760bf",
                selection: "#99a7df",
                selectionMatch: "#99a7df",
                gutterBackground: "#e1e2e7",
                gutterForeground: "#3760bf",
                gutterBorder: "transparent",
                lineHighlight: "#5f5faf11",
                fontFamily: "Roboto Mono, monospace"
            }
            , C = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, j), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#007197"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName],
                        color: "#3760bf"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#3760bf"
                    }, {
                        tag: [r._A.processingInstruction, r._A.string, r._A.inserted, r._A.special(r._A.string)],
                        color: "#587539"
                    }, {
                        tag: [r._A.function(r._A.variableName), r._A.labelName],
                        color: "#3760bf"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#3760bf"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#3760bf"
                    }, {
                        tag: [r._A.className],
                        color: "#3760bf"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#b15c00"
                    }, {
                        tag: [r._A.typeName],
                        color: "#007197",
                        fontStyle: "#007197"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#007197"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.regexp, r._A.link],
                        color: "#587539"
                    }, {
                        tag: [r._A.meta, r._A.comment],
                        color: "#848cb5"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#b15c00"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#3760bf"
                    }, {
                        tag: r._A.invalid,
                        color: "#f52a65"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, ...a]
                })
            }
            )()
            , G = {
                background: "#24283b",
                foreground: "#7982a9",
                caret: "#c0caf5",
                selection: "#6f7bb6",
                selectionMatch: "#1f2335",
                gutterBackground: "#24283b",
                gutterForeground: "#7982a9",
                gutterBorder: "transparent",
                lineHighlight: "rgba(255,255,255,0.05)"
            }
            , I = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, G), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#bb9af7"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName],
                        color: "#c0caf5"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#7aa2f7"
                    }, {
                        tag: [r._A.processingInstruction, r._A.string, r._A.inserted, r._A.special(r._A.string)],
                        color: "#9ece6a"
                    }, {
                        tag: [r._A.function(r._A.variableName), r._A.labelName],
                        color: "#7aa2f7"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#bb9af7"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#c0caf5"
                    }, {
                        tag: [r._A.className],
                        color: "#c0caf5"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#ff9e64"
                    }, {
                        tag: [r._A.typeName],
                        color: "#2ac3de",
                        fontStyle: "#2ac3de"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#bb9af7"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.regexp, r._A.link],
                        color: "#b4f9f8"
                    }, {
                        tag: [r._A.meta, r._A.comment],
                        color: "#565f89"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#89ddff"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#c0caf5"
                    }, {
                        tag: r._A.invalid,
                        color: "#ff5370"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, ...a]
                })
            }
            )()
            , D = {
                background: "#1a1b26",
                foreground: "#787c99",
                caret: "#c0caf5",
                selection: "#515c7e",
                selectionMatch: "#16161e",
                gutterBackground: "#1a1b26",
                gutterForeground: "#787c99",
                gutterBorder: "transparent",
                lineHighlight: "rgba(255,255,255,0.05)"
            }
            , N = (e => {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, D), n),
                    styles: [{
                        tag: r._A.keyword,
                        color: "#bb9af7"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName],
                        color: "#c0caf5"
                    }, {
                        tag: [r._A.propertyName],
                        color: "#7aa2f7"
                    }, {
                        tag: [r._A.processingInstruction, r._A.string, r._A.inserted, r._A.special(r._A.string)],
                        color: "#9ece6a"
                    }, {
                        tag: [r._A.function(r._A.variableName), r._A.labelName],
                        color: "#7aa2f7"
                    }, {
                        tag: [r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name)],
                        color: "#bb9af7"
                    }, {
                        tag: [r._A.definition(r._A.name), r._A.separator],
                        color: "#c0caf5"
                    }, {
                        tag: [r._A.className],
                        color: "#c0caf5"
                    }, {
                        tag: [r._A.number, r._A.changed, r._A.annotation, r._A.modifier, r._A.self, r._A.namespace],
                        color: "#ff9e64"
                    }, {
                        tag: [r._A.typeName],
                        color: "#0db9d7"
                    }, {
                        tag: [r._A.operator, r._A.operatorKeyword],
                        color: "#bb9af7"
                    }, {
                        tag: [r._A.url, r._A.escape, r._A.regexp, r._A.link],
                        color: "#b4f9f8"
                    }, {
                        tag: [r._A.meta, r._A.comment],
                        color: "#444b6a"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic"
                    }, {
                        tag: r._A.link,
                        textDecoration: "underline"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#89ddff"
                    }, {
                        tag: [r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#c0caf5"
                    }, {
                        tag: r._A.invalid,
                        color: "#ff5370"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, ...a]
                })
            }
            )()
            , L = {
                background: "#1e1e1e",
                foreground: "#9cdcfe",
                caret: "#c6c6c6",
                selection: "#6199ff2f",
                selectionMatch: "#72a1ff59",
                lineHighlight: "#ffffff0f",
                gutterBackground: "#1e1e1e",
                gutterForeground: "#838383",
                gutterActiveForeground: "#fff",
                gutterBorder: "transparent",
                fontFamily: "Roboto Mono, monospace"
            };
        const M = {
            auto: null,
            craftdark: p,
            craftlight: h,
            atomone: u,
            aura: g,
            bbedit: $,
            darcula: l,
            dracula: y,
            githubdark: x,
            githublight: P,
            gruvboxdark: w,
            gruvboxlight: _,
            materialdark: R,
            materiallight: Z,
            noctislilac: U,
            nord: A,
            sublime: E,
            tokyonightday: C,
            tokyonightstorm: I,
            tokyonight: N,
            vscodedark: function (e) {
                const { theme: t = "dark", settings: n = {}, styles: a = [] } = e || {};
                return O({
                    theme: t,
                    settings: (0,
                        i.A)((0,
                            i.A)({}, L), n),
                    styles: [{
                        tag: [r._A.keyword, r._A.operatorKeyword, r._A.modifier, r._A.color, r._A.constant(r._A.name), r._A.standard(r._A.name), r._A.standard(r._A.tagName), r._A.special(r._A.brace), r._A.atom, r._A.bool, r._A.special(r._A.variableName)],
                        color: "#569cd6"
                    }, {
                        tag: [r._A.controlKeyword, r._A.moduleKeyword],
                        color: "#c586c0"
                    }, {
                        tag: [r._A.name, r._A.deleted, r._A.character, r._A.macroName, r._A.propertyName, r._A.variableName, r._A.labelName, r._A.definition(r._A.name)],
                        color: "#9cdcfe"
                    }, {
                        tag: r._A.heading,
                        fontWeight: "bold",
                        color: "#9cdcfe"
                    }, {
                        tag: [r._A.typeName, r._A.className, r._A.tagName, r._A.number, r._A.changed, r._A.annotation, r._A.self, r._A.namespace],
                        color: "#4ec9b0"
                    }, {
                        tag: [r._A.function(r._A.variableName), r._A.function(r._A.propertyName)],
                        color: "#dcdcaa"
                    }, {
                        tag: [r._A.number],
                        color: "#b5cea8"
                    }, {
                        tag: [r._A.operator, r._A.punctuation, r._A.separator, r._A.url, r._A.escape, r._A.regexp],
                        color: "#d4d4d4"
                    }, {
                        tag: [r._A.regexp],
                        color: "#d16969"
                    }, {
                        tag: [r._A.special(r._A.string), r._A.processingInstruction, r._A.string, r._A.inserted],
                        color: "#ce9178"
                    }, {
                        tag: [r._A.angleBracket],
                        color: "#808080"
                    }, {
                        tag: r._A.strong,
                        fontWeight: "bold"
                    }, {
                        tag: r._A.emphasis,
                        fontStyle: "italic"
                    }, {
                        tag: r._A.strikethrough,
                        textDecoration: "line-through"
                    }, {
                        tag: [r._A.meta, r._A.comment],
                        color: "#6a9955"
                    }, {
                        tag: r._A.link,
                        color: "#6a9955",
                        textDecoration: "underline"
                    }, {
                        tag: r._A.invalid,
                        color: "#ff0000"
                    }, ...a]
                })
            }()
        }
            , F = [{
                storedLangCode: "ada",
                langCode: "ada",
                label: "Ada"
            }, {
                storedLangCode: "bash",
                langCode: "bash",
                label: "Bash"
            }, {
                storedLangCode: "cpp",
                langCode: "cpp",
                label: "C++"
            }, {
                storedLangCode: "cs",
                langCode: "csharp",
                label: "C#"
            }, {
                storedLangCode: "css",
                langCode: "css",
                label: "CSS"
            }, {
                storedLangCode: "dart",
                langCode: "dart",
                label: "Dart"
            }, {
                storedLangCode: "dockerfile",
                langCode: "dockerfile",
                label: "Dockerfile"
            }, {
                storedLangCode: "math_formula",
                langCode: "stex",
                label: "Formula (TeX)"
            }, {
                storedLangCode: "matlab",
                langCode: "matlab",
                label: "Matlab"
            }, {
                storedLangCode: "go",
                langCode: "go",
                label: "Go"
            }, {
                storedLangCode: "groovy",
                langCode: "groovy",
                label: "Groovy"
            }, {
                storedLangCode: "haskell",
                langCode: "haskell",
                label: "Haskell"
            }, {
                storedLangCode: "html",
                langCode: "html",
                label: "HTML"
            }, {
                storedLangCode: "java",
                langCode: "java",
                label: "Java"
            }, {
                storedLangCode: "javascript",
                langCode: "javascript",
                label: "JavaScript"
            }, {
                storedLangCode: "json",
                langCode: "json",
                label: "JSON"
            }, {
                storedLangCode: "julia",
                langCode: "julia",
                label: "Julia"
            }, {
                storedLangCode: "kotlin",
                langCode: "kotlin",
                label: "Kotlin"
            }, {
                storedLangCode: "lua",
                langCode: "lua",
                label: "Lua"
            }, {
                storedLangCode: "markdown",
                langCode: "markdown",
                label: "Markdown"
            }, {
                storedLangCode: "objectivec",
                langCode: "objectiveC",
                label: "Objective-C"
            }, {
                storedLangCode: "perl",
                langCode: "perl",
                label: "Perl"
            }, {
                storedLangCode: "php",
                langCode: "php",
                label: "PHP"
            }, {
                storedLangCode: "prolog",
                langCode: "prolog",
                label: "Prolog"
            }, {
                storedLangCode: "plaintext",
                langCode: null,
                label: "Plain text"
            }, {
                storedLangCode: "python",
                langCode: "python",
                label: "Python"
            }, {
                storedLangCode: "r",
                langCode: "r",
                label: "R"
            }, {
                storedLangCode: "ruby",
                langCode: "ruby",
                label: "Ruby"
            }, {
                storedLangCode: "rust",
                langCode: "rust",
                label: "Rust"
            }, {
                storedLangCode: "scala",
                langCode: "scala",
                label: "Scala"
            }, {
                storedLangCode: "shell",
                langCode: "shell",
                label: "Shell"
            }, {
                storedLangCode: "sql",
                langCode: "sql",
                label: "SQL"
            }, {
                storedLangCode: "swift",
                langCode: "swift",
                label: "Swift"
            }, {
                storedLangCode: "typescript",
                langCode: "tsx",
                label: "TypeScript"
            }, {
                storedLangCode: "vbnet",
                langCode: "vbnet",
                label: "Visual Basic.NET"
            }, {
                storedLangCode: "xml",
                langCode: "xml",
                label: "XML"
            }, {
                storedLangCode: "yaml",
                langCode: "yaml",
                label: "Yaml"
            }, {
                storedLangCode: "other",
                langCode: "other",
                label: "Other"
            }];
        let B = function (e) {
            return e.AUTO = "auto",
                e.CRAFTDARK = "craftdark",
                e.CRAFTLIGHT = "craftlight",
                e.ATOMONE = "atomone",
                e.AURA = "aura",
                e.BBEDIT = "bbedit",
                e.DARCULA = "darcula",
                e.DRACULA = "dracula",
                e.GITHUBDARK = "githubdark",
                e.GITHUBLIGHT = "githublight",
                e.GRUVBOXDARK = "gruvboxdark",
                e.GRUVBOXLIGHT = "gruvboxlight",
                e.MATERIALDARK = "materialdark",
                e.MATERIALLIGHT = "materiallight",
                e.NOCTISLILAC = "noctislilac",
                e.NORD = "nord",
                e.SUBLIME = "sublime",
                e.TOKYONIGHTDAY = "tokyonightday",
                e.TOKYONIGHTSTORM = "tokyonightstorm",
                e.TOKYONIGHT = "tokyonight",
                e.VSCODEDARK = "vscodedark",
                e
        }({});
        const H = [{
            id: B.AUTO,
            label: "Auto",
            keywords: ["system"],
            isDark: !0,
            settings: null
        }, {
            id: B.CRAFTDARK,
            label: "Dark",
            keywords: [],
            isDark: !0,
            settings: f
        }, {
            id: B.CRAFTLIGHT,
            label: "Light",
            keywords: [],
            isDark: !1,
            settings: d
        }, {
            id: B.ATOMONE,
            label: "Atom One",
            keywords: ["dark"],
            isDark: !0,
            settings: c
        }, {
            id: B.AURA,
            label: "Aura",
            keywords: ["dark"],
            isDark: !0,
            settings: m
        }, {
            id: B.BBEDIT,
            label: "BBEdit",
            keywords: ["light"],
            isDark: !1,
            settings: Q
        }, {
            id: B.DARCULA,
            label: "Darcula",
            keywords: ["dark"],
            isDark: !0,
            settings: s
        }, {
            id: B.DRACULA,
            label: "Dracula",
            keywords: ["dark"],
            isDark: !0,
            settings: b
        }, {
            id: B.GITHUBDARK,
            label: "GitHub Dark",
            keywords: ["dark"],
            isDark: !0,
            settings: v
        }, {
            id: B.GITHUBLIGHT,
            label: "GitHub Light",
            keywords: [],
            isDark: !1,
            settings: S
        }, {
            id: B.GRUVBOXDARK,
            label: "Gruvbox Dark",
            keywords: ["dark"],
            isDark: !0,
            settings: k
        }, {
            id: B.GRUVBOXLIGHT,
            label: "Gruvbox Light",
            keywords: [],
            isDark: !1,
            settings: X
        }, {
            id: B.MATERIALDARK,
            label: "Material Dark",
            keywords: [],
            isDark: !0,
            settings: z
        }, {
            id: B.MATERIALLIGHT,
            label: "Material Light",
            keywords: ["light"],
            isDark: !1,
            settings: W
        }, {
            id: B.NOCTISLILAC,
            label: "Noctis Lilac",
            keywords: ["light"],
            isDark: !1,
            settings: q
        }, {
            id: B.NORD,
            label: "Nord",
            keywords: ["dark"],
            isDark: !0,
            settings: Y
        }, {
            id: B.SUBLIME,
            label: "Sublime",
            keywords: ["dark"],
            isDark: !0,
            settings: V
        }, {
            id: B.TOKYONIGHT,
            label: "Tokyo Night",
            keywords: ["dark"],
            isDark: !0,
            settings: D
        }, {
            id: B.TOKYONIGHTDAY,
            label: "Tokyo Night Day",
            keywords: ["light"],
            isDark: !1,
            settings: j
        }, {
            id: B.TOKYONIGHTSTORM,
            label: "Tokyo Night Storm",
            keywords: ["dark"],
            isDark: !0,
            settings: G
        }, {
            id: B.VSCODEDARK,
            label: "VS Code",
            keywords: ["dark"],
            isDark: !0,
            settings: L
        }]
            , K = (e, t) => e === B.AUTO ? t ? M[B.CRAFTDARK] : M[B.CRAFTLIGHT] : M[e]
            , J = (e, t) => {
                if (e === B.AUTO) {
                    const e = t ? B.CRAFTDARK : B.CRAFTLIGHT
                        , n = H.find((t => t.id === e));
                    return n || H[0]
                }
                const n = H.find((t => t.id === e));
                return n || H[0]
            }
    }
    ,
    76846: (e, t, n) => {
        n.d(t, {
            V: () => d,
            q: () => h
        });
        var i = n(5464)
            , r = n(17941);
        const a = (e, t) => e ? `linear-gradient(116deg, rgb(40 42 43 / ${t}%), rgb(34 36 37 / ${t}%))` : `linear-gradient(116deg, rgb(250 250 250 / ${t}%), rgb(244 244 244 / ${t}%))`
            , o = "saturate(1.5) blur(32px)"
            , O = "#C1C1C1"
            , s = "#686868"
            , l = "#A8A8A8"
            , c = "#7B7B7B"
            , u = "transparent";
        function d(e) {
            if (e.isScrollbarPersistent)
                return i.AH`
      &::-webkit-scrollbar {
        width: 14px;
        height: 14px;
        overflow: visible;
      }

      &::-webkit-scrollbar-button {
        height: 0;
        width: 0;
      }

      &::-webkit-scrollbar-corner {
        background-clip: padding-box;
        background-color: ${u};
      }

      &::-webkit-scrollbar-thumb {
        background-color: ${e.isThemeDark ? s : O};
        border: 3px solid transparent;
        border-radius: 7px;
        box-shadow: none;

        min-height: 28px;
        padding: 100px 0 0;
        background-clip: padding-box;
      }

      &::-webkit-scrollbar-thumb:hover {
        background-color: ${e.isThemeDark ? c : l};
      }

      &::-webkit-scrollbar-track {
        box-shadow: none;
        margin: 0 4px;
        border-width: 4px !important;
        background-clip: padding-box;
        border: solid transparent;
      }

      &::-webkit-scrollbar-track-piece {
        background-color: ${u};
        border: none;
        box-shadow: none;
        background-clip: padding-box;
      }
    `
        }
        const h = i.DU`
  .cm-content {
    line-height: 24px !important;
    font-size: 14px;
    cursor: text;
    padding: 12px 0 !important;

    .cm-line {
      padding-left: 10px !important;
    }
  }

  .cm-theme {
    height: 100%;
    overflow: auto;
  }

  .cm-gutters {
    line-height: 24px !important;
    font-size: 14px;
    ${(0,
                r._)("none")}
    border-top-left-radius: 5px;
  }

  .cm-gutterElement {
    padding: 0 10px !important;
    min-width: 36.8px !important;

    &:not(:first-child) {
      min-height: 24px;
    }
  }

  .cm-focused {
    outline: none !important;
  }

  .cm-tooltip {
    z-index: 1000;
    background: ${e => {
                let { theme: t } = e;
                return a(t.isDarkMode, 100)
            }
            } !important;
    background: transparent;
    box-shadow: 0 0 0 1px ${e => {
                let { theme: t } = e;
                return t.colors.neutral[200]
            }
            }, ${e => {
                let { theme: t } = e;
                return t.shadows.sm
            }
            };
    border-radius: 8px;
    overflow: hidden;
    border: none !important;
    padding: 8px;

    @supports (backdrop-filter: ${o}) {
      background: ${e => {
                let { theme: t } = e;
                return a(t.isDarkMode, 85)
            }
            } !important;
      backdrop-filter: ${o} !important;
    }

    @supports (-webkit-backdrop-filter: ${o}) {
      background: ${e => {
                let { theme: t } = e;
                return a(t.isDarkMode, 85)
            }
            } !important;
      -webkit-backdrop-filter: ${o} !important;
    }

    li {
      border-radius: 6px;
      padding: 6px 8px !important;
      background: ${e => {
                let { theme: t } = e;
                return t.colors.neutral["00"]
            }
            };

      &[aria-selected] {
        background: ${e => {
                let { theme: t } = e;
                return t.colors.neutral[50]
            }
            } !important;
        color: inherit !important;
      }
    }

    .cm-completionLabel {
      font-family: "Roboto Mono", monospace;
      font-size: 13px;
      color: ${e => {
                let { theme: t } = e;
                return t.isDarkMode ? "rgba(255,255,255,0.5)" : "rgba(31,34,37,0.5)"
            }
            } !important;

      .cm-completionMatchedText {
        font-weight: 500;
        text-decoration: none;
        color: ${e => {
                let { theme: t } = e;
                return t.isDarkMode ? "rgba(255,255,255,1)" : "rgba(31,34,37,1)"
            }
            } !important;
      }
    }

    .cm-completionDetail {
      font-family: "Roboto Mono", monospace;
      font-size: 11px;
      font-style: italic;
    }

    .cm-completionIcon {
      padding-right: 1rem !important;
    }
  }
`
    }
    ,
    43269: (e, t, n) => {
        n.d(t, {
            c: () => o
        });
        var i = n(27051)
            , r = n(22398)
            , a = n(95071);
        const o = e => (0,
            a.jsx)(r.Tu, (0,
                i.A)((0,
                    i.A)({
                        "aria-label": "Arrow Up Left And Arrow Down Right Icon"
                    }, e), {}, {
                    children: (0,
                        a.jsx)("svg", {
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: (0,
                                a.jsx)("path", {
                                    d: "M5.595 10.885a.566.566 0 0 0 .425-.168.59.59 0 0 0 .164-.43v-.93L6.052 6.83l2.093 2.168 2.326 2.349c.111.115.25.173.415.173a.642.642 0 0 0 .454-.167c.12-.112.18-.26.18-.443a.645.645 0 0 0-.045-.24.556.556 0 0 0-.132-.198L9 8.127 6.824 6.045l2.545.14h.925a.617.617 0 0 0 .436-.165.554.554 0 0 0 .178-.426.562.562 0 0 0-.177-.427.612.612 0 0 0-.437-.167H6.045c-.33 0-.587.091-.77.274-.183.183-.275.439-.275.767v4.247a.59.59 0 0 0 .166.424c.11.115.254.173.43.173ZM13.705 19h4.25c.33 0 .587-.091.77-.274.183-.183.275-.439.275-.767v-4.247a.59.59 0 0 0-.166-.424.567.567 0 0 0-.43-.173c-.168 0-.309.056-.42.168a.583.583 0 0 0-.168.43v.93l.138 2.528-2.092-2.168-2.333-2.349a.553.553 0 0 0-.415-.173.647.647 0 0 0-.455.167.573.573 0 0 0-.182.443.627.627 0 0 0 .18.44L15 15.874l2.175 2.082-2.539-.14h-.931a.593.593 0 0 0-.614.59c0 .174.059.316.177.428a.612.612 0 0 0 .437.167Z",
                                    fill: "#000"
                                })
                        })
                }))
    }
    ,
    640: (e, t, n) => {
        n.d(t, {
            Z: () => o
        });
        var i = n(27051)
            , r = n(22398)
            , a = n(95071);
        const o = e => (0,
            a.jsx)(r.Tu, (0,
                i.A)((0,
                    i.A)({
                        "aria-label": "Windows New Window Icon Icon"
                    }, e), {}, {
                    children: (0,
                        a.jsx)("svg", {
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: (0,
                                a.jsx)("path", {
                                    d: "M7.649 6.514a1.135 1.135 0 0 0-1.135 1.135v8.702a1.135 1.135 0 0 0 1.135 1.136h8.702a1.135 1.135 0 0 0 1.136-1.136v-3.027a.757.757 0 1 1 1.513 0v3.027A2.649 2.649 0 0 1 16.351 19H7.65A2.649 2.649 0 0 1 5 16.351V7.65A2.649 2.649 0 0 1 7.649 5h3.027a.757.757 0 1 1 0 1.514H7.649Zm4.919-.757A.757.757 0 0 1 13.324 5h4.92a.757.757 0 0 1 .756.757v4.919a.757.757 0 1 1-1.514 0V7.584L13.86 11.21a.759.759 0 0 1-1.244-.24.757.757 0 0 1 .174-.83l3.627-3.627h-3.092a.757.757 0 0 1-.756-.757Z",
                                    fill: "#000"
                                })
                        })
                }))
    }
    ,
    11113: () => { }
    ,
    46774: (e, t, n) => {
        n.d(t, {
            Ar: () => l,
            Bc: () => be,
            Gw: () => se,
            OO: () => _e,
            _5: () => o,
            et: () => s,
            wm: () => fe,
            yU: () => Xe
        });
        var i = n(17471)
            , r = n(32043)
            , a = n(25956);
        class o {
            constructor(e, t, n, i) {
                this.state = e,
                    this.pos = t,
                    this.explicit = n,
                    this.view = i,
                    this.abortListeners = [],
                    this.abortOnDocChange = !1
            }
            tokenBefore(e) {
                let t = (0,
                    a.mv)(this.state).resolveInner(this.pos, -1);
                for (; t && e.indexOf(t.name) < 0;)
                    t = t.parent;
                return t ? {
                    from: t.from,
                    to: this.pos,
                    text: this.state.sliceDoc(t.from, this.pos),
                    type: t.type
                } : null
            }
            matchBefore(e) {
                let t = this.state.doc.lineAt(this.pos)
                    , n = Math.max(t.from, this.pos - 250)
                    , i = t.text.slice(n - t.from, this.pos - t.from)
                    , r = i.search(d(e, !1));
                return r < 0 ? null : {
                    from: n + r,
                    to: this.pos,
                    text: i.slice(r)
                }
            }
            get aborted() {
                return null == this.abortListeners
            }
            addEventListener(e, t, n) {
                "abort" == e && this.abortListeners && (this.abortListeners.push(t),
                    n && n.onDocChange && (this.abortOnDocChange = !0))
            }
        }
        function O(e) {
            let t = Object.keys(e).join("")
                , n = /\w/.test(t);
            return n && (t = t.replace(/\w/g, "")),
                `[${n ? "\\w" : ""}${t.replace(/[^\w\s]/g, "\\$&")}]`
        }
        function s(e) {
            let t = e.map((e => "string" == typeof e ? {
                label: e
            } : e))
                , [n, i] = t.every((e => /^\w+$/.test(e.label))) ? [/\w*$/, /\w+$/] : function (e) {
                    let t = Object.create(null)
                        , n = Object.create(null);
                    for (let { label: r } of e) {
                        t[r[0]] = !0;
                        for (let e = 1; e < r.length; e++)
                            n[r[e]] = !0
                    }
                    let i = O(t) + O(n) + "*$";
                    return [new RegExp("^" + i), new RegExp(i)]
                }(t);
            return e => {
                let r = e.matchBefore(i);
                return r || e.explicit ? {
                    from: r ? r.from : e.pos,
                    options: t,
                    validFor: n
                } : null
            }
        }
        function l(e, t) {
            return n => {
                for (let t = (0,
                    a.mv)(n.state).resolveInner(n.pos, -1); t; t = t.parent) {
                    if (e.indexOf(t.name) > -1)
                        return null;
                    if (t.type.isTop)
                        break
                }
                return t(n)
            }
        }
        class c {
            constructor(e, t, n, i) {
                this.completion = e,
                    this.source = t,
                    this.match = n,
                    this.score = i
            }
        }
        function u(e) {
            return e.selection.main.from
        }
        function d(e, t) {
            var n;
            let { source: i } = e
                , r = t && "^" != i[0]
                , a = "$" != i[i.length - 1];
            return r || a ? new RegExp(`${r ? "^" : ""}(?:${i})${a ? "$" : ""}`, null !== (n = e.flags) && void 0 !== n ? n : e.ignoreCase ? "i" : "") : e
        }
        const h = i.YH.define();
        const f = new WeakMap;
        function p(e) {
            if (!Array.isArray(e))
                return e;
            let t = f.get(e);
            return t || f.set(e, t = s(e)),
                t
        }
        const m = i.Pe.define()
            , g = i.Pe.define();
        class Q {
            constructor(e) {
                this.pattern = e,
                    this.chars = [],
                    this.folded = [],
                    this.any = [],
                    this.precise = [],
                    this.byWord = [],
                    this.score = 0,
                    this.matched = [];
                for (let t = 0; t < e.length;) {
                    let n = (0,
                        i.vS)(e, t)
                        , r = (0,
                            i.Fh)(n);
                    this.chars.push(n);
                    let a = e.slice(t, t + r)
                        , o = a.toUpperCase();
                    this.folded.push((0,
                        i.vS)(o == a ? a.toLowerCase() : o, 0)),
                        t += r
                }
                this.astral = e.length != this.chars.length
            }
            ret(e, t) {
                return this.score = e,
                    this.matched = t,
                    this
            }
            match(e) {
                if (0 == this.pattern.length)
                    return this.ret(-100, []);
                if (e.length < this.pattern.length)
                    return null;
                let { chars: t, folded: n, any: r, precise: a, byWord: o } = this;
                if (1 == t.length) {
                    let r = (0,
                        i.vS)(e, 0)
                        , a = (0,
                            i.Fh)(r)
                        , o = a == e.length ? 0 : -100;
                    if (r == t[0])
                        ;
                    else {
                        if (r != n[0])
                            return null;
                        o += -200
                    }
                    return this.ret(o, [0, a])
                }
                let O = e.indexOf(this.pattern);
                if (0 == O)
                    return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
                let s = t.length
                    , l = 0;
                if (O < 0) {
                    for (let a = 0, o = Math.min(e.length, 200); a < o && l < s;) {
                        let o = (0,
                            i.vS)(e, a);
                        o != t[l] && o != n[l] || (r[l++] = a),
                            a += (0,
                                i.Fh)(o)
                    }
                    if (l < s)
                        return null
                }
                let c = 0
                    , u = 0
                    , d = !1
                    , h = 0
                    , f = -1
                    , p = -1
                    , m = /[a-z]/.test(e)
                    , g = !0;
                for (let Q = 0, $ = Math.min(e.length, 200), b = 0; Q < $ && u < s;) {
                    let r = (0,
                        i.vS)(e, Q);
                    O < 0 && (c < s && r == t[c] && (a[c++] = Q),
                        h < s && (r == t[h] || r == n[h] ? (0 == h && (f = Q),
                            p = Q + 1,
                            h++) : h = 0));
                    let l, $ = r < 255 ? r >= 48 && r <= 57 || r >= 97 && r <= 122 ? 2 : r >= 65 && r <= 90 ? 1 : 0 : (l = (0,
                        i.MK)(r)) != l.toLowerCase() ? 1 : l != l.toUpperCase() ? 2 : 0;
                    (!Q || 1 == $ && m || 0 == b && 0 != $) && (t[u] == r || n[u] == r && (d = !0) ? o[u++] = Q : o.length && (g = !1)),
                        b = $,
                        Q += (0,
                            i.Fh)(r)
                }
                return u == s && 0 == o[0] && g ? this.result((d ? -200 : 0) - 100, o, e) : h == s && 0 == f ? this.ret(-200 - e.length + (p == e.length ? 0 : -100), [0, p]) : O > -1 ? this.ret(-700 - e.length, [O, O + this.pattern.length]) : h == s ? this.ret(-900 - e.length, [f, p]) : u == s ? this.result((d ? -200 : 0) - 100 - 700 + (g ? 0 : -1100), o, e) : 2 == t.length ? null : this.result((r[0] ? -700 : 0) - 200 - 1100, r, e)
            }
            result(e, t, n) {
                let r = []
                    , a = 0;
                for (let o of t) {
                    let e = o + (this.astral ? (0,
                        i.Fh)((0,
                            i.vS)(n, o)) : 1);
                    a && r[a - 1] == o ? r[a - 1] = e : (r[a++] = o,
                        r[a++] = e)
                }
                return this.ret(e - n.length, r)
            }
        }
        class $ {
            constructor(e) {
                this.pattern = e,
                    this.matched = [],
                    this.score = 0,
                    this.folded = e.toLowerCase()
            }
            match(e) {
                if (e.length < this.pattern.length)
                    return null;
                let t = e.slice(0, this.pattern.length)
                    , n = t == this.pattern ? 0 : t.toLowerCase() == this.folded ? -200 : null;
                return null == n ? null : (this.matched = [0, t.length],
                    this.score = n + (e.length == this.pattern.length ? 0 : -100),
                    this)
            }
        }
        const b = i.sj.define({
            combine: e => (0,
                i.QR)(e, {
                    activateOnTyping: !0,
                    activateOnCompletion: () => !1,
                    activateOnTypingDelay: 100,
                    selectOnOpen: !0,
                    override: null,
                    closeOnBlur: !0,
                    maxRenderedOptions: 100,
                    defaultKeymap: !0,
                    tooltipClass: () => "",
                    optionClass: () => "",
                    aboveCursor: !1,
                    icons: !0,
                    addToOptions: [],
                    positionInfo: S,
                    filterStrict: !1,
                    compareCompletions: (e, t) => e.label.localeCompare(t.label),
                    interactionDelay: 75,
                    updateSyncTime: 100
                }, {
                    defaultKeymap: (e, t) => e && t,
                    closeOnBlur: (e, t) => e && t,
                    icons: (e, t) => e && t,
                    tooltipClass: (e, t) => n => y(e(n), t(n)),
                    optionClass: (e, t) => n => y(e(n), t(n)),
                    addToOptions: (e, t) => e.concat(t),
                    filterStrict: (e, t) => e || t
                })
        });
        function y(e, t) {
            return e ? t ? e + " " + t : e : t
        }
        function S(e, t, n, i, a, o) {
            let O, s, l = e.textDirection == r.OP.RTL, c = l, u = !1, d = "top", h = t.left - a.left, f = a.right - t.right, p = i.right - i.left, m = i.bottom - i.top;
            if (c && h < Math.min(p, f) ? c = !1 : !c && f < Math.min(p, h) && (c = !0),
                p <= (c ? h : f))
                O = Math.max(a.top, Math.min(n.top, a.bottom - m)) - t.top,
                    s = Math.min(400, c ? h : f);
            else {
                u = !0,
                    s = Math.min(400, (l ? t.right : a.right - t.left) - 30);
                let e = a.bottom - t.bottom;
                e >= m || e > t.top ? O = n.bottom - t.top : (d = "bottom",
                    O = t.bottom - n.top)
            }
            return {
                style: `${d}: ${O / ((t.bottom - t.top) / o.offsetHeight)}px; max-width: ${s / ((t.right - t.left) / o.offsetWidth)}px`,
                class: "cm-completionInfo-" + (u ? l ? "left-narrow" : "right-narrow" : c ? "left" : "right")
            }
        }
        function P(e, t, n) {
            if (e <= n)
                return {
                    from: 0,
                    to: e
                };
            if (t < 0 && (t = 0),
                t <= e >> 1) {
                let e = Math.floor(t / n);
                return {
                    from: e * n,
                    to: (e + 1) * n
                }
            }
            let i = Math.floor((e - t) / n);
            return {
                from: e - (i + 1) * n,
                to: e - i * n
            }
        }
        class v {
            constructor(e, t, n) {
                this.view = e,
                    this.stateField = t,
                    this.applyCompletion = n,
                    this.info = null,
                    this.infoDestroy = null,
                    this.placeInfoReq = {
                        read: () => this.measureInfo(),
                        write: e => this.placeInfo(e),
                        key: this
                    },
                    this.space = null,
                    this.currentClass = "";
                let i = e.state.field(t)
                    , { options: r, selected: a } = i.open
                    , o = e.state.facet(b);
                this.optionContent = function (e) {
                    let t = e.addToOptions.slice();
                    return e.icons && t.push({
                        render(e) {
                            let t = document.createElement("div");
                            return t.classList.add("cm-completionIcon"),
                                e.type && t.classList.add(...e.type.split(/\s+/g).map((e => "cm-completionIcon-" + e))),
                                t.setAttribute("aria-hidden", "true"),
                                t
                        },
                        position: 20
                    }),
                        t.push({
                            render(e, t, n, i) {
                                let r = document.createElement("span");
                                r.className = "cm-completionLabel";
                                let a = e.displayLabel || e.label
                                    , o = 0;
                                for (let O = 0; O < i.length;) {
                                    let e = i[O++]
                                        , t = i[O++];
                                    e > o && r.appendChild(document.createTextNode(a.slice(o, e)));
                                    let n = r.appendChild(document.createElement("span"));
                                    n.appendChild(document.createTextNode(a.slice(e, t))),
                                        n.className = "cm-completionMatchedText",
                                        o = t
                                }
                                return o < a.length && r.appendChild(document.createTextNode(a.slice(o))),
                                    r
                            },
                            position: 50
                        }, {
                            render(e) {
                                if (!e.detail)
                                    return null;
                                let t = document.createElement("span");
                                return t.className = "cm-completionDetail",
                                    t.textContent = e.detail,
                                    t
                            },
                            position: 80
                        }),
                        t.sort(((e, t) => e.position - t.position)).map((e => e.render))
                }(o),
                    this.optionClass = o.optionClass,
                    this.tooltipClass = o.tooltipClass,
                    this.range = P(r.length, a, o.maxRenderedOptions),
                    this.dom = document.createElement("div"),
                    this.dom.className = "cm-tooltip-autocomplete",
                    this.updateTooltipClass(e.state),
                    this.dom.addEventListener("mousedown", (n => {
                        let { options: i } = e.state.field(t).open;
                        for (let t, r = n.target; r && r != this.dom; r = r.parentNode)
                            if ("LI" == r.nodeName && (t = /-(\d+)$/.exec(r.id)) && +t[1] < i.length)
                                return this.applyCompletion(e, i[+t[1]]),
                                    void n.preventDefault()
                    }
                    )),
                    this.dom.addEventListener("focusout", (t => {
                        let n = e.state.field(this.stateField, !1);
                        n && n.tooltip && e.state.facet(b).closeOnBlur && t.relatedTarget != e.contentDOM && e.dispatch({
                            effects: g.of(null)
                        })
                    }
                    )),
                    this.showOptions(r, i.id)
            }
            mount() {
                this.updateSel()
            }
            showOptions(e, t) {
                this.list && this.list.remove(),
                    this.list = this.dom.appendChild(this.createListBox(e, t, this.range)),
                    this.list.addEventListener("scroll", (() => {
                        this.info && this.view.requestMeasure(this.placeInfoReq)
                    }
                    ))
            }
            update(e) {
                var t;
                let n = e.state.field(this.stateField)
                    , i = e.startState.field(this.stateField);
                if (this.updateTooltipClass(e.state),
                    n != i) {
                    let { options: r, selected: a, disabled: o } = n.open;
                    i.open && i.open.options == r || (this.range = P(r.length, a, e.state.facet(b).maxRenderedOptions),
                        this.showOptions(r, n.id)),
                        this.updateSel(),
                        o != (null === (t = i.open) || void 0 === t ? void 0 : t.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!o)
                }
            }
            updateTooltipClass(e) {
                let t = this.tooltipClass(e);
                if (t != this.currentClass) {
                    for (let e of this.currentClass.split(" "))
                        e && this.dom.classList.remove(e);
                    for (let e of t.split(" "))
                        e && this.dom.classList.add(e);
                    this.currentClass = t
                }
            }
            positioned(e) {
                this.space = e,
                    this.info && this.view.requestMeasure(this.placeInfoReq)
            }
            updateSel() {
                let e = this.view.state.field(this.stateField)
                    , t = e.open;
                if ((t.selected > -1 && t.selected < this.range.from || t.selected >= this.range.to) && (this.range = P(t.options.length, t.selected, this.view.state.facet(b).maxRenderedOptions),
                    this.showOptions(t.options, e.id)),
                    this.updateSelectedOption(t.selected)) {
                    this.destroyInfo();
                    let { completion: n } = t.options[t.selected]
                        , { info: i } = n;
                    if (!i)
                        return;
                    let a = "string" === typeof i ? document.createTextNode(i) : i(n);
                    if (!a)
                        return;
                    "then" in a ? a.then((t => {
                        t && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(t, n)
                    }
                    )).catch((e => (0,
                        r.c_)(this.view.state, e, "completion info"))) : this.addInfoPane(a, n)
                }
            }
            addInfoPane(e, t) {
                this.destroyInfo();
                let n = this.info = document.createElement("div");
                if (n.className = "cm-tooltip cm-completionInfo",
                    null != e.nodeType)
                    n.appendChild(e),
                        this.infoDestroy = null;
                else {
                    let { dom: t, destroy: i } = e;
                    n.appendChild(t),
                        this.infoDestroy = i || null
                }
                this.dom.appendChild(n),
                    this.view.requestMeasure(this.placeInfoReq)
            }
            updateSelectedOption(e) {
                let t = null;
                for (let n = this.list.firstChild, i = this.range.from; n; n = n.nextSibling,
                    i++)
                    "LI" == n.nodeName && n.id ? i == e ? n.hasAttribute("aria-selected") || (n.setAttribute("aria-selected", "true"),
                        t = n) : n.hasAttribute("aria-selected") && n.removeAttribute("aria-selected") : i--;
                return t && function (e, t) {
                    let n = e.getBoundingClientRect()
                        , i = t.getBoundingClientRect()
                        , r = n.height / e.offsetHeight;
                    i.top < n.top ? e.scrollTop -= (n.top - i.top) / r : i.bottom > n.bottom && (e.scrollTop += (i.bottom - n.bottom) / r)
                }(this.list, t),
                    t
            }
            measureInfo() {
                let e = this.dom.querySelector("[aria-selected]");
                if (!e || !this.info)
                    return null;
                let t = this.dom.getBoundingClientRect()
                    , n = this.info.getBoundingClientRect()
                    , i = e.getBoundingClientRect()
                    , r = this.space;
                if (!r) {
                    let e = this.dom.ownerDocument.defaultView || window;
                    r = {
                        left: 0,
                        top: 0,
                        right: e.innerWidth,
                        bottom: e.innerHeight
                    }
                }
                return i.top > Math.min(r.bottom, t.bottom) - 10 || i.bottom < Math.max(r.top, t.top) + 10 ? null : this.view.state.facet(b).positionInfo(this.view, t, i, n, r, this.dom)
            }
            placeInfo(e) {
                this.info && (e ? (e.style && (this.info.style.cssText = e.style),
                    this.info.className = "cm-tooltip cm-completionInfo " + (e.class || "")) : this.info.style.cssText = "top: -1e6px")
            }
            createListBox(e, t, n) {
                const i = document.createElement("ul");
                i.id = t,
                    i.setAttribute("role", "listbox"),
                    i.setAttribute("aria-expanded", "true"),
                    i.setAttribute("aria-label", this.view.state.phrase("Completions"));
                let r = null;
                for (let a = n.from; a < n.to; a++) {
                    let { completion: o, match: O } = e[a]
                        , { section: s } = o;
                    if (s) {
                        let e = "string" == typeof s ? s : s.name;
                        if (e != r && (a > n.from || 0 == n.from))
                            if (r = e,
                                "string" != typeof s && s.header)
                                i.appendChild(s.header(s));
                            else {
                                i.appendChild(document.createElement("completion-section")).textContent = e
                            }
                    }
                    const l = i.appendChild(document.createElement("li"));
                    l.id = t + "-" + a,
                        l.setAttribute("role", "option");
                    let c = this.optionClass(o);
                    c && (l.className = c);
                    for (let e of this.optionContent) {
                        let t = e(o, this.view.state, this.view, O);
                        t && l.appendChild(t)
                    }
                }
                return n.from && i.classList.add("cm-completionListIncompleteTop"),
                    n.to < e.length && i.classList.add("cm-completionListIncompleteBottom"),
                    i
            }
            destroyInfo() {
                this.info && (this.infoDestroy && this.infoDestroy(),
                    this.info.remove(),
                    this.info = null)
            }
            destroy() {
                this.destroyInfo()
            }
        }
        function x(e, t) {
            return n => new v(n, e, t)
        }
        function k(e) {
            return 100 * (e.boost || 0) + (e.apply ? 10 : 0) + (e.info ? 5 : 0) + (e.type ? 1 : 0)
        }
        class w {
            constructor(e, t, n, i, r, a) {
                this.options = e,
                    this.attrs = t,
                    this.tooltip = n,
                    this.timestamp = i,
                    this.selected = r,
                    this.disabled = a
            }
            setSelected(e, t) {
                return e == this.selected || e >= this.options.length ? this : new w(this.options, z(t, e), this.tooltip, this.timestamp, e, this.disabled)
            }
            static build(e, t, n, i, r) {
                let a = function (e, t) {
                    let n = []
                        , i = null
                        , r = e => {
                            n.push(e);
                            let { section: t } = e.completion;
                            if (t) {
                                i || (i = []);
                                let e = "string" == typeof t ? t : t.name;
                                i.some((t => t.name == e)) || i.push("string" == typeof t ? {
                                    name: e
                                } : t)
                            }
                        }
                        , a = t.facet(b);
                    for (let l of e)
                        if (l.hasResult()) {
                            let e = l.result.getMatch;
                            if (!1 === l.result.filter)
                                for (let t of l.result.options)
                                    r(new c(t, l.source, e ? e(t) : [], 1e9 - n.length));
                            else {
                                let n, i = t.sliceDoc(l.from, l.to), o = a.filterStrict ? new $(i) : new Q(i);
                                for (let t of l.result.options)
                                    if (n = o.match(t.label)) {
                                        let i = t.displayLabel ? e ? e(t, n.matched) : [] : n.matched;
                                        r(new c(t, l.source, i, n.score + (t.boost || 0)))
                                    }
                            }
                        }
                    if (i) {
                        let e = Object.create(null)
                            , t = 0
                            , r = (e, t) => {
                                var n, i;
                                return (null !== (n = e.rank) && void 0 !== n ? n : 1e9) - (null !== (i = t.rank) && void 0 !== i ? i : 1e9) || (e.name < t.name ? -1 : 1)
                            }
                            ;
                        for (let n of i.sort(r))
                            t -= 1e5,
                                e[n.name] = t;
                        for (let i of n) {
                            let { section: t } = i.completion;
                            t && (i.score += e["string" == typeof t ? t : t.name])
                        }
                    }
                    let o = []
                        , O = null
                        , s = a.compareCompletions;
                    for (let l of n.sort(((e, t) => t.score - e.score || s(e.completion, t.completion)))) {
                        let e = l.completion;
                        !O || O.label != e.label || O.detail != e.detail || null != O.type && null != e.type && O.type != e.type || O.apply != e.apply || O.boost != e.boost ? o.push(l) : k(l.completion) > k(O) && (o[o.length - 1] = l),
                            O = l.completion
                    }
                    return o
                }(e, t);
                if (!a.length)
                    return i && e.some((e => 1 == e.state)) ? new w(i.options, i.attrs, i.tooltip, i.timestamp, i.selected, !0) : null;
                let o = t.facet(b).selectOnOpen ? 0 : -1;
                if (i && i.selected != o && -1 != i.selected) {
                    let e = i.options[i.selected].completion;
                    for (let t = 0; t < a.length; t++)
                        if (a[t].completion == e) {
                            o = t;
                            break
                        }
                }
                return new w(a, z(n, o), {
                    pos: e.reduce(((e, t) => t.hasResult() ? Math.min(e, t.from) : e), 1e8),
                    create: E,
                    above: r.aboveCursor
                }, i ? i.timestamp : Date.now(), o, !1)
            }
            map(e) {
                return new w(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
                    pos: e.mapPos(this.tooltip.pos)
                }), this.timestamp, this.selected, this.disabled)
            }
        }
        class X {
            constructor(e, t, n) {
                this.active = e,
                    this.id = t,
                    this.open = n
            }
            static start() {
                return new X(R, "cm-ac-" + Math.floor(2e6 * Math.random()).toString(36), null)
            }
            update(e) {
                let { state: t } = e
                    , n = t.facet(b)
                    , i = (n.override || t.languageDataAt("autocomplete", u(t)).map(p)).map((t => (this.active.find((e => e.source == t)) || new Z(t, this.active.some((e => 0 != e.state)) ? 1 : 0)).update(e, n)));
                i.length == this.active.length && i.every(((e, t) => e == this.active[t])) && (i = this.active);
                let r = this.open;
                r && e.docChanged && (r = r.map(e.changes)),
                    e.selection || i.some((t => t.hasResult() && e.changes.touchesRange(t.from, t.to))) || !function (e, t) {
                        if (e == t)
                            return !0;
                        for (let n = 0, i = 0; ;) {
                            for (; n < e.length && !e[n].hasResult;)
                                n++;
                            for (; i < t.length && !t[i].hasResult;)
                                i++;
                            let r = n == e.length
                                , a = i == t.length;
                            if (r || a)
                                return r == a;
                            if (e[n++].result != t[i++].result)
                                return !1
                        }
                    }(i, this.active) ? r = w.build(i, t, this.id, r, n) : r && r.disabled && !i.some((e => 1 == e.state)) && (r = null),
                    !r && i.every((e => 1 != e.state)) && i.some((e => e.hasResult())) && (i = i.map((e => e.hasResult() ? new Z(e.source, 0) : e)));
                for (let a of e.effects)
                    a.is(Y) && (r = r && r.setSelected(a.value, this.id));
                return i == this.active && r == this.open ? this : new X(i, this.id, r)
            }
            get tooltip() {
                return this.open ? this.open.tooltip : null
            }
            get attrs() {
                return this.open ? this.open.attrs : this.active.length ? _ : T
            }
        }
        const _ = {
            "aria-autocomplete": "list"
        }
            , T = {};
        function z(e, t) {
            let n = {
                "aria-autocomplete": "list",
                "aria-haspopup": "listbox",
                "aria-controls": e
            };
            return t > -1 && (n["aria-activedescendant"] = e + "-" + t),
                n
        }
        const R = [];
        function W(e, t) {
            if (e.isUserEvent("input.complete")) {
                let n = e.annotation(h);
                if (n && t.activateOnCompletion(n))
                    return 12
            }
            let n = e.isUserEvent("input.type");
            return n && t.activateOnTyping ? 5 : n ? 1 : e.isUserEvent("delete.backward") ? 2 : e.selection ? 8 : e.docChanged ? 16 : 0
        }
        class Z {
            constructor(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1;
                this.source = e,
                    this.state = t,
                    this.explicitPos = n
            }
            hasResult() {
                return !1
            }
            update(e, t) {
                let n = W(e, t)
                    , i = this;
                (8 & n || 16 & n && this.touches(e)) && (i = new Z(i.source, 0)),
                    4 & n && 0 == i.state && (i = new Z(this.source, 1)),
                    i = i.updateFor(e, n);
                for (let r of e.effects)
                    if (r.is(m))
                        i = new Z(i.source, 1, r.value ? u(e.state) : -1);
                    else if (r.is(g))
                        i = new Z(i.source, 0);
                    else if (r.is(U))
                        for (let e of r.value)
                            e.source == i.source && (i = e);
                return i
            }
            updateFor(e, t) {
                return this.map(e.changes)
            }
            map(e) {
                return e.empty || this.explicitPos < 0 ? this : new Z(this.source, this.state, e.mapPos(this.explicitPos))
            }
            touches(e) {
                return e.changes.touchesRange(u(e.state))
            }
        }
        class q extends Z {
            constructor(e, t, n, i, r) {
                super(e, 2, t),
                    this.result = n,
                    this.from = i,
                    this.to = r
            }
            hasResult() {
                return !0
            }
            updateFor(e, t) {
                var n;
                if (!(3 & t))
                    return this.map(e.changes);
                let i = this.result;
                i.map && !e.changes.empty && (i = i.map(i, e.changes));
                let r = e.changes.mapPos(this.from)
                    , a = e.changes.mapPos(this.to, 1)
                    , O = u(e.state);
                if ((this.explicitPos < 0 ? O <= r : O < this.from) || O > a || !i || 2 & t && u(e.startState) == this.from)
                    return new Z(this.source, 4 & t ? 1 : 0);
                let s = this.explicitPos < 0 ? -1 : e.changes.mapPos(this.explicitPos);
                return function (e, t, n, i) {
                    if (!e)
                        return !1;
                    let r = t.sliceDoc(n, i);
                    return "function" == typeof e ? e(r, n, i, t) : d(e, !0).test(r)
                }(i.validFor, e.state, r, a) ? new q(this.source, s, i, r, a) : i.update && (i = i.update(i, r, a, new o(e.state, O, s >= 0))) ? new q(this.source, s, i, i.from, null !== (n = i.to) && void 0 !== n ? n : u(e.state)) : new Z(this.source, 1, s)
            }
            map(e) {
                if (e.empty)
                    return this;
                return (this.result.map ? this.result.map(this.result, e) : this.result) ? new q(this.source, this.explicitPos < 0 ? -1 : e.mapPos(this.explicitPos), this.result, e.mapPos(this.from), e.mapPos(this.to, 1)) : new Z(this.source, 0)
            }
            touches(e) {
                return e.changes.touchesRange(this.from, this.to)
            }
        }
        const U = i.Pe.define({
            map: (e, t) => e.map((e => e.map(t)))
        })
            , Y = i.Pe.define()
            , A = i.sU.define({
                create: () => X.start(),
                update: (e, t) => e.update(t),
                provide: e => [r.DK.from(e, (e => e.tooltip)), r.Lz.contentAttributes.from(e, (e => e.attrs))]
            });
        function V(e, t) {
            const n = t.completion.apply || t.completion.label;
            let r = e.state.field(A).active.find((e => e.source == t.source));
            return r instanceof q && ("string" == typeof n ? e.dispatch(Object.assign(Object.assign({}, function (e, t, n, r) {
                let { main: a } = e.selection
                    , o = n - a.from
                    , O = r - a.from;
                return Object.assign(Object.assign({}, e.changeByRange((s => s != a && n != r && e.sliceDoc(s.from + o, s.from + O) != e.sliceDoc(n, r) ? {
                    range: s
                } : {
                    changes: {
                        from: s.from + o,
                        to: r == a.from ? s.to : s.from + O,
                        insert: t
                    },
                    range: i.OF.cursor(s.from + o + t.length)
                }))), {
                    scrollIntoView: !0,
                    userEvent: "input.complete"
                })
            }(e.state, n, r.from, r.to)), {
                annotations: h.of(t.completion)
            })) : n(e, t.completion, r.from, r.to),
                !0)
        }
        const E = x(A, V);
        function j(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "option";
            return n => {
                let i = n.state.field(A, !1);
                if (!i || !i.open || i.open.disabled || Date.now() - i.open.timestamp < n.state.facet(b).interactionDelay)
                    return !1;
                let a, o = 1;
                "page" == t && (a = (0,
                    r.Eg)(n, i.open.tooltip)) && (o = Math.max(2, Math.floor(a.dom.offsetHeight / a.dom.querySelector("li").offsetHeight) - 1));
                let { length: O } = i.open.options
                    , s = i.open.selected > -1 ? i.open.selected + o * (e ? 1 : -1) : e ? 0 : O - 1;
                return s < 0 ? s = "page" == t ? 0 : O - 1 : s >= O && (s = "page" == t ? O - 1 : 0),
                    n.dispatch({
                        effects: Y.of(s)
                    }),
                    !0
            }
        }
        class C {
            constructor(e, t) {
                this.active = e,
                    this.context = t,
                    this.time = Date.now(),
                    this.updates = [],
                    this.done = void 0
            }
        }
        const G = r.Z9.fromClass(class {
            constructor(e) {
                this.view = e,
                    this.debounceUpdate = -1,
                    this.running = [],
                    this.debounceAccept = -1,
                    this.pendingStart = !1,
                    this.composing = 0;
                for (let t of e.state.field(A).active)
                    1 == t.state && this.startQuery(t)
            }
            update(e) {
                let t = e.state.field(A)
                    , n = e.state.facet(b);
                if (!e.selectionSet && !e.docChanged && e.startState.field(A) == t)
                    return;
                let i = e.transactions.some((e => {
                    let t = W(e, n);
                    return 8 & t || (e.selection || e.docChanged) && !(3 & t)
                }
                ));
                for (let O = 0; O < this.running.length; O++) {
                    let t = this.running[O];
                    if (i || t.context.abortOnDocChange && e.docChanged || t.updates.length + e.transactions.length > 50 && Date.now() - t.time > 1e3) {
                        for (let e of t.context.abortListeners)
                            try {
                                e()
                            } catch (o) {
                                (0,
                                    r.c_)(this.view.state, o)
                            }
                        t.context.abortListeners = null,
                            this.running.splice(O--, 1)
                    } else
                        t.updates.push(...e.transactions)
                }
                this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate),
                    e.transactions.some((e => e.effects.some((e => e.is(m))))) && (this.pendingStart = !0);
                let a = this.pendingStart ? 50 : n.activateOnTypingDelay;
                if (this.debounceUpdate = t.active.some((e => 1 == e.state && !this.running.some((t => t.active.source == e.source)))) ? setTimeout((() => this.startUpdate()), a) : -1,
                    0 != this.composing)
                    for (let r of e.transactions)
                        r.isUserEvent("input.type") ? this.composing = 2 : 2 == this.composing && r.selection && (this.composing = 3)
            }
            startUpdate() {
                this.debounceUpdate = -1,
                    this.pendingStart = !1;
                let { state: e } = this.view
                    , t = e.field(A);
                for (let n of t.active)
                    1 != n.state || this.running.some((e => e.active.source == n.source)) || this.startQuery(n)
            }
            startQuery(e) {
                let { state: t } = this.view
                    , n = u(t)
                    , i = new o(t, n, e.explicitPos == n, this.view)
                    , a = new C(e, i);
                this.running.push(a),
                    Promise.resolve(e.source(i)).then((e => {
                        a.context.aborted || (a.done = e || null,
                            this.scheduleAccept())
                    }
                    ), (e => {
                        this.view.dispatch({
                            effects: g.of(null)
                        }),
                            (0,
                                r.c_)(this.view.state, e)
                    }
                    ))
            }
            scheduleAccept() {
                this.running.every((e => void 0 !== e.done)) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout((() => this.accept()), this.view.state.facet(b).updateSyncTime))
            }
            accept() {
                var e;
                this.debounceAccept > -1 && clearTimeout(this.debounceAccept),
                    this.debounceAccept = -1;
                let t = []
                    , n = this.view.state.facet(b);
                for (let i = 0; i < this.running.length; i++) {
                    let r = this.running[i];
                    if (void 0 === r.done)
                        continue;
                    if (this.running.splice(i--, 1),
                        r.done) {
                        let i = new q(r.active.source, r.active.explicitPos, r.done, r.done.from, null !== (e = r.done.to) && void 0 !== e ? e : u(r.updates.length ? r.updates[0].startState : this.view.state));
                        for (let e of r.updates)
                            i = i.update(e, n);
                        if (i.hasResult()) {
                            t.push(i);
                            continue
                        }
                    }
                    let a = this.view.state.field(A).active.find((e => e.source == r.active.source));
                    if (a && 1 == a.state)
                        if (null == r.done) {
                            let e = new Z(r.active.source, 0);
                            for (let t of r.updates)
                                e = e.update(t, n);
                            1 != e.state && t.push(e)
                        } else
                            this.startQuery(a)
                }
                t.length && this.view.dispatch({
                    effects: U.of(t)
                })
            }
        }
            , {
                eventHandlers: {
                    blur(e) {
                        let t = this.view.state.field(A, !1);
                        if (t && t.tooltip && this.view.state.facet(b).closeOnBlur) {
                            let n = t.open && (0,
                                r.Eg)(this.view, t.open.tooltip);
                            n && n.dom.contains(e.relatedTarget) || setTimeout((() => this.view.dispatch({
                                effects: g.of(null)
                            })), 10)
                        }
                    },
                    compositionstart() {
                        this.composing = 1
                    },
                    compositionend() {
                        3 == this.composing && setTimeout((() => this.view.dispatch({
                            effects: m.of(!1)
                        })), 20),
                            this.composing = 0
                    }
                }
            })
            , I = "object" == typeof navigator && /Win/.test(navigator.platform)
            , D = i.Nb.highest(r.Lz.domEventHandlers({
                keydown(e, t) {
                    let n = t.state.field(A, !1);
                    if (!n || !n.open || n.open.disabled || n.open.selected < 0 || e.key.length > 1 || e.ctrlKey && (!I || !e.altKey) || e.metaKey)
                        return !1;
                    let i = n.open.options[n.open.selected]
                        , r = n.active.find((e => e.source == i.source))
                        , a = i.completion.commitCharacters || r.result.commitCharacters;
                    return a && a.indexOf(e.key) > -1 && V(t, i),
                        !1
                }
            }))
            , N = r.Lz.baseTheme({
                ".cm-tooltip.cm-tooltip-autocomplete": {
                    "& > ul": {
                        fontFamily: "monospace",
                        whiteSpace: "nowrap",
                        overflow: "hidden auto",
                        maxWidth_fallback: "700px",
                        maxWidth: "min(700px, 95vw)",
                        minWidth: "250px",
                        maxHeight: "10em",
                        height: "100%",
                        listStyle: "none",
                        margin: 0,
                        padding: 0,
                        "& > li, & > completion-section": {
                            padding: "1px 3px",
                            lineHeight: 1.2
                        },
                        "& > li": {
                            overflowX: "hidden",
                            textOverflow: "ellipsis",
                            cursor: "pointer"
                        },
                        "& > completion-section": {
                            display: "list-item",
                            borderBottom: "1px solid silver",
                            paddingLeft: "0.5em",
                            opacity: .7
                        }
                    }
                },
                "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
                    background: "#17c",
                    color: "white"
                },
                "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
                    background: "#777"
                },
                "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
                    background: "#347",
                    color: "white"
                },
                "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
                    background: "#444"
                },
                ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
                    content: '"\xb7\xb7\xb7"',
                    opacity: .5,
                    display: "block",
                    textAlign: "center"
                },
                ".cm-tooltip.cm-completionInfo": {
                    position: "absolute",
                    padding: "3px 9px",
                    width: "max-content",
                    maxWidth: "400px",
                    boxSizing: "border-box",
                    whiteSpace: "pre-line"
                },
                ".cm-completionInfo.cm-completionInfo-left": {
                    right: "100%"
                },
                ".cm-completionInfo.cm-completionInfo-right": {
                    left: "100%"
                },
                ".cm-completionInfo.cm-completionInfo-left-narrow": {
                    right: "30px"
                },
                ".cm-completionInfo.cm-completionInfo-right-narrow": {
                    left: "30px"
                },
                "&light .cm-snippetField": {
                    backgroundColor: "#00000022"
                },
                "&dark .cm-snippetField": {
                    backgroundColor: "#ffffff22"
                },
                ".cm-snippetFieldPosition": {
                    verticalAlign: "text-top",
                    width: 0,
                    height: "1.15em",
                    display: "inline-block",
                    margin: "0 -0.7px -.7em",
                    borderLeft: "1.4px dotted #888"
                },
                ".cm-completionMatchedText": {
                    textDecoration: "underline"
                },
                ".cm-completionDetail": {
                    marginLeft: "0.5em",
                    fontStyle: "italic"
                },
                ".cm-completionIcon": {
                    fontSize: "90%",
                    width: ".8em",
                    display: "inline-block",
                    textAlign: "center",
                    paddingRight: ".6em",
                    opacity: "0.6",
                    boxSizing: "content-box"
                },
                ".cm-completionIcon-function, .cm-completionIcon-method": {
                    "&:after": {
                        content: "'\u0192'"
                    }
                },
                ".cm-completionIcon-class": {
                    "&:after": {
                        content: "'\u25cb'"
                    }
                },
                ".cm-completionIcon-interface": {
                    "&:after": {
                        content: "'\u25cc'"
                    }
                },
                ".cm-completionIcon-variable": {
                    "&:after": {
                        content: "'\ud835\udc65'"
                    }
                },
                ".cm-completionIcon-constant": {
                    "&:after": {
                        content: "'\ud835\udc36'"
                    }
                },
                ".cm-completionIcon-type": {
                    "&:after": {
                        content: "'\ud835\udc61'"
                    }
                },
                ".cm-completionIcon-enum": {
                    "&:after": {
                        content: "'\u222a'"
                    }
                },
                ".cm-completionIcon-property": {
                    "&:after": {
                        content: "'\u25a1'"
                    }
                },
                ".cm-completionIcon-keyword": {
                    "&:after": {
                        content: "'\ud83d\udd11\ufe0e'"
                    }
                },
                ".cm-completionIcon-namespace": {
                    "&:after": {
                        content: "'\u25a2'"
                    }
                },
                ".cm-completionIcon-text": {
                    "&:after": {
                        content: "'abc'",
                        fontSize: "50%",
                        verticalAlign: "middle"
                    }
                }
            });
        class L {
            constructor(e, t, n, i) {
                this.field = e,
                    this.line = t,
                    this.from = n,
                    this.to = i
            }
        }
        class M {
            constructor(e, t, n) {
                this.field = e,
                    this.from = t,
                    this.to = n
            }
            map(e) {
                let t = e.mapPos(this.from, -1, i.iR.TrackDel)
                    , n = e.mapPos(this.to, 1, i.iR.TrackDel);
                return null == t || null == n ? null : new M(this.field, t, n)
            }
        }
        class F {
            constructor(e, t) {
                this.lines = e,
                    this.fieldPositions = t
            }
            instantiate(e, t) {
                let n = []
                    , i = [t]
                    , r = e.doc.lineAt(t)
                    , o = /^\s*/.exec(r.text)[0];
                for (let s of this.lines) {
                    if (n.length) {
                        let n = o
                            , r = /^\t*/.exec(s)[0].length;
                        for (let t = 0; t < r; t++)
                            n += e.facet(a.Xt);
                        i.push(t + n.length - r),
                            s = n + s.slice(r)
                    }
                    n.push(s),
                        t += s.length + 1
                }
                let O = this.fieldPositions.map((e => new M(e.field, i[e.line] + e.from, i[e.line] + e.to)));
                return {
                    text: n,
                    ranges: O
                }
            }
            static parse(e) {
                let t, n = [], i = [], r = [];
                for (let a of e.split(/\r\n?|\n/)) {
                    for (; t = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(a);) {
                        let e = t[1] ? +t[1] : null
                            , o = t[2] || t[3] || ""
                            , O = -1
                            , s = o.replace(/\\[{}]/g, (e => e[1]));
                        for (let t = 0; t < n.length; t++)
                            (null != e ? n[t].seq == e : s && n[t].name == s) && (O = t);
                        if (O < 0) {
                            let t = 0;
                            for (; t < n.length && (null == e || null != n[t].seq && n[t].seq < e);)
                                t++;
                            n.splice(t, 0, {
                                seq: e,
                                name: s
                            }),
                                O = t;
                            for (let e of r)
                                e.field >= O && e.field++
                        }
                        r.push(new L(O, i.length, t.index, t.index + s.length)),
                            a = a.slice(0, t.index) + o + a.slice(t.index + t[0].length)
                    }
                    a = a.replace(/\\([{}])/g, ((e, t, n) => {
                        for (let a of r)
                            a.line == i.length && a.from > n && (a.from--,
                                a.to--);
                        return t
                    }
                    )),
                        i.push(a)
                }
                return new F(i, r)
            }
        }
        let B = r.NZ.widget({
            widget: new class extends r.xO {
                toDOM() {
                    let e = document.createElement("span");
                    return e.className = "cm-snippetFieldPosition",
                        e
                }
                ignoreEvent() {
                    return !1
                }
            }
        })
            , H = r.NZ.mark({
                class: "cm-snippetField"
            });
        class K {
            constructor(e, t) {
                this.ranges = e,
                    this.active = t,
                    this.deco = r.NZ.set(e.map((e => (e.from == e.to ? B : H).range(e.from, e.to))))
            }
            map(e) {
                let t = [];
                for (let n of this.ranges) {
                    let i = n.map(e);
                    if (!i)
                        return null;
                    t.push(i)
                }
                return new K(t, this.active)
            }
            selectionInsideField(e) {
                return e.ranges.every((e => this.ranges.some((t => t.field == this.active && t.from <= e.from && t.to >= e.to))))
            }
        }
        const J = i.Pe.define({
            map: (e, t) => e && e.map(t)
        })
            , ee = i.Pe.define()
            , te = i.sU.define({
                create: () => null,
                update(e, t) {
                    for (let n of t.effects) {
                        if (n.is(J))
                            return n.value;
                        if (n.is(ee) && e)
                            return new K(e.ranges, n.value)
                    }
                    return e && t.docChanged && (e = e.map(t.changes)),
                        e && t.selection && !e.selectionInsideField(t.selection) && (e = null),
                        e
                },
                provide: e => r.Lz.decorations.from(e, (e => e ? e.deco : r.NZ.none))
            });
        function ne(e, t) {
            return i.OF.create(e.filter((e => e.field == t)).map((e => i.OF.range(e.from, e.to))))
        }
        function ie(e) {
            let t = F.parse(e);
            return (e, n, r, a) => {
                let { text: o, ranges: O } = t.instantiate(e.state, r)
                    , s = {
                        changes: {
                            from: r,
                            to: a,
                            insert: i.EY.of(o)
                        },
                        scrollIntoView: !0,
                        annotations: n ? [h.of(n), i.ZX.userEvent.of("input.complete")] : void 0
                    };
                if (O.length && (s.selection = ne(O, 0)),
                    O.some((e => e.field > 0))) {
                    let t = new K(O, 0)
                        , n = s.effects = [J.of(t)];
                    void 0 === e.state.field(te, !1) && n.push(i.Pe.appendConfig.of([te, Oe, le, N]))
                }
                e.dispatch(e.state.update(s))
            }
        }
        function re(e) {
            return t => {
                let { state: n, dispatch: i } = t
                    , r = n.field(te, !1);
                if (!r || e < 0 && 0 == r.active)
                    return !1;
                let a = r.active + e
                    , o = e > 0 && !r.ranges.some((t => t.field == a + e));
                return i(n.update({
                    selection: ne(r.ranges, a),
                    effects: J.of(o ? null : new K(r.ranges, a)),
                    scrollIntoView: !0
                })),
                    !0
            }
        }
        const ae = [{
            key: "Tab",
            run: re(1),
            shift: re(-1)
        }, {
            key: "Escape",
            run: e => {
                let { state: t, dispatch: n } = e;
                return !!t.field(te, !1) && (n(t.update({
                    effects: J.of(null)
                })),
                    !0)
            }
        }]
            , oe = i.sj.define({
                combine: e => e.length ? e[0] : ae
            })
            , Oe = i.Nb.highest(r.w4.compute([oe], (e => e.facet(oe))));
        function se(e, t) {
            return Object.assign(Object.assign({}, t), {
                apply: ie(e)
            })
        }
        const le = r.Lz.domEventHandlers({
            mousedown(e, t) {
                let n, i = t.state.field(te, !1);
                if (!i || null == (n = t.posAtCoords({
                    x: e.clientX,
                    y: e.clientY
                })))
                    return !1;
                let r = i.ranges.find((e => e.from <= n && e.to >= n));
                return !(!r || r.field == i.active) && (t.dispatch({
                    selection: ne(i.ranges, r.field),
                    effects: J.of(i.ranges.some((e => e.field > r.field)) ? new K(i.ranges, r.field) : null),
                    scrollIntoView: !0
                }),
                    !0)
            }
        });
        const ce = {
            brackets: ["(", "[", "{", "'", '"'],
            before: ")]}:;>",
            stringPrefixes: []
        }
            , ue = i.Pe.define({
                map(e, t) {
                    let n = t.mapPos(e, -1, i.iR.TrackAfter);
                    return null == n ? void 0 : n
                }
            })
            , de = new class extends i.FB {
            }
            ;
        de.startSide = 1,
            de.endSide = -1;
        const he = i.sU.define({
            create: () => i.om.empty,
            update(e, t) {
                if (e = e.map(t.changes),
                    t.selection) {
                    let n = t.state.doc.lineAt(t.selection.main.head);
                    e = e.update({
                        filter: e => e >= n.from && e <= n.to
                    })
                }
                for (let n of t.effects)
                    n.is(ue) && (e = e.update({
                        add: [de.range(n.value, n.value + 1)]
                    }));
                return e
            }
        });
        function fe() {
            return [$e, he]
        }
        const pe = "()[]{}<>";
        function me(e) {
            for (let t = 0; t < pe.length; t += 2)
                if (pe.charCodeAt(t) == e)
                    return pe.charAt(t + 1);
            return (0,
                i.MK)(e < 128 ? e : e + 1)
        }
        function ge(e, t) {
            return e.languageDataAt("closeBrackets", t)[0] || ce
        }
        const Qe = "object" == typeof navigator && /Android\b/.test(navigator.userAgent)
            , $e = r.Lz.inputHandler.of(((e, t, n, r) => {
                if ((Qe ? e.composing : e.compositionStarted) || e.state.readOnly)
                    return !1;
                let a = e.state.selection.main;
                if (r.length > 2 || 2 == r.length && 1 == (0,
                    i.Fh)((0,
                        i.vS)(r, 0)) || t != a.from || n != a.to)
                    return !1;
                let o = function (e, t) {
                    let n = ge(e, e.selection.main.head)
                        , r = n.brackets || ce.brackets;
                    for (let a of r) {
                        let o = me((0,
                            i.vS)(a, 0));
                        if (t == a)
                            return o == a ? xe(e, a, r.indexOf(a + a + a) > -1, n) : Pe(e, a, o, n.before || ce.before);
                        if (t == o && ye(e, e.selection.main.from))
                            return ve(e, a, o)
                    }
                    return null
                }(e.state, r);
                return !!o && (e.dispatch(o),
                    !0)
            }
            ))
            , be = [{
                key: "Backspace",
                run: e => {
                    let { state: t, dispatch: n } = e;
                    if (t.readOnly)
                        return !1;
                    let r = ge(t, t.selection.main.head).brackets || ce.brackets
                        , a = null
                        , o = t.changeByRange((e => {
                            if (e.empty) {
                                let n = function (e, t) {
                                    let n = e.sliceString(t - 2, t);
                                    return (0,
                                        i.Fh)((0,
                                            i.vS)(n, 0)) == n.length ? n : n.slice(1)
                                }(t.doc, e.head);
                                for (let a of r)
                                    if (a == n && Se(t.doc, e.head) == me((0,
                                        i.vS)(a, 0)))
                                        return {
                                            changes: {
                                                from: e.head - a.length,
                                                to: e.head + a.length
                                            },
                                            range: i.OF.cursor(e.head - a.length)
                                        }
                            }
                            return {
                                range: a = e
                            }
                        }
                        ));
                    return a || n(t.update(o, {
                        scrollIntoView: !0,
                        userEvent: "delete.backward"
                    })),
                        !a
                }
            }];
        function ye(e, t) {
            let n = !1;
            return e.field(he).between(0, e.doc.length, (e => {
                e == t && (n = !0)
            }
            )),
                n
        }
        function Se(e, t) {
            let n = e.sliceString(t, t + 2);
            return n.slice(0, (0,
                i.Fh)((0,
                    i.vS)(n, 0)))
        }
        function Pe(e, t, n, r) {
            let a = null
                , o = e.changeByRange((o => {
                    if (!o.empty)
                        return {
                            changes: [{
                                insert: t,
                                from: o.from
                            }, {
                                insert: n,
                                from: o.to
                            }],
                            effects: ue.of(o.to + t.length),
                            range: i.OF.range(o.anchor + t.length, o.head + t.length)
                        };
                    let O = Se(e.doc, o.head);
                    return !O || /\s/.test(O) || r.indexOf(O) > -1 ? {
                        changes: {
                            insert: t + n,
                            from: o.head
                        },
                        effects: ue.of(o.head + t.length),
                        range: i.OF.cursor(o.head + t.length)
                    } : {
                        range: a = o
                    }
                }
                ));
            return a ? null : e.update(o, {
                scrollIntoView: !0,
                userEvent: "input.type"
            })
        }
        function ve(e, t, n) {
            let r = null
                , a = e.changeByRange((t => t.empty && Se(e.doc, t.head) == n ? {
                    changes: {
                        from: t.head,
                        to: t.head + n.length,
                        insert: n
                    },
                    range: i.OF.cursor(t.head + n.length)
                } : r = {
                    range: t
                }));
            return r ? null : e.update(a, {
                scrollIntoView: !0,
                userEvent: "input.type"
            })
        }
        function xe(e, t, n, r) {
            let o = r.stringPrefixes || ce.stringPrefixes
                , O = null
                , s = e.changeByRange((r => {
                    if (!r.empty)
                        return {
                            changes: [{
                                insert: t,
                                from: r.from
                            }, {
                                insert: t,
                                from: r.to
                            }],
                            effects: ue.of(r.to + t.length),
                            range: i.OF.range(r.anchor + t.length, r.head + t.length)
                        };
                    let s, l = r.head, c = Se(e.doc, l);
                    if (c == t) {
                        if (ke(e, l))
                            return {
                                changes: {
                                    insert: t + t,
                                    from: l
                                },
                                effects: ue.of(l + t.length),
                                range: i.OF.cursor(l + t.length)
                            };
                        if (ye(e, l)) {
                            let r = n && e.sliceDoc(l, l + 3 * t.length) == t + t + t ? t + t + t : t;
                            return {
                                changes: {
                                    from: l,
                                    to: l + r.length,
                                    insert: r
                                },
                                range: i.OF.cursor(l + r.length)
                            }
                        }
                    } else {
                        if (n && e.sliceDoc(l - 2 * t.length, l) == t + t && (s = we(e, l - 2 * t.length, o)) > -1 && ke(e, s))
                            return {
                                changes: {
                                    insert: t + t + t + t,
                                    from: l
                                },
                                effects: ue.of(l + t.length),
                                range: i.OF.cursor(l + t.length)
                            };
                        if (e.charCategorizer(l)(c) != i.Je.Word && we(e, l, o) > -1 && !function (e, t, n, i) {
                            let r = (0,
                                a.mv)(e).resolveInner(t, -1)
                                , o = i.reduce(((e, t) => Math.max(e, t.length)), 0);
                            for (let a = 0; a < 5; a++) {
                                let a = e.sliceDoc(r.from, Math.min(r.to, r.from + n.length + o))
                                    , O = a.indexOf(n);
                                if (!O || O > -1 && i.indexOf(a.slice(0, O)) > -1) {
                                    let t = r.firstChild;
                                    for (; t && t.from == r.from && t.to - t.from > n.length + O;) {
                                        if (e.sliceDoc(t.to - n.length, t.to) == n)
                                            return !1;
                                        t = t.firstChild
                                    }
                                    return !0
                                }
                                let s = r.to == t && r.parent;
                                if (!s)
                                    break;
                                r = s
                            }
                            return !1
                        }(e, l, t, o))
                            return {
                                changes: {
                                    insert: t + t,
                                    from: l
                                },
                                effects: ue.of(l + t.length),
                                range: i.OF.cursor(l + t.length)
                            }
                    }
                    return {
                        range: O = r
                    }
                }
                ));
            return O ? null : e.update(s, {
                scrollIntoView: !0,
                userEvent: "input.type"
            })
        }
        function ke(e, t) {
            let n = (0,
                a.mv)(e).resolveInner(t + 1);
            return n.parent && n.from == t
        }
        function we(e, t, n) {
            let r = e.charCategorizer(t);
            if (r(e.sliceDoc(t - 1, t)) != i.Je.Word)
                return t;
            for (let a of n) {
                let n = t - a.length;
                if (e.sliceDoc(n, t) == a && r(e.sliceDoc(n - 1, n)) != i.Je.Word)
                    return n
            }
            return -1
        }
        function Xe() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return [D, A, b.of(e), G, Te, N]
        }
        const _e = [{
            key: "Ctrl-Space",
            run: e => !!e.state.field(A, !1) && (e.dispatch({
                effects: m.of(!0)
            }),
                !0)
        }, {
            key: "Escape",
            run: e => {
                let t = e.state.field(A, !1);
                return !(!t || !t.active.some((e => 0 != e.state))) && (e.dispatch({
                    effects: g.of(null)
                }),
                    !0)
            }
        }, {
            key: "ArrowDown",
            run: j(!0)
        }, {
            key: "ArrowUp",
            run: j(!1)
        }, {
            key: "PageDown",
            run: j(!0, "page")
        }, {
            key: "PageUp",
            run: j(!1, "page")
        }, {
            key: "Enter",
            run: e => {
                let t = e.state.field(A, !1);
                return !(e.state.readOnly || !t || !t.open || t.open.selected < 0 || t.open.disabled || Date.now() - t.open.timestamp < e.state.facet(b).interactionDelay) && V(e, t.open.options[t.open.selected])
            }
        }]
            , Te = i.Nb.highest(r.w4.computeN([b], (e => e.facet(b).defaultKeymap ? [_e] : [])))
    }
    ,
    18227: (e, t, n) => {
        n.r(t),
            n.d(t, {
                cpp: () => p,
                cppLanguage: () => f
            });
        var i = n(5178)
            , r = n(14462);
        const a = new i.Lu((e => {
            if (76 == e.next || 85 == e.next ? e.advance() : 117 == e.next && (e.advance(),
                56 == e.next && e.advance()),
                82 != e.next)
                return;
            if (e.advance(),
                34 != e.next)
                return;
            e.advance();
            let t = "";
            for (; 40 != e.next;) {
                if (32 == e.next || e.next <= 13 || 41 == e.next)
                    return;
                t += String.fromCharCode(e.next),
                    e.advance()
            }
            for (e.advance(); ;) {
                if (e.next < 0)
                    return e.acceptToken(1);
                if (41 == e.next) {
                    let n = !0;
                    for (let i = 0; n && i < t.length; i++)
                        e.peek(i + 1) != t.charCodeAt(i) && (n = !1);
                    if (n && 34 == e.peek(t.length + 1))
                        return e.acceptToken(1, 2 + t.length)
                }
                e.advance()
            }
        }
        ))
            , o = new i.Lu((e => {
                if (62 == e.next)
                    62 == e.peek(1) && e.acceptToken(2, 1);
                else {
                    let t = !1
                        , n = 0;
                    for (; ; n++) {
                        if (e.next >= 65 && e.next <= 90)
                            t = !0;
                        else {
                            if (e.next >= 97 && e.next <= 122)
                                return;
                            if (95 != e.next && !(e.next >= 48 && e.next <= 57))
                                break
                        }
                        e.advance()
                    }
                    t && n > 1 && e.acceptToken(3)
                }
            }
            ), {
                extend: !0
            })
            , O = (0,
                r.pn)({
                    "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using requires concept import export module __attribute__ __declspec __based": r._A.definitionKeyword,
                    "extern MsCallModifier MsPointerModifier extern static register thread_local inline const volatile restrict _Atomic mutable constexpr constinit consteval virtual explicit VirtualSpecifier Access": r._A.modifier,
                    "if else switch for while do case default return break continue goto throw try catch": r._A.controlKeyword,
                    "co_return co_yield co_await": r._A.controlKeyword,
                    "new sizeof delete static_assert": r._A.operatorKeyword,
                    "NULL nullptr": r._A.null,
                    this: r._A.self,
                    "True False": r._A.bool,
                    "TypeSize PrimitiveType": r._A.standard(r._A.typeName),
                    TypeIdentifier: r._A.typeName,
                    FieldIdentifier: r._A.propertyName,
                    "CallExpression/FieldExpression/FieldIdentifier": r._A.function(r._A.propertyName),
                    "ModuleName/Identifier": r._A.namespace,
                    PartitionName: r._A.labelName,
                    StatementIdentifier: r._A.labelName,
                    "Identifier DestructorName": r._A.variableName,
                    "CallExpression/Identifier": r._A.function(r._A.variableName),
                    "CallExpression/ScopedIdentifier/Identifier": r._A.function(r._A.variableName),
                    "FunctionDeclarator/Identifier FunctionDeclarator/DestructorName": r._A.function(r._A.definition(r._A.variableName)),
                    NamespaceIdentifier: r._A.namespace,
                    OperatorName: r._A.operator,
                    ArithOp: r._A.arithmeticOperator,
                    LogicOp: r._A.logicOperator,
                    BitOp: r._A.bitwiseOperator,
                    CompareOp: r._A.compareOperator,
                    AssignOp: r._A.definitionOperator,
                    UpdateOp: r._A.updateOperator,
                    LineComment: r._A.lineComment,
                    BlockComment: r._A.blockComment,
                    Number: r._A.number,
                    String: r._A.string,
                    "RawString SystemLibString": r._A.special(r._A.string),
                    CharLiteral: r._A.character,
                    EscapeSequence: r._A.escape,
                    "UserDefinedLiteral/Identifier": r._A.literal,
                    PreProcArg: r._A.meta,
                    "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": r._A.processingInstruction,
                    MacroName: r._A.special(r._A.name),
                    "( )": r._A.paren,
                    "[ ]": r._A.squareBracket,
                    "{ }": r._A.brace,
                    "< >": r._A.angleBracket,
                    ". ->": r._A.derefOperator,
                    ", ;": r._A.separator
                })
            , s = {
                __proto__: null,
                bool: 34,
                char: 34,
                int: 34,
                float: 34,
                double: 34,
                void: 34,
                size_t: 34,
                ssize_t: 34,
                intptr_t: 34,
                uintptr_t: 34,
                charptr_t: 34,
                int8_t: 34,
                int16_t: 34,
                int32_t: 34,
                int64_t: 34,
                uint8_t: 34,
                uint16_t: 34,
                uint32_t: 34,
                uint64_t: 34,
                char8_t: 34,
                char16_t: 34,
                char32_t: 34,
                char64_t: 34,
                const: 68,
                volatile: 70,
                restrict: 72,
                _Atomic: 74,
                mutable: 76,
                constexpr: 78,
                constinit: 80,
                consteval: 82,
                struct: 86,
                __declspec: 90,
                final: 148,
                override: 148,
                public: 152,
                private: 152,
                protected: 152,
                virtual: 154,
                extern: 160,
                static: 162,
                register: 164,
                inline: 166,
                thread_local: 168,
                __attribute__: 172,
                __based: 178,
                __restrict: 180,
                __uptr: 180,
                __sptr: 180,
                _unaligned: 180,
                __unaligned: 180,
                noexcept: 194,
                requires: 198,
                TRUE: 784,
                true: 784,
                FALSE: 786,
                false: 786,
                typename: 218,
                class: 220,
                template: 234,
                throw: 248,
                __cdecl: 256,
                __clrcall: 256,
                __stdcall: 256,
                __fastcall: 256,
                __thiscall: 256,
                __vectorcall: 256,
                try: 260,
                catch: 264,
                export: 282,
                import: 286,
                case: 296,
                default: 298,
                if: 308,
                else: 314,
                switch: 318,
                do: 322,
                while: 324,
                for: 330,
                return: 334,
                break: 338,
                continue: 342,
                goto: 346,
                co_return: 350,
                co_yield: 354,
                using: 362,
                typedef: 366,
                namespace: 380,
                new: 398,
                delete: 400,
                co_await: 402,
                concept: 406,
                enum: 410,
                static_assert: 414,
                friend: 422,
                union: 424,
                explicit: 430,
                operator: 444,
                module: 456,
                signed: 518,
                unsigned: 518,
                long: 518,
                short: 518,
                decltype: 528,
                auto: 530,
                sizeof: 566,
                NULL: 572,
                nullptr: 586,
                this: 588
            }
            , l = {
                __proto__: null,
                "<": 131
            }
            , c = {
                __proto__: null,
                ">": 135
            }
            , u = {
                __proto__: null,
                operator: 388,
                new: 576,
                delete: 582
            }
            , d = i.U1.deserialize({
                version: 14,
                states: "$:|Q!QQVOOP'gOUOOO(XOWO'#CdO,RQUO'#CgO,]QUO'#FjO-sQbO'#CwO.UQUO'#CwO0TQUO'#KZO0[QUO'#CvO0gOpO'#DvO0oQ!dO'#D]OOQR'#JO'#JOO5XQVO'#GUO5fQUO'#JVOOQQ'#JV'#JVO8zQUO'#KmO<eQUO'#KmO>{QVO'#E^O?]QUO'#E^OOQQ'#Ed'#EdOOQQ'#Ee'#EeO?bQVO'#EfO@XQVO'#EiOBUQUO'#FPOBvQUO'#FhOOQR'#Fj'#FjOB{QUO'#FjOOQR'#LQ'#LQOOQR'#LP'#LPOETQVO'#KQOFxQUO'#LVOGVQUO'#KqOGkQUO'#LVOH]QUO'#LXOOQR'#HU'#HUOOQR'#HV'#HVOOQR'#HW'#HWOOQR'#K|'#K|OOQR'#J_'#J_Q!QQVOOOHkQVO'#FOOIWQUO'#EhOI_QUOOOKZQVO'#HgOKkQUO'#HgONVQUO'#KqONaQUO'#KqOOQQ'#Kq'#KqO!!_QUO'#KqOOQQ'#Jq'#JqO!!lQUO'#HxOOQQ'#KZ'#KZO!&^QUO'#KZO!&zQUO'#KQO!(zQVO'#I]O!(zQVO'#I`OCQQUO'#KQOOQQ'#Ip'#IpOOQQ'#KQ'#KQO!,}QUO'#KZOOQR'#KY'#KYO!-UQUO'#DYO!/mQUO'#KnOOQQ'#Kn'#KnO!/tQUO'#KnO!/{QUO'#ETO!0QQUO'#EWO!0VQUO'#FRO8zQUO'#FPO!QQVO'#F^O!0[Q#vO'#F`O!0gQUO'#FkO!0oQUO'#FpO!0tQVO'#FrO!0oQUO'#FuO!3sQUO'#FvO!3xQVO'#FxO!4SQUO'#FzO!4XQUO'#F|O!4^QUO'#GOO!4cQVO'#GQO!(zQVO'#GSO!4jQUO'#GpO!4xQUO'#GYO!(zQVO'#FeO!6VQUO'#FeO!6[QVO'#G`O!6cQUO'#GaO!6nQUO'#GnO!6sQUO'#GrO!6xQUO'#GzO!7jQ&lO'#HiO!:mQUO'#GuO!:}QUO'#HXO!;YQUO'#HZO!;bQUO'#DWO!;bQUO'#HuO!;bQUO'#HvO!;yQUO'#HwO!<[QUO'#H|O!=PQUO'#H}O!>uQVO'#IbO!(zQVO'#IdO!?PQUO'#IgO!?WQVO'#IjP!@}{,UO'#CbP!6n{,UO'#CbP!AY{7[O'#CbP!6n{,UO'#CbP!A_{,UO'#CbP!AjOSO'#IzPOOO)CEn)CEnOOOO'#I|'#I|O!AtOWO,59OOOQR,59O,59OO!(zQVO,59UOOQQ,59W,59WO!(zQVO,5;ROOQR,5<U,5<UO!BPQUO,59YO!(zQVO,5>qOOQR'#IX'#IXOOQR'#IY'#IYOOQR'#IZ'#IZOOQR'#I['#I[O!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!DOQVO,5>zOOQQ,5?W,5?WO!EqQVO'#ChO!IjQUO'#CyOOQQ,59c,59cOOQQ,59b,59bOOQQ,5<},5<}O!IwQ&lO,5=mO!?PQUO,5?RO!LkQVO,5?UO!LrQbO,59cO!L}QVO'#FYOOQQ,5?P,5?PO!M_QVO,59VO!MfO`O,5:bO!MkQbO'#D^O!M|QbO'#K^O!N[QbO,59wO!NdQbO'#CwO!NuQUO'#CwO!NzQUO'#KZO# UQUO'#CvOOQR-E<|-E<|O# aQUO,5AoO# hQVO'#EfO@XQVO'#EiOBUQUO,5;kOOQR,5<p,5<pO#$aQUO'#KQO#$hQUO'#KQO!(zQVO'#IUO8zQUO,5;kO#${Q&lO'#HiO#(SQUO'#CsO#*wQbO'#CwO#*|QUO'#CvO#.jQUO'#KZOOQQ-E=T-E=TO#0}QUO,5AXO#1XQUO'#KZO#1cQUO,5AXOOQR,5Ao,5AoOOQQ,5>l,5>lO#3gQUO'#CgO#4]QUO,5>pO#6OQUO'#IeOOQR'#I}'#I}O#6WQUO,5:xO#6tQUO,5:xO#7eQUO,5:xO#8YQUO'#CtO!0QQUO'#ClOOQQ'#JW'#JWO#6tQUO,5:xO#8bQUO,5;QO!4xQUO'#C}O#9kQUO,5;QO#9pQUO,5>QO#:|QUO'#C}O#;dQUO,5>{O#;iQUO'#KwO#<rQUO,5;TO#<zQVO,5;TO#=UQUO,5;TOOQQ,5;T,5;TO#>}QUO'#L[O#?UQUO,5>UO#?ZQbO'#CwO#?fQUO'#GcO#?kQUO'#E^O#@[QUO,5;kO#@sQUO'#K}O#@{QUO,5;rOKkQUO'#HfOBUQUO'#HgO#AQQUO'#KqO!6nQUO'#HjO#AxQUO'#CtO!0tQVO,5<SOOQQ'#Cg'#CgOOQR'#Jh'#JhO#A}QVO,5=`OOQQ,5?Z,5?ZO#DWQbO'#CwO#DcQUO'#GcOOQQ'#Ji'#JiOOQQ-E=g-E=gOGVQUO,5AqOGkQUO,5AqO#DhQUO,5AsO#DsQUO'#G|OOQR,5Aq,5AqO#DhQUO,5AqO#EOQUO'#HOO#EWQUO,5AsOOQR,5As,5AsOOQR,5At,5AtO#EfQVO,5AtOOQR-E=]-E=]O#G`QVO,5;jOOQR,5;j,5;jO#IaQUO'#EjO#JfQUO'#EwO#K]QVO'#ExO#MoQUO'#EvO#MwQUO'#EyO#NvQUO'#EzOOQQ'#Kz'#KzO$ mQUO,5;SO$!sQUO'#EvOOQQ,5;S,5;SO$#pQUO,5;SO$%cQUO,5:yO$'|QVO,5>PO$(WQUO'#E[O$(eQUO,5>ROOQQ,5>S,5>SO$,RQVO'#C{OOQQ-E=o-E=oOOQQ,5>d,5>dOOQQ,59`,59`O$,]QUO,5>wO$.]QUO,5>zO!6nQUO,59tO$.pQUO,5;qO$.}QUO,5<{O!0QQUO,5:oOOQQ,5:r,5:rO$/YQUO,5;mO$/_QUO'#KmOBUQUO,5;kOOQR,5;x,5;xO$0OQUO'#FbO$0^QUO'#FbO$0cQUO,5;zO$3|QVO'#FmO!0tQVO,5<VO!0oQUO,5<VO!0VQUO,5<[O$4TQVO'#GUO$7PQUO,5<^O!0tQVO,5<aO$:gQVO,5<bO$:tQUO,5<dOOQR,5<d,5<dO$;}QUO,5<dOOQR,5<f,5<fOOQR,5<h,5<hOOQQ'#Fi'#FiO$<SQUO,5<jO$<XQUO,5<lOOQR,5<l,5<lO$=_QUO,5<nO$>eQUO,5<rO$>pQUO,5=[O$>uQUO,5=[O!4xQUO,5<tO$>}QUO,5<tO$?cQUO,5<PO$@iQVO,5<PO$BzQUO,5<zOOQR,5<z,5<zOOQR,5<{,5<{O$>uQUO,5<{O$DQQUO,5<{O$D]QUO,5=YO!(zQVO,5=^O!(zQVO,5=fO#NeQUO,5=mOOQQ,5>T,5>TO$FbQUO,5>TO$FlQUO,5>TO$FqQUO,5>TO$FvQUO,5>TO!6nQUO,5>TO$HtQUO'#KZO$H{QUO,5=oO$IWQUO,5=aOKkQUO,5=oO$JQQUO,5=sOOQR,5=s,5=sO$JYQUO,5=sO$LeQVO'#H[OOQQ,5=u,5=uO!;]QUO,5=uO%#`QUO'#KjO%#gQUO'#K[O%#{QUO'#KjO%$VQUO'#DyO%$hQUO'#D|O%'eQUO'#K[OOQQ'#K['#K[O%)WQUO'#K[O%#gQUO'#K[O%)]QUO'#K[OOQQ,59r,59rOOQQ,5>a,5>aOOQQ,5>b,5>bO%)eQUO'#HzO%)mQUO,5>cOOQQ,5>c,5>cO%-XQUO,5>cO%-dQUO,5>hO%1OQVO,5>iO%1VQUO,5>|O# hQVO'#EfO%4]QUO,5>|OOQQ,5>|,5>|O%4|QUO,5?OO%7QQUO,5?RO!<[QUO,5?RO%8|QUO,5?UO%<iQVO,5?UP!A_{,UO,58|P%<p{,UO,58|P%=O{7[O,58|P%=U{,UO,58|PO{O'#Ju'#JuP%=Z{,UO'#LcPOOO'#Lc'#LcP%=a{,UO'#LcPOOO,58|,58|POOO,5?f,5?fP%=fOSO,5?fOOOO-E<z-E<zOOQR1G.j1G.jO%=mQUO1G.pO%>sQUO1G0mOOQQ1G0m1G0mO%@PQUO'#CoO%B`QbO'#CwO%BkQUO'#CrO%BpQUO'#CrO%BuQUO1G.tO#AxQUO'#CqOOQQ1G.t1G.tO%DxQUO1G4]O%FOQUO1G4^O%GqQUO1G4^O%IdQUO1G4^O%KVQUO1G4^O%LxQUO1G4^O%NkQUO1G4^O&!^QUO1G4^O&$PQUO1G4^O&%rQUO1G4^O&'eQUO1G4^O&)WQUO1G4^O&*yQUO'#KPO&,SQUO'#KPO&,[QUO,59SOOQQ,5=P,5=PO&.dQUO,5=PO&.nQUO,5=PO&.sQUO,5=PO&.xQUO,5=PO!6nQUO,5=PO#NeQUO1G3XO&/SQUO1G4mO!<[QUO1G4mO&1OQUO1G4pO&2qQVO1G4pOOQQ1G.}1G.}OOQQ1G.|1G.|OOQQ1G2i1G2iO!IwQ&lO1G3XO&2xQUO'#LOO@XQVO'#EiO&4RQUO'#F]OOQQ'#Ja'#JaO&4WQUO'#FZO&4cQUO'#LOO&4kQUO,5;tO&4pQUO1G.qOOQQ1G.q1G.qOOQR1G/|1G/|O&6cQ!dO'#JPO&6hQbO,59xO&8yQ!eO'#D`O&9QQ!dO'#JRO&9VQbO,5@xO&9VQbO,5@xOOQR1G/c1G/cO&9bQbO1G/cO&9gQ&lO'#GeO&:eQbO,59cOOQR1G7Z1G7ZO#@[QUO1G1VO&:pQUO1G1^OBUQUO1G1VO&=RQUO'#CyO#*wQbO,59cO&@tQUO1G6sOOQR-E<{-E<{O&BWQUO1G0dO#6WQUO1G0dOOQQ-E=U-E=UO#6tQUO1G0dOOQQ1G0l1G0lO&B{QUO,59iOOQQ1G3l1G3lO&CcQUO,59iO&CyQUO,59iO!M_QVO1G4gO!(zQVO'#JYO&DeQUO,5AcOOQQ1G0o1G0oO!(zQVO1G0oO!6nQUO'#JnO&DmQUO,5AvOOQQ1G3p1G3pOOQR1G1V1G1VO&HjQVO'#FOO!M_QVO,5;sOOQQ,5;s,5;sOBUQUO'#JcO&JfQUO,5AiO&JnQVO'#E[OOQR1G1^1G1^O&M]QUO'#L[OOQR1G1n1G1nOOQR-E=f-E=fOOQR1G7]1G7]O#DhQUO1G7]OGVQUO1G7]O#DhQUO1G7_OOQR1G7_1G7_O&MeQUO'#G}O&MmQUO'#LWOOQQ,5=h,5=hO&M{QUO,5=jO&NQQUO,5=kOOQR1G7`1G7`O#EfQVO1G7`O&NVQUO1G7`O' ]QVO,5=kOOQR1G1U1G1UO$.vQUO'#E]O'!RQUO'#E]OOQQ'#Ky'#KyO'!lQUO'#KxO'!wQUO,5;UO'#PQUO'#ElO'#dQUO'#ElO'#wQUO'#EtOOQQ'#J['#J[O'#|QUO,5;cO'$sQUO,5;cO'%nQUO,5;dO'&tQVO,5;dOOQQ,5;d,5;dO''OQVO,5;dO'&tQVO,5;dO''VQUO,5;bO'(SQUO,5;eO'(_QUO'#KpO'(gQUO,5:vO'(lQUO,5;fOOQQ1G0n1G0nOOQQ'#J]'#J]O''VQUO,5;bO!4xQUO'#E}OOQQ,5;b,5;bO')gQUO'#E`O'+aQUO'#E{OHrQUO1G0nO'+fQUO'#EbOOQQ'#JX'#JXO'-OQUO'#KrOOQQ'#Kr'#KrO'-xQUO1G0eO'.pQUO1G3kO'/vQVO1G3kOOQQ1G3k1G3kO'0QQVO1G3kO'0XQUO'#L_O'1eQUO'#KXO'1sQUO'#KWO'2OQUO,59gO'2WQUO1G/`O'2]QUO'#FPOOQR1G1]1G1]OOQR1G2g1G2gO$>uQUO1G2gO'2gQUO1G2gO'2rQUO1G0ZOOQR'#J`'#J`O'2wQVO1G1XO'8pQUO'#FTO'8uQUO1G1VO!6nQUO'#JdO'9TQUO,5;|O$0^QUO,5;|OOQQ'#Fc'#FcOOQQ,5;|,5;|O'9cQUO1G1fOOQR1G1f1G1fO'9kQUO,5<XO$.vQUO'#FWOBUQUO'#FWO'9rQUO,5<XO!(zQVO,5<XO'9zQUO,5<XO':PQVO1G1qO!0tQVO1G1qOOQR1G1v1G1vO'?oQUO1G1xOOQR1G1{1G1{O'?tQUO1G1|OBUQUO1G2]O'@}QVO1G1|O'CcQUO1G1|O'ChQUO'#GWO8zQUO1G2]OOQR1G2O1G2OOOQR1G2U1G2UOOQR1G2W1G2WOOQR1G2Y1G2YO'CmQUO1G2^O!4xQUO1G2^OOQR1G2v1G2vO'CuQUO1G2vO$>}QUO1G2`OOQQ'#Cu'#CuO'CzQUO'#G[O'DuQUO'#G[O'DzQUO'#LRO'EYQUO'#G_OOQQ'#LS'#LSO'EhQUO1G2`O'EmQVO1G1kO'HOQVO'#GUOBUQUO'#FWOOQR'#Je'#JeO'EmQVO1G1kO'HYQUO'#FvOOQR1G2f1G2fO'H_QUO1G2gO'HdQUO'#JgO'2gQUO1G2gO!(zQVO1G2tO'HlQUO1G2xO'IuQUO1G3QO'J{QUO1G3XOOQQ1G3o1G3oO'KaQUO1G3oOOQR1G3Z1G3ZO'KfQUO'#KZO'2]QUO'#LTOGkQUO'#LVOOQR'#Gy'#GyO#DhQUO'#LXOOQR'#HQ'#HQO'KpQUO'#GvO'#wQUO'#GuOOQR1G2{1G2{O'LmQUO1G2{O'MdQUO1G3ZO'MoQUO1G3_O'MtQUO1G3_OOQR1G3_1G3_O'M|QUO'#H]OOQR'#H]'#H]O( VQUO'#H]O!(zQVO'#H`O!(zQVO'#H_OOQR'#LZ'#LZO( [QUO'#LZOOQR'#Jk'#JkO( aQVO,5=vOOQQ,5=v,5=vO( hQUO'#H^O( pQUO'#HZOOQQ1G3a1G3aO( zQUO,5@vOOQQ,5@v,5@vO%)WQUO,5@vO%)]QUO,5@vO%$VQUO,5:eO(%iQUO'#KkO(%wQUO'#KkOOQQ,5:e,5:eOOQQ'#JS'#JSO(&SQUO'#D}O(&^QUO'#KqOGkQUO'#LVO('YQUO'#D}OOQQ'#Hp'#HpOOQQ'#Hr'#HrOOQQ'#Hs'#HsOOQQ'#Kl'#KlOOQQ'#JU'#JUO('dQUO,5:hOOQQ,5:h,5:hO((aQUO'#LVO((nQUO'#HtO()UQUO,5@vO()]QUO'#H{O()hQUO'#L^O()pQUO,5>fO()uQUO'#L]OOQQ1G3}1G3}O(-lQUO1G3}O(-sQUO1G3}O(-zQUO1G4TO(/QQUO1G4TO(/VQUO,5A|O!6nQUO1G4hO!(zQVO'#IiOOQQ1G4m1G4mO(/[QUO1G4mO(1_QVO1G4pPOOO1G.h1G.hP!A_{,UO1G.hP(3_QUO'#LeP(3j{,UO1G.hP(3o{7[O1G.hPO{O-E=s-E=sPOOO,5A},5A}P(3w{,UO,5A}POOO1G5Q1G5QO!(zQVO7+$[O(3|QUO'#CyOOQQ,59^,59^O(4XQbO,59cO(4dQbO,59^OOQQ,59],59]OOQQ7+)w7+)wO!M_QVO'#JtO(4oQUO,5@kOOQQ1G.n1G.nOOQQ1G2k1G2kO(4wQUO1G2kO(4|QUO7+(sOOQQ7+*X7+*XO(7bQUO7+*XO(7iQUO7+*XO(1_QVO7+*[O#NeQUO7+(sO(7vQVO'#JbO(8ZQUO,5AjO(8cQUO,5;vOOQQ'#Co'#CoOOQQ,5;w,5;wO!(zQVO'#F[OOQQ-E=_-E=_O!M_QVO,5;uOOQQ1G1`1G1`OOQQ,5?k,5?kOOQQ-E<}-E<}OOQR'#Dg'#DgOOQR'#Di'#DiOOQR'#Dl'#DlO(9lQ!eO'#K_O(9sQMkO'#K_O(9zQ!eO'#K_OOQR'#K_'#K_OOQR'#JQ'#JQO(:RQ!eO,59zOOQQ,59z,59zO(:YQbO,5?mOOQQ-E=P-E=PO(:hQbO1G6dOOQR7+$}7+$}OOQR7+&q7+&qOOQR7+&x7+&xO'8uQUO7+&qO(:sQUO7+&OO#6WQUO7+&OO(;hQUO1G/TO(<OQUO1G/TO(<jQUO7+*ROOQQ7+*V7+*VO(>]QUO,5?tOOQQ-E=W-E=WO(?fQUO7+&ZOOQQ,5@Y,5@YOOQQ-E=l-E=lO(?kQUO'#LOO@XQVO'#EiO(@wQUO1G1_OOQQ1G1_1G1_O(BQQUO,5?}OOQQ,5?},5?}OOQQ-E=a-E=aO(BfQUO'#KpOOQR7+,w7+,wO#DhQUO7+,wOOQR7+,y7+,yO(BsQUO,5=iO#DsQUO'#JjO(CUQUO,5ArOOQR1G3U1G3UOOQR1G3V1G3VO(CdQUO7+,zOOQR7+,z7+,zO(E[QUO,5:wO(FyQUO'#EwO!(zQVO,5;VO(GlQUO,5:wO(GvQUO'#EpO(HXQUO'#EzOOQQ,5;Z,5;ZO#K]QVO'#ExO(HoQUO,5:wO(HvQUO'#EyO#GgQUO'#JZO(J`QUO,5AdOOQQ1G0p1G0pO(JkQUO,5;WO!<[QUO,5;^O(KUQUO,5;_O(KdQUO,5;WO(MvQUO,5;`OOQQ-E=Y-E=YO(NOQUO1G0}OOQQ1G1O1G1OO(NyQUO1G1OO)!PQVO1G1OO)!WQVO1G1OO)!bQUO1G0|OOQQ1G0|1G0|OOQQ1G1P1G1PO)#_QUO'#JoO)#iQUO,5A[OOQQ1G0b1G0bOOQQ-E=Z-E=ZO)#qQUO,5;iO!<[QUO,5;iO)$nQVO,5:zO)$uQUO,5;gO$ mQUO7+&YOOQQ7+&Y7+&YO!(zQVO'#EfO)$|QUO,5:|OOQQ'#Ks'#KsOOQQ-E=V-E=VOOQQ,5A^,5A^OOQQ'#Jl'#JlO)(qQUO7+&PPOQQ7+&P7+&POOQQ7+)V7+)VO))iQUO7+)VO)*oQVO7+)VOOQQ,5>m,5>mO$)YQVO'#JsO)*vQUO,5@rOOQQ1G/R1G/ROOQQ7+$z7+$zO)+RQUO7+(RO)+WQUO7+(ROOQR7+(R7+(RO$>uQUO7+(ROOQQ7+%u7+%uOOQR-E=^-E=^O!0VQUO,5;oOOQQ,5@O,5@OOOQQ-E=b-E=bO$0^QUO1G1hOOQQ1G1h1G1hOOQR7+'Q7+'QOOQR1G1s1G1sOBUQUO,5;rO)+tQUO,5<YO)+{QUO1G1sO)-UQUO1G1sO!0tQVO7+']O)-ZQVO7+']O)2yQUO7+'dO)3OQVO7+'hO)5dQUO7+'wO)5nQUO7+'hO)6tQVO7+'hOKkQUO7+'wO$>hQUO,5<rO!4xQUO7+'xO)6{QUO7+'xOOQR7+(b7+(bO)7QQUO7+'zO)7VQUO,5<vO'CzQUO,5<vO)7}QUO,5<vO'CzQUO,5<vOOQQ,5<w,5<wO)8`QVO,5<xO'EYQUO'#JfO)8jQUO,5AmO)8rQUO,5<yOOQR7+'z7+'zO)8}QVO7+'VO)5gQUO'#K}OOQR-E=c-E=cO);`QVO,5<bOOQQ,5@R,5@RO!6nQUO,5@ROOQQ-E=e-E=eO)=wQUO7+(`O)>}QUO7+(dO)?SQVO7+(dOOQQ7+(l7+(lOOQQ7+)Z7+)ZO)?[QUO'#KjO)?fQUO'#KjOOQR,5=b,5=bO)?sQUO,5=bO!;bQUO,5=bO!;bQUO,5=bO!;bQUO,5=bOOQR7+(g7+(gOOQR7+(u7+(uOOQR7+(y7+(yOOQR,5=w,5=wO)?xQUO,5=zO)AOQUO,5=yOOQR,5Au,5AuOOQR-E=i-E=iOOQQ1G3b1G3bO)BUQUO,5=xO)BZQVO'#EfOOQQ1G6b1G6bO%)WQUO1G6bO%)]QUO1G6bOOQQ1G0P1G0POOQQ-E=Q-E=QO)DrQUO,5AVO(%iQUO'#JTO)D}QUO,5AVO)D}QUO,5AVO)EVQUO,5:iO8zQUO,5:iOOQQ,5>],5>]O)EaQUO,5AqO)EhQUO'#EVO)FrQUO'#EVO)G]QUO,5:iO)GgQUO'#HlO)GgQUO'#HmOOQQ'#Ko'#KoO)HUQUO'#KoO!(zQVO'#HnOOQQ,5:i,5:iO)HvQUO,5:iO!M_QVO,5:iOOQQ-E=S-E=SOOQQ1G0S1G0SOOQQ,5>`,5>`O)H{QUO1G6bO!(zQVO,5>gO)LjQUO'#JrO)LuQUO,5AxOOQQ1G4Q1G4QO)L}QUO,5AwOOQQ,5Aw,5AwOOQQ7+)i7+)iO*!lQUO7+)iOOQQ7+)o7+)oO*'kQVO1G7hO*)mQUO7+*SO*)rQUO,5?TO**xQUO7+*[POOO7+$S7+$SP*,kQUO'#LfP*,sQUO,5BPP*,x{,UO7+$SPOOO1G7i1G7iO*,}QUO<<GvOOQQ1G.x1G.xOOQQ'#IT'#ITO*.pQUO,5@`OOQQ,5@`,5@`OOQQ-E=r-E=rOOQQ7+(V7+(VOOQQ<<Ms<<MsO*/yQUO<<MsO*1|QUO<<MvO*3oQUO<<L_O*4TQUO,5?|OOQQ,5?|,5?|OOQQ-E=`-E=`OOQQ1G1b1G1bO*5^QUO,5;vO*6dQUO1G1aOOQQ1G1a1G1aOOQR,5@y,5@yO*7mQ!eO,5@yO*7tQMkO,5@yO*7{Q!eO,5@yOOQR-E=O-E=OOOQQ1G/f1G/fO*8SQ!eO'#DwOOQQ1G5X1G5XOOQR<<J]<<J]O*8ZQUO<<IjO*9OQUO7+$oOOQQ<<Iu<<IuO(7vQVO,5;ROOQR<=!c<=!cOOQQ1G3T1G3TOOQQ,5@U,5@UOOQQ-E=h-E=hOOQR<=!f<=!fO*9{QUO1G0cO*:SQUO'#EzO*:dQUO1G0cO*:kQUO'#I}O*<RQUO1G0qO!(zQVO1G0qOOQQ,5;[,5;[OOQQ,5;],5;]OOQQ,5?u,5?uOOQQ-E=X-E=XO!<[QUO1G0xO*=bQUO1G0xOOQQ1G0y1G0yO*=sQUO'#ElOOQQ1G0z1G0zOOQQ7+&j7+&jO*>XQUO7+&jO*?_QVO7+&jOOQQ7+&h7+&hOOQQ,5@Z,5@ZOOQQ-E=m-E=mO*@ZQUO1G1TO*@eQUO1G1TO*AOQUO1G0fOOQQ1G0f1G0fO*BUQUO'#K{O*B^QUO1G1ROOQQ<<It<<ItOOQQ'#Hb'#HbO'+fQUO,5={OOQQ'#Hd'#HdO'+fQUO,5=}OOQQ-E=j-E=jPOQQ<<Ik<<IkPOQQ-E=k-E=kOOQQ<<Lq<<LqO*BcQUO'#LaO*CoQUO'#L`OOQQ,5@_,5@_OOQQ-E=q-E=qOOQR<<Km<<KmO$>uQUO<<KmO*C}QUO<<KmOOQR1G1Z1G1ZOOQQ7+'S7+'SO!M_QVO1G1tO*DSQUO1G1tOOQR7+'_7+'_OOQR<<Jw<<JwO!0tQVO<<JwOOQR<<KO<<KOO*D_QUO<<KSO*EeQVO<<KSOKkQUO<<KcO!M_QVO<<KcO*ElQUO<<KSO!0tQVO<<KSO*FuQUO<<KSO*FzQUO<<KcO*GVQUO<<KdOOQR<<Kd<<KdOOQR<<Kf<<KfO*G[QUO1G2bO)7VQUO1G2bO'CzQUO1G2bO*GmQUO1G2dO*HsQVO1G2dOOQQ1G2d1G2dO*H}QVO1G2dO*IUQUO,5@QOOQQ-E=d-E=dOOQQ1G2e1G2eO*IdQUO1G1|O*JmQVO1G1|O*JtQUO1G1|OOQQ1G5m1G5mOOQR<<Kz<<KzOOQR<<LO<<LOO*JyQVO<<LOO*KUQUO<<LOOOQR1G2|1G2|O*KZQUO1G2|O*KbQUO1G3eOOQR1G3d1G3dOOQQ7++|7++|O%)WQUO7++|O*KmQUO1G6qO*KmQUO1G6qO(%iQUO,5?oO*KuQUO,5?oOOQQ-E=R-E=RO*LQQUO1G0TOOQQ1G0T1G0TO*L[QUO1G0TO!M_QVO1G0TO*LaQUO1G0TOOQQ1G3w1G3wO*LkQUO,5:qO)EhQUO,5:qO*MXQUO,5:qO)EhQUO,5:qO$#uQUO,5:uO*MvQVO,5>VO)GgQUO'#JpO*NQQUO1G0TO*NcQVO1G0TOOQQ1G3u1G3uO*NjQUO,5>WO*NuQUO,5>XO+ dQUO,5>YO+!jQUO1G0TO%)]QUO7++|O+#pQUO1G4ROOQQ,5@^,5@^OOQQ-E=p-E=pOOQQ<<MT<<MTOOQQ<<Mn<<MnO+$yQUO1G4oP+&|QUO'#JvP+'UQUO,5BQPO{O1G7k1G7kPOOO<<Gn<<GnOOQQANC_ANC_OOQR1G6e1G6eO+'^Q!eO,5:cOOQQ,5:c,5:cO+'eQUO1G0mO+(qQUO7+&]O+*QQUO7+&dO+*cQUO,5;WOOQQ<<JU<<JUO+*qQUO7+&oOOQQ7+&Q7+&QO!4xQUO'#J^O++lQUO,5AgOOQQ7+&m7+&mOOQQ1G3g1G3gO++tQUO1G3iOOQQ,5>n,5>nO+/iQUOANAXOOQRANAXANAXO+/nQUO7+'`OOQRAN@cAN@cO+0zQVOAN@nO+1RQUOAN@nO!0tQVOAN@nO+2[QUOAN@nO+2aQUOAN@}O+2lQUOAN@}O+3rQUOAN@}OOQRAN@nAN@nO!M_QVOAN@}OOQRANAOANAOO+3wQUO7+'|O)7VQUO7+'|OOQQ7+(O7+(OO+4YQUO7+(OO+5`QVO7+(OO+5gQVO7+'hO+5nQUOANAjOOQR7+(h7+(hOOQR7+)P7+)PO+5sQUO7+)PO+5xQUO7+)POOQQ<= h<= hO+6QQUO7+,]O+6YQUO1G5ZOOQQ1G5Z1G5ZO+6eQUO7+%oOOQQ7+%o7+%oO+6vQUO7+%oO*NcQVO7+%oOOQQ7+)a7+)aO+6{QUO7+%oO+8RQUO7+%oO!M_QVO7+%oO+8]QUO1G0]O*LkQUO1G0]O)EhQUO1G0]OOQQ1G0a1G0aO+8zQUO1G3qO+:QQVO1G3qOOQQ1G3q1G3qO+:[QVO1G3qO+:cQUO,5@[OOQQ-E=n-E=nOOQQ1G3r1G3rO%)WQUO<= hOOQQ7+*Z7+*ZPOQQ,5@b,5@bPOQQ-E=t-E=tOOQQ1G/}1G/}OOQQ,5?x,5?xOOQQ-E=[-E=[OOQRG26sG26sO+:zQUOG26YO!0tQVOG26YO+<TQUOG26YOOQRG26YG26YO!M_QVOG26iO!0tQVOG26iO+<YQUOG26iO+=`QUOG26iO+=eQUO<<KhOOQQ<<Kj<<KjOOQRG27UG27UOOQR<<Lk<<LkO+=vQUO<<LkOOQQ7+*u7+*uOOQQ<<IZ<<IZO+={QUO<<IZO!M_QVO<<IZO+>QQUO<<IZO+?WQUO<<IZO*NcQVO<<IZOOQQ<<L{<<L{O+?iQUO7+%wO*LkQUO7+%wOOQQ7+)]7+)]O+@WQUO7+)]O+A^QVO7+)]OOQQANESANESO!0tQVOLD+tOOQRLD+tLD+tO+AeQUOLD,TO+BkQUOLD,TOOQRLD,TLD,TO!0tQVOLD,TOOQRANBVANBVOOQQAN>uAN>uO+BpQUOAN>uO+CvQUOAN>uO!M_QVOAN>uO+C{QUO<<IcOOQQ<<Lw<<LwOOQR!$( `!$( `O!0tQVO!$( oOOQR!$( o!$( oOOQQG24aG24aO+DjQUOG24aO+EpQUOG24aOOQR!)9EZ!)9EZOOQQLD){LD){O+EuQUO'#CgO(dQUO'#CgO+IrQUO'#CyO+LcQUO'#CyO!E{QUO'#CyO+M[QUO'#CyO+MoQUO'#CyO,#bQUO'#CyO,#rQUO'#CyO,$PQUO'#CyO,$[QbO,59cO,$gQbO,59cO,$rQbO,59cO,$}QbO'#CwO,%`QbO'#CwO,%qQbO'#CwO,&SQUO'#CgO,(gQUO'#CgO,(tQUO'#CgO,+iQUO'#CgO,.lQUO'#CgO,.|QUO'#CgO,2uQUO'#CgO,2|QUO'#CgO,3|QUO'#CgO,6VQUO,5:xO#?kQUO,5:xO#?kQUO,5:xO#=ZQUO'#L[O,6sQbO'#CwO,7OQbO'#CwO,7ZQbO'#CwO,7fQbO'#CwO#6tQUO'#E^O,7qQUO'#E^O,9OQUO'#HgO,9pQbO'#CwO,9{QbO'#CwO,:WQUO'#CvO,:]QUO'#CvO,:bQUO'#CoO,:pQbO,59cO,:{QbO,59cO,;WQbO,59cO,;cQbO,59cO,;nQbO,59cO,;yQbO,59cO,<UQbO,59cO,6VQUO1G0dO,<aQUO1G0dO#?kQUO1G0dO,7qQUO1G0dO,>nQUO'#KZO,?OQUO'#CyO,?^QbO,59cO,6VQUO7+&OO,<aQUO7+&OO,?iQUO'#EwO,@[QUO'#EzO,@{QUO'#E^O,AQQUO'#GcO,AVQUO'#CvO,A[QUO'#CwO,AaQUO'#CwO,AfQUO'#CvO,AkQUO'#GcO,ApQUO'#KZO,B^QUO'#KZO,BhQUO'#CvO,BsQUO'#CvO,COQUO'#CvO,<aQUO,5:xO,7qQUO,5:xO,7qQUO,5:xO,CZQUO'#KZO,CnQbO'#CwO,CyQUO'#CrO,DOQUO'#E^",
                stateData: ",Dt~O(nOSSOSTOSRPQVPQ'ePQ'gPQ'hPQ'iPQ'jPQ'kPQ'lPQ'mPQ~O*ZOS~OPmO]eOa!]Od!POlTOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!VfO!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$R!gO$T!hO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO${!tO$}!uO%U!yO%_#ZO%`#[O%a#YO%c!zO%e#UO%g!{O%l#SO%o!|O%v!}O%|#PO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(rRO)PYO)SaO)U|O)V{O)WiO)X!ZO)YXO)hcO)idO~OR#bOV#]O'e#^O'g#_O'h#`O'i#`O'j#aO'k#aO'l#_O'm#_O~OX#dO(p#dO(q#fO~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX(uZX(v$]X(wZX(xZX)SZX)SiX)TZX)UZX)UiX)VZX)ViX)WZX)XZX)jZX~O)WiX!UZX~P(dO]#}O!V#lO!X#{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO(w#kO(x#kO)S#mO)T#oO)U#nO)V#pO)W#jO)X#|O~Od$RO%Y$SO'[$TO'_$UO(y$OO~Ol$VO~O!T$WO](}Xd(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)W(}X~Ol$VO~P.ZOl$VO!g$YO)j$YO~OX$ZO)Z$ZO~O!R$[O)X)QP)])QP~OPmO]$eOa!]Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~Ol$_O#t$lO(rRO~P0zO](]Xa'yXd(]Xl'yXl(]Xr'yXr(]Xs'yXs(]Xt'yXt(]Xu'yXu(]Xv'yXv(]Xw'yXw(]Xx'yXx(]Xy'yXy(]X{'yX}'yX!V(]X!o(]X!r'yX!r(]X!s'yX!s(]X!t'yX!t(]X!u'yX!u(]X!v'yX!v(]X!x'yX!x(]X!{(]X#a'yX#b'yX%e'yX%l'yX%o(]X%v(]X&m'yX&r'yX&s'yX(r'yX(r(]X)S(]X)U(]X)V(]X~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO&r#WO&s$wO])aXd)aXl)aX!V)aX!{)aX%v)aX(r)aX)S)aX)U)aX)V)aX~O)W$vO~P:nOPmO]eOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)SaO)U|O)V{O)X!ZO)YXO)hcO)idO~Oa%QOl:zO!|%RO(r$xO~P<lO)S%SO~Oa!]Ol$_O{#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r:}O~P<lOPmO]$eOa%QOl:zO!V$fO!W%_O!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V%]O)X!ZO)YXO)hcO)idO)j%[O~O]%hOd!POl%bO!V%kO!{!dO%v$mO(r;OO)S%dO)U%iO)V%iO~O(v%mO~O)W#jO~O(r%nO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!g(tX)j(tX!O(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OP%oO(oQO~PCQO]%hOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO%o!|O%v!}O)S;`O)U|O)V|O~Ol%rO!o%wO(r$xO~PE_O!TxO#v!eO(v%yO)j%|O])eX!V)eX~O]%hOd!POl%rO!V%kO!{!dO%v!}O(r$xO)S;`O)U|O)V|O~O!TxO#v!eO)W&PO)j&QO~O!U&TO~P!QO]&YO!TxO!V&WO)S&VO)U&ZO)V&ZO~Op&UO~PHrO]&cO!V&bO~OPmO]eOd!PO!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)SaO)U|O)V{O)X!ZO)YXO)hcO)idO~Oa%QOl:zO%v$mO(r$xO~PIgO]%hOd!POl;[O!V%kO!{!dO%v$mO(r$xO)S;`O)U|O)V|O~Op&fO](tX])eX!V(tX!V)eX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!O(tX!O)eX!U(tX~O!g$YO)j$YO~PL]O!g(tX)j(tX~PL]O](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!g(tX)j(tX!O(tX!U(tX~O])eX!V)eX!O)eX~PNkOa&hO&m!RO]&lXd&lXl&lXr&lXs&lXt&lXu&lXv&lXw&lXx&lXy&lX}&lX!V&lX!r&lX!s&lX!t&lX!u&lX!v&lX!x&lX!{&lX%v&lX&r&lX&s&lX(r&lX)S&lX)U&lX)V&lX)W&lX!O&lX!T&lX!X&lX!Y&lX![&lX!^&lX!_&lX!a&lX!b&lX!c&lX!e&lX!f&lX!h&lX(u&lX(w&lX(x&lX)T&lX)X&lX!g&lX)j&lX!W&lXQ&lX!d&lX(v&lX!U&lX#v&lX~Op&fOl(}X!O(}XQ(}X!d(}X!h(}X)X(}X)j(}X~P.ZO!g$YO)j$YO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!O(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OPmO]$eOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O](}Xd(}Xl(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)W(}X!O(}XQ(}X!d(}X!h(}X)X(}X)j(}X~O]#}O~P!*qO]&lO~O])bXa)bXd)bXl)bXr)bXs)bXt)bXu)bXv)bXw)bXx)bXy)bX{)bX})bX!V)bX!o)bX!r)bX!s)bX!t)bX!u)bX!v)bX!x)bX!{)bX#a)bX#b)bX%e)bX%l)bX%o)bX%v)bX&m)bX&r)bX&s)bX(r)bX)S)bX)U)bX)V)bX~O(oQO~P!-ZO%U&nO~P!-ZO]&oO~O]#}O~O!TxO~O$W&wO(r%nO(v&vO~O]&xOw&zO~O]&xO~OPmO]$eOa%QOl:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#p!xO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:mO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~O]'PO~O!T$WO)W'RO~P!(zO)W'TO~O)W'UO~O(r'VO~O)W'YO~P!(zOl;^O%U'^O%e'^O(r;PO~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O(v'bO~O)W'dO~P!(zO!TxO(r%nO)j'fO~O(r%nO~O]'iO~O]'jOd%nXl%nX!V%nX!{%nX%v%nX(r%nX)S%nX)U%nX)V%nX~O]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~P8zO]%hOa!TOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO)S;`O)U|O)V|O~Ol;_Op&UO%v$mO(r;QO~P!8jO(r%nO(v'vO)W'wO~O]&cO!T'yO~Ol$oO}!_O!T(QO!l(VO(r$nO(v(PO)PYO~Ol$oO{(^O!T(ZO#b(^O(r$nO~Oa!TOl$oO{#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O](`O~OPmOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)YXO)hcO)idO~O](bO)X(cO~P!=UO]#}O~P!<[OPmO]$eOa%QOl:zO!V(iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~OY(jO(oQO(r%nO~O'f(mO~OS(qOT(nO*W(pO~O]#}O(n(tO~Q'nXX#dO(p#dO(q(vO~Od)QOl({O&r#WO(r(zO~O!Y'Sa!['Sa!^'Sa!_'Sa!a'Sa!b'Sa!c'Sa!e'Sa!f'Sa!h'Sa(u'Sa)S'Sa)T'Sa)U'Sa)V'Sa)W'Sa)X'Sa!g'Sa)j'Sa!O'Sa!W'Sa(v'Sa!U'SaQ'Sa!d'Sa~OPmOa%QOl:zO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)YXO)hcO)idO]'Sa!V'Sa!X'Sa(w'Sa(x'Sa~P!B_O!T$WO!O(sP~P!(zO]nX]%WXdnXlmXpnXp%WXrnXsnXtnXunXvnXwnXxnXynX}nX!TnX!VnX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gmX!h%WX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX(u%WX(w%WX(x%WX)SnX)S%WX)T%WX)UnX)U%WX)VnX)V%WX)W%WX)X%WX)jmX!O%WX~O)WnX!OnX!U%WX~P!E{O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~P8zOPmO]$eOa%QOl:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O!V)lO~P!JwOd)oO%Y)pO(y$OO~O!T$WO!V)rO(w)sO!U)rP~P!JwO!T$WO~P!(zO)[)zO~Ol){O]!QX!h!QX)X!QX)]!QX~O])}O!h*OO)X)QX)])QX~O)X*SO)]*RO~Od$RO%Y*TO'[$TO'_$UO(y$OO~Ol*UO~Ol*UO!O(}X~P.ZOl*UO!g$YO)j$YO~O)W*VO~P:nOPmO]$eOa!]Ol$_Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)S$kO)V$kO)X!ZO)YXO)hcO)idO~Op&fO~P!&zOp&fO!W(tX(v(tXQ(tX!d(tX~PNkO]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~O]iXdiXlgXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX!TiX!hiX)XiX)jiX!OiX~O!liX(viX)WiX!XiX!YiX![iX!^iX!_iX!aiX!biX!ciX!eiX!fiX(uiX(wiX(xiX)TiX!giX!WiXQiX!diX!UiX#viX#TiX#ViX#piXaiX{iX!oiX#aiX#biX#iiX#tiX${iX%ciX%eiX%kiX%liX%oiX&miX)PiX~P#%yO(y*ZO~Ol*[O~O](}Xd(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)W(}X!T(}X!X(}X!Y(}X![(}X!^(}X!_(}X!a(}X!b(}X!c(}X!e(}X!f(}X!h(}X(u(}X(w(}X(x(}X)T(}X)X(}X!g(}X)j(}X!O(}X!W(}XQ(}X!d(}X(v(}X!U(}X#v(}X~Ol*[O~P#+ROr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO])aad)aal)aa!V)aa!{)aa%v)aa(r)aa)S)aa)U)aa)V)aaQ)aa!d)aa!h)aa)X)aa)j)aa!O)aa!T)aa(v)aa)W)aa~O&r#WO&s$wO~P#.qOp&fOl(}X~P#+RO&r)aa~P#.qO]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(wZX(xZX)SZX)TZX)UZX)VZX)WZX)XZX)jZX!OZX~O!WZX(vZX!UZXQZX!dZX~P#1jO]#}O!V#lO!X#{O(w#kO(x#kO~O!Y&xa![&xa!^&xa!_&xa!a&xa!b&xa!c&xa!e&xa!f&xa!g&xa!h&xa(u&xa)S&xa)T&xa)U&xa)V&xa)W&xa)X&xa)j&xa!O&xa!W&xa(v&xa!U&xaQ&xa!d&xa~P#3zOl;hO!T$WO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PKkOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PKkO]&cO!V&bO!O#Qa!T#Qa!h#Qa#v#Qa)W#Qa)j#QaQ#Qa!d#Qa(v#Qa~Op&fO!T$WO~O!O*cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O*cO~O]&cO!O*eO!V&bO~O]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO&r#WO&s$wO)S&VO)U&ZO)V&ZO~O!OqXQqX!dqX!hqX)XqX)WqX~P#9{O!O*hO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!W)kX~P#3zO!W*kO!h*lO~O!W*kO!h*lO~P!(zO!W*kO~Op&fO!g$YO!h*mO)j$YO](tX!V(tX!W(tX!W*OX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)X(tX~O!h(tX~P#=ZO!W*oO~Od$RO%Y*TO(y:rO~Ol;kO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PBUO]*vO!T*qO!V&bO!h*tO#v!eO)j*rO)W)qX~O!h*tO)W)qX~O)W*wO~Op&fO])eX!T)eX!V)eX!h)eX#v)eX)W)eX)j)eX!O)eXQ)eX!d)eX(v)eX~Op&fO~OP%oO(oQO]%ha!V%ha!X%ha!Y%ha![%ha!^%ha!_%ha!a%ha!b%ha!c%ha!e%ha!f%ha!h%ha(r%ha(u%ha(w%ha(x%ha)S%ha)T%ha)U%ha)V%ha)W%ha)X%ha!g%ha)j%ha!O%ha!W%ha(v%ha!U%haQ%ha!d%ha~Od$RO%Y$SO(y:oO~Ol:wO~O!TxO#v!eO)j%|O~Ol<[O&r#WO(r;gO~O$Z+TO%`+UO~O!TxO#v!eO)W+VO)j+WO~OPmO]$eOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO$Z+TO%_#ZO%`+YO%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O!U+ZO~P!QOa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a+aO#b+bO#i+cO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO)PYO~OQ)lP!d)lP~P#GgO]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO)S&VO)U&ZO)V&ZO~O!O#kX!T#kX#v#kX)W#kX)j#kXQ#kX!d#kX!h#kX)X#kX!x#kX(v#kX~P#IkOPmO]$eOa%QOl:zOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!W+iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S+jO)V$kO)X!ZO)YXO)hcO)idO~O]&cO!V+kO~O]&YO!V&WO)PYO)S&VO)U&ZO)V&ZO)X+nO!O)dP~P8zO]&YO!V&WO)S&VO)U&ZO)V&ZO~O!O#nX!T#nX#v#nX)W#nX)j#nXQ#nX!d#nX!h#nX)X#nX!x#nX(v#nX~P#NeO!TxO])nX!V)nX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O#T+vO#p+wO(x+tO)U+rO)V+rO~O]#jX!T#jX!V#jX!O#jX#v#jX)W#jX)j#jXQ#jX!d#jX!h#jX)X#jX!x#jX(v#jX~P$ xO#V+yO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+zO#T+vO#V+yO#p+wO(x+tO)U+zO)V+zO])fP!T)fP!V)fP#v)fP(v)fP)j)fP!O)fP!h)fP)W)fP~O!x)fPQ)fP!d)fP~P$#uOPmO]$eOa%QOl:zOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)V$kO)X!ZO)YXO)hcO)idO~O!W,QO)S,RO~P$%pO)PYO)X+nO!O)dP~P8zO]&cO!V&bO!O&Za!T&Za!h&Za#v&Za)W&Za)j&ZaQ&Za!d&Za(v&Za~OPmO]$eOa!]Ol:|Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r;RO)S$kO)V$kO)X!ZO)YXO)hcO)idO~OQ(zP!d(zP~P$)YO]#}O!V#lO(w#kO(x#kO!X'Pa!Y'Pa!['Pa!^'Pa!_'Pa!a'Pa!b'Pa!c'Pa!e'Pa!f'Pa!h'Pa(u'Pa)S'Pa)T'Pa)U'Pa)V'Pa)W'Pa)X'Pa!g'Pa)j'Pa!O'Pa!W'Pa(v'Pa!U'PaQ'Pa!d'Pa~O]#}O!V#lO!X#{O(w#kO(x#kO~P!B_O!TxO#t!fO)PYO~P8zO!TxO(r%nO)j,[O~O#x,aO~OQ)aX!d)aX!h)aX)X)aX)j)aX!O)aX!T)aX(v)aX)W)aX~P:nO(v,eO(w,cO)P$UX)W$UX~O(r,fO~O)PYO)W,iO~OPmO]$eOa!]Ol:{Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~O(r;SO~P$0kOPmO]$eOa%QOl:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:mO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~O$h,sO~OPmO]$eOa!]Ol:{Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO$}!uO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O${,yO(r:}O)W,wO~P$7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W,{O)X#|O~P#3zO)W,{O~O)W,|O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W,}O)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W-OO)X#|O~P#3zOp&fO)PYO)j-QO~O)W-RO~Ol;^O(r;PO~O]-YO!{!dO&r#WO&s$wO(r-UO)S-VO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v-]O)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOd$Xa!o$Xa!{$Xa#i$Xa#p$Xa#t$Xa#v$Xa$R$Xa$T$Xa$Y$Xa$Z$Xa${$Xa%U$Xa%c$Xa%g$Xa%o$Xa%|$Xa(k$Xa)U$Xa!U$Xa$c$Xa~P$0kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W-cO)X#|O~P#3zOl-eO!TxO)j,[O~O)j-gO~O]&]a!X&]a!Y&]a![&]a!^&]a!_&]a!a&]a!b&]a!c&]a!e&]a!f&]a!h&]a(u&]a(w&]a(x&]a)T&]a)U&]a)V&]a)W&]a)X&]a!g&]a)j&]a!O&]a!W&]a!T&]a#v&]a(v&]a!U&]aQ&]a!d&]a~O)S-kO!V&]a~P$DbO!O-kO~O!W-kO~O!V-lO)S&]a~P$DbO](}Xd(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X~Ol;mO~P$GQO]&cO!V&bO)W-mO~Ol;cO!o-pO#V+yO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)PYO~P!8jO!n-yO(r,fO~O)PYO)W-{O~OPmO]$eOa%QOl:zO!T.QO!V$fO!X!XO!Y!WO!i!YO#V.XO#a.WO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO(x.PO)S$kO)V$kO)W-}O)X!ZO)YXO)hcO)idO~O!U.VO~P$JbO])^Xd)^Xr)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^X})^X!T)^X!V)^X!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)S)^X)U)^X)V)^X)W)^X!O)^X!h)^X)X)^X!X)^X!Y)^X![)^X!^)^X!_)^X!a)^X!b)^X!c)^X!e)^X!f)^X(u)^X(w)^X(x)^X)T)^X!g)^X)j)^X!W)^XQ)^X!d)^X#T)^X#V)^X#p)^X#v)^Xa)^X{)^X!o)^X#a)^X#b)^X#i)^X#t)^X${)^X%c)^X%e)^X%k)^X%l)^X%o)^X&m)^X)P)^X!U)^X~Ol*[O~P$LlOl$oO!T(QO!l.^O(r$nO(v(PO)PYO~Op&fOl)^X~P$LlOl$oO!n.cO!o.cO(r$nO)PYO~Ol;dO!U.nO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)PYO~P!8jO!T(QO!l.^O(v(PO])OXd)OXl)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%v)OX&r)OX&s)OX(r)OX)S)OX)U)OX)V)OX~O)W)OX!O)OX!X)OX!Y)OX![)OX!^)OX!_)OX!a)OX!b)OX!c)OX!e)OX!f)OX!h)OX(u)OX(w)OX(x)OX)T)OX)X)OX!g)OX)j)OX!W)OXQ)OX!d)OX!U)OX#v)OX~P%%eO!T(QO~O!T(QO(v(PO~O(r%nO!U*QP~O!T(ZO(v.uO]&kad&kal&kar&kas&kat&kau&kav&kaw&kax&kay&ka}&ka!V&ka!r&ka!s&ka!t&ka!u&ka!v&ka!x&ka!{&ka%v&ka&r&ka&s&ka(r&ka)S&ka)U&ka)V&ka)W&ka!O&ka!X&ka!Y&ka![&ka!^&ka!_&ka!a&ka!b&ka!c&ka!e&ka!f&ka!h&ka(u&ka(w&ka(x&ka)T&ka)X&ka!g&ka)j&ka!W&kaQ&ka!d&ka!U&ka#v&ka~Ol$oO!T(ZO(r$nO~O&r#WO&s$wO]&pad&pal&par&pas&pat&pau&pav&paw&pax&pay&pa}&pa!V&pa!r&pa!s&pa!t&pa!u&pa!v&pa!x&pa!{&pa%v&pa(r&pa)S&pa)U&pa)V&pa)W&pa!O&pa!T&pa!X&pa!Y&pa![&pa!^&pa!_&pa!a&pa!b&pa!c&pa!e&pa!f&pa!h&pa(u&pa(w&pa(x&pa)T&pa)X&pa!g&pa)j&pa!W&paQ&pa!d&pa(v&pa!U&pa#v&pa~O&s.zO~P!(zO!Y#qO![#rO!f#zO)S#mO!^'Ua!_'Ua!a'Ua!b'Ua!c'Ua!e'Ua!h'Ua(u'Ua)T'Ua)U'Ua)V'Ua)W'Ua)X'Ua!g'Ua)j'Ua!O'Ua!W'Ua(v'Ua!U'UaQ'Ua!d'Ua~P#3zO!V'dX!X'dX!Y'dX!['dX!^'dX!_'dX!a'dX!b'dX!c'dX!e'dX!f'dX!h'dX(u'dX(w'dX(x'dX)S'dX)T'dX)U'dX)V'dX)X'dX!O'dX~O].|O)W'dX!g'dX)j'dX!W'dX(v'dX!U'dXQ'dX!d'dX~P%2xO!Y#qO![#rO!f#zO)S#mO!^'Wa!_'Wa!a'Wa!b'Wa!c'Wa!e'Wa!h'Wa(u'Wa)T'Wa)U'Wa)V'Wa)W'Wa)X'Wa!g'Wa)j'Wa!O'Wa!W'Wa(v'Wa!U'WaQ'Wa!d'Wa~P#3zO]#}O!T$WO!V.}O&r#WO&s$wO~O!X'Za!Y'Za!['Za!^'Za!_'Za!a'Za!b'Za!c'Za!e'Za!f'Za!h'Za(u'Za(w'Za(x'Za)S'Za)T'Za)U'Za)V'Za)W'Za)X'Za!g'Za)j'Za!O'Za!W'Za(v'Za!U'ZaQ'Za!d'Za~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^a)W'^a!g'^a)j'^a!O'^a!W'^a(v'^a!U'^aQ'^a!d'^a~P#3zOPmO]$eOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V%]O)X!ZO)YXO)hcO)idO)j%[O~O!W/QO~P%:oOS(qOT(nO]#}O*W(pO~O]/TO'f/UO*W/RO~OS/YOT(nO*W/XO~O]#}O~Q'na!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v/[O)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O)W#Zi!O#Zi~P#3zO]cXlgXpcXpiX!VcX!XcX!YcX![cX!^cX!_cX!acX!bcX!ccX!ecX!fcX!gcX!hcX(ucX(wcX(xcX)ScX)TcX)UcX)VcX)WcX)XcX)jcX!OcX!WcX(vcX!TcX#vcX!UcXQcX!dcX~Od/^O%Y*TO(y/]O~Ol/_O~Ol/`O~Op&fO]bi!Vbi!Xbi!Ybi![bi!^bi!_bi!abi!bbi!cbi!ebi!fbi!gbi!hbi(ubi(wbi(xbi)Sbi)Tbi)Ubi)Vbi)Wbi)Xbi)jbi!Obi!Wbi(vbi!UbiQbi!dbi~O!W/bO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO![#rO)S#mO!Y&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y&zi![&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)S&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)V#pO!h&zi(u&zi)T&zi)U&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)U#nO)V#pO!h&zi(u&zi)T&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)V#pO!^&zi!h&zi(u&zi)T&zi)U&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)V#pO!^&zi!_&zi!h&zi(u&zi)T&zi)U&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO!^&zi!_&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!b#yO!c#yO!e#yO!f#zO)S#mO!^&zi!_&zi!a&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!f#zO)S#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO)S#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)T#oO)U#nO)V#pO!h&zi(u&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/cO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!O(sX~P#3zO!h/cO!O(sX~O!O/eO~O]%Xap%Xa!X%Xa!Y%Xa![%Xa!^%Xa!_%Xa!a%Xa!b%Xa!c%Xa!e%Xa!f%Xa!h%Xa(u%Xa(w%Xa(x%Xa)T%Xa)U%Xa)V%Xa)W%Xa)X%Xa!g%Xa)j%Xa!O%Xa!W%Xa!T%Xa#v%Xa(v%Xa!U%XaQ%Xa!d%Xa~O)S/fO!V%Xa~P&,aO!O/fO~O!W/fO~O!V/gO)S%Xa~P&,aO!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)S'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi!g'Zi)j'Zi!O'Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^i)W'^i!g'^i)j'^i!O'^i!W'^i(v'^i!U'^iQ'^i!d'^i~P#3zO!W/lO~P%:oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/nO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U)rX~P#3zO(r/qO~O!V/sO(w)sO)j/uO~O!h/nO!U)rX~O!U/vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)T#oO)U#nO)V#pO)X#|O!h_i(u_i)W_i!g_i)j_i!O_i!W_i(v_i!U_iQ_i!d_i~P#3zO!R/wO~Ol){O]!Qa!h!Qa)X!Qa)]!Qa~OP0PO]0OOl0PO!R0PO!T/|O!V/}O!X0PO!Y0PO![0PO!^0PO!_0PO!a0PO!b0PO!c0PO!e0PO!f0PO!g0PO!h0PO!i0PO(oQO(v0PO(w0PO(x0PO)S/yO)T/zO)U/zO)V/{O)W0PO)X0PO)YXO~O!O0SO~P&6yO!R$[O~O!h*OO)X)Qa)])Qa~O)]0WO~O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~Od)oO%Y*TO(y$OO~O)W0YO~O]nXdnXlmXpnXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX)SnX)UnX)VnX!TnX!hnX)XnX!OnXQnX!dnX~O!lnX(vnX)WnX!XnX!YnX![nX!^nX!_nX!anX!bnX!cnX!enX!fnX(unX(wnX(xnX)TnX!gnX)jnX!WnX!UnX#vnX#TnX#VnX#pnXanX{nX!onX#anX#bnX#inX#tnX${nX%cnX%enX%knX%lnX%onX&mnX)PnX~P&:uOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO~O])aid)ail)ai!V)ai!{)ai%v)ai(r)ai)S)ai)U)ai)V)aiQ)ai!d)ai!h)ai)X)ai)j)ai!O)ai!T)ai&r)ai(v)ai)W)ai~P&?sO]&cO!V&bO!O#Qi!T#Qi!h#Qi#v#Qi)W#Qi)j#QiQ#Qi!d#Qi(v#Qi~O!OqaQqa!dqa!hqa)Xqa)Wqa~P#9{O!OqaQqa!dqa!hqa)Xqa)Wqa~P#IkO]&cO!V+kO!OqaQqa!dqa!hqa)Xqa)Wqa~O!h*iO!W)ka~O!h*mO!W*Oa~OPmOa!]Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!X!XO!Y!WO!i!YO!s!aO!t!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)WiO)X!ZO)YXO)hcO)idO~O]eOd!POlTO!T*qO!U&TO!V0hO!opO!r!`O!u!bO!{!dO#i#OO#p!xO#t!fO$R!gO$T!hO${!tO$}!uO%U!yO%c!zO%g!{O%o!|O%v!}O%|#PO(rRO(w)sO)SaO)U|O)V{O~P&DuO!h*tO)W)qa~OPmO]$eOa!]Ol:|O{#RO!T$WO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r;UO)PYO)S$kO)V$kO)X0nO)YXO)hcO)idO!O(sP!O)dP~P&?sO!h*mO!W*OX~O]#}O!T$WO~O!h0sO!T)zX#v)zX)j)zX~O)W0uO~O)W0vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W0xO)X#|O~P#3zO)W0vO~P!?WO]1SOd!POl%bO!V1QO!{!dO%v$mO(r$xO)S0zO)X0}O~O)U1OO)V1OO)j0{OQ#PX!d#PX!h#PX!O#PX~P' dO!h1TOQ)lX!d)lX~OQ1VO!d1VO~O)X1YO)j1XOQ#`X!d#`X!h#`X~P!<[O)X1YO)j1XOQ#`X!d#`X!h#`X~P!;bOp&UO~O!O#ka!T#ka#v#ka)W#ka)j#kaQ#ka!d#ka!h#ka)X#ka!x#ka(v#ka~P#IkO]&cO!V+kO!O#ka!T#ka#v#ka)W#ka)j#kaQ#ka!d#ka!h#ka)X#ka!x#ka(v#ka~O!W1_O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W1_O)S1aO~P$%pO!W1_O~P!(zO]#ja!T#ja!V#ja!O#ja#v#ja)W#ja)j#jaQ#ja!d#ja!h#ja)X#ja!x#ja(v#ja~P$ xO]&cO!O1eO!V+kO~O!h1fO!O)dX~O!O1hO~O]&cO!V+kO!O#na!T#na#v#na)W#na)j#naQ#na!d#na!h#na)X#na!x#na(v#na~O]1lOr#SXs#SXt#SXu#SXv#SXw#SXx#SXy#SX!T#SX!V#SX#T#SX#p#SX(x#SX)U#SX)V#SX!l#SX!x#SX#V#SX#v#SX(v#SX)j#SX!O#SX!h#SX)W#SXQ#SX!d#SX)X#SX~O]1mO~O]1pOl$oO!V$fO#V#QO(r$nO)hcO)idO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+zO#T+vO#V+yO#p+wO(x+tO)U+zO)V+zO~O])fX!T)fX!V)fX!x)fX#v)fX(v)fX)j)fX!O)fX!h)fX)W)fXQ)fX!d)fX~P'+}O!x!cO]#Ri!T#Ri!V#Ri#v#Ri(v#Ri)j#Ri!O#Ri!h#Ri)W#RiQ#Ri!d#Ri~O!W1xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W1xO)S1zO~P$%pO!W1xO~P!(zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ*RX!d*RX!h*RX~P#3zO)X1{OQ({X!d({X!h({X~O!h1|OQ(zX!d(zX~OQ2OO!d2OO~O!O2PO~O#t$lO)PYO~P8zOl-eO!TxO)j2TO~O!O2UO~O#x,aOP#ui]#uia#uid#uil#uir#uis#uit#uiu#uiv#uiw#uix#uiy#ui{#ui}#ui!T#ui!V#ui!X#ui!Y#ui!i#ui!o#ui!r#ui!s#ui!t#ui!u#ui!v#ui!x#ui!{#ui#V#ui#a#ui#b#ui#i#ui#p#ui#t#ui#v#ui$R#ui$T#ui$Y#ui$Z#ui$`#ui$e#ui$g#ui$h#ui$k#ui$m#ui$o#ui$q#ui$s#ui$u#ui$w#ui${#ui$}#ui%U#ui%_#ui%`#ui%a#ui%c#ui%e#ui%g#ui%l#ui%o#ui%v#ui%|#ui&m#ui&r#ui&s#ui'Q#ui'R#ui'V#ui'Y#ui'a#ui'b#ui(k#ui(o#ui(r#ui)P#ui)S#ui)U#ui)V#ui)W#ui)X#ui)Y#ui)h#ui)i#ui!U#ui$c#ui!n#ui%k#ui~O]&cO~O]&cO!TxO!V&bO#v!eO~O(v2ZO(w,cO)P$Ua)W$Ua~O)PYO)W2]O~O!O2^O~P,]O!O2^O)W#jO~O!O2^O~O$c2cOP$_i]$_ia$_id$_il$_ir$_is$_it$_iu$_iv$_iw$_ix$_iy$_i{$_i}$_i!T$_i!V$_i!X$_i!Y$_i!i$_i!o$_i!r$_i!s$_i!t$_i!u$_i!v$_i!x$_i!{$_i#V$_i#a$_i#b$_i#i$_i#p$_i#t$_i#v$_i$R$_i$T$_i$Y$_i$Z$_i$`$_i$e$_i$g$_i$h$_i$k$_i$m$_i$o$_i$q$_i$s$_i$u$_i$w$_i${$_i$}$_i%U$_i%_$_i%`$_i%a$_i%c$_i%e$_i%g$_i%l$_i%o$_i%v$_i%|$_i&m$_i&r$_i&s$_i'Q$_i'R$_i'V$_i'Y$_i'a$_i'b$_i(k$_i(o$_i(r$_i)P$_i)S$_i)U$_i)V$_i)W$_i)X$_i)Y$_i)h$_i)i$_i!U$_i~O]1pO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W2fO)X#|O~P#3zOPmO]$eOa!]Ol:{O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)S$kO)V$kO)W2iO)X!ZO)YXO)hcO)idO~P&?sO)W2fO~O(r-UO~O)PYO)j2lO~O)W2nO~O]-YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO(r-UO)S-VO~O)S2sO~O]&cO!V2uO!h2vO)W)uX~O]-YO!{!dO(r-UO)S-VO~O)W2yO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOd$Xi!o$Xi!{$Xi#i$Xi#p$Xi#t$Xi#v$Xi$R$Xi$T$Xi$Y$Xi$Z$Xi${$Xi%U$Xi%c$Xi%g$Xi%o$Xi%|$Xi(k$Xi)U$Xi!U$Xi$c$Xi~P$0kOl:{O(r:nO~P0zO]2}O~O)W2SO~O!u3PO(r%nO~O!O3SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h3TO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O3UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO]&cO!V+kO!T%ui#v%ui)W%ui)j%ui~O!W3VO~Ol:yO)W(}X~P$GQOa!TOl$oO{3]O#a#VO#b3[O#t!fO%e#UO%l3^O&m!RO&r#WO&s!TO(r$nO)PYO~P&?sOl;cO!o-pO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)PYO~P!8jO]&cO!V&bO)W3`O~O)W3aO~O)PYO)W3aO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W3bO)X#|O~P#3zO)W3bO~O)W3eO~O!U3gO~P$JbOl$oO(r$nO~O]3iO!T'yO~P'+iO!T(QO!l3lO(v(PO])Oad)Oal)Oar)Oas)Oat)Oau)Oav)Oaw)Oax)Oay)Oa})Oa!V)Oa!r)Oa!s)Oa!t)Oa!u)Oa!v)Oa!x)Oa!{)Oa%v)Oa&r)Oa&s)Oa(r)Oa)S)Oa)U)Oa)V)Oa)W)Oa!O)Oa!X)Oa!Y)Oa![)Oa!^)Oa!_)Oa!a)Oa!b)Oa!c)Oa!e)Oa!f)Oa!h)Oa(u)Oa(w)Oa(x)Oa)T)Oa)X)Oa!g)Oa)j)Oa!W)OaQ)Oa!d)Oa!U)Oa#v)Oa~Ol$oO!n.cO!o.cO(r$nO~O!h3pO)X3rO!T)_X~O!o3tO)PYO~P8zO)W3uO~PGVO]3zOl({O!T$WO!{!dO%v$mO&r#WO(r(zO(v4OO)S3wO)U3{O)V3{O~O)W4PO)j4RO~P(&eOl;dO!U4TO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)PYO~P!8jOl;dO%v!}O(r;VO~P!8jO(v4UO~Ol$oO!T(QO(r$nO(v(PO)PYO~O!l3lO~P((sO)j4WO!U&oX!h&oX~O!h4XO!U*QX~O!U4ZO~Oa4]Ol$oO&m!RO(r$nO~O!T(ZO]&kid&kil&kir&kis&kit&kiu&kiv&kiw&kix&kiy&ki}&ki!V&ki!r&ki!s&ki!t&ki!u&ki!v&ki!x&ki!{&ki%v&ki&r&ki&s&ki(r&ki)S&ki)U&ki)V&ki)W&ki!O&ki!X&ki!Y&ki![&ki!^&ki!_&ki!a&ki!b&ki!c&ki!e&ki!f&ki!h&ki(u&ki(w&ki(x&ki)T&ki)X&ki!g&ki)j&ki!W&kiQ&ki!d&ki!U&ki#v&ki~O(v&ki~P(*TO(v.uO~P(*TO!O4`O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O4`O~O!O4aO~O]#}O!T$WO!V'Zi!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)S'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi!g'Zi)j'Zi!O'Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~OPmOa%QOl:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)X!ZO)YXO)hcO)idO]#]ap#]a!T#]a!V#]a)S#]a)U#]a)V#]a~O(r%nO)X4fO!O*YP~O*W4eO~O'f4hO*W4eO~O*W4iO~OlmXpnXp&wX~Od4kO%Y*TO(y/]O~Od4kO%Y*TO(y4lO~O!h/cO!O(sa~O!W4pO~O]&cO!V+kO!T%uq#v%uq)W%uq)j%uq~O]#}O!T$WO!X'Zq!Y'Zq!['Zq!^'Zq!_'Zq!a'Zq!b'Zq!c'Zq!e'Zq!f'Zq!h'Zq(u'Zq(w'Zq(x'Zq)S'Zq)T'Zq)U'Zq)V'Zq)W'Zq)X'Zq!g'Zq)j'Zq!O'Zq!W'Zq(v'Zq!U'ZqQ'Zq!d'Zq~O!V'Zq~P(5bO!V.}O&r#WO&s$wO~P(5bO!T$WO!V)rO(w)sO!U(UX!h(UX~P!JwO!h/nO!U)ra~O!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!U4|O~P&6yO!W4|O~P&6yO!O4|O~P&6yO!O5RO~P&6yO]5SO!h'ua)X'ua)]'ua~O!h*OO)X)Qi)])Qi~O]&cO!V&bO!O#Qq!T#Qq!h#Qq#v#Qq)W#Qq)j#QqQ#Qq!d#Qq(v#Qq~O!OqiQqi!dqi!hqi)Xqi)Wqi~P#IkO]&cO!V+kO!OqiQqi!dqi!hqi)Xqi)Wqi~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'Tq)W'Tq!g'Tq)j'Tq!O'Tq!W'Tq(v'Tq!U'TqQ'Tq!d'Tq~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!W'|a!h'|a~P#3zO!W5XO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h5YO(u#gO)S#mO)T#oO)U#nO)V#pO)W#jO)X#|O!U)rX~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h#{i)W#{i~P#3zO]*vO!T$WO!V&bO)j*rO!h(Va)W(Va~O!h1fO]'dX!O)dX~P%2xO)X5[O!T%qa!h%qa#v%qa)j%qa~O!h0sO!T)za#v)za)j)za~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W5_O)X#|O~P#3zO]1SOd!POl;[O!V1QO!{!dO%v$mO(r$xO)S;xO)U5aO)V5aO~OQ#Pa!d#Pa!h#Pa!O#Pa~P(DjO]1SOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V1QO!{!dO!|%RO%v$mO(r$xOQ#kX!d#kX!h#kX!O#kX~Ol%bO)S0zO)U;yO)V;yO~P(ElO]&cOQ#Pa!d#Pa!h#Pa!O#Pa~O!V&bO)j5eO~P(GZO(r%nOQ#dX!d#dX!h#dX!O#dX~O)U;yO)V;yOQ#nX!d#nX!h#nX!O#nX~P' dO!V+kO~P(GZO]1SOa!TOd!POl;]O{#RO!V1QO!{!dO#a#VO#b#TO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO(r;QO)PYO)S;xO)U5aO)V5aO)X+nO!O)dP~P&?sO!h1TOQ)la!d)la~Op&fO)j5jOQ#`al(}X!d#`a!h#`a)X(}X~P$GQO(r-UOQ#ga!d#ga!h#ga~Op&fO)j5jOQ#`a])^Xd)^Xl)^Xr)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^X})^X!T)^X!V)^X!d#`a!h#`a!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)S)^X)U)^X)V)^X)X)^X~O#a5mO#b5mO~O]&cO!V+kO!O#ki!T#ki#v#ki)W#ki)j#kiQ#ki!d#ki!h#ki)X#ki!x#ki(v#ki~O!W5oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W5oO~P!(zO!W5oO)S5qO~P$%pO]#ji!T#ji!V#ji!O#ji#v#ji)W#ji)j#jiQ#ji!d#ji!h#ji)X#ji!x#ji(v#ji~P$ xO)PYO)X5sO~P8zO!h1fO!O)da~O&r#WO&s$wO!T#qa!x#qa#v#qa(v#qa)j#qa!O#qa!h#qa)W#qaQ#qa!d#qa)X#qa~P#NeO!O5xO~P!(zO!O)oP~P!4xO)T6OO)U5|O]#Ua!T#Ua!V#Ua)S#Ua)V#Uar#Uas#Uat#Uau#Uav#Uaw#Uax#Uay#Ua!l#Ua!x#Ua#T#Ua#V#Ua#p#Ua#v#Ua(v#Ua(x#Ua)j#Uaa#Uad#Ual#Ua{#Ua}#Ua!o#Ua!r#Ua!s#Ua!t#Ua!u#Ua!v#Ua!{#Ua#a#Ua#b#Ua#i#Ua#t#Ua${#Ua%c#Ua%e#Ua%k#Ua%l#Ua%o#Ua%v#Ua&m#Ua&r#Ua&s#Ua(r#Ua)P#Ua)W#Ua!O#Ua!h#UaQ#Ua!d#Ua~O!x!cO]#Rq!T#Rq!V#Rq#v#Rq(v#Rq)j#Rq!O#Rq!h#Rq)W#RqQ#Rq!d#Rq~O!W6TO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W6TO~P!(zO!h1|OQ(za!d(za~O)W6YO~Ol-eO!TxO)j6ZO~O]*vO!T$WO!V&bO!h*tO)W)qX~O)j6_O~P)+cO!O6aO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O6aO~O$c6cOP$_q]$_qa$_qd$_ql$_qr$_qs$_qt$_qu$_qv$_qw$_qx$_qy$_q{$_q}$_q!T$_q!V$_q!X$_q!Y$_q!i$_q!o$_q!r$_q!s$_q!t$_q!u$_q!v$_q!x$_q!{$_q#V$_q#a$_q#b$_q#i$_q#p$_q#t$_q#v$_q$R$_q$T$_q$Y$_q$Z$_q$`$_q$e$_q$g$_q$h$_q$k$_q$m$_q$o$_q$q$_q$s$_q$u$_q$w$_q${$_q$}$_q%U$_q%_$_q%`$_q%a$_q%c$_q%e$_q%g$_q%l$_q%o$_q%v$_q%|$_q&m$_q&r$_q&s$_q'Q$_q'R$_q'V$_q'Y$_q'a$_q'b$_q(k$_q(o$_q(r$_q)P$_q)S$_q)U$_q)V$_q)W$_q)X$_q)Y$_q)h$_q)i$_q!U$_q~O)W6dO~OPmO]$eOa!]Ol:{O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)S$kO)V$kO)W6fO)X!ZO)YXO)hcO)idO~P&?sO(v6hO)j*rO~P)+cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W6fO)X#|O~P#3zO!O6jO~P!(zO)W6nO~O)W6oO~O]-YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO(r-UO)S-VO~O]&cO!V2uO!h%Oa)W%Oa!O%Oa~O!W6uO)S6vO~P$%pO!h2vO)W)ua~O]&cO!O6yO!V2uO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOd$Xq!o$Xq!{$Xq#i$Xq#p$Xq#t$Xq#v$Xq$R$Xq$T$Xq$Y$Xq$Z$Xq${$Xq%U$Xq%c$Xq%g$Xq%o$Xq%|$Xq(k$Xq)U$Xq!U$Xq$c$Xq~P$0kOPmO]$eOa!]Ol:{O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)PYO)S$kO)V$kO)W6{O)X!ZO)YXO)hcO)idO~P&?sO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W7OO)X#|O~P#3zO)W7PO~OP7QO(oQO~Ol*[O)W)^X~P$GQOp&fOl(}X)W)^X~P$GQO)W7SO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O)W&Sa~P#3zO!U7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO)W7VO~OPmO]$eOa!]Ol:|O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r;UO)PYO)S$kO)V$kO)X0nO)YXO)hcO)idO!O)dP~P&?sO!h3pO)X7ZO!T)_a~O!h3pO!T)_a~O)W7`O)j7bO~P(&eO)W7dO~PGVO]3zOl({Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO%v$mO&r#WO(r(zO)S3wO)U3{O)V3{O~O)S7hO~O]&cO!T*qO!V7jO!h7kO#v!eO(v4OO~O)W7`O)j7mO~P)FwO]3zOl({O!{!dO%v$mO&r#WO(r(zO)S3wO)U3{O)V3{O~Op&fO])cX!T)cX!V)cX!h)cX#v)cX(v)cX)W)cX)j)cX!O)cX~O)W7`O~O!T(QO!l7sO(v(PO])Oid)Oil)Oir)Ois)Oit)Oiu)Oiv)Oiw)Oix)Oiy)Oi})Oi!V)Oi!r)Oi!s)Oi!t)Oi!u)Oi!v)Oi!x)Oi!{)Oi%v)Oi&r)Oi&s)Oi(r)Oi)S)Oi)U)Oi)V)Oi)W)Oi!O)Oi!X)Oi!Y)Oi![)Oi!^)Oi!_)Oi!a)Oi!b)Oi!c)Oi!e)Oi!f)Oi!h)Oi(u)Oi(w)Oi(x)Oi)T)Oi)X)Oi!g)Oi)j)Oi!W)OiQ)Oi!d)Oi!U)Oi#v)Oi~O(r%nO!U(fX!h(fX~O!h4XO!U*Qa~Op&fO]*Pad*Pal*Par*Pas*Pat*Pau*Pav*Paw*Pax*Pay*Pa}*Pa!T*Pa!V*Pa!r*Pa!s*Pa!t*Pa!u*Pa!v*Pa!x*Pa!{*Pa%v*Pa&r*Pa&s*Pa(r*Pa)S*Pa)U*Pa)V*Pa)W*Pa!O*Pa!X*Pa!Y*Pa![*Pa!^*Pa!_*Pa!a*Pa!b*Pa!c*Pa!e*Pa!f*Pa!h*Pa(u*Pa(w*Pa(x*Pa)T*Pa)X*Pa!g*Pa)j*Pa!W*PaQ*Pa!d*Pa(v*Pa!U*Pa#v*Pa~O!T(ZO]&kqd&kql&kqr&kqs&kqt&kqu&kqv&kqw&kqx&kqy&kq}&kq!V&kq!r&kq!s&kq!t&kq!u&kq!v&kq!x&kq!{&kq%v&kq&r&kq&s&kq(r&kq)S&kq)U&kq)V&kq)W&kq!O&kq!X&kq!Y&kq![&kq!^&kq!_&kq!a&kq!b&kq!c&kq!e&kq!f&kq!h&kq(u&kq(w&kq(x&kq)T&kq)X&kq!g&kq)j&kq!W&kqQ&kq!d&kq(v&kq!U&kq#v&kq~OPmOa%QOl:zO!T$WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)YXO)hcO)idO~O]*Ui!V*Ui!X*Ui!Y*Ui![*Ui!^*Ui!_*Ui!a*Ui!b*Ui!c*Ui!e*Ui!f*Ui!h*Ui(u*Ui(w*Ui(x*Ui)S*Ui)T*Ui)U*Ui)V*Ui)W*Ui)X*Ui!g*Ui)j*Ui!O*Ui!W*Ui(v*Ui!U*UiQ*Ui!d*Ui~P*&WO!O7xO~O!W7yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^q)W'^q!g'^q)j'^q!O'^q!W'^q(v'^q!U'^qQ'^q!d'^q~P#3zO!h7zO!O*YX~O!O7|O~O*W7}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h^y)W^y!g^y)j^y!O^y!W^y(v^y!U^yQ^y!d^y~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!O(ha!h(ha~P#3zO]#}O!T$WO!V'Zy!X'Zy!Y'Zy!['Zy!^'Zy!_'Zy!a'Zy!b'Zy!c'Zy!e'Zy!f'Zy!h'Zy(u'Zy(w'Zy(x'Zy)S'Zy)T'Zy)U'Zy)V'Zy)W'Zy)X'Zy!g'Zy)j'Zy!O'Zy!W'Zy(v'Zy!U'ZyQ'Zy!d'Zy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^y)W'^y!g'^y)j'^y!O'^y!W'^y(v'^y!U'^yQ'^y!d'^y~P#3zO]&cO!V+kO!T%uy#v%uy)W%uy)j%uy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U(Ua!h(Ua~P#3zO!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U#}i!h#}i~P#3zO!U8PO~P&6yO!W8PO~P&6yO!O8PO~P&6yO!O8RO~P&6yO]&cO!V&bO!O#Qy!T#Qy!h#Qy#v#Qy)W#Qy)j#QyQ#Qy!d#Qy(v#Qy~O]&cO!V+kO!OqqQqq!dqq!hqq)Xqq)Wqq~O]&cOQ#Pi!d#Pi!h#Pi!O#Pi~O!V+kO~P*9jOQ#nX!d#nX!h#nX!O#nX~P(DjO!V&bO~P*9jOQ(OX](OXd'qXl'qXr(OXs(OXt(OXu(OXv(OXw(OXx(OXy(OX!V(OX!d(OX!h(OX!{'qX%v'qX(r'qX)S(OX)U(OX)V(OX!O(OX~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ#_i!d#_i!h#_i!O#_i~P#3zO&r#WO&s$wOQ#fi!d#fi!h#fi~O(r-UO)X1YO)j1XOQ#`X!d#`X!h#`X~O!W8WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W8WO~P!(zO!T#qi!x#qi#v#qi(v#qi)j#qi!O#qi!h#qi)W#qiQ#qi!d#qi)X#qi~O]&cO!V+kO~P*?fO]&YO!V&WO&r#WO&s$wO)S&VO)U&ZO)V&ZO~P*?fO!O8YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!h8ZO!O)oX~O!O8]O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ*TX!d*TX!h*TX~P#3zO)X8`OQ*SX!d*SX!h*SX~O)W8bO~O!O$bi!h#{a)W#{a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W8eO)X#|O~P#3zO!O8gO~P!(zO!O8gO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O8gO~O]&cO!V&bO(v8mO~O)W8nO~O]&cO!V2uO!h%Oi)W%Oi!O%Oi~O!W8qO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W8qO)S8sO~P$%pO!W8qO~P!(zO]&cO!V2uO!h(Ya)W(Ya~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W8tO)X#|O~P#3zO)W2iO~P!(zO)W8tO~OP%oO!O8uO(oQO~O!O8uO~O)W8vO~P%%eO#T8yO(x.PO)W8wO~O!h3pO!T)_i~O)X8}O!T'wa!h'wa~O)W9PO)j9RO~P)FwO)W9PO~O)W9PO)j9VO~P(&eOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P)GgO]&cO!V7jO!T!ya!h!ya#v!ya(v!ya)W!ya)j!ya!O!ya~O!W9^O)S9_O~P$%pO!T$WO!h7kO(v4OO)W9PO)j9VO~O!T$WO~P#EfO]&cO!O9bO!V7jO~O]&cO!V7jO!T&aa!h&aa#v&aa(v&aa)W&aa)j&aa!O&aa~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O)W&ba~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W9PO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U&oi!h&oi~P#3zO!V.}O]']i!T']i!X']i!Y']i![']i!^']i!_']i!a']i!b']i!c']i!e']i!f']i!h']i(u']i(w']i(x']i)S']i)T']i)U']i)V']i)W']i)X']i!g']i)j']i!O']i!W']i(v']i!U']iQ']i!d']i~O(r%nO)X9eO~O!h7zO!O*Ya~O!O9gO~P&6yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U(Ua)W#Zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ#_q!d#_q!h#_q!O#_q~P#3zO&r#WO&s$wOQ#fq!d#fq!h#fq~O)j5jOQ#`a!d#`a!h#`a~O]&cO!V+kO!T#qq!x#qq#v#qq(v#qq)j#qq!O#qq!h#qq)W#qqQ#qq!d#qq)X#qq~O!h8ZO!O)oa~O)U5|O]&Vi!T&Vi!V&Vi)S&Vi)T&Vi)V&Vir&Vis&Vit&Viu&Viv&Viw&Vix&Viy&Vi!l&Vi!x&Vi#T&Vi#V&Vi#p&Vi#v&Vi(v&Vi(x&Vi)j&Via&Vid&Vil&Vi{&Vi}&Vi!o&Vi!r&Vi!s&Vi!t&Vi!u&Vi!v&Vi!{&Vi#a&Vi#b&Vi#i&Vi#t&Vi${&Vi%c&Vi%e&Vi%k&Vi%l&Vi%o&Vi%v&Vi&m&Vi&r&Vi&s&Vi(r&Vi)P&Vi)W&Vi!O&Vi!h&ViQ&Vi!d&Vi~O)W9jO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!O$bq!h#{i)W#{i~P#3zO!O9lO~P!(zO!O9lO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O9lO~O]&cO!V&bO(v9oO~O!O9pO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O9pO~O]&cO!V2uO!h%Oq)W%Oq!O%Oq~O!W9tO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W9tO~P!(zO)W6fO~P!(zO)W9uO~O)W9vO~O(x.PO)W9vO~O!h3pO!T)_q~O)X9xO!T'wi!h'wi~O!T$WO!h7kO(v4OO)W9yO)j9{O~O)W9yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W9yO)X#|O~P#3zO)W9yO)j:OO~P)FwO]&cO!V7jO!T!yi!h!yi#v!yi(v!yi)W!yi)j!yi!O!yi~O!W:SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W:SO)S:UO~P$%pO!W:SO~P!(zO]&cO!V7jO!T(da!h(da(v(da)W(da)j(da~O!O:WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O:WO~O!O:]O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O:]O~O]&cO!V2uO!h%Oy)W%Oy!O%Oy~O)W:^O~O)W:_O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W:_O)X#|O~P#3zO!T$WO!h7kO(v4OO)W:_O)j:bO~O]&cO!V7jO!T!yq!h!yq#v!yq(v!yq)W!yq)j!yq!O!yq~O!W:dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W:dO~P!(zO!O:fO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O:fO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W:hO)X#|O~P#3zO)W:hO~O]&cO!V7jO!T!yy!h!yy#v!yy(v!yy)W!yy)j!yy!O!yy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W:lO)X#|O~P#3zO)W:lO~O]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(v$]X(wZX(xZX)SZX)TZX)UZX)VZX)WZX)XZX)jZX~O]%WXlmXpnXp%WX!TnX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gmX!h%WX(u%WX(w%WX(x%WX)S%WX)T%WX)U%WX)V%WX)X%WX)jmX!O%WXQ%WX!d%WX~O)W%WX!W%WX(v%WX!U%WX~P+GrO]nX]%WXdnXlmXpnXp%WXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!V%WX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX)SnX)UnX)VnX!OnX!O%WX!hnX)XnX~O)WnX)jnX~P+JSO]%WXlmXpnXp%WX!V%WX!h%WXQ%WX!d%WX!O%WX~O!T%WX#v%WX)W%WX)j%WX(v%WX~P+LmOQnXQ%WX!TnX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!dnX!d%WX!e%WX!f%WX!gmX!h%WX(u%WX(w%WX(x%WX)S%WX)T%WX)U%WX)V%WX)X%WX)jmX~P+JSO]nX]%WXlmXpnXp%WXrnXsnXtnXunXvnXwnXxnXynX}nX!V%WX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX)SnX)UnX)VnX~O!TnX(vnX)WnX)jnX~P, eOdnX!VnX)W%WX~P, eOlmXpnX)W%WX~Od)oO%Y)pO(y:oO~Od)oO%Y)pO(y:tO~Od)oO%Y)pO(y:pO~Od$RO%Y*TO'[$TO'_$UO(y:oO~Od$RO%Y*TO'[$TO'_$UO(y:qO~Od$RO%Y*TO'[$TO'_$UO(y:sO~O]iXriXsiXtiXuiXviXwiXxiXyiX!OiX!ViX&riX&siX)SiX)UiX)ViXdiX}iX!riX!siX!tiX!uiX!viX!xiX!{iX%viX(riX~P#1jO]ZXlgXpZXpiX!VZX!hZX)WZX)jZX~O!TZX#vZX(vZX~P,'{OlgXpiX)PiX)WZX)jiX~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX!OZX!OiX!hiX)XiX)jiX~O)WZX~P,)VO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!hiX&riX&siX(uZX(wZX(xZX)SZX)SiX)TZX)UZX)UiX)VZX)ViX)XZX)XiX)jZX~OQZXQiX!dZX!diX~P,+pO]iXdiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX~P#1jO]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX~O)WiX~P,0rOdiX}iX!OZX!OiX!riX!siX!tiX!uiX!viX!xiX!{iX%viX(riX)jiX~P,+pO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX(viX)SiX)UiX)ViX)WiX)jiX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PBUOd$RO%Y*TO(y:oO~Od$RO%Y*TO(y:pO~Od$RO%Y*TO(y:vO~Od$RO%Y*TO(y:uO~O]%hOd!POl%bOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!{!dO!|%RO%v$mO(r$xO)S;aO)U;bO)V;bO~O]%hOd!POl%bO!V%kO!{!dO%v$mO(r$xO)S;aO)U;bO)V;bO~Od$RO%Y$SO(y:pO~Od$RO%Y$SO(y:tO~Ol:yO~Ol:xO~O]cXlgXpiX!TcX~Od)oO%Y*TO(y:oO~Od)oO%Y*TO(y:pO~Od)oO%Y*TO(y:qO~Od)oO%Y*TO(y:rO~Od)oO%Y*TO(y:sO~Od)oO%Y*TO(y:uO~Od)oO%Y*TO(y:vO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P,9OO](}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)j(}X~Ol:xO!T(}X(v(}X)W(}X~P,<}O]&wXlmXpnX!T&wX~Od4kO%Y*TO(y;tO~Ol;[O)S;xO)U5aO)V5aO~P(ElOd!POl%bO!{!dO%v$mO(r$xO~O]1SO!V1QO)S0zO)U;yO)V;yOQ#nX!d#nX!h#nX!O#nX~P,?yO)S;YO~Ol;hO~Ol;iO~Ol;jO~Ol;lO~Ol;mO~Ol;nO~Ol;lO!T$WOQ(}X!d(}X!h(}X)X(}X!O(}X)j(}X~P$GQOl;jO!T$WO~P$GQOl;hO!g$YO)j$YO~Ol;jO!g$YO)j$YO~Ol;lO!g$YO)j$YO~Ol;iO!O(}X!h(}X)X(}X)j(}X~P$GQOd/^O%Y*TO(y;tO~Ol;uO~O)S<YO~OV'e'h'i'g(o)Y!R(rST%Z!Y!['jd%[!i'R!f]'f*Z'k(w!^!_'l'm'l~",
                goto: "%5]*ZPPPPPP*[P*_PP.T4iP7j7j:tP:t>OP>i>{?aFXMX!&]!,sP!3m!4b!5VP!5qPPPPPPPP!6[P!7tPP!9V!:oP!:uPPPPPP!:xP!:xPP!:xPPPPPPPPP!;U!>lP!>oPP!?]!@QPPPPP!@UP>l!AgPP>l!Cn!Eo!E}!Gd!ITP!I`P!Io!Io!MP#!`##v#'S#*^!Eo#*hPP!Eo#*o#*u#*h#*h#*xP#*|#+k#+k#+k#+k!ITP#,U#,g#.|P#/bP#0}P#1R#1Z#2O#2Z#4i#4q#4q#1RP#1RP#4x#5OP#5YPP#5u#6d#7U#5uP#7v#8SP#5uP#5uPP#5u#5uP#5uP#5uP#5uP#5uP#5uP#5uP#8V#5Y#8sP#9YP#9o#9o#9o#9o#9|#1RP#:d#?`#?}PPPPPPPP#@uP#ATP#ATP#Aa#Dn#9OPP#@}#EQP#Ee#Ep#Ev#Ev#@}#FlP#1R#1R#1R#1R#1RP!Io#GW#G_#G_#G_#Gc!Ly#Gm!Ly#Gq!E}!E}!E}#Gt#L^!E}>l>l>l$#V!@Q!@Q!@Q!@Q!@Q!@Q!6[!6[!6[$#jP$%V$%e!6[$%kPP!6[$'y$'|#@l$(P:t7j$+V$-Q$.q$0a7jPP7j$2T7jP7j7jP7jP$5Z7jP7jPP7j$5gPPPPPPPPP*[P$8o$8u$;^$=d$=j$>Q$>[$>g$>v$>|$@[$AZ$Ab$Ai$Ao$Aw$BR$BX$Bd$Bj$Bs$B{$CW$C^$Ch$Cn$Cx$DP$D`$Df$DlP$Dr$Dz$ER$Ea$F}$GT$GZ$Gb$GkPPPPPPPP$Gq$GuPPPPP$Nw$'y$Nz%$S%&[P%&i%&lPPPPPPPPPP%&x%'{%(R%(V%)|%+Z%+|%,T%.d%.jPPP%.t%/P%/S%/Y%0a%0d%0n%0x%0|%2Q%2s%2y#@uP%3d%3t%3w%4X%4e%4i%4o%4u$'y$'|$'|%4x%4{P%5V%5YR#cP'`mO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fU%om%p7QQ&m!`Q(j#]d0P)}/|/}0O0R4}5O5P5S8QR7Q3Tb}Oaewx{!g&S*q&v$i[!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0{1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fS%`f0h#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YS%qm!YS&u!h#PQ']!tQ'g!yQ'h!zQ(j#`Q(k#]Q(l#^Q*x%kQ,W&lQ,]&nQ-S'^Q-d'fQ-k'qS.r(Z4XQ/f)gQ0e*mQ2Q,[Q2X,cQ3O-eQ4b.|Q4f/TQ5f0}Q6[2TQ6}3PQ8a6ZQ9e7zR;Z1Q$|#hS!]$y%Q%T%Z&j&k'Q'X'Z'a'c(a(e(h(w(x)R)S)T)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:iQ&p!dQ(g#ZQ(s#bQ)j$T[*s%e*W0k2`2g2{Q,^&oQ/O(fQ/S(kQ/Z(tS/i)i/PQ0r+QS4q/j/kR8O4r'a![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f'a!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ)O#kS+Q%y0sQ/r)sk3}.g3s3w3z3{7c7e7f7h7k9X9Y:RQ)Q#kk3|.g3s3w3z3{7c7e7f7h7k9X9Y:Rl)P#k.g3s3w3z3{7c7e7f7h7k9X9Y:RT+Q%y0s[UOwx!g&S*qW$`[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.o&|;{af{|!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k$|$}%S%]%h%m&Q&W&b&y&|'O'i'j'u'y(`(i)l)r*`*b*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0]0h0y0{1Q1a1b1l1p1z2c2i2j2u4O4R4W4a5Y5a5e5q6_6c6f6g6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f;`;xQ;|1Sd;}&x'P'b,w-]-^-a2f2z2}W<O&f*v1|3iQ<P#O[<Q!t'^'f,[2T6ZT<]%y0s[VOwx!g&S*qW$a[e$e(bQ$p.u!j$q_!f!u!}#V#Z$S$T$l%U&U&Y&c&m'_(g)j)p+[+a+t,X,k,z-Q-o.d1T1X1f1k1m2l3t5j8Z&^$zaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fQ'r#O|'|#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[l(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS-n't-wQ3W-tU;s(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;x[<Q!t'^'f,[2T6ZW<R&f*v1|3id<S&x'P'b,w-]-^-a2f2z2}Q<Z1ST<]%y0s!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!v$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$Q%lgnp|#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ'[!tz(O#R#S#T#U'}(P(U(^+y.W.X._.`.q3[3]3^3p5}6P7[f-Z'`-T-V-Y2p2q2s2v6q6r8pQ1W+aQ1Z+bQ2k,yQ3X-tQ4[.uQ5l1YR8V5m!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!x$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+a+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$S%lgnp|!t#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y|(O#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[Q3X-tR4[.u[WOwx!g&S*qW$b[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;xQ;|1SQ<P#O[<Q!t'^'f,[2T6Z&^<Taf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fd<U&x'P'b,w-]-^-a2f2z2}W<V&f*v1|3iT<]%y0sp$PT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)m$V*U*[/_:w:x:y;h;i;j;k;l;m;n;up$QT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)n$V*U*[/_:w:x:y;h;i;j;k;l;m;n;u^&e}!O$i$j%`%j;Zd&i!U$t%P%l'[(O1W1Z3X4[V/a)O)P3}S%Ye$eQ,T&fQ.{(bQ2m-QQ5y1mQ6V1|Q6m2lR9h8Z#}!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Z#[^O[_`wx!f!g!}#O$S$d$l$s$u&S&U&Y&c&m&r&x'P'b't(Q)p*]*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3t_(U#R#S#T+b3[3]3^#}ZO[wx!g!k#R#S#T%m&S&U&Y&c&m&w&x&y&|'O'P'['b't'x'}(P(Q(U*q*v+[+b,X,h,k,q-P-]-^-a-o-t-w-z._.d.m.q1S1T1f2c2k2z2}3[3]3^3i6c6j8g9l9p:W:]:fQ$]YR0T*OR*Q$]e0P)}/|/}0O0R4}5O5P5S8Q'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fe0P)}/|/}0O0R4}5O5P5S8QR5T0T^(T#R#S#T+b3[3]3^Y.]'}(R(U(V7TU3k.Z.^.qS7X3l4VR9c7s^(S#R#S#T+b3[3]3^[.['}(R(T(U(V7TW3j.Z.].^.qU7W3k3l4VS8z7X7sR:V9cT.k(Q.md]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tQ%tnT1u+}1v!jbOaenpwx{|!g#O$|$}%S%h%w&S't'u(Q*`*b*q-p-w.f.m.o0]0y1S2j5a6g;`;xf-W'`-T-V-Y2p2q2s2v6q6r8pj3x.g3s3w3z3{7c7e7f7h7k9X9Y:Rr;zg$g%d%i&s*Y*t,l,v-_2_;W;X;Y;o;q;vi<^+]0z1O;a;b;p;r;w;y<W<X<Y!O&^y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yz&az%O%W%e&d's*W*_,b-x0Z0[0k0|2`2g2{5V5b6l8iS'{#Q.Xn+l&X*g+f+m+p-j/h0_1R1^4t5W5`5u8XQ2W,a^2t-X2r2x6p6w8o9se7i3y7_7g7o7p9U9W9`:Q:cS+^&U1TY+n&Y&c*v1S3iR5s1f#w!POaegnpwx{|!g#O$g$|$}%S%d%h%i%w&S&s't'u(Q*Y*`*b*q*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y`oOwx!g&S't*q-w#U!Paeg{|#O$g$|$}%S%d%h%i&s'u*Y*`*b*t+],l,v-_0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YU%vnp-pQ*}%wS.e(Q.mT3v.f.oW+r&^+l+s1cV+z&a+{7iQ+x&`U+z&a+{7iQ-w'tT.S'y.U'`![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'W!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fW1r+y.X5}6PR2e,s!WjO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fY%Ve$e(b1p3iQ'S!nS(y#i5YQ,m&xQ,x'PS.O'y.UQ2b,nQ6k2iQ6|2}Q8h6fR9m8e'W![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'ayO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k+y,P,R,n,q,w-]-^-a-g.P.Q.U.X.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q5}6P6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ&`yS't#O-uR1[+cS+^&U1TR5n1[Q1P+]R5g1OR1P+]T+^&U1Tz&[%X&V&Y&Z'k)h*d*f+]+e/m0^0y0z1O1S1j5a5v;x;yQ&]yR1n+x!P&[y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yQ+u&^S+|&a7iS1d+l+sQ1t+{R5r1c!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fS%zo.eS&Oq-rQ&_yQ&q!eQ'e!yQ*p%eU*{%v%{3vS+P%x%}Q+q&]Q,Y&mS,Z&n'gQ,r&{S0X*W,bS0o*|*}Q0q+OQ1o+xS2S,]-fQ5U0ZQ5Z0pQ5{1nQ6Y2RQ6]2WQ7n3yQ9S7_R:P9U[uOwx!g&S*qQ,Y&mQ-v'tQ3Y-tR3_-wxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^S%zo.eS&Oq-rQ*p%eU*{%v%{3vS+P%x%}S0X*W,bS0o*|*}Q0q+OQ5U0ZQ5Z0pQ7n3yQ9S7_R:P9UT,_&q,`]uOwx!g&S*q[uOwx!g&S*qQ,Y&mQ,n&xQ,w'PW-`'b-]-a2zQ-v'tQ3Y-tQ3_-wR6{2}[%fg$g,l,v-_2_R0l*t^$XV!U$a$z%P<R<SQ'S!nS)`#}*vS)v$W*qQ)y$YY*s%e*W0k2g2{Q/O(fS/i)i/PS0a*h4aS0j*r6_Q0r+QQ4Q.gQ4n/cS4q/j/kS4v/n5YQ4{/uQ6`2`U7a3s3y4RQ8O4rQ8k6hY9Q7_7b7c7l7mQ9r8mW9z9O9R9U9VQ:Z9oU:a9{9}:OR:j:bS)v$W*qT4v/n5YZ)t$W)u*q/n5YQ&w!hR'x#PS,g&v'vQ2[,eR6^2ZxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fV$h[&|-^!XkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:f!WhO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR'W!q!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR,n&xQ&y!iQ&{!jQ'O!lR,q&zR,o&xxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fX-`'b-]-a2z[uOwx!g&S*qQ,z'PQ-v'tS.k(Q.mR3_-w[uOwx!g&S*qQ,z'PW-`'b-]-a2zT.k(Q.mg-Z'`-T-V-Y2p2q2s2v6q6r8pylOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fb!OOaewx{!g&S*q&|$j[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ']!tQ-S'^Q-d'fQ2Q,[Q6[2TR8a6Zj$RT$_%b%r:z:{:|;[;];^;_;c;di)o$V*U:w:x:y;h;i;j;k;l;m;nj$RT$_%b%r:z:{:|;[;];^;_;c;dh)o$V*U:w:x:y;h;i;j;k;l;m;nS/^({<[V4k/_/`;u[uOwx!g&S*qQ-v'tR3_-w[uOwx!g&S*qT.k(Q.m'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fR7R3T[uOwx!g&S*qQ-v'tS.k(Q.mR3_-w[pOwx!g&S*qQ%wnS-p't-wT.f(Q.mS%{o.eS*|%v3vR0p*}Q+R%yR5]0sS%zo.eS&Oq-rU*{%v%{3vS+P%x%}S0o*|*}Q0q+OQ5Z0pQ7n3yQ9S7_R:P9U`qOwx!g&S(Q*q.mS%xn-pU%}p.f.oQ+O%wT-r't-wS'z#Q.XR.Y'{T.R'y.US.S'y.UQ8x7UR9w8yT5}1q8_R6P1q#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&}![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&|![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fk3|.g3s3w3z3{7c7e7f7h7k9X9Y:RQ4Q.gS7a3s3yU9Q7_7c7lS9z9O9UR:a9}#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR4].uQ(]#US.v([(^S4^.w.xR7w4_Q.s(ZR7u4X#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Zp$w`$d$s%X&r'`(_(f)i*d-T/k1j5k5v8Uq(}#k%y.g0s3s3w3z3{7c7e7f7h7k9X9Y:RR,U&fR6W1|'X!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$q#rS%T%Z'Q'X'Z'a'c(a(e(h(w(x)R)S)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$]#sS%T%Z'Q'X'Z'a'c(h(w(x)R)V)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$Z#tS%T%Z'Q'X'Z'a'c(h(w(x)R)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$c#wS%T%Z'Q'X'Z'a'c(h(w(x)R)U)V)W)X)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i'X![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ/P(fQ/j)iQ4r/kR9d7y']![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ#eQR(u#eU$|a;`;xb%Ue$e&f(b-Q1m1|2l8ZQ'_!u!Q*^$|%U'_*`*f+h,P0]0^1b2p6q6t7e8p9X9]:R;W;o;p;v;w<WS*`$}%SQ*f%XS+h&W1QQ,P&bQ0]*bQ0^*dQ1b+kQ2p-VS6q2q2sQ6t2uQ7e3wQ8p6rS9X7f7hQ9]7jQ:R9YQ;W%dS;o;X;YS;p<X<YQ;v;qQ;w;rT<W0z;a[[Owx!g&S*ql$c[&|'}+[,X,h,k-P-^-o-z._.d.ql&|!k%m&y'O,q2c6c6j8g9l9p:W:]:f^'}#R#S#T+b3[3]3^`+[&U&Y&c*v1S1T1f3iS,X&m-tQ,h&wU,k&x'P2}S-P'[2kW-^'b-]-a2zS-o't-wQ-z'xQ._(PS.d(Q.mR.q(UQ)|$[R/x)|Q0R)}Q4}/|Q5O/}Q5P0OY5Q0R4}5O5P8QR8Q5SQ*P$]S0U*P0VR0V*QS.`(P._S3n.`7[R7[3pQ3q.aS7Y3o3rU7^3q7Y8{R8{7ZQ.m(QR4S.m!|_O[wx!f!g!}#O$S$l&S&U&Y&c&m&x'P'b't(Q)p*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3tU$r_$u*]U$u`$d&rR*]$sU$}a;`;xd*a$}*b2q6r7f9Y;X;q;r<XQ*b%SQ2q-VQ6r2sQ7f3wQ9Y7hQ;X%dQ;q;YQ;r<YT<X0z;aS+{&a7iR1s+{S*j%Z/pR0c*jQ1U+_R5i1UU+e&V0z;xR1]+eQ+s&^Q1c+lT1i+s1cQ8[5yR9i8[QwOS&Rw&ST&Sx*qQ,`&qR2V,`W)u$W*q/n5YR/t)uU/o)q)v0gR4w/o[*u%e%f*W2`2g2{R0m*uQ,d&uR2Y,dQ-a'bQ2z-]T2|-a2zQ2w-XR6x2wQ-f'gQ2R,]T3Q-f2RS%pm7QR*z%pdnOwx!g&S't(Q*q-w.mR%unQ0t+RR5^0tQ.U'yR3f.UQ1v+}R6Q1vU*n%`*x;ZR0f*nS1g+n0nR5t1gQ7l3yQ9O7_U9a7l9O9}R9}9U$O!SO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o.u1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR&g!SQ4Y.sR7v4YQ1},UR6X1}S/d)_)`R4o/dW(o#a(j(k/SR/W(oQ7{4fR9f7{T)a#}*v!USO[wx!g!k%m&S&y&|'O'b,q-]-^-a2c2z6c6j8g9l9p:W:]:fj$ya{$k%]+j,R1a1z5q6v8s9_:UY%Te$e(b1p3iY%Zf$f(i)l*lQ&j!WQ&k!XQ'Q!nQ'X!rQ'Z!sQ'a!vQ'c!xQ(a#XQ(e#YS(h#[+YQ(w#gQ(x#iQ)R#lQ)S#qQ)T#rQ)U#sQ)V#tQ)W#uQ)X#vQ)Y#wQ)Z#xQ)[#yQ)]#zQ)^#{S)_#}*vQ)k$UQ)q$WQ)x$YQ+X&QS+g&W1QQ,O&bQ,S&fQ,j&xQ,u'PQ-h'iQ-i'jS-|'y.UQ.y(`S/p)r0hS0`*h4aQ0b*iQ0g*qQ0i*rQ0w+WS1`+h+kQ1y,PQ2a,nS2h,w6{Q3R-gQ3c.PQ3d.QQ4c.}Q4d/QQ4j/[Q4m/cQ4s/lQ4u/nQ4y/sQ4z/uQ5d0{Q5p1bQ5w1lQ6U1|S6e2f8tQ6i2iQ6s2uQ6z2}Q7q4OQ7r4RQ7t4WQ8S5YQ8T5eQ8c6_Q8f6fQ8j6hQ8r6tS9T7b7mQ9[7jQ9k8eQ9q8mS9|9R9VQ:T9]Q:Y9oS:`9{:OR:i:bR,V&fd]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3t#r${ae!u$e$|$}%S%U%X%d&W&b&f'_(b*`*b*d*f+h+k,P-Q-V0]0^1Q1b1m1|2l2p2q2s2u3w6q6r6t7e7f7h7j8Z8p9X9Y9]:R;W;X;Y;`;a;o;p;q;r;v;w<W<X<YQ%tnS+d&V+eW+r&^+l+s1cU+z&a+{7iQ1k+tT5c0z;x``Owx!g&S't*q-wS$d[-oQ$s_b%Xe$e&f(b-Q1m1|2l8Z!h&r!f!}#O$S$l&U&Y&c&m&x'P'b(Q)p*v+[,X,k,w,z-]-^-a-t.d.m.o1S1T1f2f2z2}3i3tQ'`!uS(_#V+aQ(f#ZS)i$T(gQ*d%UQ-T'_Q/k)jQ1j+tQ5k1XQ5v1kR8U5jS(W#R3]S(X#S3^V(Y#T+b3[R$^Ye0Q)}/|/}0O0R4}5O5P5S8QW(R#R#S#T+bQ([#US.Z'}(US.a(P._Q.x(^W1r+y.X5}6PQ3Z-tQ3h.WQ3o.`Q4V.qU7T3[3]3^Q7]3pR8|7[Q.b(PR3m._T.l(Q.mdgOwx!g&S&m't*q-t-wU$g[,X-oQ&s!fQ'k!}Q'u#OQ)h$SQ*Y$l`+]&U&Y&c*v1S1T1f3iQ,l&xQ,v'PY-_'b-]-a2z2}S.g(Q.mQ/m)pQ0y+[S2_,k-^S2j,w,zS3s.d.oQ6g2fR7c3td]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tR%tnQ3y.gQ7_3sQ7g3wQ7o3zQ7p3{Q9U7cU9W7e7f7hQ9`7kS:Q9X9YR:c:RZ+o&Y&c*v1S3ipzOnpwx!g%w&S't(Q*q-p-w.f.m.o[%Oa%d0z;`;a;xU%We%h1SQ%eg^&d{|%i1O5a;b;yQ's#OQ*W$gb*_$|$}%S;W;X;Y<W<X<YQ,b&sQ-x'uQ0Z*Y[0[*`*b;o;p;q;rQ0k*tQ0|+]Q2`,lQ2g,vS2{-_2_U5V0];v;wQ5b0yQ6l2jR8i6gQ+}&aR9Z7iS1q+y.XQ8^5}R8_6P[%^f$f(i)l)r0hR0d*lR+`&UQ+_&UR5h1TS&Xy+xQ*g%XU+f&V0z;xS+m&Y1SW+p&Z1O5a;yQ-j'kQ/h)hS0_*d*fQ1R+]Q1^+eQ4t/mQ5W0^Q5`0yQ5u1jR8X5vR5z1mYvOwx&S*qR&t!gW%gg,l,v-_T*X$g2_T)w$W*q[uOwx!g&S*qQ&}!kQ*y%mQ,p&yQ,t'OQ2d,qQ6b2cQ8d6cQ8l6jQ9n8gQ:X9lQ:[9pQ:e:WQ:g:]R:k:fxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^X-`'b-]-a2zQ-['`R2o-TS-X'`-TQ2r-VQ2x-YU6p2p2q2sQ6w2vS8o6q6rR9s8p[rOwx!g&S*qS-q't-wT.h(Q.mR+S%y[sOwx!g&S*qS-s't-wT.i(Q.m[tOwx!g&S*qT.j(Q.mT.T'y.UX%af%k0h1QQ.w([R4_.xR.t(ZR(d#XQ(r#aS/R(j(kR4e/SR/V(lR4g/T",
                nodeNames: "\u26a0 RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ArgumentList ( ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr constinit consteval StructSpecifier struct MsDeclspecModifier __declspec ) Attribute AttributeName Identifier AttributeArgs { } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp , Number CharLiteral AttributeArgs VirtualSpecifier BaseClassClause Access virtual FieldDeclarationList FieldDeclaration extern static register inline thread_local AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept RequiresClause requires True False ParenthesizedExpression CommaExpression LambdaExpression LambdaCaptureSpecifier TemplateParameterList OptionalParameterDeclaration TypeParameterDeclaration typename class VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration template AbstractFunctionDeclarator AbstractPointerDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ThrowSpecifier throw TrailingReturnType CompoundStatement FunctionDefinition MsCallModifier TryStatement try CatchClause catch LinkageSpecification Declaration InitDeclarator InitializerList InitializerPair SubscriptDesignator FieldDesignator ExportDeclaration export ImportDeclaration import ModuleName PartitionName HeaderName CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto CoReturnStatement co_return CoYieldStatement co_yield AttributeStatement ForRangeLoop AliasDeclaration using TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ThrowStatement NamespaceDefinition namespace ScopedIdentifier Identifier OperatorName operator ArithOp BitOp CompareOp LogicOp new delete co_await ConceptDefinition concept UsingDeclaration enum StaticAssertDeclaration static_assert ConcatenatedString TemplateDeclaration FriendDeclaration friend union FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause FunctionDefinition OperatorCast operator TemplateInstantiation FunctionDefinition FunctionDefinition Declaration ModuleDeclaration module RequiresExpression RequirementList SimpleRequirement TypeRequirement CompoundRequirement ReturnTypeRequirement ConstraintConjuction LogicOp ConstraintDisjunction LogicOp ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator TemplateFunction OperatorName StructuredBindingDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration AccessSpecifier UnionSpecifier ClassSpecifier EnumSpecifier SizedTypeSpecifier TypeSize EnumeratorList Enumerator DependentType Decltype decltype auto PlaceholderTypeSpecifier ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CoAwaitExpression CompoundLiteralExpression NULL NewExpression new NewDeclarator DeleteExpression delete ParameterPackExpansion nullptr this UserDefinedLiteral ParamPack #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
                maxTerm: 425,
                nodeProps: [["group", -35, 1, 8, 11, 14, 15, 16, 18, 71, 72, 100, 101, 102, 104, 191, 208, 229, 242, 243, 270, 271, 272, 277, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, "Expression", -13, 17, 24, 25, 26, 42, 255, 256, 257, 258, 262, 263, 265, 266, "Type", -19, 126, 129, 147, 150, 152, 153, 158, 160, 163, 164, 166, 168, 170, 172, 174, 176, 178, 179, 188, "Statement"], ["isolate", -4, 4, 5, 8, 10, ""]],
                propSources: [O],
                skippedNodes: [0, 3, 4, 5, 6, 7, 10, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 347, 348],
                repeatNodeCount: 41,
                tokenData: "&*r7ZR!UOX$eXY({YZ.gZ]$e]^+P^p$epq({qr.}rs0}st2ktu$euv!7dvw!9bwx!;exy!<Yyz!=Tz{!>O{|!?R|}!AV}!O!BQ!O!P!DX!P!Q#+y!Q!R#Az!R![$(x![!]$Ag!]!^$Cc!^!_$D^!_!`%1W!`!a%2X!a!b%5_!b!c$e!c!n%6Y!n!o%7q!o!w%6Y!w!x%7q!x!}%6Y!}#O%:n#O#P%<g#P#Q%Kz#Q#R%Ms#R#S%6Y#S#T$e#T#i%6Y#i#j%Nv#j#o%6Y#o#p&!e#p#q&#`#q#r&%f#r#s&&a#s;'S$e;'S;=`(u<%lO$e&t$nY)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&r%eW)ZW'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^&j&SU'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j&kX'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j']V'f&jOY%}YZ%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j'uP;=`<%l%}&r'{P;=`<%l%^&l(VW(pQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O&l(rP;=`<%l(O&t(xP;=`<%l$e7Z)Y`)ZW(pQ(n.o'f&j*Z)`OX$eXY({YZ*[Z]$e]^+P^p$epq({qr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e.o*aT(n.oXY*[YZ*[]^*[pq*[#O#P*p.o*sQYZ*[]^*y.o*|PYZ*[4e+[`)ZW(pQ(n.o'f&jOX$eXY+PYZ*[Z]$e]^+P^p$epq+Pqr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e4Z,cX'f&jOY%}YZ-OZ]%}]^-{^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4Z-V[(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4Z.QV'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P.nT*W)`(n.oXY*[YZ*[]^*[pq*[#O#P*p3o/[[%^!b'QP)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o0_Y%]!b!a,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e6e1YY)ZW(qQ(o/]'f&jOY%^Zr%^rs1xsw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^(U2RW)x!b)ZW'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^4e2tf)ZW(pQ'f&jOX$eXY2kZp$epq2kqr$ers%^sw$ewx(Ox!c$e!c!}4Y!}#O$e#O#P&f#P#T$e#T#W4Y#W#X5m#X#Y>u#Y#]4Y#]#^NZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e4eb)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e5xd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y7W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e7cd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z8q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e8|d)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^:[#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e:gd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#b4Y#b#c;u#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e<Qd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y=`#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e=mb)ZW(pQ'e.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e?Qf)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a@f#a#b4Y#b#cHV#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e@qf)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^BV#^#g4Y#g#hEV#h#o4Y#o;'S$e;'S;=`(u<%lO$e4eBbd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZCp#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eC}b)ZW(pQ'f&j'l.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eEbd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#YFp#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4eF}b)ZW(pQ'j.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eHbd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#XIp#X#o4Y#o;'S$e;'S;=`(u<%lO$e4eI{d)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^KZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4eKfd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZLt#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eMRb)ZW(pQ'f&j'k.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eNff)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z! z#Z#b4Y#b#c!.[#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!!Xf)ZW(pQ'g.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!#m#X#b4Y#b#c!(W#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!#xd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!%W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!%cd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!&q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!'Ob)ZW(pQ'h.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!(cd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!)q#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!)|d)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!+[#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!+gd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!,u#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!-Sb)ZW(pQ'i.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!.gd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#V4Y#V#W!/u#W#o4Y#o;'S$e;'S;=`(u<%lO$e4e!0Qd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a!1`#a#o4Y#o;'S$e;'S;=`(u<%lO$e4e!1kd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#i4Y#i#j!2y#j#o4Y#o;'S$e;'S;=`(u<%lO$e4e!3Ud)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!4d#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!4od)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!5}#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!6[b)ZW(pQV.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e3o!7q[)ZW(pQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!8rY!g-y)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!9o])V,g)ZW(pQ%[!b'f&jOY$eZr$ers%^sv$evw!:hwx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!:uY)U,g%^!b)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2X!;pW)[S(pQ)Y,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O6i!<eY)ZW(pQ]6_'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V!=`Y!Oa)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!>][)S,g)ZW(pQ%Z!b'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!?`^)ZW(pQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|!@[|!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!@gY)ZW!X-y(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!AbY!h,k)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!B__)ZW(pQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox}$e}!O!@[!O!_$e!_!`!8g!`!a!C^!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!CiY(x-y)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Dd^)ZW(pQ'f&j(w,gOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!E`!P!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Ei[)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!F_!P#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!FjY)X,k)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]!Gen)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx!Icx!Q$e!Q![!GY![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T!IjY(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![!JY![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T!Jcn(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Icx!Q(O!Q![!JY![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ljl(pQ!i,g'f&jOY(OZr(Ors%}s{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ni^(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![# e![!c(O!c!i# e!i#O(O#O#P&f#P#T(O#T#Z# e#Z;'S(O;'S;=`(o<%lO(O2T# nj(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Nbx!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T##id(pQ!i,g'f&jOY(OZr(Ors%}s!h(O!h!i##`!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#Y(O#Y#Z##`#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]#%Sn)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#'Z`)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![#(]![!c$e!c!i#(]!i#O$e#O#P&f#P#T$e#T#Z#(]#Z;'S$e;'S;=`(u<%lO$e2]#(hj)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx!Nbx!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#*ef)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!h$e!h!i#*Y!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#Y$e#Y#Z#*Y#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e7Z#,W`)ZW(pQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Oxz$ez{#-Y{!P$e!P!Q#:s!Q!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#-c])ZW(pQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y1e#._TOz#.[z{#.n{;'S#.[;'S;=`#/]<%lO#.[1e#.qVOz#.[z{#.n{!P#.[!P!Q#/W!Q;'S#.[;'S;=`#/]<%lO#.[1e#/]OT1e1e#/`P;=`<%l#.[7X#/jZ)ZW'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7P#0bX'f&jOY#0]YZ#.[Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1SZ'f&jOY#0]YZ#.[Zz#0]z{#0}{!P#0]!P!Q#1u!Q#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1|UT1e'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P#2eZ'f&jOY#0]YZ#0]Z]#0]]^#3W^z#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3]X'f&jOY#0]YZ#0]Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3{P;=`<%l#0]7X#4V])ZW'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{!P#/c!P!Q#5O!Q#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7X#5XW)ZWT1e'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^7X#5tP;=`<%l#/c7R#6OZ(pQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#6x](pQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{!P#5w!P!Q#7q!Q#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#7zW(pQT1e'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O7R#8gP;=`<%l#5w7Z#8s_)ZW(pQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{!P#-Y!P!Q#9r!Q#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y7Z#9}Y)ZW(pQT1e'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#:pP;=`<%l#-Y7Z#;OY)ZW(pQS1e'f&jOY#:sZr#:srs#;nsw#:swx#@{x#O#:s#O#P#<z#P;'S#:s;'S;=`#At<%lO#:s7X#;wW)ZWS1e'f&jOY#;nZw#;nwx#<ax#O#;n#O#P#<z#P;'S#;n;'S;=`#@u<%lO#;n7P#<hUS1e'f&jOY#<aZ#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#=RXS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P;'S#<a;'S;=`#>[<%lO#<a7P#=uVS1e'f&jOY#<aYZ%}Z#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#>_P;=`<%l#<a7P#>i]S1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c#f#<a#f#g#?b#g;'S#<a;'S;=`#>[<%lO#<a7P#?iUS1e'f&jOY#<aZ#O#<a#O#P#?{#P;'S#<a;'S;=`#>[<%lO#<a7P#@SZS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c;'S#<a;'S;=`#>[<%lO#<a7X#@xP;=`<%l#;n7R#AUW(pQS1e'f&jOY#@{Zr#@{rs#<as#O#@{#O#P#<z#P;'S#@{;'S;=`#An<%lO#@{7R#AqP;=`<%l#@{7Z#AwP;=`<%l#:s2]#BVt)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$+X#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$=`#m;'S$e;'S;=`(u<%lO$e2T#DnY(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![#E^![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T#Egp(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx#Dgx!O(O!O!P#Gk!P!Q(O!Q![#E^![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#Gtn(pQ!i,g'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#I{p(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#LW^(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!i#Ir!i#O(O#O#P&f#P#T(O#T#Z#Ir#Z;'S(O;'S;=`(o<%lO(O2T#M]t(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$ xp)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$$Xp)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$&ht)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$)Tp)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$+b_)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$-`!R![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$,j[)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$-kt)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$/{#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e2]$0U[)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$1T`)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$2br)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T$4s^(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![$5o![!c(O!c!i$5o!i#O(O#O#P&f#P#T(O#T#Z$5o#Z;'S(O;'S;=`(o<%lO(O2T$5xr(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx!O(O!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T$8]u(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx{(O{|!Nb|}(O}!O!Nb!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$:{u)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx{$e{|#'Q|}$e}!O#'Q!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$=ic)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$>t!R![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$?Pv)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#U$2V#U#V$2V#V#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e4e$Ar[(v-X)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox![$e![!]$Bh!]#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3s$BsYl-})ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$CnY)W,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7V$Dk_p,g%]!b)ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!^$Ej!^!_%+w!_!`%.U!`!a%0]!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej*[$Es])ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ejp$FoTO!`$Fl!`!a$GO!a;'S$Fl;'S;=`$GT<%lO$Flp$GTO$Wpp$GWP;=`<%l$Fl*Y$GbZ)ZW'f&jOY$GZYZ$FlZw$GZwx$HTx!`$GZ!`!a%(U!a#O$GZ#O#P$Ib#P;'S$GZ;'S;=`%(y<%lO$GZ*Q$HYX'f&jOY$HTYZ$FlZ!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q$IOU$WpY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}*Q$Ig['f&jOY$HTYZ$HTZ]$HT]^$J]^!`$HT!`!a$NO!a#O$HT#O#P%&n#P;'S$HT;'S;=`%'f;=`<%l%$z<%lO$HT*Q$JbX'f&jOY$HTYZ$J}Z!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT'[$KSX'f&jOY$J}YZ$FlZ!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$KvU$Wp'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}'[$L_Z'f&jOY$J}YZ$J}Z]$J}]^$MQ^!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MVX'f&jOY$J}YZ$J}Z!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MuP;=`<%l$J}*Q$M{P;=`<%l$HT*Q$NVW$Wp'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`$NtW'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`% eUY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%})`% |Y'f&jOY$NoYZ$NoZ]$No]^%!l^#O$No#O#P%#d#P;'S$No;'S;=`%$[;=`<%l%$z<%lO$No)`%!qX'f&jOY$NoYZ%}Z!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%#aP;=`<%l$No)`%#iZ'f&jOY$NoYZ%}Z]$No]^%!l^!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%$_XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$No<%lO%$z#t%$}WOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h<%lO%$z#t%%lOY#t#t%%oRO;'S%$z;'S;=`%%x;=`O%$z#t%%{XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l%$z<%lO%$z#t%&kP;=`<%l%$z*Q%&sZ'f&jOY$HTYZ$J}Z]$HT]^$J]^!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q%'iXOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$HT<%lO%$z*Y%(aW$WpY#t)ZW'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^*Y%(|P;=`<%l$GZ*S%)WZ(pQ'f&jOY%)PYZ$FlZr%)Prs$HTs!`%)P!`!a%)y!a#O%)P#O#P$Ib#P;'S%)P;'S;=`%*n<%lO%)P*S%*UW$WpY#t(pQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O*S%*qP;=`<%l%)P*[%+RY$WpY#t)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e*[%+tP;=`<%l$Ej7V%,U^)ZW(pQ%[!b!f,g'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!_$Ej!_!`%-Q!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%-]]!g-y)ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%.c]%]!b!b,g)ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%/[!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%/mY%]!b!b,g$WpY#t)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e)j%0hYY#t)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%1c[)j!c)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%2f]%]!b)ZW(pQ!d,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`%3_!`!a%4[!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%3lY%]!b!b,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%4i[)ZW(pQ%[!b!f,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%5jY(uP)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z%6ib)ZW(yS(pQ!R,f(r%y'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e7Z%8Qb)ZW(yS(pQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e5P%9cW)ZW(o/]'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^2T%:UW(pQ)Y,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O3o%:yZ!V-y)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!}$e!}#O%;l#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%;wY)PP)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e4e%<la'f&jOY%=qYZ%>[Z]%=q]^%?Z^!Q%=q!Q![%?w![!w%=q!w!x%AX!x#O%=q#O#P%H_#P#i%=q#i#j%Ds#j#l%=q#l#m%IR#m;'S%=q;'S;=`%Kt<%lO%=q&t%=xUXY'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4e%>e[XY(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4e%?bVXY'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@OWXY'f&jOY%}Z!Q%}!Q![%@h![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@oWXY'f&jOY%}Z!Q%}!Q![%=q![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%A^['f&jOY%}Z!Q%}!Q![%BS![!c%}!c!i%BS!i#O%}#O#P&f#P#T%}#T#Z%BS#Z;'S%};'S;=`'r<%lO%}&t%BX['f&jOY%}Z!Q%}!Q![%B}![!c%}!c!i%B}!i#O%}#O#P&f#P#T%}#T#Z%B}#Z;'S%};'S;=`'r<%lO%}&t%CS['f&jOY%}Z!Q%}!Q![%Cx![!c%}!c!i%Cx!i#O%}#O#P&f#P#T%}#T#Z%Cx#Z;'S%};'S;=`'r<%lO%}&t%C}['f&jOY%}Z!Q%}!Q![%Ds![!c%}!c!i%Ds!i#O%}#O#P&f#P#T%}#T#Z%Ds#Z;'S%};'S;=`'r<%lO%}&t%Dx['f&jOY%}Z!Q%}!Q![%En![!c%}!c!i%En!i#O%}#O#P&f#P#T%}#T#Z%En#Z;'S%};'S;=`'r<%lO%}&t%Es['f&jOY%}Z!Q%}!Q![%Fi![!c%}!c!i%Fi!i#O%}#O#P&f#P#T%}#T#Z%Fi#Z;'S%};'S;=`'r<%lO%}&t%Fn['f&jOY%}Z!Q%}!Q![%Gd![!c%}!c!i%Gd!i#O%}#O#P&f#P#T%}#T#Z%Gd#Z;'S%};'S;=`'r<%lO%}&t%Gi['f&jOY%}Z!Q%}!Q![%=q![!c%}!c!i%=q!i#O%}#O#P&f#P#T%}#T#Z%=q#Z;'S%};'S;=`'r<%lO%}&t%HfXXY'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%IW['f&jOY%}Z!Q%}!Q![%I|![!c%}!c!i%I|!i#O%}#O#P&f#P#T%}#T#Z%I|#Z;'S%};'S;=`'r<%lO%}&t%JR['f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KO[XY'f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KwP;=`<%l%=q2a%LVZ!W,V)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P#Q%Lx#Q;'S$e;'S;=`(u<%lO$e'Y%MTY)]d)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%NQ[)ZW(pQ%[!b'f&j!_,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z& Vd)ZW(yS(pQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q!Y%6Y!Y!Z%7q!Z![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e2]&!pY!T,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o&#m^)ZW(pQ%[!b'f&j!^,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P#p$e#p#q&$i#q;'S$e;'S;=`(u<%lO$e3o&$vY)T,g%^!b)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V&%qY!Ua)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e(]&&nc)ZW(pQ%[!b'RP'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&(Sc)ZW(pQ'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&)jb)ZW(pQdT'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![&)_![!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e",
                tokenizers: [a, o, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
                topRules: {
                    Program: [0, 307]
                },
                dynamicPrecedences: {
                    87: 1,
                    94: 1,
                    119: 1,
                    184: 1,
                    187: -10,
                    240: -10,
                    241: 1,
                    244: -1,
                    246: -10,
                    247: 1,
                    262: -1,
                    267: 2,
                    268: 2,
                    306: -10,
                    365: 3,
                    417: 1,
                    418: 3,
                    419: 1,
                    420: 1
                },
                specialized: [{
                    term: 356,
                    get: e => s[e] || -1
                }, {
                    term: 32,
                    get: e => l[e] || -1
                }, {
                    term: 66,
                    get: e => c[e] || -1
                }, {
                    term: 363,
                    get: e => u[e] || -1
                }],
                tokenPrec: 24891
            });
        var h = n(25956);
        const f = h.bj.define({
            name: "cpp",
            parser: d.configure({
                props: [h.Oh.add({
                    IfStatement: (0,
                        h.mz)({
                            except: /^\s*({|else\b)/
                        }),
                    TryStatement: (0,
                        h.mz)({
                            except: /^\s*({|catch)\b/
                        }),
                    LabeledStatement: h._Y,
                    CaseStatement: e => e.baseIndent + e.unit,
                    BlockComment: () => null,
                    CompoundStatement: (0,
                        h.Ay)({
                            closing: "}"
                        }),
                    Statement: (0,
                        h.mz)({
                            except: /^{/
                        })
                }), h.b_.add({
                    "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": h.yd,
                    BlockComment: e => ({
                        from: e.from + 2,
                        to: e.to - 2
                    })
                })]
            }),
            languageData: {
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                indentOnInput: /^\s*(?:case |default:|\{|\})$/,
                closeBrackets: {
                    stringPrefixes: ["L", "u", "U", "u8", "LR", "UR", "uR", "u8R", "R"]
                }
            }
        });
        function p() {
            return new h.Yy(f)
        }
    }
    ,
    72395: (e, t, n) => {
        n.r(t),
            n.d(t, {
                css: () => R,
                cssCompletionSource: () => T,
                cssLanguage: () => z,
                defineCSSCompletionSource: () => _
            });
        var i = n(5178)
            , r = n(14462);
        const a = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
        function o(e) {
            return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e >= 161
        }
        function O(e) {
            return e >= 48 && e <= 57
        }
        const s = new i.Lu(((e, t) => {
            for (let n = !1, i = 0, r = 0; ; r++) {
                let { next: a } = e;
                if (o(a) || 45 == a || 95 == a || n && O(a))
                    !n && (45 != a || r > 0) && (n = !0),
                        i === r && 45 == a && i++,
                        e.advance();
                else {
                    if (92 != a || 10 == e.peek(1)) {
                        n && e.acceptToken(40 == a ? 100 : 2 == i && t.canShift(2) ? 2 : 101);
                        break
                    }
                    e.advance(),
                        e.next > -1 && e.advance(),
                        n = !0
                }
            }
        }
        ))
            , l = new i.Lu((e => {
                if (a.includes(e.peek(-1))) {
                    let { next: t } = e;
                    (o(t) || 95 == t || 35 == t || 46 == t || 91 == t || 58 == t && o(e.peek(1)) || 45 == t || 38 == t) && e.acceptToken(99)
                }
            }
            ))
            , c = new i.Lu((e => {
                if (!a.includes(e.peek(-1))) {
                    let { next: t } = e;
                    if (37 == t && (e.advance(),
                        e.acceptToken(1)),
                        o(t)) {
                        do {
                            e.advance()
                        } while (o(e.next) || O(e.next));
                        e.acceptToken(1)
                    }
                }
            }
            ))
            , u = (0,
                r.pn)({
                    "AtKeyword import charset namespace keyframes media supports": r._A.definitionKeyword,
                    "from to selector": r._A.keyword,
                    NamespaceName: r._A.namespace,
                    KeyframeName: r._A.labelName,
                    KeyframeRangeName: r._A.operatorKeyword,
                    TagName: r._A.tagName,
                    ClassName: r._A.className,
                    PseudoClassName: r._A.constant(r._A.className),
                    IdName: r._A.labelName,
                    "FeatureName PropertyName": r._A.propertyName,
                    AttributeName: r._A.attributeName,
                    NumberLiteral: r._A.number,
                    KeywordQuery: r._A.keyword,
                    UnaryQueryOp: r._A.operatorKeyword,
                    "CallTag ValueName": r._A.atom,
                    VariableName: r._A.variableName,
                    Callee: r._A.operatorKeyword,
                    Unit: r._A.unit,
                    "UniversalSelector NestingSelector": r._A.definitionOperator,
                    MatchOp: r._A.compareOperator,
                    "ChildOp SiblingOp, LogicOp": r._A.logicOperator,
                    BinOp: r._A.arithmeticOperator,
                    Important: r._A.modifier,
                    Comment: r._A.blockComment,
                    ColorLiteral: r._A.color,
                    "ParenthesizedContent StringLiteral": r._A.string,
                    ":": r._A.punctuation,
                    "PseudoOp #": r._A.derefOperator,
                    "; ,": r._A.separator,
                    "( )": r._A.paren,
                    "[ ]": r._A.squareBracket,
                    "{ }": r._A.brace
                })
            , d = {
                __proto__: null,
                lang: 32,
                "nth-child": 32,
                "nth-last-child": 32,
                "nth-of-type": 32,
                "nth-last-of-type": 32,
                dir: 32,
                "host-context": 32,
                url: 60,
                "url-prefix": 60,
                domain: 60,
                regexp: 60,
                selector: 138
            }
            , h = {
                __proto__: null,
                "@import": 118,
                "@media": 142,
                "@charset": 146,
                "@namespace": 150,
                "@keyframes": 156,
                "@supports": 168
            }
            , f = {
                __proto__: null,
                not: 132,
                only: 132
            }
            , p = i.U1.deserialize({
                version: 14,
                states: ":^QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO${QdO,59}O-kQ[O'#E^O-xQWO,5;_O-xQWO,5;_POOO'#EV'#EVP.TO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.zQXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/XQ`O1G/^O/rQXO1G/aO0YQXO1G/cO0pQXO1G/dO1WQWO,59|O1]Q[O'#DSO1dQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1kQpO,59]OOQS,59_,59_O${QdO,59aO1sQWO1G/mOOQS,59c,59cO1xQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2QQ[O,59jOOQS,59j,59jO2YQWO'#DjO2eQWO,5:VO2jQWO,5:]O&`Q[O,5:XO&`Q[O'#E_O2rQWO,5;`O2}QWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3`QWO1G0OO3eQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO3pQtO1G/iOOQO,5:x,5:xO4WQ[O,5:xOOQO-E8[-E8[O4eQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO4pQXO'#ErO4wQWO,59nO4|QtO'#EXO5tQdO'#EoO6OQWO,59ZO6TQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XO6]QWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6bQWO,5:yOOQO-E8]-E8]O6pQXO1G/xOOQS7+%j7+%jO6wQYO'#CsOOQO'#EQ'#EQO7SQ`O'#EPOOQO'#EP'#EPO7_QWO'#E`O7gQdO,5:jOOQS,5:j,5:jO7rQtO'#E]O${QdO'#E]O8sQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9WQpO<<HdO9`QWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9hQWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO9pQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3hQdO'#EaO7_QWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO9wQtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO:xQdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f",
                stateData: ";[~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#wO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.`Op#yO|#zO~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/aOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/aOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/aO!S#{O~Oa#fP~P(aOa#cP~P${Oa$SOj#XO~O!Y$UO~Oh$VOo$VO~Op$XO#X#]O~O]!`Xa!^X!b!^X~O]$YO~Oa$ZO!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$`O~O!S$gO#X$bO#e$aO~Oj#XOt$iO!X$kO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$oO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$qOa#cX~P${Oa$sO~Oj#XOp$tO~Oa$uO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$wO~P.`OP#WOtgX!TgX~O#e$aOt!sX!T!sX~Ot$yO!TwO~O!S$}O#X$bO#e$aO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$iO!X%QO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%RO~OtoOa#fa~Ot$qOa#ca~Oa%UO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~",
                goto: "-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#skYOPdhotuvw!n#R#h#skSOPdhotuvw!n#R#h#sQmTR!tnQ{VR!xqQ!x}Q#Z!XR#x!zq![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SU$d#m$f$yR$x$cq!XZ]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#x!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ${$eR%X$zSgPwQ!phQ#r!nR$l#sZfPhw!n#sa!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$e#m$fR%V$yV$c#m$f$yQ!rjR#v!rQdOShPwU!ldh#sR#s!nQ$P#SU$p$P$v%SQ$v$YR%S$qQ#_!ZR$W#_Q$r$PR%T$rQpUS!vp$nR$n#|Q$j#qR%P$jQ!ogS#t!o#uR#u!pQ#f!_R$^#fQ$f#mR$|$fQ$z$eR%W$z_cOPdhw!n#s^UOPdhw!n#sQ!uoQ!}tQ#OuQ#PvQ#|#RR$_#hR$Q#SQ!VZQ!d]Q#V!TQ#q!m[$O#S$P$Y$q$v%SQ$R#UQ$T#XS$h#q$jQ$m#zR%O$iR#}#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$[#dR$]#e",
                nodeNames: "\u26a0 Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
                maxTerm: 117,
                nodeProps: [["isolate", -2, 3, 24, ""], ["openedBy", 17, "(", 32, "[", 50, "{"], ["closedBy", 18, ")", 33, "]", 51, "}"]],
                propSources: [u],
                skippedNodes: [0, 3, 87],
                repeatNodeCount: 11,
                tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
                tokenizers: [l, c, s, 1, 2, 3, 4, new i.uC("m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~", 28, 105)],
                topRules: {
                    StyleSheet: [0, 4],
                    Styles: [1, 86]
                },
                specialized: [{
                    term: 100,
                    get: e => d[e] || -1
                }, {
                    term: 58,
                    get: e => h[e] || -1
                }, {
                    term: 101,
                    get: e => f[e] || -1
                }],
                tokenPrec: 1200
            });
        var m = n(25956)
            , g = n(45615);
        let Q = null;
        function $() {
            if (!Q && "object" == typeof document && document.body) {
                let { style: e } = document.body
                    , t = []
                    , n = new Set;
                for (let i in e)
                    "cssText" != i && "cssFloat" != i && "string" == typeof e[i] && (/[A-Z]/.test(i) && (i = i.replace(/[A-Z]/g, (e => "-" + e.toLowerCase()))),
                        n.has(i) || (t.push(i),
                            n.add(i)));
                Q = t.sort().map((e => ({
                    type: "property",
                    label: e
                })))
            }
            return Q || []
        }
        const b = ["active", "after", "any-link", "autofill", "backdrop", "before", "checked", "cue", "default", "defined", "disabled", "empty", "enabled", "file-selector-button", "first", "first-child", "first-letter", "first-line", "first-of-type", "focus", "focus-visible", "focus-within", "fullscreen", "has", "host", "host-context", "hover", "in-range", "indeterminate", "invalid", "is", "lang", "last-child", "last-of-type", "left", "link", "marker", "modal", "not", "nth-child", "nth-last-child", "nth-last-of-type", "nth-of-type", "only-child", "only-of-type", "optional", "out-of-range", "part", "placeholder", "placeholder-shown", "read-only", "read-write", "required", "right", "root", "scope", "selection", "slotted", "target", "target-text", "valid", "visited", "where"].map((e => ({
            type: "class",
            label: e
        })))
            , y = ["above", "absolute", "activeborder", "additive", "activecaption", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column", "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below", "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content", "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in", "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from", "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide", "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all", "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation", "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic", "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position", "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start", "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks", "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top", "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin", "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"].map((e => ({
                type: "keyword",
                label: e
            }))).concat(["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"].map((e => ({
                type: "constant",
                label: e
            }))))
            , S = ["a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer", "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output", "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"].map((e => ({
                type: "type",
                label: e
            })))
            , P = /^(\w[\w-]*|-\w[\w-]*|)$/
            , v = /^-(-[\w-]*)?$/;
        const x = new g.RY
            , k = ["Declaration"];
        function w(e) {
            for (let t = e; ;) {
                if (t.type.isTop)
                    return t;
                if (!(t = t.parent))
                    return e
            }
        }
        function X(e, t, n) {
            if (t.to - t.from > 4096) {
                let i = x.get(t);
                if (i)
                    return i;
                let r = []
                    , a = new Set
                    , o = t.cursor(g.Qj.IncludeAnonymous);
                if (o.firstChild())
                    do {
                        for (let t of X(e, o.node, n))
                            a.has(t.label) || (a.add(t.label),
                                r.push(t))
                    } while (o.nextSibling());
                return x.set(t, r),
                    r
            }
            {
                let i = []
                    , r = new Set;
                return t.cursor().iterate((t => {
                    var a;
                    if (n(t) && t.matchContext(k) && ":" == (null === (a = t.node.nextSibling) || void 0 === a ? void 0 : a.name)) {
                        let n = e.sliceString(t.from, t.to);
                        r.has(n) || (r.add(n),
                            i.push({
                                label: n,
                                type: "variable"
                            }))
                    }
                }
                )),
                    i
            }
        }
        const _ = e => t => {
            let { state: n, pos: i } = t
                , r = (0,
                    m.mv)(n).resolveInner(i, -1)
                , a = r.type.isError && r.from == r.to - 1 && "-" == n.doc.sliceString(r.from, r.to);
            if ("PropertyName" == r.name || (a || "TagName" == r.name) && /^(Block|Styles)$/.test(r.resolve(r.to).name))
                return {
                    from: r.from,
                    options: $(),
                    validFor: P
                };
            if ("ValueName" == r.name)
                return {
                    from: r.from,
                    options: y,
                    validFor: P
                };
            if ("PseudoClassName" == r.name)
                return {
                    from: r.from,
                    options: b,
                    validFor: P
                };
            if (e(r) || (t.explicit || a) && function (e, t) {
                var n;
                if (("(" == e.name || e.type.isError) && (e = e.parent || e),
                    "ArgList" != e.name)
                    return !1;
                let i = null === (n = e.parent) || void 0 === n ? void 0 : n.firstChild;
                return "Callee" == (null === i || void 0 === i ? void 0 : i.name) && "var" == t.sliceString(i.from, i.to)
            }(r, n.doc))
                return {
                    from: e(r) || a ? r.from : i,
                    options: X(n.doc, w(r), e),
                    validFor: v
                };
            if ("TagName" == r.name) {
                for (let { parent: e } = r; e; e = e.parent)
                    if ("Block" == e.name)
                        return {
                            from: r.from,
                            options: $(),
                            validFor: P
                        };
                return {
                    from: r.from,
                    options: S,
                    validFor: P
                }
            }
            if (!t.explicit)
                return null;
            let o = r.resolve(i)
                , O = o.childBefore(i);
            return O && ":" == O.name && "PseudoClassSelector" == o.name ? {
                from: i,
                options: b,
                validFor: P
            } : O && ":" == O.name && "Declaration" == o.name || "ArgList" == o.name ? {
                from: i,
                options: y,
                validFor: P
            } : "Block" == o.name || "Styles" == o.name ? {
                from: i,
                options: $(),
                validFor: P
            } : null
        }
            , T = _((e => "VariableName" == e.name))
            , z = m.bj.define({
                name: "css",
                parser: p.configure({
                    props: [m.Oh.add({
                        Declaration: (0,
                            m.mz)()
                    }), m.b_.add({
                        "Block KeyframeList": m.yd
                    })]
                }),
                languageData: {
                    commentTokens: {
                        block: {
                            open: "/*",
                            close: "*/"
                        }
                    },
                    indentOnInput: /^\s*\}$/,
                    wordChars: "-"
                }
            });
        function R() {
            return new m.Yy(z, z.data.of({
                autocomplete: T
            }))
        }
    }
    ,
    83182: (e, t, n) => {
        n.r(t),
            n.d(t, {
                autoCloseTags: () => U,
                html: () => Z,
                htmlCompletionSource: () => w,
                htmlCompletionSourceWith: () => X,
                htmlLanguage: () => W,
                htmlPlain: () => R
            });
        var i = n(92547)
            , r = n(72395)
            , a = n(74668)
            , o = n(32043)
            , O = n(17471)
            , s = n(25956);
        const l = ["_blank", "_self", "_top", "_parent"]
            , c = ["ascii", "utf-8", "utf-16", "latin1", "latin1"]
            , u = ["get", "post", "put", "delete"]
            , d = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]
            , h = ["true", "false"]
            , f = {}
            , p = {
                a: {
                    attrs: {
                        href: null,
                        ping: null,
                        type: null,
                        media: null,
                        target: l,
                        hreflang: null
                    }
                },
                abbr: f,
                address: f,
                area: {
                    attrs: {
                        alt: null,
                        coords: null,
                        href: null,
                        target: null,
                        ping: null,
                        media: null,
                        hreflang: null,
                        type: null,
                        shape: ["default", "rect", "circle", "poly"]
                    }
                },
                article: f,
                aside: f,
                audio: {
                    attrs: {
                        src: null,
                        mediagroup: null,
                        crossorigin: ["anonymous", "use-credentials"],
                        preload: ["none", "metadata", "auto"],
                        autoplay: ["autoplay"],
                        loop: ["loop"],
                        controls: ["controls"]
                    }
                },
                b: f,
                base: {
                    attrs: {
                        href: null,
                        target: l
                    }
                },
                bdi: f,
                bdo: f,
                blockquote: {
                    attrs: {
                        cite: null
                    }
                },
                body: f,
                br: f,
                button: {
                    attrs: {
                        form: null,
                        formaction: null,
                        name: null,
                        value: null,
                        autofocus: ["autofocus"],
                        disabled: ["autofocus"],
                        formenctype: d,
                        formmethod: u,
                        formnovalidate: ["novalidate"],
                        formtarget: l,
                        type: ["submit", "reset", "button"]
                    }
                },
                canvas: {
                    attrs: {
                        width: null,
                        height: null
                    }
                },
                caption: f,
                center: f,
                cite: f,
                code: f,
                col: {
                    attrs: {
                        span: null
                    }
                },
                colgroup: {
                    attrs: {
                        span: null
                    }
                },
                command: {
                    attrs: {
                        type: ["command", "checkbox", "radio"],
                        label: null,
                        icon: null,
                        radiogroup: null,
                        command: null,
                        title: null,
                        disabled: ["disabled"],
                        checked: ["checked"]
                    }
                },
                data: {
                    attrs: {
                        value: null
                    }
                },
                datagrid: {
                    attrs: {
                        disabled: ["disabled"],
                        multiple: ["multiple"]
                    }
                },
                datalist: {
                    attrs: {
                        data: null
                    }
                },
                dd: f,
                del: {
                    attrs: {
                        cite: null,
                        datetime: null
                    }
                },
                details: {
                    attrs: {
                        open: ["open"]
                    }
                },
                dfn: f,
                div: f,
                dl: f,
                dt: f,
                em: f,
                embed: {
                    attrs: {
                        src: null,
                        type: null,
                        width: null,
                        height: null
                    }
                },
                eventsource: {
                    attrs: {
                        src: null
                    }
                },
                fieldset: {
                    attrs: {
                        disabled: ["disabled"],
                        form: null,
                        name: null
                    }
                },
                figcaption: f,
                figure: f,
                footer: f,
                form: {
                    attrs: {
                        action: null,
                        name: null,
                        "accept-charset": c,
                        autocomplete: ["on", "off"],
                        enctype: d,
                        method: u,
                        novalidate: ["novalidate"],
                        target: l
                    }
                },
                h1: f,
                h2: f,
                h3: f,
                h4: f,
                h5: f,
                h6: f,
                head: {
                    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
                },
                header: f,
                hgroup: f,
                hr: f,
                html: {
                    attrs: {
                        manifest: null
                    }
                },
                i: f,
                iframe: {
                    attrs: {
                        src: null,
                        srcdoc: null,
                        name: null,
                        width: null,
                        height: null,
                        sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
                        seamless: ["seamless"]
                    }
                },
                img: {
                    attrs: {
                        alt: null,
                        src: null,
                        ismap: null,
                        usemap: null,
                        width: null,
                        height: null,
                        crossorigin: ["anonymous", "use-credentials"]
                    }
                },
                input: {
                    attrs: {
                        alt: null,
                        dirname: null,
                        form: null,
                        formaction: null,
                        height: null,
                        list: null,
                        max: null,
                        maxlength: null,
                        min: null,
                        name: null,
                        pattern: null,
                        placeholder: null,
                        size: null,
                        src: null,
                        step: null,
                        value: null,
                        width: null,
                        accept: ["audio/*", "video/*", "image/*"],
                        autocomplete: ["on", "off"],
                        autofocus: ["autofocus"],
                        checked: ["checked"],
                        disabled: ["disabled"],
                        formenctype: d,
                        formmethod: u,
                        formnovalidate: ["novalidate"],
                        formtarget: l,
                        multiple: ["multiple"],
                        readonly: ["readonly"],
                        required: ["required"],
                        type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month", "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio", "file", "submit", "image", "reset", "button"]
                    }
                },
                ins: {
                    attrs: {
                        cite: null,
                        datetime: null
                    }
                },
                kbd: f,
                keygen: {
                    attrs: {
                        challenge: null,
                        form: null,
                        name: null,
                        autofocus: ["autofocus"],
                        disabled: ["disabled"],
                        keytype: ["RSA"]
                    }
                },
                label: {
                    attrs: {
                        for: null,
                        form: null
                    }
                },
                legend: f,
                li: {
                    attrs: {
                        value: null
                    }
                },
                link: {
                    attrs: {
                        href: null,
                        type: null,
                        hreflang: null,
                        media: null,
                        sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
                    }
                },
                map: {
                    attrs: {
                        name: null
                    }
                },
                mark: f,
                menu: {
                    attrs: {
                        label: null,
                        type: ["list", "context", "toolbar"]
                    }
                },
                meta: {
                    attrs: {
                        content: null,
                        charset: c,
                        name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
                        "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
                    }
                },
                meter: {
                    attrs: {
                        value: null,
                        min: null,
                        low: null,
                        high: null,
                        max: null,
                        optimum: null
                    }
                },
                nav: f,
                noscript: f,
                object: {
                    attrs: {
                        data: null,
                        type: null,
                        name: null,
                        usemap: null,
                        form: null,
                        width: null,
                        height: null,
                        typemustmatch: ["typemustmatch"]
                    }
                },
                ol: {
                    attrs: {
                        reversed: ["reversed"],
                        start: null,
                        type: ["1", "a", "A", "i", "I"]
                    },
                    children: ["li", "script", "template", "ul", "ol"]
                },
                optgroup: {
                    attrs: {
                        disabled: ["disabled"],
                        label: null
                    }
                },
                option: {
                    attrs: {
                        disabled: ["disabled"],
                        label: null,
                        selected: ["selected"],
                        value: null
                    }
                },
                output: {
                    attrs: {
                        for: null,
                        form: null,
                        name: null
                    }
                },
                p: f,
                param: {
                    attrs: {
                        name: null,
                        value: null
                    }
                },
                pre: f,
                progress: {
                    attrs: {
                        value: null,
                        max: null
                    }
                },
                q: {
                    attrs: {
                        cite: null
                    }
                },
                rp: f,
                rt: f,
                ruby: f,
                samp: f,
                script: {
                    attrs: {
                        type: ["text/javascript"],
                        src: null,
                        async: ["async"],
                        defer: ["defer"],
                        charset: c
                    }
                },
                section: f,
                select: {
                    attrs: {
                        form: null,
                        name: null,
                        size: null,
                        autofocus: ["autofocus"],
                        disabled: ["disabled"],
                        multiple: ["multiple"]
                    }
                },
                slot: {
                    attrs: {
                        name: null
                    }
                },
                small: f,
                source: {
                    attrs: {
                        src: null,
                        type: null,
                        media: null
                    }
                },
                span: f,
                strong: f,
                style: {
                    attrs: {
                        type: ["text/css"],
                        media: null,
                        scoped: null
                    }
                },
                sub: f,
                summary: f,
                sup: f,
                table: f,
                tbody: f,
                td: {
                    attrs: {
                        colspan: null,
                        rowspan: null,
                        headers: null
                    }
                },
                template: f,
                textarea: {
                    attrs: {
                        dirname: null,
                        form: null,
                        maxlength: null,
                        name: null,
                        placeholder: null,
                        rows: null,
                        cols: null,
                        autofocus: ["autofocus"],
                        disabled: ["disabled"],
                        readonly: ["readonly"],
                        required: ["required"],
                        wrap: ["soft", "hard"]
                    }
                },
                tfoot: f,
                th: {
                    attrs: {
                        colspan: null,
                        rowspan: null,
                        headers: null,
                        scope: ["row", "col", "rowgroup", "colgroup"]
                    }
                },
                thead: f,
                time: {
                    attrs: {
                        datetime: null
                    }
                },
                title: f,
                tr: f,
                track: {
                    attrs: {
                        src: null,
                        label: null,
                        default: null,
                        kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
                        srclang: null
                    }
                },
                ul: {
                    children: ["li", "script", "template", "ul", "ol"]
                },
                var: f,
                video: {
                    attrs: {
                        src: null,
                        poster: null,
                        width: null,
                        height: null,
                        crossorigin: ["anonymous", "use-credentials"],
                        preload: ["auto", "metadata", "none"],
                        autoplay: ["autoplay"],
                        mediagroup: ["movie"],
                        muted: ["muted"],
                        controls: ["controls"]
                    }
                },
                wbr: f
            }
            , m = {
                accesskey: null,
                class: null,
                contenteditable: h,
                contextmenu: null,
                dir: ["ltr", "rtl", "auto"],
                draggable: ["true", "false", "auto"],
                dropzone: ["copy", "move", "link", "string:", "file:"],
                hidden: ["hidden"],
                id: null,
                inert: ["inert"],
                itemid: null,
                itemprop: null,
                itemref: null,
                itemscope: ["itemscope"],
                itemtype: null,
                lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
                spellcheck: h,
                autocorrect: h,
                autocapitalize: h,
                style: null,
                tabindex: null,
                title: null,
                translate: ["yes", "no"],
                rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
                role: "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
                "aria-activedescendant": null,
                "aria-atomic": h,
                "aria-autocomplete": ["inline", "list", "both", "none"],
                "aria-busy": h,
                "aria-checked": ["true", "false", "mixed", "undefined"],
                "aria-controls": null,
                "aria-describedby": null,
                "aria-disabled": h,
                "aria-dropeffect": null,
                "aria-expanded": ["true", "false", "undefined"],
                "aria-flowto": null,
                "aria-grabbed": ["true", "false", "undefined"],
                "aria-haspopup": h,
                "aria-hidden": h,
                "aria-invalid": ["true", "false", "grammar", "spelling"],
                "aria-label": null,
                "aria-labelledby": null,
                "aria-level": null,
                "aria-live": ["off", "polite", "assertive"],
                "aria-multiline": h,
                "aria-multiselectable": h,
                "aria-owns": null,
                "aria-posinset": null,
                "aria-pressed": ["true", "false", "mixed", "undefined"],
                "aria-readonly": h,
                "aria-relevant": null,
                "aria-required": h,
                "aria-selected": ["true", "false", "undefined"],
                "aria-setsize": null,
                "aria-sort": ["ascending", "descending", "none", "other"],
                "aria-valuemax": null,
                "aria-valuemin": null,
                "aria-valuenow": null,
                "aria-valuetext": null
            }
            , g = "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((e => "on" + e));
        for (let Y of g)
            m[Y] = null;
        class Q {
            constructor(e, t) {
                this.tags = Object.assign(Object.assign({}, p), e),
                    this.globalAttrs = Object.assign(Object.assign({}, m), t),
                    this.allTags = Object.keys(this.tags),
                    this.globalAttrNames = Object.keys(this.globalAttrs)
            }
        }
        function $(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length;
            if (!t)
                return "";
            let i = t.firstChild
                , r = i && i.getChild("TagName");
            return r ? e.sliceString(r.from, Math.min(r.to, n)) : ""
        }
        function b(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            for (; e; e = e.parent)
                if ("Element" == e.name) {
                    if (!t)
                        return e;
                    t = !1
                }
            return null
        }
        function y(e, t, n) {
            let i = n.tags[$(e, b(t))];
            return (null === i || void 0 === i ? void 0 : i.children) || n.allTags
        }
        function S(e, t) {
            let n = [];
            for (let i = b(t); i && !i.type.isTop; i = b(i.parent)) {
                let r = $(e, i);
                if (r && "CloseTag" == i.lastChild.name)
                    break;
                r && n.indexOf(r) < 0 && ("EndTag" == t.name || t.from >= i.firstChild.to) && n.push(r)
            }
            return n
        }
        Q.default = new Q;
        const P = /^[:\-\.\w\u00b7-\uffff]*$/;
        function v(e, t, n, i, r) {
            let a = /\s*>/.test(e.sliceDoc(r, r + 5)) ? "" : ">"
                , o = b(n, !0);
            return {
                from: i,
                to: r,
                options: y(e.doc, o, t).map((e => ({
                    label: e,
                    type: "type"
                }))).concat(S(e.doc, n).map(((e, t) => ({
                    label: "/" + e,
                    apply: "/" + e + a,
                    type: "type",
                    boost: 99 - t
                })))),
                validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
            }
        }
        function x(e, t, n, i) {
            let r = /\s*>/.test(e.sliceDoc(i, i + 5)) ? "" : ">";
            return {
                from: n,
                to: i,
                options: S(e.doc, t).map(((e, t) => ({
                    label: e,
                    apply: e + r,
                    type: "type",
                    boost: 99 - t
                }))),
                validFor: P
            }
        }
        function k(e, t) {
            let { state: n, pos: i } = t
                , r = (0,
                    s.mv)(n).resolveInner(i, -1)
                , a = r.resolve(i);
            for (let o, O = i; a == r && (o = r.childBefore(O));) {
                let e = o.lastChild;
                if (!e || !e.type.isError || e.from < e.to)
                    break;
                a = r = o,
                    O = e.from
            }
            return "TagName" == r.name ? r.parent && /CloseTag$/.test(r.parent.name) ? x(n, r, r.from, i) : v(n, e, r, r.from, i) : "StartTag" == r.name ? v(n, e, r, i, i) : "StartCloseTag" == r.name || "IncompleteCloseTag" == r.name ? x(n, r, i, i) : "OpenTag" == r.name || "SelfClosingTag" == r.name || "AttributeName" == r.name ? function (e, t, n, i, r) {
                let a = b(n)
                    , o = a ? t.tags[$(e.doc, a)] : null
                    , O = o && o.attrs ? Object.keys(o.attrs) : [];
                return {
                    from: i,
                    to: r,
                    options: (o && !1 === o.globalAttrs ? O : O.length ? O.concat(t.globalAttrNames) : t.globalAttrNames).map((e => ({
                        label: e,
                        type: "property"
                    }))),
                    validFor: P
                }
            }(n, e, r, "AttributeName" == r.name ? r.from : i, i) : "Is" == r.name || "AttributeValue" == r.name || "UnquotedAttributeValue" == r.name ? function (e, t, n, i, r) {
                var a;
                let o, O = null === (a = n.parent) || void 0 === a ? void 0 : a.getChild("AttributeName"), s = [];
                if (O) {
                    let a = e.sliceDoc(O.from, O.to)
                        , l = t.globalAttrs[a];
                    if (!l) {
                        let i = b(n)
                            , r = i ? t.tags[$(e.doc, i)] : null;
                        l = (null === r || void 0 === r ? void 0 : r.attrs) && r.attrs[a]
                    }
                    if (l) {
                        let t = e.sliceDoc(i, r).toLowerCase()
                            , n = '"'
                            , a = '"';
                        /^['"]/.test(t) ? (o = '"' == t[0] ? /^[^"]*$/ : /^[^']*$/,
                            n = "",
                            a = e.sliceDoc(r, r + 1) == t[0] ? "" : t[0],
                            t = t.slice(1),
                            i++) : o = /^[^\s<>='"]*$/;
                        for (let e of l)
                            s.push({
                                label: e,
                                apply: n + e + a,
                                type: "constant"
                            })
                    }
                }
                return {
                    from: i,
                    to: r,
                    options: s,
                    validFor: o
                }
            }(n, e, r, "Is" == r.name ? i : r.from, i) : !t.explicit || "Element" != a.name && "Text" != a.name && "Document" != a.name ? null : function (e, t, n, i) {
                let r = []
                    , a = 0;
                for (let o of y(e.doc, n, t))
                    r.push({
                        label: "<" + o,
                        type: "type"
                    });
                for (let o of S(e.doc, n))
                    r.push({
                        label: "</" + o + ">",
                        type: "type",
                        boost: 99 - a++
                    });
                return {
                    from: i,
                    to: i,
                    options: r,
                    validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
                }
            }(n, e, r, i)
        }
        function w(e) {
            return k(Q.default, e)
        }
        function X(e) {
            let { extraTags: t, extraGlobalAttributes: n } = e
                , i = n || t ? new Q(t, n) : Q.default;
            return e => k(i, e)
        }
        const _ = a.javascriptLanguage.parser.configure({
            top: "SingleExpression"
        })
            , T = [{
                tag: "script",
                attrs: e => "text/typescript" == e.type || "ts" == e.lang,
                parser: a.typescriptLanguage.parser
            }, {
                tag: "script",
                attrs: e => "text/babel" == e.type || "text/jsx" == e.type,
                parser: a.jsxLanguage.parser
            }, {
                tag: "script",
                attrs: e => "text/typescript-jsx" == e.type,
                parser: a.tsxLanguage.parser
            }, {
                tag: "script",
                attrs: e => /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(e.type),
                parser: _
            }, {
                tag: "script",
                attrs: e => !e.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(e.type),
                parser: a.javascriptLanguage.parser
            }, {
                tag: "style",
                attrs: e => (!e.lang || "css" == e.lang) && (!e.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(e.type)),
                parser: r.cssLanguage.parser
            }]
            , z = [{
                name: "style",
                parser: r.cssLanguage.parser.configure({
                    top: "Styles"
                })
            }].concat(g.map((e => ({
                name: e,
                parser: a.javascriptLanguage.parser
            }))))
            , R = s.bj.define({
                name: "html",
                parser: i.K.configure({
                    props: [s.Oh.add({
                        Element(e) {
                            let t = /^(\s*)(<\/)?/.exec(e.textAfter);
                            return e.node.to <= e.pos + t[0].length ? e.continue() : e.lineIndent(e.node.from) + (t[2] ? 0 : e.unit)
                        },
                        "OpenTag CloseTag SelfClosingTag": e => e.column(e.node.from) + e.unit,
                        Document(e) {
                            if (e.pos + /\s*/.exec(e.textAfter)[0].length < e.node.to)
                                return e.continue();
                            let t, n = null;
                            for (let i = e.node; ;) {
                                let e = i.lastChild;
                                if (!e || "Element" != e.name || e.to != i.to)
                                    break;
                                n = i = e
                            }
                            return n && (!(t = n.lastChild) || "CloseTag" != t.name && "SelfClosingTag" != t.name) ? e.lineIndent(n.from) + e.unit : null
                        }
                    }), s.b_.add({
                        Element(e) {
                            let t = e.firstChild
                                , n = e.lastChild;
                            return t && "OpenTag" == t.name ? {
                                from: t.to,
                                to: "CloseTag" == n.name ? n.from : e.to
                            } : null
                        }
                    }), s.Q_.add({
                        "OpenTag CloseTag": e => e.getChild("TagName")
                    })]
                }),
                languageData: {
                    commentTokens: {
                        block: {
                            open: "\x3c!--",
                            close: "--\x3e"
                        }
                    },
                    indentOnInput: /^\s*<\/\w+\W$/,
                    wordChars: "-._"
                }
            })
            , W = R.configure({
                wrap: (0,
                    i.n)(T, z)
            });
        function Z() {
            let e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = "";
            !1 === t.matchClosingTags && (n = "noMatch"),
                !0 === t.selfClosingTags && (n = (n ? n + " " : "") + "selfClosing"),
                (t.nestedLanguages && t.nestedLanguages.length || t.nestedAttributes && t.nestedAttributes.length) && (e = (0,
                    i.n)((t.nestedLanguages || []).concat(T), (t.nestedAttributes || []).concat(z)));
            let o = e ? R.configure({
                wrap: e,
                dialect: n
            }) : n ? W.configure({
                dialect: n
            }) : W;
            return new s.Yy(o, [W.data.of({
                autocomplete: X(t)
            }), !1 !== t.autoCloseTags ? U : [], (0,
                a.javascript)().support, (0,
                    r.css)().support])
        }
        const q = new Set("area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "))
            , U = o.Lz.inputHandler.of(((e, t, n, i, r) => {
                if (e.composing || e.state.readOnly || t != n || ">" != i && "/" != i || !W.isActiveAt(e.state, t, -1))
                    return !1;
                let a = r()
                    , { state: o } = a
                    , l = o.changeByRange((e => {
                        var t, n, r;
                        let a, l = o.doc.sliceString(e.from - 1, e.to) == i, { head: c } = e, u = (0,
                            s.mv)(o).resolveInner(c, -1);
                        if (l && ">" == i && "EndTag" == u.name) {
                            let i = u.parent;
                            if ("CloseTag" != (null === (n = null === (t = i.parent) || void 0 === t ? void 0 : t.lastChild) || void 0 === n ? void 0 : n.name) && (a = $(o.doc, i.parent, c)) && !q.has(a)) {
                                return {
                                    range: e,
                                    changes: {
                                        from: c,
                                        to: c + (">" === o.doc.sliceString(c, c + 1) ? 1 : 0),
                                        insert: `</${a}>`
                                    }
                                }
                            }
                        } else if (l && "/" == i && "IncompleteCloseTag" == u.name) {
                            let e = u.parent;
                            if (u.from == c - 2 && "CloseTag" != (null === (r = e.lastChild) || void 0 === r ? void 0 : r.name) && (a = $(o.doc, e, c)) && !q.has(a)) {
                                let e = c + (">" === o.doc.sliceString(c, c + 1) ? 1 : 0)
                                    , t = `${a}>`;
                                return {
                                    range: O.OF.cursor(c + t.length, -1),
                                    changes: {
                                        from: c,
                                        to: e,
                                        insert: t
                                    }
                                }
                            }
                        }
                        return {
                            range: e
                        }
                    }
                    ));
                return !l.changes.empty && (e.dispatch([a, o.update(l, {
                    userEvent: "input.complete",
                    scrollIntoView: !0
                })]),
                    !0)
            }
            ))
    }
    ,
    62371: (e, t, n) => {
        n.r(t),
            n.d(t, {
                java: () => c,
                javaLanguage: () => l
            });
        var i = n(5178)
            , r = n(14462);
        const a = (0,
            r.pn)({
                null: r._A.null,
                instanceof: r._A.operatorKeyword,
                this: r._A.self,
                "new super assert open to with void": r._A.keyword,
                "class interface extends implements enum var": r._A.definitionKeyword,
                "module package import": r._A.moduleKeyword,
                "switch while for if else case default do break continue return try catch finally throw": r._A.controlKeyword,
                "requires exports opens uses provides public private protected static transitive abstract final strictfp synchronized native transient volatile throws": r._A.modifier,
                IntegerLiteral: r._A.integer,
                FloatingPointLiteral: r._A.float,
                "StringLiteral TextBlock": r._A.string,
                CharacterLiteral: r._A.character,
                LineComment: r._A.lineComment,
                BlockComment: r._A.blockComment,
                BooleanLiteral: r._A.bool,
                PrimitiveType: r._A.standard(r._A.typeName),
                TypeName: r._A.typeName,
                Identifier: r._A.variableName,
                "MethodName/Identifier": r._A.function(r._A.variableName),
                Definition: r._A.definition(r._A.variableName),
                ArithOp: r._A.arithmeticOperator,
                LogicOp: r._A.logicOperator,
                BitOp: r._A.bitwiseOperator,
                CompareOp: r._A.compareOperator,
                AssignOp: r._A.definitionOperator,
                UpdateOp: r._A.updateOperator,
                Asterisk: r._A.punctuation,
                Label: r._A.labelName,
                "( )": r._A.paren,
                "[ ]": r._A.squareBracket,
                "{ }": r._A.brace,
                ".": r._A.derefOperator,
                ", ;": r._A.separator
            })
            , o = {
                __proto__: null,
                true: 34,
                false: 34,
                null: 42,
                void: 46,
                byte: 48,
                short: 48,
                int: 48,
                long: 48,
                char: 48,
                float: 48,
                double: 48,
                boolean: 48,
                extends: 62,
                super: 64,
                class: 76,
                this: 78,
                new: 84,
                public: 100,
                protected: 102,
                private: 104,
                abstract: 106,
                static: 108,
                final: 110,
                strictfp: 112,
                default: 114,
                synchronized: 116,
                native: 118,
                transient: 120,
                volatile: 122,
                throws: 150,
                implements: 160,
                interface: 166,
                enum: 176,
                instanceof: 238,
                open: 267,
                module: 269,
                requires: 274,
                transitive: 276,
                exports: 278,
                to: 280,
                opens: 282,
                uses: 284,
                provides: 286,
                with: 288,
                package: 292,
                import: 296,
                if: 308,
                else: 310,
                while: 314,
                for: 318,
                var: 325,
                assert: 332,
                switch: 336,
                case: 342,
                do: 346,
                break: 350,
                continue: 354,
                return: 358,
                throw: 364,
                try: 368,
                catch: 372,
                finally: 380
            }
            , O = i.U1.deserialize({
                version: 14,
                states: "##jQ]QPOOQ$wQPOOO(bQQO'#H^O*iQQO'#CbOOQO'#Cb'#CbO*pQPO'#CaO*xOSO'#CpOOQO'#Hc'#HcOOQO'#Cu'#CuO,eQPO'#D_O-OQQO'#HmOOQO'#Hm'#HmO/gQQO'#HhO/nQQO'#HhOOQO'#Hh'#HhOOQO'#Hg'#HgO1rQPO'#DUO2PQPO'#GnO4wQPO'#D_O5OQPO'#DzO*pQPO'#E[O5qQPO'#E[OOQO'#DV'#DVO7SQQO'#HaO9^QQO'#EeO9eQPO'#EdO9jQPO'#EfOOQO'#Hb'#HbO7jQQO'#HbO:pQQO'#FhO:wQPO'#ExO:|QPO'#E}O:|QPO'#FPOOQO'#Ha'#HaOOQO'#HY'#HYOOQO'#Gh'#GhOOQO'#HX'#HXO<^QPO'#FiOOQO'#HW'#HWOOQO'#Gg'#GgQ]QPOOOOQO'#Hs'#HsO<cQPO'#HsO<hQPO'#D{O<hQPO'#EVO<hQPO'#EQO<pQPO'#HpO=RQQO'#EfO*pQPO'#C`O=ZQPO'#C`O*pQPO'#FcO=`QPO'#FeO=kQPO'#FkO=kQPO'#FnO<hQPO'#FsO=pQPO'#FpO:|QPO'#FwO=kQPO'#FyO]QPO'#GOO=uQPO'#GQO>QQPO'#GSO>]QPO'#GUO=kQPO'#GWO:|QPO'#GXO>dQPO'#GZO?QQQO'#HiO?mQQO'#CuO?tQPO'#HxO@SQPO'#D_O@rQPO'#DpO?wQPO'#DqO@|QPO'#HxOA_QPO'#DpOAgQPO'#IROAlQPO'#E`OOQO'#Hr'#HrOOQO'#Gm'#GmQ$wQPOOOAtQPO'#HsOOQO'#H^'#H^OCsQQO,58{OOQO'#H['#H[OOOO'#Gi'#GiOEfOSO,59[OOQO,59[,59[OOQO'#Hi'#HiOFVQPO,59eOGXQPO,59yOOQO-E:f-E:fO*pQPO,58zOG{QPO,58zO*pQPO,5;}OHQQPO'#DQOHVQPO'#DQOOQO'#Gk'#GkOIVQQO,59jOOQO'#Dm'#DmOJqQPO'#HuOJ{QPO'#DlOKZQPO'#HtOKcQPO,5<_OKhQPO,59^OLRQPO'#CxOOQO,59c,59cOLYQPO,59bOLeQQO'#H^ONgQQO'#CbO!!iQPO'#D_O!#nQQO'#HmO!$OQQO,59pO!$VQPO'#DvO!$eQPO'#H|O!$mQPO,5:`O!$rQPO,5:`O!%YQPO,5;nO!%eQPO'#ITO!%pQPO,5;eO!%uQPO,5=YOOQO-E:l-E:lOOQO,5:f,5:fO!']QPO,5:fO!'dQPO,5:vO?tQPO,5<_O*pQPO,5:vO<hQPO,5:gO<hQPO,5:qO<hQPO,5:lO<hQPO,5<_O!'zQPO,59qO:|QPO,5:}O!(RQPO,5;QO:|QPO,59TO!(aQPO'#DXOOQO,5;O,5;OOOQO'#El'#ElOOQO'#Eo'#EoO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;fOOQO,5;i,5;iOOQO,5<S,5<SO!(hQPO,5;bO!(yQPO,5;dO!(hQPO'#CyO!)QQQO'#HmO!)`QQO,5;kO]QPO,5<TOOQO-E:e-E:eOOQO,5>_,5>_O!*sQPO,5:gO!+RQPO,5:qO!+ZQPO,5:lO!+fQPO,5>[O!$VQPO,5>[O!'iQPO,59UO!+qQQO,58zO!+yQQO,5;}O!,RQQO,5<PO*pQPO,5<PO:|QPO'#DUO]QPO,5<VO]QPO,5<YO!,ZQPO'#FrO]QPO,5<[O]QPO,5<aO!,kQQO,5<cO!,uQPO,5<eO!,zQPO,5<jOOQO'#Fj'#FjOOQO,5<l,5<lO!-PQPO,5<lOOQO,5<n,5<nO!-UQPO,5<nO!-ZQQO,5<pOOQO,5<p,5<pO>gQPO,5<rO!-bQQO,5<sO!-iQPO'#GdO!.oQPO,5<uO>gQPO,5<}O!2mQPO,59jO!2zQPO'#HuO!3RQPO,59xO!3WQPO,5>dO?tQPO,59xO!3cQPO,5:[OAlQPO,5:zO!3kQPO'#DrO?wQPO'#DrO!3vQPO'#HyO!4OQPO,5:]O?tQPO,5>dO!(hQPO,5>dOAgQPO,5>mOOQO,5:[,5:[O!$rQPO'#DtOOQO,5>m,5>mO!4TQPO'#EaOOQO,5:z,5:zO!7UQPO,5:zO!(hQPO'#DxOOQO-E:k-E:kOOQO,5:y,5:yO*pQPO,58}O!7ZQPO'#ChOOQO1G.k1G.kOOOO-E:g-E:gOOQO1G.v1G.vO!+qQQO1G.fO*pQPO1G.fO!7eQQO1G1iOOQO,59l,59lO!7mQPO,59lOOQO-E:i-E:iO!7rQPO,5>aO!8ZQPO,5:WO<hQPO'#GpO!8bQPO,5>`OOQO1G1y1G1yOOQO1G.x1G.xO!8{QPO'#CyO!9kQPO'#HmO!9uQPO'#CzO!:TQPO'#HlO!:]QPO,59dOOQO1G.|1G.|OLYQPO1G.|O!:sQPO,59eO!;QQQO'#H^O!;cQQO'#CbOOQO,5:b,5:bO<hQPO,5:cOOQO,5:a,5:aO!;tQQO,5:aOOQO1G/[1G/[O!;yQPO,5:bO!<[QPO'#GsO!<oQPO,5>hOOQO1G/z1G/zO!<wQPO'#DvO!=YQPO1G/zO!(hQPO'#GqO!=_QPO1G1YO:|QPO1G1YO<hQPO'#GyO!=gQPO,5>oOOQO1G1P1G1POOQO1G0Q1G0QO!=oQPO'#E]OOQO1G0b1G0bO!>`QPO1G1yO!'dQPO1G0bO!*sQPO1G0RO!+RQPO1G0]O!+ZQPO1G0WOOQO1G/]1G/]O!>eQQO1G.pO9eQPO1G0jO*pQPO1G0jO<pQPO'#HpO!@[QQO1G.pOOQO1G.p1G.pO!@aQQO1G0iOOQO1G0l1G0lO!@hQPO1G0lO!@sQQO1G.oO!AZQQO'#HqO!AhQPO,59sO!BzQQO1G0pO!DfQQO1G0pO!DmQQO1G0pO!FUQQO1G0pO!F]QQO1G0pO!GbQQO1G0pO!I]QQO1G0pO!IdQQO1G0pO!IkQQO1G0pO!IuQQO1G1QO!I|QQO'#HmOOQO1G0|1G0|O!KSQQO1G1OOOQO1G1O1G1OOOQO1G1o1G1oO!KjQPO'#D[O!(hQPO'#D|O!(hQPO'#D}OOQO1G0R1G0RO!KqQPO1G0RO!KvQPO1G0RO!LOQPO1G0RO!LZQPO'#EXOOQO1G0]1G0]O!LnQPO1G0]O!LsQPO'#ETO!(hQPO'#ESOOQO1G0W1G0WO!MmQPO1G0WO!MrQPO1G0WO!MzQPO'#EhO!NRQPO'#EhOOQO'#Gx'#GxO!NZQQO1G0mO# }QQO1G3vO9eQPO1G3vO#$PQPO'#FXOOQO1G.f1G.fOOQO1G1i1G1iO#$WQPO1G1kOOQO1G1k1G1kO#$cQQO1G1kO#$kQPO1G1qOOQO1G1t1G1tO+QQPO'#D_O-OQQO,5<bO#(cQPO,5<bO#(tQPO,5<^O#({QPO,5<^OOQO1G1v1G1vOOQO1G1{1G1{OOQO1G1}1G1}O:|QPO1G1}O#,oQPO'#F{OOQO1G2P1G2PO=kQPO1G2UOOQO1G2W1G2WOOQO1G2Y1G2YOOQO1G2[1G2[OOQO1G2^1G2^OOQO1G2_1G2_O#,vQQO'#H^O#-aQQO'#CbO-OQQO'#HmO#-zQQOOO#.hQQO'#EeO#.VQQO'#HbO!$VQPO'#GeO#.oQPO,5=OOOQO'#HQ'#HQO#.wQPO1G2aO#2uQPO'#G]O>gQPO'#GaOOQO1G2a1G2aO#2zQPO1G2iO#6xQPO,5>gOOQO1G/d1G/dOOQO1G4O1G4OO#7ZQPO1G/dOOQO1G/v1G/vOOQO1G0f1G0fO!7UQPO1G0fOOQO,5:^,5:^O!(hQPO'#DsO#7`QPO,5:^O?wQPO'#GrO#7kQPO,5>eOOQO1G/w1G/wOAgQPO'#H{O#7sQPO1G4OO?tQPO1G4OOOQO1G4X1G4XO!#YQPO'#DvO!!iQPO'#D_OOQO,5:{,5:{O#8OQPO,5:{O#8OQPO,5:{O#8VQQO'#HaO#9hQQO'#HbO#9rQQO'#EbO#9}QPO'#EbO#:VQPO'#IOOOQO,5:d,5:dOOQO1G.i1G.iO#:bQQO'#EeO#:rQQO'#H`O#;SQPO'#FTOOQO'#H`'#H`O#;^QPO'#H`O#;{QPO'#IWO#<TQPO,59SOOQO7+$Q7+$QO!+qQQO7+$QOOQO7+'T7+'TOOQO1G/W1G/WO#<YQPO'#DoO#<dQQO'#HvOOQO'#Hv'#HvOOQO1G/r1G/rOOQO,5=[,5=[OOQO-E:n-E:nO#<tQWO,58{O#<{QPO,59fOOQO,59f,59fO!(hQPO'#HoOKmQPO'#GjO#=ZQPO,5>WOOQO1G/O1G/OOOQO7+$h7+$hOOQO1G/{1G/{O#=cQQO1G/{OOQO1G/}1G/}O#=hQPO1G/{OOQO1G/|1G/|O<hQPO1G/}OOQO,5=_,5=_OOQO-E:q-E:qOOQO7+%f7+%fOOQO,5=],5=]OOQO-E:o-E:oO:|QPO7+&tOOQO7+&t7+&tOOQO,5=e,5=eOOQO-E:w-E:wO#=mQPO'#EUO#={QPO'#EUOOQO'#Gw'#GwO#>dQPO,5:wOOQO,5:w,5:wOOQO7+'e7+'eOOQO7+%|7+%|OOQO7+%m7+%mO!KqQPO7+%mO!KvQPO7+%mO!LOQPO7+%mOOQO7+%w7+%wO!LnQPO7+%wOOQO7+%r7+%rO!MmQPO7+%rO!MrQPO7+%rOOQO7+&U7+&UOOQO'#Ee'#EeO9eQPO7+&UO9eQPO,5>[O#?TQPO7+$[OOQO7+&T7+&TOOQO7+&W7+&WO:|QPO'#GlO#?cQPO,5>]OOQO1G/_1G/_O:|QPO7+&lO#?nQQO,59eO#@tQPO,59vOOQO,59v,59vOOQO,5:h,5:hOOQO'#EP'#EPOOQO,5:i,5:iO#@{QPO'#EYO<hQPO'#EYO#A^QPO'#IPO#AiQPO,5:sO?tQPO'#HxO!(hQPO'#HxO#AqQPO'#DpOOQO'#Gu'#GuO#AxQPO,5:oOOQO,5:o,5:oOOQO,5:n,5:nOOQO,5;S,5;SO#BrQQO,5;SO#ByQPO,5;SOOQO-E:v-E:vOOQO7+&X7+&XOOQO7+)b7+)bO#CQQQO7+)bOOQO'#G|'#G|O#DqQPO,5;sOOQO,5;s,5;sO#DxQPO'#FYO*pQPO'#FYO*pQPO'#FYO*pQPO'#FYO#EWQPO7+'VO#E]QPO7+'VOOQO7+'V7+'VO]QPO7+']O#EhQPO1G1|O?tQPO1G1|O#EvQQO1G1xO!(aQPO1G1xO#E}QPO1G1xO#FUQQO7+'iOOQO'#HP'#HPO#F]QPO,5<gOOQO,5<g,5<gO#FdQPO'#HsO:|QPO'#F|O#FlQPO7+'pO#FqQPO,5=PO?tQPO,5=PO#FvQPO1G2jO#HPQPO1G2jOOQO1G2j1G2jOOQO-E;O-E;OOOQO7+'{7+'{O!<[QPO'#G_O>gQPO,5<wOOQO,5<{,5<{O#HXQPO7+(TOOQO7+(T7+(TO#LVQPO1G4ROOQO7+%O7+%OOOQO7+&Q7+&QO#LhQPO,5:_OOQO1G/x1G/xOOQO,5=^,5=^OOQO-E:p-E:pOOQO7+)j7+)jO#LsQPO7+)jO!:bQPO,5:aOOQO1G0g1G0gO#MOQPO1G0gO#MVQPO,59qO#MkQPO,5:|O9eQPO,5:|O!(hQPO'#GtO#MpQPO,5>jO#M{QPO,59TO#NSQPO'#IVO#N[QPO,5;oO*pQPO'#G{O#NaQPO,5>rOOQO1G.n1G.nOOQO<<Gl<<GlO#NiQPO'#HwO#NqQPO,5:ZOOQO1G/Q1G/QOOQO,5>Z,5>ZOOQO,5=U,5=UOOQO-E:h-E:hO#NvQPO7+%gOOQO7+%g7+%gOOQO7+%i7+%iOOQO<<J`<<J`O$ ^QPO'#H^O$ eQPO'#CbO$ lQPO,5:pO$ qQPO,5:xO#=mQPO,5:pOOQO-E:u-E:uOOQO1G0c1G0cOOQO<<IX<<IXO!KqQPO<<IXO!KvQPO<<IXOOQO<<Ic<<IcOOQO<<I^<<I^O!MmQPO<<I^OOQO<<Ip<<IpO$ vQQO<<GvO9eQPO<<IpO*pQPO<<IpOOQO<<Gv<<GvO$#mQQO,5=WOOQO-E:j-E:jO$#zQQO<<JWOOQO1G/b1G/bOOQO,5:t,5:tO$$bQPO,5:tO$$pQPO,5:tO$%RQPO'#GvO$%iQPO,5>kO$%tQPO'#EZOOQO1G0_1G0_O$%{QPO1G0_O?tQPO,5:pOOQO-E:s-E:sOOQO1G0Z1G0ZOOQO1G0n1G0nO$&QQQO1G0nOOQO<<L|<<L|OOQO-E:z-E:zOOQO1G1_1G1_O$&XQQO,5;tOOQO'#G}'#G}O#DxQPO,5;tOOQO'#IX'#IXO$&aQQO,5;tO$&rQQO,5;tOOQO<<Jq<<JqO$&zQPO<<JqOOQO<<Jw<<JwO:|QPO7+'hO$'PQPO7+'hO!(aQPO7+'dO$'_QPO7+'dO$'dQQO7+'dOOQO<<KT<<KTOOQO-E:}-E:}OOQO1G2R1G2ROOQO,5<h,5<hO$'kQQO,5<hOOQO<<K[<<K[O:|QPO1G2kO$'rQPO1G2kOOQO,5=n,5=nOOQO7+(U7+(UO$'wQPO7+(UOOQO-E;Q-E;QO$)fQWO'#HhO$)QQWO'#HhO$)mQPO'#G`O<hQPO,5<yO!$VQPO,5<yOOQO1G2c1G2cOOQO<<Ko<<KoO$*OQPO1G/yOOQO<<MU<<MUOOQO7+&R7+&RO$*ZQPO1G0jO$*fQQO1G0hOOQO1G0h1G0hO$*nQPO1G0hOOQO,5=`,5=`OOQO-E:r-E:rO$*sQQO1G.oOOQO1G1[1G1[O$*}QPO'#GzO$+[QPO,5>qOOQO1G1Z1G1ZO$+dQPO'#FUOOQO,5=g,5=gOOQO-E:y-E:yO$+iQPO'#GoO$+vQPO,5>cOOQO1G/u1G/uOOQO<<IR<<IROOQO1G0[1G0[O$,OQPO1G0dO$,TQPO1G0[O$,YQPO1G0dOOQOAN>sAN>sO!KqQPOAN>sOOQOAN>xAN>xOOQOAN?[AN?[O9eQPOAN?[OOQO1G0`1G0`O$,_QPO1G0`OOQO,5=b,5=bOOQO-E:t-E:tO$,mQPO,5:uOOQO7+%y7+%yOOQO7+&Y7+&YOOQO1G1`1G1`O$,tQQO1G1`OOQO-E:{-E:{O$,|QQO'#IYO$,wQPO1G1`O$&gQPO1G1`O*pQPO1G1`OOQOAN@]AN@]O$-XQQO<<KSO:|QPO<<KSO$-`QPO<<KOOOQO<<KO<<KOO!(aQPO<<KOOOQO1G2S1G2SO$-eQQO7+(VO:|QPO7+(VOOQO<<Kp<<KpP!-iQPO'#HSO!$VQPO'#HRO$-oQPO,5<zO$-zQPO1G2eO<hQPO1G2eO9eQPO7+&SO$.PQPO7+&SOOQO7+&S7+&SOOQO,5=f,5=fOOQO-E:x-E:xO#M{QPO,5;pOOQO,5=Z,5=ZOOQO-E:m-E:mO$.UQPO7+&OOOQO7+%v7+%vO$.dQPO7+&OOOQOG24_G24_OOQOG24vG24vOOQO7+%z7+%zOOQO7+&z7+&zO*pQPO'#HOO$.iQPO,5>tO$.qQPO7+&zO$.vQQO'#IZOOQOAN@nAN@nO$/RQQOAN@nOOQOAN@jAN@jO$/YQPOAN@jO$/_QQO<<KqO$/iQPO,5=mOOQO-E;P-E;POOQO7+(P7+(PO$/zQPO7+(PO$0PQPO<<InOOQO<<In<<InO$0UQPO<<IjOOQO<<Ij<<IjO#M{QPO<<IjO$0UQPO<<IjO$0dQQO,5=jOOQO-E:|-E:|OOQO<<Jf<<JfO$0oQPO,5>uOOQOG26YG26YOOQOG26UG26UOOQO<<Kk<<KkOOQOAN?YAN?YOOQOAN?UAN?UO#M{QPOAN?UO$0wQPOAN?UO$0|QPOAN?UO$1[QPOG24pOOQOG24pG24pO#M{QPOG24pOOQOLD*[LD*[O$1aQPOLD*[OOQO!$'Mv!$'MvO*pQPO'#CaO$1fQQO'#H^O$1yQQO'#CbO!(hQPO'#Cy",
                stateData: "$2f~OPOSQOS%yOS~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO![!`O!]yO!^yO!_yO!u}O!z|O#fpO#roO#tpO#upO#y!RO#z!QO$W!SO$Y!TO$`!UO$c!VO$e!XO$h!WO$l!YO$n!ZO$s![O$u!]O$w!^O$y!_O$|!aO%O!bO%}TO&PRO&RQO&XUO&tdO~Og^Oh^Ov{O}cO!P!mO!SyO!TyO!UyO!VyO!W!pO!XyO!YyO!ZzO!]yO!^yO!_yO!u}O!z|O%}TO&P!cO&R!dO&_!hO&tdO~OWiXW&QXZ&QXuiXu&QX!P&QX!b&QX#]&QX#_&QX#a&QX#b&QX#d&QX#e&QX#f&QX#g&QX#h&QX#i&QX#k&QX#o&QX#r&QX%}iX&PiX&RiX&^&QX&_iX&_&QX&n&QX&viX&v&QX&x!aX~O#p$^X~P&bOWUXW&]XZUXuUXu&]X!PUX!bUX#]UX#_UX#aUX#bUX#dUX#eUX#fUX#gUX#hUX#iUX#kUX#oUX#rUX%}&]X&P&]X&R&]X&^UX&_UX&_&]X&nUX&vUX&v&]X&x!aX~O#p$^X~P(iO&PSO&R!qO~O&W!vO&Y!tO~Og^Oh^O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO%}TO&P!wO&RWOg!RXh!RX$h!RX&P!RX&R!RX~O#y!|O#z!{O$W!}Ov!RX!u!RX!z!RX&t!RX~P+QOW#XOu#OO%}TO&P#SO&R#SO&v&aX~OW#[Ou&[X%}&[X&P&[X&R&[X&v&[XY&[Xw&[X&n&[X&q&[XZ&[Xq&[X&^&[X!P&[X#_&[X#a&[X#b&[X#d&[X#e&[X#f&[X#g&[X#h&[X#i&[X#k&[X#o&[X#r&[X}&[X!r&[X#p&[Xs&[X|&[X~O&_#YO~P-dO&_&[X~P-dOZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO#fpO#roO#tpO#upO%}TO&XUO~O&P#^O&R#]OY&pP~P/uO%}TOg%bXh%bXv%bX!S%bX!T%bX!U%bX!V%bX!W%bX!X%bX!Y%bX!Z%bX!]%bX!^%bX!_%bX!u%bX!z%bX$h%bX&P%bX&R%bX&t%bX&_%bX~O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yOg!RXh!RXv!RX!u!RX!z!RX&P!RX&R!RX&t!RX&_!RX~O$h!RX~P3gO|#kO~P]Og^Oh^Ov#pO!u#rO!z#qO&P!wO&RWO&t#oO~O$h#sO~P5VOu#uO&v#vO!P&TX#_&TX#a&TX#b&TX#d&TX#e&TX#f&TX#g&TX#h&TX#i&TX#k&TX#o&TX#r&TX&^&TX&_&TX&n&TX~OW#tOY&TX#p&TXs&TXq&TX|&TX~P5xO!b#wO#]#wOW&UXu&UX!P&UX#_&UX#a&UX#b&UX#d&UX#e&UX#f&UX#g&UX#h&UX#i&UX#k&UX#o&UX#r&UX&^&UX&_&UX&n&UX&v&UXY&UX#p&UXs&UXq&UX|&UX~OZ#XX~P7jOZ#xO~O&v#vO~O#_#|O#a#}O#b$OO#d$QO#e$RO#f$SO#g$TO#h$UO#i$UO#k$YO#o$VO#r$WO&^#zO&_#zO&n#{O~O!P$XO~P9oO&x$ZO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO#fpO#roO#tpO#upO%}TO&P0qO&R0pO&XUO~O#p$_O~O![$aO~O&P#SO&R#SO~Og^Oh^O&P!wO&RWO&_#YO~OW$gO&v#vO~O#z!{O~O!W$kO&PSO&R!qO~OZ$lO~OZ$oO~O!P$vO&P$uO&R$uO~O!P$xO&P$uO&R$uO~O!P${O~P:|OZ%OO}cO~OW&]Xu&]X%}&]X&P&]X&R&]X&_&]X~OZ!aX~P>lOWiXuiX%}iX&PiX&RiX&_iX~OZ!aX~P?XOu#OO%}TO&P#SO&R#SO~O%}TO~P3gOg^Oh^Ov#pO!u#rO!z#qO&_!hO&t#oO~O&P!cO&R!dO~P@ZOg^Oh^O%}TO&P!cO&R!dO~O}cO!P%aO~OZ%bO~O}%dO!m%gO~O}cOg&gXh&gXv&gX!S&gX!T&gX!U&gX!V&gX!W&gX!X&gX!Y&gX!Z&gX!]&gX!^&gX!_&gX!u&gX!z&gX%}&gX&P&gX&R&gX&_&gX&t&gX~OW%jOZ%kOgTahTa%}Ta&PTa&RTa~OvTa!STa!TTa!UTa!VTa!WTa!XTa!YTa!ZTa!]Ta!^Ta!_Ta!uTa!zTa#yTa#zTa$WTa$hTa&tTa&_TauTaYTaqTa|Ta!PTa~PC[O&W%nO&Y!tO~Ou#OO%}TOqma&^maYma&nma!Pma~O&vma}ma!rma~PEnO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO~Og!Rah!Rav!Ra!u!Ra!z!Ra$h!Ra&P!Ra&R!Ra&t!Ra&_!Ra~PFdO#z%pO~Os%rO~Ou%sO%}TO~Ou#OO%}ra&Pra&Rra&vraYrawra&nra&qra!Pra&^raqra~OWra#_ra#ara#bra#dra#era#fra#gra#hra#ira#kra#ora#rra&_ra#prasra|ra~PH_Ou#OO%}TOq&iX!P&iX!b&iX~OY&iX#p&iX~PJ`O!b%vOq!`X!P!`XY!`X~Oq%wO!P&hX~O!P%yO~Ov%zO~Og^Oh^O%}0oO&P!wO&RWO&b%}O~O&^&`P~PKmO%}TO&P!wO&RWO~OW&QXYiXY!aXY&QXZ&QXq!aXu&QXwiX!b&QX#]&QX#_&QX#a&QX#b&QX#d&QX#e&QX#f&QX#g&QX#h&QX#i&QX#k&QX#o&QX#r&QX&^&QX&_&QX&niX&n&QX&qiX&viX&v&QX&x!aX~P?XOWUXYUXY!aXY&]XZUXq!aXuUXw&]X!bUX#]UX#_UX#aUX#bUX#dUX#eUX#fUX#gUX#hUX#iUX#kUX#oUX#rUX&^UX&_UX&nUX&n&]X&q&]X&vUX&v&]X&x!aX~P>lOg^Oh^O%}TO&P!wO&RWOg!RXh!RX&P!RX&R!RX~PFdOu#OOw&XO%}TO&P&UO&R&TO&q&WO~OW#XOY&aX&n&aX&v&aX~P!#YOY&ZO~P9oOg^Oh^O&P!wO&RWO~Oq&]OY&pX~OY&_O~Og^Oh^O%}TO&P!wO&RWOY&pP~PFdOY&dO&n&bO&v#vO~Oq&eO&x$ZOY&wX~OY&gO~O%}TOg%bah%bav%ba!S%ba!T%ba!U%ba!V%ba!W%ba!X%ba!Y%ba!Z%ba!]%ba!^%ba!_%ba!u%ba!z%ba$h%ba&P%ba&R%ba&t%ba&_%ba~O|&hO~P]O}&iO~Op&uOw&vO&PSO&R!qO&_#YO~Oz&tO~P!'iOz&xO&PSO&R!qO&_#YO~OY&eP~P:|Og^Oh^O%}TO&P!wO&RWO~O}cO~P:|OW#XOu#OO%}TO&v&aX~O#r$WO!P#sa#_#sa#a#sa#b#sa#d#sa#e#sa#f#sa#g#sa#h#sa#i#sa#k#sa#o#sa&^#sa&_#sa&n#saY#sa#p#sas#saq#sa|#sa~Oo'_O}'^O!r'`O&_!hO~O}'eO!r'`O~Oo'iO}'hO&_!hO~OZ#xOu'mO%}TO~OW%jO}'sO~OW%jO!P'uO~OW'vO!P'wO~O$h!WO&P0qO&R0pO!P&eP~P/uO!P(SO#p(TO~P9oO}(UO~O$c(WO~O!P(XO~O!P(YO~O!P(ZO~P9oO!P(]O~P9oOZ$lO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%}TO&P(_O&R(^O&XUO~PFdO%Q(hO%U(iOZ$}a_$}a`$}aa$}ab$}ac$}ae$}ag$}ah$}ap$}av$}aw$}az$}a}$}a!P$}a!S$}a!T$}a!U$}a!V$}a!W$}a!X$}a!Y$}a!Z$}a![$}a!]$}a!^$}a!_$}a!u$}a!z$}a#f$}a#r$}a#t$}a#u$}a#y$}a#z$}a$W$}a$Y$}a$`$}a$c$}a$e$}a$h$}a$l$}a$n$}a$s$}a$u$}a$w$}a$y$}a$|$}a%O$}a%w$}a%}$}a&P$}a&R$}a&X$}a&t$}a|$}a$a$}a$q$}a~O}ra!rra'Ora~PH_OZ%bO~PJ`O!P(mO~O!m%gO}&la!P&la~O}cO!P(pO~Oo(tOq!fX&^!fX~Oq(vO&^&mX~O&^(xO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op)UOv{Ow)TOz!OO|)PO}cO!PvO![!`O!u}O!z|O#fpO#roO#tpO#upO#y!RO#z!QO$W!SO$Y!TO$`!UO$c!VO$e!XO$h!WO$l!YO$n!ZO$s![O$u!]O$w!^O$y!_O$|!aO%O!bO%}TO&PRO&RQO&XUO&_#YO&tdO~PFdO}%dO~O})]OY&zP~P:|OW%jO!P)dO~Os)eO~Ou#OO%}TOq&ia!P&ia!b&iaY&ia#p&ia~O})fO~P:|Oq%wO!P&ha~Og^Oh^O%}0oO&P!wO&RWO~O&b)mO~P!8jOu#OO%}TOq&aX&^&aXY&aX&n&aX!P&aX~O}&aX!r&aX~P!9SOo)oOp)oOqnX&^nX~Oq)pO&^&`X~O&^)rO~Ou#OOw)tO%}TO&PSO&R!qO~OYma&nma&vma~P!:bOW&QXY!aXq!aXu!aX%}!aX~OWUXY!aXq!aXu!aX%}!aX~OW)wO~Ou#OO%}TO&P#SO&R#SO&q)yO~Og^Oh^O%}TO&P!wO&RWO~PFdOq&]OY&pa~Ou#OO%}TO&P#SO&R#SO&q&WO~OY)|O~OY*PO&n&bO~Oq&eOY&wa~Og^Oh^Ov{O|*XO!u}O%}TO&P!wO&RWO&tdO~PFdO!P*YO~OW^iZ#XXu^i!P^i!b^i#]^i#_^i#a^i#b^i#d^i#e^i#f^i#g^i#h^i#i^i#k^i#o^i#r^i&^^i&_^i&n^i&v^iY^i#p^is^iq^i|^i~OW*iO~Os*jO~P9oOz*kO&PSO&R!qO~O!P]iY]i#p]is]iq]i|]i~P9oOq*lOY&eX!P&eX~P9oOY*nO~O#f$SO#g$TO#k$YO#r$WO!P#^i#_#^i#a#^i#b#^i#d#^i#e#^i#o#^i&^#^i&_#^i&n#^iY#^i#p#^is#^iq#^i|#^i~O#h$UO#i$UO~P!AmO#_#|O#d$QO#e$RO#f$SO#g$TO#h$UO#i$UO#k$YO#r$WO&^#zO&_#zO&n#{O!P#^i#b#^i#o#^iY#^i#p#^is#^iq#^i|#^i~O#a#^i~P!CUO#a#}O~P!CUO#_#|O#f$SO#g$TO#h$UO#i$UO#k$YO#r$WO&^#zO&_#zO!P#^i#a#^i#b#^i#d#^i#e#^i#o#^iY#^i#p#^is#^iq#^i|#^i~O&n#^i~P!DtO&n#{O~P!DtO#f$SO#g$TO#k$YO#r$WO!P#^i#a#^i#b#^i#e#^i#o#^iY#^i#p#^is#^iq#^i|#^i~O#_#|O#d$QO#h$UO#i$UO&^#zO&_#zO&n#{O~P!FdO#k$YO#r$WO!P#^i#_#^i#a#^i#b#^i#d#^i#e#^i#f#^i#h#^i#i#^i#o#^i&^#^i&_#^i&n#^iY#^i#p#^is#^iq#^i|#^i~O#g$TO~P!G{O#g#^i~P!G{O#h#^i#i#^i~P!AmO#p*oO~P9oO#_&aX#a&aX#b&aX#d&aX#e&aX#f&aX#g&aX#h&aX#i&aX#k&aX#o&aX#r&aX&_&aX#p&aXs&aX|&aX~P!9SO!P#liY#li#p#lis#liq#li|#li~P9oO|*rO~P$wO}'^O~O}'^O!r'`O~Oo'_O}'^O!r'`O~O%}TO&P#SO&R#SO|&sP!P&sP~PFdO}'eO~Og^Oh^Ov{O|+PO!P*}O!u}O!z|O%}TO&P!wO&RWO&_!hO&tdO~PFdO}'hO~Oo'iO}'hO~Os+RO~P:|Ou+TO%}TO~Ou'mO})fO%}TOW#Zi!P#Zi#_#Zi#a#Zi#b#Zi#d#Zi#e#Zi#f#Zi#g#Zi#h#Zi#i#Zi#k#Zi#o#Zi#r#Zi&^#Zi&_#Zi&n#Zi&v#ZiY#Zi#p#Zis#Ziq#Zi|#Zi~O}'^OW&diu&di!P&di#_&di#a&di#b&di#d&di#e&di#f&di#g&di#h&di#i&di#k&di#o&di#r&di&^&di&_&di&n&di&v&diY&di#p&dis&diq&di|&di~O#}+]O$P+^O$R+^O$S+_O$T+`O~O|+[O~P##nO$Z+aO&PSO&R!qO~OW+bO!P+cO~O$a+dOZ$_i_$_i`$_ia$_ib$_ic$_ie$_ig$_ih$_ip$_iv$_iw$_iz$_i}$_i!P$_i!S$_i!T$_i!U$_i!V$_i!W$_i!X$_i!Y$_i!Z$_i![$_i!]$_i!^$_i!_$_i!u$_i!z$_i#f$_i#r$_i#t$_i#u$_i#y$_i#z$_i$W$_i$Y$_i$`$_i$c$_i$e$_i$h$_i$l$_i$n$_i$s$_i$u$_i$w$_i$y$_i$|$_i%O$_i%w$_i%}$_i&P$_i&R$_i&X$_i&t$_i|$_i$q$_i~Og^Oh^O$h#sO&P!wO&RWO~O!P+hO~P:|O!P+iO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!Z+nO![!`O!]yO!^yO!_yO!u}O!z|O#fpO#roO#tpO#upO#y!RO#z!QO$W!SO$Y!TO$`!UO$c!VO$e!XO$h!WO$l!YO$n!ZO$q+oO$s![O$u!]O$w!^O$y!_O$|!aO%O!bO%}TO&PRO&RQO&XUO&tdO~O|+mO~P#)QOW&QXY&QXZ&QXu&QX!P&QX&viX&v&QX~P?XOWUXYUXZUXuUX!PUX&vUX&v&]X~P>lOW#tOu#uO&v#vO~OW&UXY%XXu&UX!P%XX&v&UX~OZ#XX~P#.VOY+uO!P+sO~O%Q(hO%U(iOZ$}i_$}i`$}ia$}ib$}ic$}ie$}ig$}ih$}ip$}iv$}iw$}iz$}i}$}i!P$}i!S$}i!T$}i!U$}i!V$}i!W$}i!X$}i!Y$}i!Z$}i![$}i!]$}i!^$}i!_$}i!u$}i!z$}i#f$}i#r$}i#t$}i#u$}i#y$}i#z$}i$W$}i$Y$}i$`$}i$c$}i$e$}i$h$}i$l$}i$n$}i$s$}i$u$}i$w$}i$y$}i$|$}i%O$}i%w$}i%}$}i&P$}i&R$}i&X$}i&t$}i|$}i$a$}i$q$}i~OZ+xO~O%Q(hO%U(iOZ%Vi_%Vi`%Via%Vib%Vic%Vie%Vig%Vih%Vip%Viv%Viw%Viz%Vi}%Vi!P%Vi!S%Vi!T%Vi!U%Vi!V%Vi!W%Vi!X%Vi!Y%Vi!Z%Vi![%Vi!]%Vi!^%Vi!_%Vi!u%Vi!z%Vi#f%Vi#r%Vi#t%Vi#u%Vi#y%Vi#z%Vi$W%Vi$Y%Vi$`%Vi$c%Vi$e%Vi$h%Vi$l%Vi$n%Vi$s%Vi$u%Vi$w%Vi$y%Vi$|%Vi%O%Vi%w%Vi%}%Vi&P%Vi&R%Vi&X%Vi&t%Vi|%Vi$a%Vi$q%Vi~Ou#OO%}TO}&oa!P&oa!m&oa~O!P,OO~Oo(tOq!fa&^!fa~Oq(vO&^&ma~O!m%gO}&li!P&li~O|,XO~P]OW,ZO~P5xOW&UXu&UX#_&UX#a&UX#b&UX#d&UX#e&UX#f&UX#g&UX#h&UX#i&UX#k&UX#o&UX#r&UX&^&UX&_&UX&n&UX&v&UX~OZ#xO!P&UX~P#8^OW$gOZ#xO&v#vO~Op,]Ow,]O~Oq,^O}&rX!P&rX~O!b,`O#]#wOY&UXZ#XX~P#8^OY&SXq&SX|&SX!P&SX~P9oO})]O|&yP~P:|OY&SXg%[Xh%[X%}%[X&P%[X&R%[Xq&SX|&SX!P&SX~Oq,cOY&zX~OY,eO~O})fO|&kP~P:|Oq&jX!P&jX|&jXY&jX~P9oO&bTa~PC[Oo)oOp)oOqna&^na~Oq)pO&^&`a~OW,mO~Ow,nO~Ou#OO%}TO&P,rO&R,qO~Og^Oh^Ov#pO!u#rO&P!wO&RWO&t#oO~Og^Oh^Ov{O|,wO!u}O%}TO&P!wO&RWO&tdO~PFdOw-SO&PSO&R!qO&_#YO~Oq*lOY&ea!P&ea~O#_ma#ama#bma#dma#ema#fma#gma#hma#ima#kma#oma#rma&_ma#pmasma|ma~PEnO|-WO~P$wOZ#xO}'^Oq!|X|!|X!P!|X~Oq-[O|&sX!P&sX~O|-_O!P-^O~O&_!hO~P5VOg^Oh^Ov{O|-cO!P*}O!u}O!z|O%}TO&P!wO&RWO&_!hO&tdO~PFdOs-dO~P9oOs-dO~P:|O}'^OW&dqu&dq!P&dq#_&dq#a&dq#b&dq#d&dq#e&dq#f&dq#g&dq#h&dq#i&dq#k&dq#o&dq#r&dq&^&dq&_&dq&n&dq&v&dqY&dq#p&dqs&dqq&dq|&dq~O|-hO~P##nO!W-lO$O-lO&PSO&R!qO~O!P-oO~O$Z-pO&PSO&R!qO~O!b%vO#p-rOq!`X!P!`X~O!P-tO~P9oO!P-tO~P:|O!P-wO~P9oO|-yO~P#)QO![$aO#p-zO~O!P-|O~O!b-}O~OY.QOZ$lO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%}TO&P(_O&R(^O&XUO~PFdOY.QO!P.RO~O%Q(hO%U(iOZ%Vq_%Vq`%Vqa%Vqb%Vqc%Vqe%Vqg%Vqh%Vqp%Vqv%Vqw%Vqz%Vq}%Vq!P%Vq!S%Vq!T%Vq!U%Vq!V%Vq!W%Vq!X%Vq!Y%Vq!Z%Vq![%Vq!]%Vq!^%Vq!_%Vq!u%Vq!z%Vq#f%Vq#r%Vq#t%Vq#u%Vq#y%Vq#z%Vq$W%Vq$Y%Vq$`%Vq$c%Vq$e%Vq$h%Vq$l%Vq$n%Vq$s%Vq$u%Vq$w%Vq$y%Vq$|%Vq%O%Vq%w%Vq%}%Vq&P%Vq&R%Vq&X%Vq&t%Vq|%Vq$a%Vq$q%Vq~Ou#OO%}TO}&oi!P&oi!m&oi~O&n&bOq!ga&^!ga~O!m%gO}&lq!P&lq~O|.^O~P]Op.`Ow&vOz&tO&PSO&R!qO&_#YO~O!P.aO~Oq,^O}&ra!P&ra~O})]O~P:|Oq.gO|&yX~O|.iO~Oq,cOY&za~Oq.mO|&kX~O|.oO~Ow.pO~Oq!aXu!aX!P!aX!b!aX%}!aX~OZ&QX~P#N{OZUX~P#N{O!P.qO~OZ.rO~OW^yZ#XXu^y!P^y!b^y#]^y#_^y#a^y#b^y#d^y#e^y#f^y#g^y#h^y#i^y#k^y#o^y#r^y&^^y&_^y&n^y&v^yY^y#p^ys^yq^y|^y~OY%`aq%`a!P%`a~P9oO!P#nyY#ny#p#nys#nyq#ny|#ny~P9oO}'^Oq!|a|!|a!P!|a~OZ#xO}'^Oq!|a|!|a!P!|a~O%}TO&P#SO&R#SOq%jX|%jX!P%jX~PFdOq-[O|&sa!P&sa~O|!}X~P$wO|/PO~Os/QO~P9oOW%jO!P/RO~OW%jO$Q/WO&PSO&R!qO!P&|P~OW%jO$U/XO~O!P/YO~O!b%vO#p/[Oq!`X!P!`X~OY/^O~O!P/_O~P9oO#p/`O~P9oO!b/bO~OY/cOZ$lO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%}TO&P(_O&R(^O&XUO~PFdOW#[Ou&[X%}&[X&P&[X&R&[X'O&[X~O&_#YO~P$)QOu#OO%}TO'O/eO&P%SX&R%SX~O&n&bOq!gi&^!gi~Op/iO&PSO&R!qO~OW*iOZ#xO~O!P/kO~OY&SXq&SX~P9oO})]Oq%nX|%nX~P:|Oq.gO|&ya~O!b/nO~O})fOq%cX|%cX~P:|Oq.mO|&ka~OY/qO~O!P/rO~OZ/sO~O}'^Oq!|i|!|i!P!|i~O|!}a~P$wOW%jO!P/wO~OW%jOq/xO!P&|X~OY/|O~P9oOY0OO~OY%Xq!P%Xq~P9oO'O/eO&P%Sa&R%Sa~OY0TO~O!P0WO~Ou#OO!P0YO!Z0ZO%}TO~OY0[O~Oq/xO!P&|a~O!P0_O~OW%jOq/xO!P&}X~OY0aO~P9oOY0bO~OY%Xy!P%Xy~P9oOu#OO%}TO&P%ua&R%ua'O%ua~OY0cO~O!P0dO~Ou#OO!P0eO!Z0fO%}TO~OW%jOq%ra!P%ra~Oq/xO!P&}a~O!P0jO~Ou#OO!P0jO!Z0kO%}TO~O!P0lO~O!P0nO~O#p&QXY&QXs&QXq&QX|&QX~P&bO#pUXYUXsUXqUX|UX~P(iO`Q_P#g&Xc~",
                goto: "#+S'OPPPP'P'd*x.OP'dPP.d.h0PPPPPP1nP3ZPP4v7l:[<z=d?[PPP?bPA{PPPBu3ZPDqPPElPFcFkPPPPPPPPPPPPGvH_PKjKrLOLjLpLvNiNmNmNuP! U!!^!#R!#]P!#r!!^P!#x!$S!!y!$cP!%S!%^!%d!!^!%g!%mFcFc!%q!%{!&O3Z!'m3Z3Z!)iP.hP!)mPP!*_PPPPPP.hP.h!+O.hPP.hP.hPP.h!,g!,qPP!,w!-QPPPPPPPP'PP'PPP!-U!-U!-i!-UPP!-UP!-UP!.S!.VP!-U!.m!-UP!-UP!.p!.sP!-UP!-UP!-UP!-UP!-U!-UP!-UP!.wP!.}!/Q!/WP!-U!/d!/gP!/o!0R!4T!4Z!4a!5g!5m!5{!7R!7X!7_!7i!7o!7u!7{!8R!8X!8_!8e!8k!8q!8w!8}!9T!9_!9e!9o!9uPPP!9{!-U!:pP!>WP!?[P!Ap!BW!E]3ZPPP!F|!Jm!MaPP#!P#!SP#$`#$f#&V#&f#&n#'p#(Y#)T#)^#)a#)oP#)r#*OP#*V#*^P#*aP#*lP#*o#*r#*u#*y#+PstOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y'urOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$]$_$e$l$m$n$o$p$q%O%S%V%Z%^%_%b%d%g%k%u%v%{%|&R&S&[&]&`&b&d&i'X'^'_'`'e'h'i'm'n'p'{'|(O(T(U(`(l(t(v({(})O)Q)R)])f)o)p*P*T*W*l*o*p*q*z*{+O+T+d+f+h+i+l+o+r+s+x+},W,Y,^,`,u-[-^-a-r-t-}.R.V.g.m/O/[/_/b/d/n/q0R0X0Z0[0f0h0k0r#xhO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kt!sT!Q!S!T!{!}$k%p+]+^+_+`-k-m/W/X/x0oQ#mdS&Y#`(}Q&l#oU&q#t$g,ZQ&x#vW(b%O+s.R/dU)Y%j'v+bQ)Z%kS)u&S,WU*f&s-R._Q*k&yQ,t*TQ-P*iQ.j,cR.t,uu!sT!Q!S!T!{!}$k%p+]+^+_+`-k-m/W/X/x0oT%l!r)l#{qO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0k#zlO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kX(c%O+s.R/d$TVO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0k$TkO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0k&O[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s,Y,^,`-^-r-t-}.R.g.m/O/[/_/b/d/n0Z0f0k0rQ&Q#[Q)s&RV.T+x.X/e&O[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s,Y,^,`-^-r-t-}.R.g.m/O/[/_/b/d/n0Z0f0k0rV.T+x.X/e&O]OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s,Y,^,`-^-r-t-}.R.g.m/O/[/_/b/d/n0Z0f0k0rV.U+x.X/eS#Z[.TS$f!O&tS&s#t$gQ&y#vQ)V%dQ-R*iR._,Z$kZO`copx!Y![!_!a#Y#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$_$l$m$n$o$p$q%O%d%g%k%v&b&d'_'`'i'm(O(T(U(t)Q)R)])f)o)p*P*l*o+T+d+h+i+l+o+s,Y,^,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kQ&O#YR,k)p&P_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s+x,Y,^,`-^-r-t-}.R.X.g.m/O/[/_/b/d/e/n0Z0f0k0r!o#QY!e!x#R#T#`#n$]%R%S%V%^%u%|&S&[&`'X'|(`(l({(}*T*p*z+f+r+},W,u-a.V/q0R0X0[0h$SkO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kQ$m!UQ$n!VQ$s!ZQ$|!`R+p(WQ#yiS'q$e*hQ*e&rQ+X'rS,[)T)UQ-O*gQ-Y*vQ.b,]Q.x-QQ.{-ZQ/j.`Q/u.yR0V/iQ'a$bW*[&m'b'c'dQ+W'qU,x*]*^*_Q-X*vQ-f+XS.u,y,zS.z-Y-ZQ/t.vR/v.{]!mP!o'^*q-^/OreOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!gP!o'^*q-^/OW#b`#e%b&]Q'}$oW(d%O+s.R/dS*U&i*WS*w'e-[S*|'h+OR.X+xh#VY!W!e#n#s%V'|*T*z+f,u-aQ)j%wQ)v&WR,o)y#xnOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0k^!kP!g!o'^*q-^/Ov#TY!W#`#n#s%w&W&[&`'|(`(})y*T+f+r,u.W/hQ#g`Q$b{Q$c|Q$d}W%S!e%V*z-aS%Y!h(vQ%`!iQ&m#pQ&n#qQ&o#rQ(u%ZS(y%^({Q*R&eS*v'e-[R-Z*wU)h%v)f.mR+V'p[!mP!o'^*q-^/OT*}'h+O^!iP!g!o'^*q-^/OQ'd$bQ'l$dQ*_&mQ*d&oV*{'h*|+OQ%[!hR,S(vQ(s%YR,R(u#znO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kQ%c!kS(l%S(yR(|%`T#e`%bU#c`#e%bR)z&]Q%f!lQ(n%UQ(r%XQ,U(zR.],VrvOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!mP!o'^*q-^/OQ%P!bQ%a!jQ%i!pQ'[$ZQ([$|Q(k%QQ(p%WQ+z(iR.Y+yrtOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!mP!o'^*q-^/OS*V&i*WT*}'h+OQ'c$bS*^&m'dR,z*_Q'b$bQ'g$cU*]&m'c'dQ*a&nS,y*^*_R.v,zQ*u'`R+Q'iQ'k$dS*c&o'lR,}*dQ'j$dU*b&o'k'lS,|*c*dR.w,}rtOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!mP!o'^*q-^/OT*}'h+OQ'f$cS*`&n'gR,{*aQ*x'eR.|-[R-`*yQ&j#mR*Z&lT*V&i*WQ%e!lS(q%X%fR,P(rR)R%dWk%O+s.R/d#{lO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0k$SiO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kU&r#t$g,ZS*g&s._Q-Q*iR.y-RT'o$e'p!_#|m#a$r$z$}&w&z&{'O'P'Q'R'S'W'Z)[)g+S+g+j-T-V-e-v-{.e/Z/a/}0Q!]$Pm#a$r$z$}&w&z&{'O'P'R'S'W'Z)[)g+S+g+j-T-V-e-v-{.e/Z/a/}0Q#{nO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0ka)^%k)],`.g/n0Z0f0kQ)`%kR.k,cQ't$hQ)b%oR,f)cT+Y's+ZsvOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YruOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YQ$w!]R$y!^R$p!XrvOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YR(O$oR$q!XR(V$sT+k(U+lX(f%P(g(k+{R+y(hQ.W+xR/h.XQ(j%PQ+w(gQ+|(kR.Z+{R%Q!bQ(e%OV.P+s.R/dQxOQ#lcW$`x#l)Q,YQ)Q%dR,Y)RrXOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Yn!fP!o#e&]&i'^'e'h*W*q+O+x-[-^/Ol!zX!f#P#_#i$[%Z%_%{&R'n'{)O0r!j#PY!e!x#T#`#n$]%S%V%^%u%|&S&[&`'X'|(`(l({(}*T*p*z+f+r+},W,u-a.V/q0R0X0[0hQ#_`Q#ia#d$[op!Y!_!a#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$l%g%k%v&b&d'_'`'i'm(O(T(t)])f)o*P*l*o+T+h+i+o,^,`-r-t-}.g.m/[/_/b/n0Z0f0kS%Z!h(vS%_!i*{S%{#Y)pQ&R#[S'n$e'pY'{$o%O+s.R/dQ)O%bR0r$YQ!uUR%m!uQ)q&OR,l)q^#RY#`$]'X'|(`*px%R!e!x#n%V%^%|&S&[&`({(}*T*z+f+r,W,u-a.V0R[%t#R%R%u+}0X0hS%u#T%SQ+}(lQ0X/qR0h0[Q*m&{R-U*mQ!oPU%h!o*q/OQ*q'^R/O-^!pbOP`cx![!o#e#l$_$m$n$o$p$q%O%b%d&]&i'^'e'h(U)Q)R*W*q+O+d+l+s+x,Y-[-^.R/O/dY!yX!f#_'{)OT#jb!yQ.n,gR/p.nQ%x#VR)k%xQ&c#fS*O&c.[R.[,QQ(w%[R,T(wQ&^#cR){&^Q,_)WR.d,_Q+O'hR-b+OQ-]*xR.}-]Q*W&iR,v*WQ'p$eR+U'pQ&f#gR*S&fQ.h,aR/m.hQ,d)`R.l,dQ+Z'sR-g+ZQ-k+]R/T-kQ/y/US0^/y0`R0`/{Q+l(UR-x+lQ(g%PS+v(g+{R+{(kQ/f.VR0S/fQ+t(eR.S+t`wOcx#l%d)Q)R,YQ$t![Q']$_Q'y$mQ'z$nQ(Q$pQ(R$qS+k(U+lR-q+d'dsOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$]$_$e$l$m$n$o$p$q%O%S%V%Z%^%_%b%d%g%u%v%{%|&R&S&[&]&`&b&d&i'X'^'_'`'e'h'i'm'n'p'{'|(O(T(U(`(l(t(v({(})O)Q)R)f)o)p*P*T*W*l*o*p*q*z*{+O+T+d+f+h+i+l+o+r+s+x+},W,Y,^,u-[-^-a-r-t-}.R.V.m/O/[/_/b/d/q0R0X0[0h0ra)_%k)],`.g/n0Z0f0kQ!rTQ$h!QQ$i!SQ$j!TQ%o!{Q%q!}Q'x$kQ)c%pQ)l0oS-i+]+_Q-m+^Q-n+`Q/S-kS/U-m/WQ/{/XR0]/x%uSOT`cdopx!Q!S!T!Y![!_!a!{!}#`#l#o#t#u#v#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$g$k$l$m$n$o$p$q%O%d%j%k%p%v&S&d&s&y'm'v(O(T(U(})Q)R)])f*P*T*i*l*o+T+]+^+_+`+b+d+h+i+l+o+s,W,Y,Z,`,c,u-R-k-m-r-t-}.R._.g.m/W/X/[/_/b/d/n/x0Z0f0k0oQ)a%kQ,a)]S.f,`/nQ/l.gQ0g0ZQ0i0fR0m0krmOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YS#a`$lQ$WoQ$^pQ$r!YQ$z!_Q$}!aQ&w#uQ&z#wY&{#x$o+h-t/_Q&}#|Q'O#}Q'P$OQ'Q$PQ'R$QQ'S$RQ'T$SQ'U$TQ'V$UQ'W$VQ'Z$Z^)[%k)].g/n0Z0f0kU)g%v)f.mQ*Q&dQ+S'mQ+g(OQ+j(TQ,p*PQ-T*lQ-V*oQ-e+TQ-v+iQ-{+oQ.e,`Q/Z-rQ/a-}Q/}/[R0Q/b#xgO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kW(a%O+s.R/dR)S%drYOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!eP!o'^*q-^/OW!xX$[%{'{Q#``Q#ne#S$]op!Y!_!a#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$l%k%v&d'm(O(T)])f*P*l*o+T+h+i+o,`-r-t-}.g.m/[/_/b/n0Z0f0kQ%V!gS%^!i*{d%|#Y%g&b'_'`'i(t)o)p,^Q&S#_Q&[#bS&`#e&]Q'X$YQ'|$oW(`%O+s.R/dQ({%_Q(}%bS*T&i*WQ*p0rS*z'h+OQ+f'}Q+r(dQ,W)OQ,u*UQ-a*|S.V+x.XR0R/e&O_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s+x,Y,^,`-^-r-t-}.R.X.g.m/O/[/_/b/d/e/n0Z0f0k0rQ$e!OQ'r$fR*h&t&ZWOPX`ceopx!O!Y![!_!a!g!i!o#Y#[#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&R&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s+x,Y,^,`-^-r-t-}.R.X.g.m/O/[/_/b/d/e/n0Z0f0k0rR&P#Y$QjOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kQ#f`Q&O#YQ'Y$YU)W%g'`'iQ)}&bQ*s'_Q,Q(tQ,j)oQ,k)pR.c,^Q)n%}R,i)m$SfO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kT&p#t,ZQ&|#xQ(P$oQ-u+hQ/]-tR0P/_]!nP!o'^*q-^/O#PaOPX`bcx![!f!o!y#_#e#l$_$m$n$o$p$q%O%b%d&]&i'^'e'h'{(U)O)Q)R*W*q+O+d+l+s+x,Y-[-^.R/O/dU#WY!W'|Q%T!eU&k#n#s+fQ(o%VS,s*T*zT.s,u-aj#UY!W!e#n#s%V%w&W)y*T*z,u-aU&V#`&`(}Q)x&[Q+e'|Q+q(`Q-s+fQ.O+rQ/g.WR0U/hQ)i%vQ,g)fR/o.mR,h)f`!jP!o'^'h*q+O-^/OT%W!g*|R%]!hW%U!e%V*z-aQ(z%^R,V({S#d`%bR&a#eQ)X%gT*t'`'iR*y'e[!lP!o'^*q-^/OR%X!gR#h`R,b)]R)a%kT-j+]-kQ/V-mR/z/WR/z/X",
                nodeNames: "\u26a0 LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp LogicOp BitOp BitOp BitOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource ClassContent",
                maxTerm: 276,
                nodeProps: [["isolate", -4, 1, 2, 18, 19, ""], ["group", -26, 4, 47, 76, 77, 82, 87, 92, 145, 147, 150, 151, 153, 156, 158, 161, 163, 165, 167, 172, 174, 176, 178, 180, 181, 183, 191, "Statement", -25, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 39, 40, 41, 99, 100, 102, 103, 106, 118, 120, 122, 125, 127, 130, "Expression", -7, 23, 24, 25, 26, 27, 29, 34, "Type"], ["openedBy", 10, "(", 44, "{"], ["closedBy", 11, ")", 45, "}"]],
                propSources: [a],
                skippedNodes: [0, 1, 2],
                repeatNodeCount: 28,
                tokenData: "#$f_R!_OX%QXY'fYZ)bZ^'f^p%Qpq'fqr*|rs,^st%Qtu4euv5qvw7Rwx8ixyAQyzAnz{B[{|CQ|}Dh}!OEU!O!PFo!P!Q! i!Q!R!,_!R![!0V![!]!>g!]!^!?w!^!_!@e!_!`!BO!`!a!Br!a!b!D`!b!c!EO!c!}!Kz!}#O!MW#O#P%Q#P#Q!Mt#Q#R!Nb#R#S4e#S#T%Q#T#o4e#o#p# U#p#q# r#q#r##[#r#s##x#s#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%QS%VV&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS%qO&YSS%tVOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZS&^VOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS&vP;=`<%l%QS&|UOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZS'cP;=`<%l&Z_'mk&YS%yZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qs#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%Q_)iY&YS%yZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XZ*^Y%yZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XV+TX#tP&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QU+wV#_Q&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT,aXOY,|YZ%lZr,|rs3Ys#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T-PXOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT-qX&YSOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT.cVcPOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZT.}V&YSOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT/iW&YSOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0UWOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0sOcPP0vTOY0RYZ0RZ;'S0R;'S;=`1V<%lO0RP1YP;=`<%l0RT1`XOY,|YZ%lZr,|rs1{s#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T2QUcPOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZT2gVOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT3PP;=`<%l-lT3VP;=`<%l,|T3_VcPOY&ZYZ%lZr&Zrs3ts;'S&Z;'S;=`'`<%lO&ZT3yR&WSXY4SYZ4`pq4SP4VRXY4SYZ4`pq4SP4eO&XP_4la&PZ&YSOY%QYZ%lZr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o;'S%Q;'S;=`&s<%lO%QU5xX#hQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU6lV#]Q&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV7YZ&nR&YSOY%QYZ%lZr%Qrs%qsv%Qvw7{w!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU8SV#aQ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT8nZ&YSOY9aYZ%lZr9ars:osw9awx%Qx#O9a#O#P;y#P;'S9a;'S;=`@z<%lO9aT9fX&YSOY%QYZ%lZr%Qrs%qsw%Qwx:Rx;'S%Q;'S;=`&s<%lO%QT:YVbP&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT:rXOY&ZYZ%lZr&Zrs&ysw&Zwx;_x;'S&Z;'S;=`'`<%lO&ZT;dVbPOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT<OZ&YSOY<qYZ%lZr<qrs=isw<qwx9ax#O<q#O#P9a#P;'S<q;'S;=`?T<%lO<qT<vZ&YSOY<qYZ%lZr<qrs=isw<qwx:Rx#O<q#O#P%Q#P;'S<q;'S;=`?T<%lO<qT=lZOY>_YZ%lZr>_rs?Zsw>_wx;_x#O>_#O#P&Z#P;'S>_;'S;=`@t<%lO>_T>bZOY<qYZ%lZr<qrs=isw<qwx:Rx#O<q#O#P%Q#P;'S<q;'S;=`?T<%lO<qT?WP;=`<%l<qT?^ZOY>_YZ%lZr>_rs@Psw>_wx;_x#O>_#O#P&Z#P;'S>_;'S;=`@t<%lO>_P@SVOY@PZw@Pwx@ix#O@P#P;'S@P;'S;=`@n<%lO@PP@nObPP@qP;=`<%l@PT@wP;=`<%l>_T@}P;=`<%l9a_AXVZZ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVAuVYR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVBeX$ZP&YS#gQOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVCXZ#fR&YSOY%QYZ%lZr%Qrs%qs{%Q{|Cz|!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVDRV#rR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVDoVqR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVE][#fR&YSOY%QYZ%lZr%Qrs%qs}%Q}!OCz!O!_%Q!_!`6e!`!aFR!a;'S%Q;'S;=`&s<%lO%QVFYV&xR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_FvZWY&YSOY%QYZ%lZr%Qrs%qs!O%Q!O!PGi!P!Q%Q!Q![Hw![;'S%Q;'S;=`&s<%lO%QVGnX&YSOY%QYZ%lZr%Qrs%qs!O%Q!O!PHZ!P;'S%Q;'S;=`&s<%lO%QVHbV&qR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTIOc&YS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![!f%Q!f!gJZ!g!hJw!h!iJZ!i#R%Q#R#SNq#S#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QTJbV&YS`POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTJ|]&YSOY%QYZ%lZr%Qrs%qs{%Q{|Ku|}%Q}!OKu!O!Q%Q!Q![Lg![;'S%Q;'S;=`&s<%lO%QTKzX&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![;'S%Q;'S;=`&s<%lO%QTLnc&YS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![!f%Q!f!gJZ!g!h%Q!h!iJZ!i#R%Q#R#SMy#S#W%Q#W#XJZ#X#Y%Q#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QTNOZ&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![#R%Q#R#SMy#S;'S%Q;'S;=`&s<%lO%QTNvZ&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![#R%Q#R#SNq#S;'S%Q;'S;=`&s<%lO%Q_! p]&YS#gQOY%QYZ%lZr%Qrs%qsz%Qz{!!i{!P%Q!P!Q!)[!Q!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%Q_!!nX&YSOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{;'S!!i;'S;=`!'j<%lO!!i_!#`T&YSOz!#oz{!$R{;'S!#o;'S;=`!$p<%lO!#oZ!#rTOz!#oz{!$R{;'S!#o;'S;=`!$p<%lO!#oZ!$UVOz!#oz{!$R{!P!#o!P!Q!$k!Q;'S!#o;'S;=`!$p<%lO!#oZ!$pOQZZ!$sP;=`<%l!#o_!$yXOY!%fYZ!#ZZr!%frs!'psz!%fz{!(`{;'S!%f;'S;=`!)U<%lO!%f_!%iXOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{;'S!!i;'S;=`!'j<%lO!!i_!&ZZ&YSOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{!P!!i!P!Q!&|!Q;'S!!i;'S;=`!'j<%lO!!i_!'TV&YSQZOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!'mP;=`<%l!!i_!'sXOY!%fYZ!#ZZr!%frs!#osz!%fz{!(`{;'S!%f;'S;=`!)U<%lO!%f_!(cZOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{!P!!i!P!Q!&|!Q;'S!!i;'S;=`!'j<%lO!!i_!)XP;=`<%l!%f_!)cV&YSPZOY!)[YZ%lZr!)[rs!)xs;'S!)[;'S;=`!+O<%lO!)[_!)}VPZOY!*dYZ%lZr!*drs!+Us;'S!*d;'S;=`!,X<%lO!*d_!*iVPZOY!)[YZ%lZr!)[rs!)xs;'S!)[;'S;=`!+O<%lO!)[_!+RP;=`<%l!)[_!+ZVPZOY!*dYZ%lZr!*drs!+ps;'S!*d;'S;=`!,X<%lO!*dZ!+uSPZOY!+pZ;'S!+p;'S;=`!,R<%lO!+pZ!,UP;=`<%l!+p_!,[P;=`<%l!*dT!,fu&YS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.y!P!Q%Q!Q![!0V![!d%Q!d!e!3a!e!f%Q!f!gJZ!g!hJw!h!iJZ!i!n%Q!n!o!1{!o!q%Q!q!r!5_!r!z%Q!z!{!7V!{#R%Q#R#S!2i#S#U%Q#U#V!3a#V#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z#`%Q#`#a!1{#a#c%Q#c#d!5_#d#l%Q#l#m!7V#m;'S%Q;'S;=`&s<%lO%QT!/Qa&YS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![!f%Q!f!gJZ!g!hJw!h!iJZ!i#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QT!0^i&YS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.y!P!Q%Q!Q![!0V![!f%Q!f!gJZ!g!hJw!h!iJZ!i!n%Q!n!o!1{!o#R%Q#R#S!2i#S#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!2SV&YS_POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT!2nZ&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!0V![#R%Q#R#S!2i#S;'S%Q;'S;=`&s<%lO%QT!3fY&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4U!R!S!4U!S;'S%Q;'S;=`&s<%lO%QT!4]`&YS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4U!R!S!4U!S!n%Q!n!o!1{!o#R%Q#R#S!3a#S#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!5dX&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6P!Y;'S%Q;'S;=`&s<%lO%QT!6W_&YS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6P!Y!n%Q!n!o!1{!o#R%Q#R#S!5_#S#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!7[_&YSOY%QYZ%lZr%Qrs%qs!O%Q!O!P!8Z!P!Q%Q!Q![!:i![!c%Q!c!i!:i!i#T%Q#T#Z!:i#Z;'S%Q;'S;=`&s<%lO%QT!8`]&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i#T%Q#T#Z!9X#Z;'S%Q;'S;=`&s<%lO%QT!9^c&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i!r%Q!r!sJw!s#R%Q#R#S!8Z#S#T%Q#T#Z!9X#Z#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!:pi&YS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!<_!P!Q%Q!Q![!:i![!c%Q!c!i!:i!i!n%Q!n!o!1{!o!r%Q!r!sJw!s#R%Q#R#S!=i#S#T%Q#T#Z!:i#Z#`%Q#`#a!1{#a#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!<da&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i!r%Q!r!sJw!s#T%Q#T#Z!9X#Z#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!=n]&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!:i![!c%Q!c!i!:i!i#T%Q#T#Z!:i#Z;'S%Q;'S;=`&s<%lO%QV!>nX#pR&YSOY%QYZ%lZr%Qrs%qs![%Q![!]!?Z!];'S%Q;'S;=`&s<%lO%QV!?bV&vR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!@OV!PR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!@lY&_Z&YSOY%QYZ%lZr%Qrs%qs!^%Q!^!_!A[!_!`+p!`;'S%Q;'S;=`&s<%lO%QU!AcX#iQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV!BVX!bR&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QV!ByY&^R&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`!a!Ci!a;'S%Q;'S;=`&s<%lO%QU!CpY#iQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`!a!A[!a;'S%Q;'S;=`&s<%lO%Q_!DiV&bX#oQ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!EVX%}Z&YSOY%QYZ%lZr%Qrs%qs#]%Q#]#^!Er#^;'S%Q;'S;=`&s<%lO%QV!EwX&YSOY%QYZ%lZr%Qrs%qs#b%Q#b#c!Fd#c;'S%Q;'S;=`&s<%lO%QV!FiX&YSOY%QYZ%lZr%Qrs%qs#h%Q#h#i!GU#i;'S%Q;'S;=`&s<%lO%QV!GZX&YSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!Gv#Y;'S%Q;'S;=`&s<%lO%QV!G{X&YSOY%QYZ%lZr%Qrs%qs#f%Q#f#g!Hh#g;'S%Q;'S;=`&s<%lO%QV!HmX&YSOY%QYZ%lZr%Qrs%qs#Y%Q#Y#Z!IY#Z;'S%Q;'S;=`&s<%lO%QV!I_X&YSOY%QYZ%lZr%Qrs%qs#T%Q#T#U!Iz#U;'S%Q;'S;=`&s<%lO%QV!JPX&YSOY%QYZ%lZr%Qrs%qs#V%Q#V#W!Jl#W;'S%Q;'S;=`&s<%lO%QV!JqX&YSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!K^#Y;'S%Q;'S;=`&s<%lO%QV!KeV&tR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!LRa&RZ&YSOY%QYZ%lZr%Qrs%qst%Qtu!Kzu!Q%Q!Q![!Kz![!c%Q!c!}!Kz!}#R%Q#R#S!Kz#S#T%Q#T#o!Kz#o;'S%Q;'S;=`&s<%lO%Q_!M_VuZ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!M{VsR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QU!NiX#eQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV# ]V}R&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_# {Z'OX#dQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`#p%Q#p#q#!n#q;'S%Q;'S;=`&s<%lO%QU#!uV#bQ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV##cV|R&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT#$PV#uP&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q",
                tokenizers: [0, 1, 2, 3],
                topRules: {
                    Program: [0, 3],
                    ClassContent: [1, 194]
                },
                dynamicPrecedences: {
                    27: 1,
                    232: -1,
                    243: -1
                },
                specialized: [{
                    term: 231,
                    get: e => o[e] || -1
                }],
                tokenPrec: 7144
            });
        var s = n(25956);
        const l = s.bj.define({
            name: "java",
            parser: O.configure({
                props: [s.Oh.add({
                    IfStatement: (0,
                        s.mz)({
                            except: /^\s*({|else\b)/
                        }),
                    TryStatement: (0,
                        s.mz)({
                            except: /^\s*({|catch|finally)\b/
                        }),
                    LabeledStatement: s._Y,
                    SwitchBlock: e => {
                        let t = e.textAfter
                            , n = /^\s*\}/.test(t)
                            , i = /^\s*(case|default)\b/.test(t);
                        return e.baseIndent + (n ? 0 : i ? 1 : 2) * e.unit
                    }
                    ,
                    Block: (0,
                        s.Ay)({
                            closing: "}"
                        }),
                    BlockComment: () => null,
                    Statement: (0,
                        s.mz)({
                            except: /^{/
                        })
                }), s.b_.add({
                    "Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody ConstructorBody InterfaceBody ArrayInitializer": s.yd,
                    BlockComment: e => ({
                        from: e.from + 2,
                        to: e.to - 2
                    })
                })]
            }),
            languageData: {
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                indentOnInput: /^\s*(?:case |default:|\{|\})$/
            }
        });
        function c() {
            return new s.Yy(l)
        }
    }
    ,
    74668: (e, t, n) => {
        n.r(t),
            n.d(t, {
                autoCloseTags: () => Z,
                completionPath: () => y,
                esLint: () => q,
                javascript: () => z,
                javascriptLanguage: () => P,
                jsxLanguage: () => k,
                localCompletionSource: () => $,
                scopeCompletionSource: () => S,
                snippets: () => l,
                tsxLanguage: () => w,
                typescriptLanguage: () => x,
                typescriptSnippets: () => c
            });
        var i = n(40193)
            , r = n(25956)
            , a = n(17471)
            , o = n(32043)
            , O = n(46774)
            , s = n(45615);
        const l = [(0,
            O.Gw)("function ${name}(${params}) {\n\t${}\n}", {
                label: "function",
                detail: "definition",
                type: "keyword"
            }), (0,
                O.Gw)("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
                    label: "for",
                    detail: "loop",
                    type: "keyword"
                }), (0,
                    O.Gw)("for (let ${name} of ${collection}) {\n\t${}\n}", {
                        label: "for",
                        detail: "of loop",
                        type: "keyword"
                    }), (0,
                        O.Gw)("do {\n\t${}\n} while (${})", {
                            label: "do",
                            detail: "loop",
                            type: "keyword"
                        }), (0,
                            O.Gw)("while (${}) {\n\t${}\n}", {
                                label: "while",
                                detail: "loop",
                                type: "keyword"
                            }), (0,
                                O.Gw)("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
                                    label: "try",
                                    detail: "/ catch block",
                                    type: "keyword"
                                }), (0,
                                    O.Gw)("if (${}) {\n\t${}\n}", {
                                        label: "if",
                                        detail: "block",
                                        type: "keyword"
                                    }), (0,
                                        O.Gw)("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
                                            label: "if",
                                            detail: "/ else block",
                                            type: "keyword"
                                        }), (0,
                                            O.Gw)("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
                                                label: "class",
                                                detail: "definition",
                                                type: "keyword"
                                            }), (0,
                                                O.Gw)('import {${names}} from "${module}"\n${}', {
                                                    label: "import",
                                                    detail: "named",
                                                    type: "keyword"
                                                }), (0,
                                                    O.Gw)('import ${name} from "${module}"\n${}', {
                                                        label: "import",
                                                        detail: "default",
                                                        type: "keyword"
                                                    })]
            , c = l.concat([(0,
                O.Gw)("interface ${name} {\n\t${}\n}", {
                    label: "interface",
                    detail: "definition",
                    type: "keyword"
                }), (0,
                    O.Gw)("type ${name} = ${type}", {
                        label: "type",
                        detail: "definition",
                        type: "keyword"
                    }), (0,
                        O.Gw)("enum ${name} {\n\t${}\n}", {
                            label: "enum",
                            detail: "definition",
                            type: "keyword"
                        })])
            , u = new s.RY
            , d = new Set(["Script", "Block", "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration", "ForStatement"]);
        function h(e) {
            return (t, n) => {
                let i = t.node.getChild("VariableDefinition");
                return i && n(i, e),
                    !0
            }
        }
        const f = ["FunctionDeclaration"]
            , p = {
                FunctionDeclaration: h("function"),
                ClassDeclaration: h("class"),
                ClassExpression: () => !0,
                EnumDeclaration: h("constant"),
                TypeAliasDeclaration: h("type"),
                NamespaceDeclaration: h("namespace"),
                VariableDefinition(e, t) {
                    e.matchContext(f) || t(e, "variable")
                },
                TypeDefinition(e, t) {
                    t(e, "type")
                },
                __proto__: null
            };
        function m(e, t) {
            let n = u.get(t);
            if (n)
                return n;
            let i = []
                , r = !0;
            function a(t, n) {
                let r = e.sliceString(t.from, t.to);
                i.push({
                    label: r,
                    type: n
                })
            }
            return t.cursor(s.Qj.IncludeAnonymous).iterate((t => {
                if (r)
                    r = !1;
                else if (t.name) {
                    let e = p[t.name];
                    if (e && e(t, a) || d.has(t.name))
                        return !1
                } else if (t.to - t.from > 8192) {
                    for (let n of m(e, t.node))
                        i.push(n);
                    return !1
                }
            }
            )),
                u.set(t, i),
                i
        }
        const g = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/
            , Q = ["TemplateString", "String", "RegExp", "LineComment", "BlockComment", "VariableDefinition", "TypeDefinition", "Label", "PropertyDefinition", "PropertyName", "PrivatePropertyDefinition", "PrivatePropertyName", ".", "?."];
        function $(e) {
            let t = (0,
                r.mv)(e.state).resolveInner(e.pos, -1);
            if (Q.indexOf(t.name) > -1)
                return null;
            let n = "VariableName" == t.name || t.to - t.from < 20 && g.test(e.state.sliceDoc(t.from, t.to));
            if (!n && !e.explicit)
                return null;
            let i = [];
            for (let r = t; r; r = r.parent)
                d.has(r.name) && (i = i.concat(m(e.state.doc, r)));
            return {
                options: i,
                from: n ? t.from : e.pos,
                validFor: g
            }
        }
        function b(e, t, n) {
            var i;
            let r = [];
            for (; ;) {
                let a, o = t.firstChild;
                if ("VariableName" == (null === o || void 0 === o ? void 0 : o.name))
                    return r.push(e(o)),
                    {
                        path: r.reverse(),
                        name: n
                    };
                if ("MemberExpression" != (null === o || void 0 === o ? void 0 : o.name) || "PropertyName" != (null === (i = a = o.lastChild) || void 0 === i ? void 0 : i.name))
                    return null;
                r.push(e(a)),
                    t = o
            }
        }
        function y(e) {
            let t = t => e.state.doc.sliceString(t.from, t.to)
                , n = (0,
                    r.mv)(e.state).resolveInner(e.pos, -1);
            return "PropertyName" == n.name ? b(t, n.parent, t(n)) : "." != n.name && "?." != n.name || "MemberExpression" != n.parent.name ? Q.indexOf(n.name) > -1 ? null : "VariableName" == n.name || n.to - n.from < 20 && g.test(t(n)) ? {
                path: [],
                name: t(n)
            } : "MemberExpression" == n.name ? b(t, n, "") : e.explicit ? {
                path: [],
                name: ""
            } : null : b(t, n.parent, "")
        }
        function S(e) {
            let t = new Map;
            return n => {
                let i = y(n);
                if (!i)
                    return null;
                let r = e;
                for (let e of i.path)
                    if (r = r[e],
                        !r)
                        return null;
                let a = t.get(r);
                return a || t.set(r, a = function (e, t) {
                    let n = []
                        , i = new Set;
                    for (let a = 0; ; a++) {
                        for (let O of (Object.getOwnPropertyNames || Object.keys)(e)) {
                            if (!/^[a-zA-Z_$\xaa-\uffdc][\w$\xaa-\uffdc]*$/.test(O) || i.has(O))
                                continue;
                            let o;
                            i.add(O);
                            try {
                                o = e[O]
                            } catch (r) {
                                continue
                            }
                            n.push({
                                label: O,
                                type: "function" == typeof o ? /^[A-Z]/.test(O) ? "class" : t ? "function" : "method" : t ? "variable" : "property",
                                boost: -a
                            })
                        }
                        let o = Object.getPrototypeOf(e);
                        if (!o)
                            return n;
                        e = o
                    }
                }(r, !i.path.length)),
                {
                    from: n.pos - i.name.length,
                    options: a,
                    validFor: g
                }
            }
        }
        const P = r.bj.define({
            name: "javascript",
            parser: i.K.configure({
                props: [r.Oh.add({
                    IfStatement: (0,
                        r.mz)({
                            except: /^\s*({|else\b)/
                        }),
                    TryStatement: (0,
                        r.mz)({
                            except: /^\s*({|catch\b|finally\b)/
                        }),
                    LabeledStatement: r._Y,
                    SwitchBody: e => {
                        let t = e.textAfter
                            , n = /^\s*\}/.test(t)
                            , i = /^\s*(case|default)\b/.test(t);
                        return e.baseIndent + (n ? 0 : i ? 1 : 2) * e.unit
                    }
                    ,
                    Block: (0,
                        r.Ay)({
                            closing: "}"
                        }),
                    ArrowFunction: e => e.baseIndent + e.unit,
                    "TemplateString BlockComment": () => null,
                    "Statement Property": (0,
                        r.mz)({
                            except: /^{/
                        }),
                    JSXElement(e) {
                        let t = /^\s*<\//.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    JSXEscape(e) {
                        let t = /\s*\}/.test(e.textAfter);
                        return e.lineIndent(e.node.from) + (t ? 0 : e.unit)
                    },
                    "JSXOpenTag JSXSelfClosingTag": e => e.column(e.node.from) + e.unit
                }), r.b_.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": r.yd,
                    BlockComment: e => ({
                        from: e.from + 2,
                        to: e.to - 2
                    })
                })]
            }),
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "`"]
                },
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
                wordChars: "$"
            }
        })
            , v = {
                test: e => /^JSX/.test(e.name),
                facet: (0,
                    r.p9)({
                        commentTokens: {
                            block: {
                                open: "{/*",
                                close: "*/}"
                            }
                        }
                    })
            }
            , x = P.configure({
                dialect: "ts"
            }, "typescript")
            , k = P.configure({
                dialect: "jsx",
                props: [r.Q0.add((e => e.isTop ? [v] : void 0))]
            })
            , w = P.configure({
                dialect: "jsx ts",
                props: [r.Q0.add((e => e.isTop ? [v] : void 0))]
            }, "typescript");
        let X = e => ({
            label: e,
            type: "keyword"
        });
        const _ = "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(X)
            , T = _.concat(["declare", "implements", "private", "protected", "public"].map(X));
        function z() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , t = e.jsx ? e.typescript ? w : k : e.typescript ? x : P
                , n = e.typescript ? c.concat(T) : l.concat(_);
            return new r.Yy(t, [P.data.of({
                autocomplete: (0,
                    O.Ar)(Q, (0,
                        O.et)(n))
            }), P.data.of({
                autocomplete: $
            }), e.jsx ? Z : []])
        }
        function R(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length;
            for (let i = null === t || void 0 === t ? void 0 : t.firstChild; i; i = i.nextSibling)
                if ("JSXIdentifier" == i.name || "JSXBuiltin" == i.name || "JSXNamespacedName" == i.name || "JSXMemberExpression" == i.name)
                    return e.sliceString(i.from, Math.min(i.to, n));
            return ""
        }
        const W = "object" == typeof navigator && /Android\b/.test(navigator.userAgent)
            , Z = o.Lz.inputHandler.of(((e, t, n, i, o) => {
                if ((W ? e.composing : e.compositionStarted) || e.state.readOnly || t != n || ">" != i && "/" != i || !P.isActiveAt(e.state, t, -1))
                    return !1;
                let O = o()
                    , { state: s } = O
                    , l = s.changeByRange((e => {
                        var t;
                        let n, { head: o } = e, O = (0,
                            r.mv)(s).resolveInner(o - 1, -1);
                        if ("JSXStartTag" == O.name && (O = O.parent),
                            s.doc.sliceString(o - 1, o) != i || "JSXAttributeValue" == O.name && O.to > o)
                            ;
                        else {
                            if (">" == i && "JSXFragmentTag" == O.name)
                                return {
                                    range: e,
                                    changes: {
                                        from: o,
                                        insert: "</>"
                                    }
                                };
                            if ("/" == i && "JSXStartCloseTag" == O.name) {
                                let e = O.parent
                                    , i = e.parent;
                                if (i && e.from == o - 2 && ((n = R(s.doc, i.firstChild, o)) || "JSXFragmentTag" == (null === (t = i.firstChild) || void 0 === t ? void 0 : t.name))) {
                                    let e = `${n}>`;
                                    return {
                                        range: a.OF.cursor(o + e.length, -1),
                                        changes: {
                                            from: o,
                                            insert: e
                                        }
                                    }
                                }
                            } else if (">" == i) {
                                let t = function (e) {
                                    for (; ;) {
                                        if ("JSXOpenTag" == e.name || "JSXSelfClosingTag" == e.name || "JSXFragmentTag" == e.name)
                                            return e;
                                        if ("JSXEscape" == e.name || !e.parent)
                                            return null;
                                        e = e.parent
                                    }
                                }(O);
                                if (t && "JSXOpenTag" == t.name && !/^\/?>|^<\//.test(s.doc.sliceString(o, o + 2)) && (n = R(s.doc, t, o)))
                                    return {
                                        range: e,
                                        changes: {
                                            from: o,
                                            insert: `</${n}>`
                                        }
                                    }
                            }
                        }
                        return {
                            range: e
                        }
                    }
                    ));
                return !l.changes.empty && (e.dispatch([O, s.update(l, {
                    userEvent: "input.complete",
                    scrollIntoView: !0
                })]),
                    !0)
            }
            ));
        function q(e, t) {
            return t || (t = {
                parserOptions: {
                    ecmaVersion: 2019,
                    sourceType: "module"
                },
                env: {
                    browser: !0,
                    node: !0,
                    es6: !0,
                    es2015: !0,
                    es2017: !0,
                    es2020: !0
                },
                rules: {}
            },
                e.getRules().forEach(((e, n) => {
                    e.meta.docs.recommended && (t.rules[n] = 2)
                }
                ))),
                n => {
                    let { state: i } = n
                        , r = [];
                    for (let { from: a, to: o } of P.findRegions(i)) {
                        let n = i.doc.lineAt(a)
                            , O = {
                                line: n.number - 1,
                                col: a - n.from,
                                pos: a
                            };
                        for (let s of e.verify(i.sliceDoc(a, o), t))
                            r.push(Y(s, i.doc, O))
                    }
                    return r
                }
        }
        function U(e, t, n, i) {
            return n.line(e + i.line).from + t + (1 == e ? i.col - 1 : -1)
        }
        function Y(e, t, n) {
            let i = U(e.line, e.column, t, n)
                , r = {
                    from: i,
                    to: null != e.endLine && 1 != e.endColumn ? U(e.endLine, e.endColumn, t, n) : i,
                    message: e.message,
                    source: e.ruleId ? "eslint:" + e.ruleId : "eslint",
                    severity: 1 == e.severity ? "warning" : "error"
                };
            if (e.fix) {
                let { range: t, text: a } = e.fix
                    , o = t[0] + n.pos - i
                    , O = t[1] + n.pos - i;
                r.actions = [{
                    name: "fix",
                    apply(e, t) {
                        e.dispatch({
                            changes: {
                                from: t + o,
                                to: t + O,
                                insert: a
                            },
                            scrollIntoView: !0
                        })
                    }
                }]
            }
            return r
        }
    }
    ,
    19690: (e, t, n) => {
        n.r(t),
            n.d(t, {
                json: () => c,
                jsonLanguage: () => l,
                jsonParseLinter: () => s
            });
        var i = n(5178)
            , r = n(14462);
        const a = (0,
            r.pn)({
                String: r._A.string,
                Number: r._A.number,
                "True False": r._A.bool,
                PropertyName: r._A.propertyName,
                Null: r._A.null,
                ",": r._A.separator,
                "[ ]": r._A.squareBracket,
                "{ }": r._A.brace
            })
            , o = i.U1.deserialize({
                version: 14,
                states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
                stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
                goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
                nodeNames: "\u26a0 JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
                maxTerm: 25,
                nodeProps: [["isolate", -2, 6, 11, ""], ["openedBy", 7, "{", 12, "["], ["closedBy", 8, "}", 13, "]"]],
                propSources: [a],
                skippedNodes: [0],
                repeatNodeCount: 2,
                tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
                tokenizers: [0],
                topRules: {
                    JsonText: [0, 1]
                },
                tokenPrec: 0
            });
        var O = n(25956);
        const s = () => e => {
            try {
                JSON.parse(e.state.doc.toString())
            } catch (t) {
                if (!(t instanceof SyntaxError))
                    throw t;
                const n = function (e, t) {
                    let n;
                    return (n = e.message.match(/at position (\d+)/)) ? Math.min(+n[1], t.length) : (n = e.message.match(/at line (\d+) column (\d+)/)) ? Math.min(t.line(+n[1]).from + +n[2] - 1, t.length) : 0
                }(t, e.state.doc);
                return [{
                    from: n,
                    message: t.message,
                    severity: "error",
                    to: n
                }]
            }
            return []
        }
            ;
        const l = O.bj.define({
            name: "json",
            parser: o.configure({
                props: [O.Oh.add({
                    Object: (0,
                        O.mz)({
                            except: /^\s*\}/
                        }),
                    Array: (0,
                        O.mz)({
                            except: /^\s*\]/
                        })
                }), O.b_.add({
                    "Object Array": O.yd
                })]
            }),
            languageData: {
                closeBrackets: {
                    brackets: ["[", "{", '"']
                },
                indentOnInput: /^\s*[\}\]]$/
            }
        });
        function c() {
            return new O.Yy(l)
        }
    }
    ,
    66195: (e, t, n) => {
        n.r(t),
            n.d(t, {
                php: () => v,
                phpLanguage: () => P
            });
        var i = n(5178)
            , r = n(14462);
        const a = {
            abstract: 4,
            and: 5,
            array: 6,
            as: 7,
            true: 8,
            false: 8,
            break: 9,
            case: 10,
            catch: 11,
            clone: 12,
            const: 13,
            continue: 14,
            declare: 16,
            default: 15,
            do: 17,
            echo: 18,
            else: 19,
            elseif: 20,
            enddeclare: 21,
            endfor: 22,
            endforeach: 23,
            endif: 24,
            endswitch: 25,
            endwhile: 26,
            enum: 27,
            extends: 28,
            final: 29,
            finally: 30,
            fn: 31,
            for: 32,
            foreach: 33,
            from: 34,
            function: 35,
            global: 36,
            goto: 37,
            if: 38,
            implements: 39,
            include: 40,
            include_once: 41,
            instanceof: 42,
            insteadof: 43,
            interface: 44,
            list: 45,
            match: 46,
            namespace: 47,
            new: 48,
            null: 49,
            or: 50,
            print: 51,
            require: 52,
            require_once: 53,
            return: 54,
            switch: 55,
            throw: 56,
            trait: 57,
            try: 58,
            unset: 59,
            use: 60,
            var: 61,
            public: 62,
            private: 62,
            protected: 62,
            while: 63,
            xor: 64,
            yield: 65,
            __proto__: null
        };
        function o(e) {
            let t = a[e.toLowerCase()];
            return null == t ? -1 : t
        }
        function O(e) {
            return 9 == e || 10 == e || 13 == e || 32 == e
        }
        function s(e) {
            return e >= 97 && e <= 122 || e >= 65 && e <= 90
        }
        function l(e) {
            return 95 == e || e >= 128 || s(e)
        }
        function c(e) {
            return e >= 48 && e <= 55 || e >= 97 && e <= 102 || e >= 65 && e <= 70
        }
        const u = {
            int: !0,
            integer: !0,
            bool: !0,
            boolean: !0,
            float: !0,
            double: !0,
            real: !0,
            string: !0,
            array: !0,
            object: !0,
            unset: !0,
            __proto__: null
        }
            , d = new i.Lu((e => {
                if (40 == e.next) {
                    e.advance();
                    let t = 0;
                    for (; O(e.peek(t));)
                        t++;
                    let n, i = "";
                    for (; s(n = e.peek(t));)
                        i += String.fromCharCode(n),
                            t++;
                    for (; O(e.peek(t));)
                        t++;
                    41 == e.peek(t) && u[i.toLowerCase()] && e.acceptToken(1)
                } else if (60 == e.next && 60 == e.peek(1) && 60 == e.peek(2)) {
                    for (let i = 0; i < 3; i++)
                        e.advance();
                    for (; 32 == e.next || 9 == e.next;)
                        e.advance();
                    let t = 39 == e.next;
                    if (t && e.advance(),
                        !l(e.next))
                        return;
                    let n = String.fromCharCode(e.next);
                    for (; e.advance(),
                        l(e.next) || e.next >= 48 && e.next <= 55;)
                        n += String.fromCharCode(e.next);
                    if (t) {
                        if (39 != e.next)
                            return;
                        e.advance()
                    }
                    if (10 != e.next && 13 != e.next)
                        return;
                    for (; ;) {
                        let t = 10 == e.next || 13 == e.next;
                        if (e.advance(),
                            e.next < 0)
                            return;
                        if (t) {
                            for (; 32 == e.next || 9 == e.next;)
                                e.advance();
                            let t = !0;
                            for (let i = 0; i < n.length; i++) {
                                if (e.next != n.charCodeAt(i)) {
                                    t = !1;
                                    break
                                }
                                e.advance()
                            }
                            if (t)
                                return e.acceptToken(2)
                        }
                    }
                }
            }
            ))
            , h = new i.Lu((e => {
                e.next < 0 && e.acceptToken(266)
            }
            ))
            , f = new i.Lu(((e, t) => {
                63 == e.next && t.canShift(265) && 62 == e.peek(1) && e.acceptToken(265)
            }
            ));
        function p(e) {
            let t = e.peek(1);
            if (110 == t || 114 == t || 116 == t || 118 == t || 101 == t || 102 == t || 92 == t || 36 == t || 34 == t || 123 == t)
                return 2;
            if (t >= 48 && t <= 55) {
                let t, n = 2;
                for (; n < 5 && (t = e.peek(n)) >= 48 && t <= 55;)
                    n++;
                return n
            }
            if (120 == t && c(e.peek(2)))
                return c(e.peek(3)) ? 4 : 3;
            if (117 == t && 123 == e.peek(2))
                for (let n = 3; ; n++) {
                    let t = e.peek(n);
                    if (125 == t)
                        return 2 == n ? 0 : n + 1;
                    if (!c(t))
                        break
                }
            return 0
        }
        const m = new i.Lu(((e, t) => {
            let n = !1;
            for (; !(34 == e.next || e.next < 0 || 36 == e.next && (l(e.peek(1)) || 123 == e.peek(1)) || 123 == e.next && 36 == e.peek(1)); n = !0) {
                if (92 == e.next) {
                    let t = p(e);
                    if (t) {
                        if (n)
                            break;
                        return e.acceptToken(3, t)
                    }
                } else if (!n && (91 == e.next || 45 == e.next && 62 == e.peek(1) && l(e.peek(2)) || 63 == e.next && 45 == e.peek(1) && 62 == e.peek(2) && l(e.peek(3))) && t.canShift(264))
                    break;
                e.advance()
            }
            n && e.acceptToken(263)
        }
        ))
            , g = (0,
                r.pn)({
                    "Visibility abstract final static": r._A.modifier,
                    "for foreach while do if else elseif switch try catch finally return throw break continue default case": r._A.controlKeyword,
                    "endif endfor endforeach endswitch endwhile declare enddeclare goto match": r._A.controlKeyword,
                    "and or xor yield unset clone instanceof insteadof": r._A.operatorKeyword,
                    "function fn class trait implements extends const enum global interface use var": r._A.definitionKeyword,
                    "include include_once require require_once namespace": r._A.moduleKeyword,
                    "new from echo print array list as": r._A.keyword,
                    null: r._A.null,
                    Boolean: r._A.bool,
                    VariableName: r._A.variableName,
                    "NamespaceName/...": r._A.namespace,
                    "NamedType/...": r._A.typeName,
                    Name: r._A.name,
                    "CallExpression/Name": r._A.function(r._A.variableName),
                    "LabelStatement/Name": r._A.labelName,
                    "MemberExpression/Name": r._A.propertyName,
                    "MemberExpression/VariableName": r._A.special(r._A.propertyName),
                    "ScopedExpression/ClassMemberName/Name": r._A.propertyName,
                    "ScopedExpression/ClassMemberName/VariableName": r._A.special(r._A.propertyName),
                    "CallExpression/MemberExpression/Name": r._A.function(r._A.propertyName),
                    "CallExpression/ScopedExpression/ClassMemberName/Name": r._A.function(r._A.propertyName),
                    "MethodDeclaration/Name": r._A.function(r._A.definition(r._A.variableName)),
                    "FunctionDefinition/Name": r._A.function(r._A.definition(r._A.variableName)),
                    "ClassDeclaration/Name": r._A.definition(r._A.className),
                    UpdateOp: r._A.updateOperator,
                    ArithOp: r._A.arithmeticOperator,
                    LogicOp: r._A.logicOperator,
                    BitOp: r._A.bitwiseOperator,
                    CompareOp: r._A.compareOperator,
                    ControlOp: r._A.controlOperator,
                    AssignOp: r._A.definitionOperator,
                    "$ ConcatOp": r._A.operator,
                    LineComment: r._A.lineComment,
                    BlockComment: r._A.blockComment,
                    Integer: r._A.integer,
                    Float: r._A.float,
                    String: r._A.string,
                    ShellExpression: r._A.special(r._A.string),
                    "=> ->": r._A.punctuation,
                    "( )": r._A.paren,
                    "#[ [ ]": r._A.squareBracket,
                    "${ { }": r._A.brace,
                    "-> ?->": r._A.derefOperator,
                    ", ; :: : \\": r._A.separator,
                    "PhpOpen PhpClose": r._A.processingInstruction
                })
            , Q = {
                __proto__: null,
                static: 311,
                STATIC: 311,
                class: 333,
                CLASS: 333
            }
            , $ = i.U1.deserialize({
                version: 14,
                states: "$GSQ`OWOOQhQaOOP%oO`OOOOO#t'#H_'#H_O%tO#|O'#DtOOO#u'#Dw'#DwQ&SOWO'#DwO&XO$VOOOOQ#u'#Dx'#DxO&lQaO'#D|O(mQdO'#E}O(tQdO'#EQO*kQaO'#EWO,zQ`O'#ETO-PQ`O'#E^O/nQaO'#E^O/uQ`O'#EfO/zQ`O'#EoO*kQaO'#EoO0VQ`O'#HhO0[Q`O'#E{O0[Q`O'#E{OOQS'#Ic'#IcO0aQ`O'#EvOOQS'#IZ'#IZO2oQdO'#IWO6tQeO'#FUO*kQaO'#FeO*kQaO'#FfO*kQaO'#FgO*kQaO'#FhO*kQaO'#FhO*kQaO'#FkOOQO'#Id'#IdO7RQ`O'#FqOOQO'#Hi'#HiO7ZQ`O'#HOO7uQ`O'#FlO8QQ`O'#H]O8]Q`O'#FvO8eQaO'#FwO*kQaO'#GVO*kQaO'#GYO8}OrO'#G]OOQS'#Iq'#IqOOQS'#Ip'#IpOOQS'#IW'#IWO,zQ`O'#GdO,zQ`O'#GfO,zQ`O'#GkOhQaO'#GmO9UQ`O'#GnO9ZQ`O'#GqO9`Q`O'#GtO9eQeO'#GuO9eQeO'#GvO9eQeO'#GwO9oQ`O'#GxO9tQ`O'#GzO9yQaO'#G{O<YQ`O'#G|O<_Q`O'#G}O<dQ`O'#G}O9oQ`O'#HOO<iQ`O'#HQO<nQ`O'#HRO<sQ`O'#HSO<xQ`O'#HVO=TQ`O'#HWO9yQaO'#H[OOQ#u'#IV'#IVOOQ#u'#Ha'#HaQhQaOOO=fQ`O'#HPO7pQ`O'#HPO=kO#|O'#DrPOOO)CCw)CCwOOO#t-E;]-E;]OOO#u,5:c,5:cOOO#u'#H`'#H`O&XO$VOOO=vQ$VO'#IUOOOO'#IU'#IUQOOOOOOOQ#y,5:h,5:hO=}QaO,5:hOOQ#u,5:j,5:jO@eQaO,5:mO@lQaO,5;UO*kQaO,5;UO@sQ`O,5;VOCbQaO'#EsOOQS,5;^,5;^OCiQ`O,5;jOOQP'#F]'#F]O*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qOOQ#u'#Im'#ImOOQS,5<q,5<qOOQ#u,5:l,5:lOEbQ`O,5:rOEiQdO'#E}OF]Q`O'#FlOFeQ`O'#FlOFmQ`O,5:oOFrQaO'#E_OOQS,5:x,5:xOHyQ`O'#I]O9yQaO'#EaO9yQaO'#I]OOQS'#I]'#I]OIQQ`O'#I[OIYQ`O,5:xO-UQaO,5:xOI_QaO'#EgOOQS,5;Q,5;QOOQS,5;Z,5;ZOIiQ`O,5;ZOOQO,5>S,5>SOJ[QdO,5;gOOQO-E;f-E;fOL^Q`O,5;gOLcQpO,5;bO0aQ`O'#EyOLkQtO'#E}OOQS'#Ez'#EzOOQS'#Ib'#IbOM`QaO,5:wO*kQaO,5;nOOQS,5;p,5;pO*kQaO,5;pOMgQdO,5<POMwQdO,5<QONXQdO,5<RONiQdO,5<SO!!sQdO,5<SO!!zQdO,5<VO!#[Q`O'#FrO!#gQ`O'#IgO!#oQ`O,5<]OOQO-E;g-E;gO!#tQ`O'#IoO<_Q`O,5=iO!#|Q`O,5=iO9oQ`O,5=jO!$RQ`O,5=nO!$WQ`O,5=kO!$]Q`O,5=kO!$bQ`O'#FnO!$xQ`O,5<WO!%TQ`O,5<WO!%WQ`O,5?ZO!%]Q`O,5<WO!%eQ`O,5<bO!%mQdO'#GPO!%{QdO'#InO!&WQdO,5=wO!&`Q`O,5<bO!%WQ`O,5<bO!&hQdO,5<cO!&xQ`O,5<cO!'lQdO,5<qO!)nQdO,5<tO!*OOrO'#HsOOOQ'#It'#ItO*kQaO'#GbOOOQ'#Hs'#HsO!*pOrO,5<wOOQS,5<w,5<wO!*wQaO,5=OO!+OQ`O,5=QO!+WQeO,5=VO!+bQ`O,5=XO!+gQaO'#GoO!+WQeO,5=YO9yQaO'#GrO!+WQeO,5=]O!&WQdO,5=`O(tQdO,5=aOOQ#u,5=a,5=aO(tQdO,5=bOOQ#u,5=b,5=bO(tQdO,5=cOOQ#u,5=c,5=cO!+nQ`O,5=dO!+vQ`O,5=fO!+{QdO'#IvOOQS'#Iv'#IvO!&WQdO,5=gO>UQaO,5=hO!-eQ`O'#F}O!-jQdO'#IlO!&WQdO,5=iOOQ#u,5=j,5=jO!-uQ`O,5=lO!-xQ`O,5=mO!-}Q`O,5=nO!.YQdO,5=qOOQ#u,5=q,5=qO!.eQ`O,5=rO!.eQ`O,5=rO!.mQdO'#IwO!.{Q`O'#HXO!&WQdO,5=rO!/ZQ`O,5=rO!/fQdO'#IYO!&WQdO,5=vOOQ#u-E;_-E;_O!1RQ`O,5=kOOO#u,5:^,5:^O!1^O#|O,5:^OOO#u-E;^-E;^OOOO,5>p,5>pOOQ#y1G0S1G0SO!1fQ`O1G0XO*kQaO1G0XO!2xQ`O1G0pOOQS1G0p1G0pO!4[Q`O1G0pOOQS'#I_'#I_O*kQaO'#I_OOQS1G0q1G0qO!4cQ`O'#IaO!7lQ`O'#E}O!7yQaO'#EuOOQO'#Ia'#IaO!8TQ`O'#I`O!8]Q`O,5;_OOQS'#FQ'#FQOOQS1G1U1G1UO!8bQdO1G1]O!:dQdO1G1]O!<PQdO1G1]O!=lQdO1G1]O!?XQdO1G1]O!@tQdO1G1]O!BaQdO1G1]O!C|QdO1G1]O!EiQdO1G1]O!GUQdO1G1]O!HqQdO1G1]O!J^QdO1G1]O!KyQdO1G1]O!MfQdO1G1]O# RQdO1G1]O#!nQdO1G1]OOQT1G0^1G0^O!%WQ`O,5<WO#$ZQaO'#EXOOQS1G0Z1G0ZO#$bQ`O,5:yOFuQaO,5:yO#$gQaO,5:}O#$nQdO,5:{O#&jQdO,5>wO#(fQaO'#HdO#(vQ`O,5>vOOQS1G0d1G0dO#)OQ`O1G0dO#)TQ`O'#I^O#*mQ`O'#I^O#*uQ`O,5;ROIbQaO,5;ROOQS1G0u1G0uPOQO'#E}'#E}O#+fQdO1G1RO0aQ`O'#HgO#-hQtO,5;cO#.YQaO1G0|OOQS,5;e,5;eO#0iQtO,5;gO#0vQdO1G0cO*kQaO1G0cO#2cQdO1G1YO#4OQdO1G1[OOQO,5<^,5<^O#4`Q`O'#HjO#4nQ`O,5?ROOQO1G1w1G1wO#4vQ`O,5?ZO!&WQdO1G3TO<_Q`O1G3TOOQ#u1G3U1G3UO#4{Q`O1G3YO!1RQ`O1G3VO#5WQ`O1G3VO#5]QpO'#FoO#5kQ`O'#FoO#5{Q`O'#FoO#6WQ`O'#FoO#6`Q`O'#FsO#6eQ`O'#FtOOQO'#If'#IfO#6lQ`O'#IeO#6tQ`O,5<YOOQS1G1r1G1rO0aQ`O1G1rO#6yQ`O1G1rO#7OQ`O1G1rO!%WQ`O1G4uO#7ZQdO1G4uO!%WQ`O1G1rO#7iQ`O1G1|O!%WQ`O1G1|O9yQaO,5<kO#7qQdO'#HqO#8PQdO,5?YOOQ#u1G3c1G3cO*kQaO1G1|O0aQ`O1G1|O#8[QdO1G1}O7RQ`O'#FyO7RQ`O'#FzO#:nQ`O'#F{OOQS1G1}1G1}O!-xQ`O1G1}O!1UQ`O1G1}O!1RQ`O1G1}O#;eO`O,5<xO#;jO`O,5<xO#;uO!bO,5<yO#<TQ`O,5<|OOOQ-E;q-E;qOOQS1G2c1G2cO#<[QaO'#GeO#<uQ$VO1G2jO#AuQ`O1G2jO#BQQ`O'#GgO#B]Q`O'#GjOOQ#u1G2l1G2lO#BhQ`O1G2lOOQ#u'#Gl'#GlOOQ#u'#Iu'#IuOOQ#u1G2q1G2qO#BmQ`O1G2qO,zQ`O1G2sO#BrQaO,5=ZO#ByQ`O,5=ZOOQ#u1G2t1G2tO#COQ`O1G2tO#CTQ`O,5=^OOQ#u1G2w1G2wO#DgQ`O1G2wOOQ#u1G2z1G2zOOQ#u1G2{1G2{OOQ#u1G2|1G2|OOQ#u1G2}1G2}O#DlQ`O'#HxO9oQ`O'#HxO#DqQ$VO1G3OO#IwQ`O1G3QO9yQaO'#HwO#I|QdO,5=[OOQ#u1G3R1G3RO#JXQ`O1G3SO9yQaO,5<iO#J^QdO'#HpO#JlQdO,5?WOOQ#u1G3T1G3TOOQ#u1G3W1G3WO!-xQ`O1G3WOOQ#u1G3X1G3XO#KfQ`O'#HTOOQ#u1G3Y1G3YO#KmQ`O1G3YO0aQ`O1G3YOOQ#u1G3]1G3]O!&WQdO1G3^O#KrQ`O1G3^O#KzQdO'#HzO#L]QdO,5?cO#LhQ`O,5?cO#LmQ`O'#HYO7RQ`O'#HYO#LxQ`O'#IxO#MQQ`O,5=sOOQ#u1G3^1G3^O!.eQ`O1G3^O!.eQ`O1G3^O#MVQeO'#HbO#MgQdO,5>tOOQ#u1G3b1G3bOOQ#u1G3V1G3VO!-xQ`O1G3VO!1UQ`O1G3VOOO#u1G/x1G/xO*kQaO7+%sO#MuQdO7+%sOOQS7+&[7+&[O$ bQ`O,5>yO>UQaO,5;`O$ iQ`O,5;aO$#OQaO'#HfO$#YQ`O,5>zOOQS1G0y1G0yO$#bQ`O'#EYO$#gQ`O'#IXO$#oQ`O,5:sOOQS1G0e1G0eO$#tQ`O1G0eO$#yQ`O1G0iO9yQaO1G0iOOQO,5>O,5>OOOQO-E;b-E;bOOQS7+&O7+&OO>UQaO,5;SO$%`QaO'#HeO$%jQ`O,5>xOOQS1G0m1G0mO$%rQ`O1G0mOOQS,5>R,5>ROOQS-E;e-E;eO$%wQdO7+&hO$'yQtO1G1RO$(WQdO7+%}OOQS1G0i1G0iOOQO,5>U,5>UOOQO-E;h-E;hOOQ#u7+(o7+(oO!&WQdO7+(oOOQ#u7+(t7+(tO#KmQ`O7+(tO0aQ`O7+(tOOQ#u7+(q7+(qO!-xQ`O7+(qO!1UQ`O7+(qO!1RQ`O7+(qO$)sQ`O,5<ZO$*OQ`O,5<ZO$*WQ`O,5<_O$*]QpO,5<ZO>UQaO,5<ZOOQO,5<_,5<_O$*kQpO,5<`O$*sQ`O,5<`O$+OQ`O'#HkO$+iQ`O,5?POOQS1G1t1G1tO$+qQpO7+'^O$+yQ`O'#FuO$,UQ`O7+'^OOQS7+'^7+'^O0aQ`O7+'^O#6yQ`O7+'^O$,^QdO7+*aO0aQ`O7+*aO$,lQ`O7+'^O*kQaO7+'hO0aQ`O7+'hO$,wQ`O7+'hO$-PQdO1G2VOOQS,5>],5>]OOQS-E;o-E;oO$.iQdO7+'hO$.yQpO7+'hO$/RQdO'#IiOOQO,5<e,5<eOOQO,5<f,5<fO$/dQpO'#GOO$/lQ`O'#GOOOQO'#Ik'#IkOOQO'#Ho'#HoO$0]Q`O'#GOO<_Q`O'#F|O!&WQdO'#GOO!.YQdO'#GQO7RQ`O'#GROOQO'#Ij'#IjOOQO'#Hn'#HnO$0yQ`O,5<gOOQ#y,5<g,5<gOOQS7+'i7+'iO!-xQ`O7+'iO!1UQ`O7+'iOOOQ1G2d1G2dO$1pO`O1G2dO$1uO!bO1G2eO$2TO`O'#G`O$2YO`O1G2eOOOQ1G2h1G2hO$2_QaO,5=PO,zQ`O'#HtO$2xQ$VO7+(UOhQaO7+(UO,zQ`O'#HuO$7xQ`O7+(UO!&WQdO7+(UO$8TQ`O7+(UO$8YQaO'#GhO$:iQ`O'#GiOOQO'#Hv'#HvO$:qQ`O,5=ROOQ#u,5=R,5=RO$:|Q`O,5=UO!&WQdO7+(WO!&WQdO7+(]O!&WQdO7+(_O$;XQaO1G2uO$;`Q`O1G2uO$;eQaO1G2uO!&WQdO7+(`O9yQaO1G2xO!&WQdO7+(cO0aQ`O'#GyO9oQ`O,5>dOOQ#u,5>d,5>dOOQ#u-E;v-E;vO$;lQaO7+(lO$<TQdO,5>cOOQS-E;u-E;uO!&WQdO7+(nO$=mQdO1G2TOOQS,5>[,5>[OOQS-E;n-E;nOOQ#u7+(r7+(rO$?nQ`O'#GQO$?uQ`O'#GQO$@ZQ`O'#HUOOQO'#Hy'#HyO$@`Q`O,5=oOOQ#u,5=o,5=oO$@gQpO7+(tOOQ#u7+(x7+(xO!&WQdO7+(xO$@rQdO,5>fOOQS-E;x-E;xO$AQQdO1G4}O$A]Q`O,5=tO$AbQ`O,5=tO$AmQ`O'#H{O$BRQ`O,5?dOOQS1G3_1G3_O#KrQ`O7+(xO$BZQdO,5=|OOQS-E;`-E;`O$CvQdO<<I_OOQS1G4e1G4eO$EcQ`O1G0zOOQO,5>Q,5>QOOQO-E;d-E;dO$8YQaO,5:tO$FxQaO'#HcO$GVQ`O,5>sOOQS1G0_1G0_OOQS7+&P7+&PO$G_Q`O7+&TO$HtQ`O1G0nO$JZQ`O,5>POOQO,5>P,5>POOQO-E;c-E;cOOQS7+&X7+&XOOQS7+&T7+&TOOQ#u<<LZ<<LZOOQ#u<<L`<<L`O$@gQpO<<L`OOQ#u<<L]<<L]O!-xQ`O<<L]O!1UQ`O<<L]O>UQaO1G1uO$KsQ`O1G1uO$LOQ`O1G1yOOQO1G1y1G1yO$LTQ`O1G1uO$L]Q`O1G1uO$MrQ`O1G1zO>UQaO1G1zOOQO,5>V,5>VOOQO-E;i-E;iOOQS<<Jx<<JxO$M}Q`O'#IhO$NVQ`O'#IhO$N[Q`O,5<aO0aQ`O<<JxO$+qQpO<<JxO$NaQ`O<<JxO0aQ`O<<M{O$NiQtO<<M{O#6yQ`O<<JxO$NwQdO<<KSO% XQpO<<KSO*kQaO<<KSO0aQ`O<<KSO% aQdO'#HmO% xQdO,5?TO!&WQdO,5<jO$/dQpO,5<jO%!ZQ`O,5<jO<_Q`O,5<hO!.YQdO,5<lOOQO-E;m-E;mO!&WQdO,5<hOOQO,5<j,5<jOOQO,5<l,5<lO%!tQdO,5<mOOQO-E;l-E;lOOQ#y1G2R1G2ROOQS<<KT<<KTO!-xQ`O<<KTOOOQ7+(O7+(OO%#PO`O7+(POOOO,5<z,5<zOOOQ7+(P7+(POhQaO,5>`OOQ#u-E;r-E;rOhQaO<<KpOOQ#u<<Kp<<KpO$8TQ`O,5>aOOQO-E;s-E;sO!&WQdO<<KpO$8TQ`O<<KpO%#UQ`O<<KpO%#ZQ`O,5=SO%$pQaO,5=TOOQO-E;t-E;tOOQ#u1G2m1G2mOOQ#u<<Kr<<KrOOQ#u<<Kw<<KwOOQ#u<<Ky<<KyOOQT7+(a7+(aO%%QQ`O7+(aO%%VQaO7+(aO%%^Q`O7+(aOOQ#u<<Kz<<KzO%%cQ`O7+(dO%&xQ`O7+(dOOQ#u<<K}<<K}O%&}QpO,5=eOOQ#u1G4O1G4OO%'YQ`O<<LWOOQ#u<<LY<<LYO$?uQ`O,5<lO%'_Q`O,5=pO%'dQdO,5=pOOQO-E;w-E;wOOQ#u1G3Z1G3ZO#KmQ`O<<L`OOQ#u<<Ld<<LdO%'oQ`O1G4QO%'tQdO7+*iOOQO1G3`1G3`O%(PQ`O1G3`O%(UQ`O'#HZO7RQ`O'#HZOOQO,5>g,5>gOOQO-E;y-E;yO!&WQdO<<LdO%(aQ`O1G0`OOQO,5=},5=}OOQO-E;a-E;aO>UQaO,5;TOOQ#uANAzANAzO#KmQ`OANAzOOQ#uANAwANAwO!-xQ`OANAwO%)vQ`O7+'aO>UQaO7+'aOOQO7+'e7+'eO%+]Q`O7+'aO%+hQ`O7+'eO>UQaO7+'fO%+mQ`O7+'fO%-SQ`O'#HlO%-bQ`O,5?SO%-bQ`O,5?SOOQO1G1{1G1{O$+qQpOAN@dOOQSAN@dAN@dO0aQ`OAN@dO%-jQtOANCgO%-xQ`OAN@dO*kQaOAN@nO%.QQdOAN@nO%.bQpOAN@nOOQS,5>X,5>XOOQS-E;k-E;kOOQO1G2U1G2UO!&WQdO1G2UO$/dQpO1G2UO<_Q`O1G2SO!.YQdO1G2WO!&WQdO1G2SOOQO1G2W1G2WOOQO1G2S1G2SO%.jQaO'#GSOOQO1G2X1G2XOOQSAN@oAN@oOOOQ<<Kk<<KkOOQ#u1G3z1G3zOOQ#uANA[ANA[OOQO1G3{1G3{O%0iQ`OANA[O!&WQdOANA[O%0nQaO1G2nO%1OQaO1G2oOOQT<<K{<<K{O%1`Q`O<<K{O%1eQaO<<K{O*kQaO,5=_OOQT<<LO<<LOOOQO1G3P1G3PO%1lQ`O1G3PO!+WQeOANArO%1qQdO1G3[OOQO1G3[1G3[O%1|Q`O1G3[OOQS7+)l7+)lOOQO7+(z7+(zO%2UQ`O,5=uO%2ZQ`O,5=uOOQ#uANBOANBOO%2fQ`O1G0oOOQ#uG27fG27fOOQ#uG27cG27cO%3{Q`O<<J{O>UQaO<<J{OOQO<<KP<<KPO%5bQ`O<<KQOOQO,5>W,5>WO%6wQ`O,5>WOOQO-E;j-E;jO%6|Q`O1G4nOOQSG26OG26OO$+qQpOG26OO0aQ`OG26OO%7UQdOG26YO*kQaOG26YOOQO7+'p7+'pO!&WQdO7+'pO!&WQdO7+'nOOQO7+'r7+'rOOQO7+'n7+'nO%7fQ`OLD+tO%8uQ`O'#E}O%9PQ`O'#IZO!&WQdO'#HrO%:|QaO,5<nOOQO,5<n,5<nO!&WQdOG26vOOQ#uG26vG26vO%<{QaO7+(YOOQTANAgANAgO%=]Q`OANAgO%=bQ`O1G2yOOQO7+(k7+(kOOQ#uG27^G27^O%=iQ`OG27^OOQO7+(v7+(vO%=nQ`O7+(vO!&WQdO7+(vOOQO1G3a1G3aO%=vQ`O1G3aO%={Q`OAN@gOOQO1G3r1G3rOOQSLD+jLD+jO$+qQpOLD+jO%?bQdOLD+tOOQO<<K[<<K[OOQO<<KY<<KYO%?rQ`O,5<oO%?wQ`O,5<pOOQP,5>^,5>^OOQP-E;p-E;pOOQO1G2Y1G2YOOQ#uLD,bLD,bOOQTG27RG27RO!&WQdOLD,xO!&WQdO<<LbOOQO<<Lb<<LbOOQO7+({7+({OOQS!$( U!$( UOOQS1G2Z1G2ZOOQS1G2[1G2[O%@PQdO1G2[OOQ#u!$(!d!$(!dOOQOANA|ANA|OOQS7+'v7+'vO%@[Q`O'#E{O%@[Q`O'#E{O%@aQ`O,5;gO%@fQdO,5<cO%BbQaO,5:}O*kQaO1G0iO%BiQaO'#FwO#.YQaO'#GVO#.YQaO'#GYO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO%BpQdO'#I]O%D`QdO'#I]O#.YQaO'#EaO#.YQaO'#I]O%FbQaO,5:wO#.YQaO,5;nO#.YQaO,5;pO%FiQdO,5<PO%HeQdO,5<QO%JaQdO,5<RO%L]QdO,5<SO%NXQdO,5<SO%NoQdO,5<VO&!kQdO,5<tO#.YQaO1G0XO&$gQdO1G1]O&&cQdO1G1]O&(_QdO1G1]O&*ZQdO1G1]O&,VQdO1G1]O&.RQdO1G1]O&/}QdO1G1]O&1yQdO1G1]O&3uQdO1G1]O&5qQdO1G1]O&7mQdO1G1]O&9iQdO1G1]O&;eQdO1G1]O&=aQdO1G1]O&?]QdO1G1]O&AXQdO,5:{O&CTQdO,5>wO&EPQdO1G0cO#.YQaO1G0cO&F{QdO1G1YO&HwQdO1G1[O#.YQaO1G1|O#.YQaO7+%sO&JsQdO7+%sO&LoQdO7+%}O#.YQaO7+'hO&NkQdO7+'hO'!gQdO<<I_O'$cQdO<<KSO#.YQaO<<KSO#.YQaOAN@nO'&_QdOAN@nO'(ZQdOG26YO#.YQaOG26YO'*VQdOLD+tO',RQaO,5:}O'.QQaO1G0iO'/|QdO'#IWO'0aQeO'#FUO'4aQeO'#FUO#.YQaO'#FeO'.QQaO'#FeO#.YQaO'#FfO'.QQaO'#FfO#.YQaO'#FgO'.QQaO'#FgO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FkO'.QQaO'#FkO'8gQaO,5:mO'8nQ`O,5<bO'8vQ`O1G0XO'.QQaO1G0|O':YQ`O1G1|O':bQ`O7+'hO':jQpO7+'hO':rQpO<<KSO':zQpOAN@nO';SQaO'#FwO'.QQaO'#GVO'.QQaO'#GYO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO'#EaO'.QQaO'#I]O'=RQaO,5:wO'.QQaO,5;nO'.QQaO,5;pO'?QQdO,5<PO'ASQdO,5<QO'CUQdO,5<RO'EWQdO,5<SO'GYQdO,5<SO'GvQdO,5<VO'IxQdO,5<tO'.QQaO1G0XO'KzQdO1G1]O'M|QdO1G1]O(!OQdO1G1]O($QQdO1G1]O(&SQdO1G1]O((UQdO1G1]O(*WQdO1G1]O(,YQdO1G1]O(.[QdO1G1]O(0^QdO1G1]O(2`QdO1G1]O(4bQdO1G1]O(6dQdO1G1]O(8fQdO1G1]O(:hQdO1G1]O(<jQdO,5:{O(>lQdO,5>wO(@nQdO1G0cO'.QQaO1G0cO(BpQdO1G1YO(DrQdO1G1[O'.QQaO1G1|O'.QQaO7+%sO(FtQdO7+%sO(HvQdO7+%}O'.QQaO7+'hO(JxQdO7+'hO(LzQdO<<I_O(N|QdO<<KSO'.QQaO<<KSO'.QQaOAN@nO)#OQdOAN@nO)%QQdOG26YO'.QQaOG26YO)'SQdOLD+tO))UQaO,5:}O#.YQaO1G0iO))]Q`O'#FvO))eQpO,5;bO))mQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO))uQdO,5<cO)+wQdO'#I]O)-vQdO'#IWO).aQaO,5:mO).hQ`O,5<bO).pQ`O1G0XO)0SQ`O1G1|O)0[Q`O7+'hO)0dQpO7+'hO)0lQpO<<KSO)0tQpOAN@nO0aQ`O'#EvO9yQaO'#FeO9yQaO'#FfO9yQaO'#FgO9yQaO'#FhO9yQaO'#FhO9yQaO'#FkO)0|QaO'#FwO9yQaO'#GVO9yQaO'#GYO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO)1TQ`O'#FlO*kQaO'#EaO*kQaO'#I]O)1]QaO,5:wO9yQaO,5;nO9yQaO,5;pO)1dQdO,5<PO)3`QdO,5<QO)5[QdO,5<RO)7WQdO,5<SO)9SQdO,5<SO)9jQdO,5<VO);fQdO,5<cO)=bQdO,5<tO)?^Q`O'#IvO)@sQ`O'#IYO9yQaO1G0XO)BYQdO1G1]O)DUQdO1G1]O)FQQdO1G1]O)G|QdO1G1]O)IxQdO1G1]O)KtQdO1G1]O)MpQdO1G1]O* lQdO1G1]O*#hQdO1G1]O*%dQdO1G1]O*'`QdO1G1]O*)[QdO1G1]O*+WQdO1G1]O*-SQdO1G1]O*/OQdO1G1]O*0zQaO,5:}O*1RQdO,5:{O*1cQdO,5>wO*1sQaO'#HdO*2TQ`O,5>vO*2]QdO1G0cO9yQaO1G0cO*4XQdO1G1YO*6TQdO1G1[O9yQaO1G1|O>UQaO'#HwO*8PQ`O,5=[O*8XQaO'#HbO*8cQ`O,5>tO9yQaO7+%sO*8kQdO7+%sO*:gQ`O1G0iO>UQaO1G0iO*;|QdO7+%}O9yQaO7+'hO*=xQdO7+'hO*?tQ`O,5>cO*AZQ`O,5=|O*BpQdO<<I_O*DlQ`O7+&TO*FRQdO<<KSO9yQaO<<KSO9yQaOAN@nO*G}QdOAN@nO*IyQdOG26YO9yQaOG26YO*KuQdOLD+tO*MqQaO,5:}O9yQaO1G0iO*MxQdO'#I]O*NcQ`O'#FvO*NkQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO*NsQdO'#IWO+ ^QeO'#FUO+ zQaO'#FUO+#sQaO'#FUO+%`QaO'#FUO>UQaO'#FeO>UQaO'#FfO>UQaO'#FgO>UQaO'#FhO>UQaO'#FhO>UQaO'#FkO+'XQaO'#FwO>UQaO'#GVO>UQaO'#GYO+'`QaO,5:mO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO+'gQ`O'#I]O$8YQaO'#EaO+)PQaOG26YO$8YQaO'#I]O+*{Q`O'#I[O++TQaO,5:wO>UQaO,5;nO>UQaO,5;pO++[Q`O,5<PO+,wQ`O,5<QO+.dQ`O,5<RO+0PQ`O,5<SO+1lQ`O,5<SO+3XQ`O,5<VO+4tQ`O,5<bO+4|Q`O,5<cO+6iQ`O,5<tO+8UQ`O1G0XO>UQaO1G0XO+9hQ`O1G1]O+;TQ`O1G1]O+<pQ`O1G1]O+>]Q`O1G1]O+?xQ`O1G1]O+AeQ`O1G1]O+CQQ`O1G1]O+DmQ`O1G1]O+FYQ`O1G1]O+GuQ`O1G1]O+IbQ`O1G1]O+J}Q`O1G1]O+LjQ`O1G1]O+NVQ`O1G1]O, rQ`O1G1]O,#_Q`O1G0cO>UQaO1G0cO,$zQ`O1G1YO,&gQ`O1G1[O,(SQ`O1G1|O>UQaO1G1|O>UQaO7+%sO,([Q`O7+%sO,)wQ`O7+%}O>UQaO7+'hO,+dQ`O7+'hO,+lQ`O7+'hO,-XQpO7+'hO,-aQ`O<<I_O,.|Q`O<<KSO,0iQpO<<KSO>UQaO<<KSO>UQaOAN@nO,0qQ`OAN@nO,2^QpOAN@nO,2fQ`OG26YO>UQaOG26YO,4RQ`OLD+tO,5nQaO,5:}O>UQaO1G0iO,5uQ`O'#I]O$8YQaO'#FeO$8YQaO'#FfO$8YQaO'#FgO$8YQaO'#FhO$8YQaO'#FhO+)PQaO'#FhO$8YQaO'#FkO,6SQaO'#FwO,6ZQaO'#FwO$8YQaO'#GVO+)PQaO'#GVO$8YQaO'#GYO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO,8YQ`O'#FlO>UQaO'#EaO>UQaO'#I]O,8bQaO,5:wO,8iQaO,5:wO$8YQaO,5;nO+)PQaO,5;nO$8YQaO,5;pO,:hQ`O,5<PO,<TQ`O,5<QO,=pQ`O,5<RO,?]Q`O,5<SO,@xQ`O,5<SO,BeQ`O,5<SO,CtQ`O,5<VO,EaQ`O,5<cO%7fQ`O,5<cO,F|Q`O,5<tO$8YQaO1G0XO+)PQaO1G0XO,HiQ`O1G1]O,JUQ`O1G1]O,KeQ`O1G1]O,MQQ`O1G1]O,NaQ`O1G1]O- |Q`O1G1]O-#]Q`O1G1]O-$xQ`O1G1]O-&XQ`O1G1]O-'tQ`O1G1]O-)TQ`O1G1]O-*pQ`O1G1]O-,PQ`O1G1]O--lQ`O1G1]O-.{Q`O1G1]O-0hQ`O1G1]O-1wQ`O1G1]O-3dQ`O1G1]O-4sQ`O1G1]O-6`Q`O1G1]O-7oQ`O1G1]O-9[Q`O1G1]O-:kQ`O1G1]O-<WQ`O1G1]O-=gQ`O1G1]O-?SQ`O1G1]O-@cQ`O1G1]O-BOQ`O1G1]O-C_Q`O1G1]O-DzQ`O1G1]O-FZQ`O,5:{O-GvQ`O,5>wO-IcQ`O1G0cO-KOQ`O1G0cO$8YQaO1G0cO+)PQaO1G0cO-L_Q`O1G1YO-MzQ`O1G1YO. ZQ`O1G1[O$8YQaO1G1|O$8YQaO7+%sO+)PQaO7+%sO.!vQ`O7+%sO.$cQ`O7+%sO.%rQ`O7+%}O.'_Q`O7+%}O$8YQaO7+'hO.(nQ`O7+'hO.*ZQ`O<<I_O.+vQ`O<<I_O.-VQ`O<<KSO$8YQaO<<KSO$8YQaOAN@nO..rQ`OAN@nO.0_Q`OG26YO$8YQaOG26YO.1zQ`OLD+tO.3gQaO,5:}O.3nQaO,5:}O$8YQaO1G0iO+)PQaO1G0iO.5mQ`O'#I]O.7PQ`O'#I]O.:fQ`O'#IWO.:vQ`O'#FvO.;OQaO,5:mO.;VQ`O,5<bO.;_Q`O,5<bO!%WQ`O,5<bO.;gQ`O1G0XO.<yQ`O,5:{O.>fQ`O,5>wO.@RQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO.@ZQ`O7+'hO.@cQpO7+'hO.@kQpO<<KSO0aQ`O<<KSO.@sQpOAN@nO.@{Q`O'#IWO.A]Q`O'#IWO.CSQaO,5:mO.CZQaO,5:mO.CbQ`O,5<bO.CjQ`O7+'hO.CrQ`O1G0XO.EUQ`O1G0XO.FhQ`O1G1|O.FpQ`O7+'hO.FxQpO7+'hO.GQQpOAN@nO.GYQpO<<KSO.GbQpOAN@nO.GjQ`O'#FvO.GrQ`O'#FlO.GzQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO.HSQ`O'#FvO.H[Q`O,5<bO.HdQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O<<KSO0aQ`O7+'hO0aQ`O<<KSO.HlQ`O'#FlO.HtQ`O'#FlO.H|Q`O'#Fl",
                stateData: ".Ic~O!dOS!eOS&vOS!gQQ~O!iTO&wRO~OPgOQ|OS!lOU^OW}OX!XO[mO]!_O^!WO`![Oa!SOb!]Ok!dOm!lOowOp!TOq!UOsuOt!gOu!VOv!POxkOykO|!bO}`O!O]O!P!eO!QxO!R}O!TpO!UlO!VlO!W!YO!X!QO!YzO!Z!cO![!ZO!]!^O!^!fO!`!`O!a!RO!cjO!mWO!oXO!sYO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$drO$l!kO$zyO${!OO$}}O%O}O%V|O'g{O~O!g!mO~O&wRO!i!hX&p!hX&t!hX~O!i!pO~O!d!qO!e!qO!g!mO&t!tO&v!qO~PhO!n!vO~PhOT'VXz'VX!S'VX!b'VX!m'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX&s'VX~O!q!xO~P&sOT#TOz#RO!S#UO!b#VO!m#cO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO&s#cO~OPgOQ|OU^OW}O[mOowOs#hOxkOykO}`O!O]O!QxO!R}O!TpO!UlO!VlO!YzO!cjO!s#gO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$zyO${!OO$}}O%O}O%V|O'g{O~O!y[O~O!y#kO~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#S#oO#U#nO#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O#X'OP~O!}#sO~P-UO!y#tO~O#b#vO#daO#ebO~O#p#xO~O!s#yO~OU$PO!R$PO!s$OO!v#}O#p2XO~OT&zXz&zX!S&zX!b&zX!m&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX&s&zX!x&zX!n&zX~O#u$RO#w$SO~P0rOP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{OT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX~Or$UO#S6yO#U6xO~P2yO!s#gO#peO~OS$gO]$bOk$eOm$gOs$aO!`$cO$drO$l$fO~O!s$kO!y$hO#S$jO~Oo$mOs$lO#b$nO~O!y$hO#S$rO~O$l$tO~P*kOR$zO!o$yO#b$xO#e$yO&q$zO~O'f$|O~P8lO!y%RO~O!y%TO~O!s%VO~O!m#cO&s#cO~P*kO!oXO~O!y%_O~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O~O!y%cO~O!s%dO~O]$bO~O!s%hO~O!s%iO~O!s%jO~O!oXO!s#gO#peO~O]%rOs%rO!o%pO!s#gO#p%nO~O!s%vO~O!i%wO&t%wO&wRO~O&t%zO~PhO!n%{O~PhOPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!q%}O~P>UO#X&PO~P>UO!o&SO!s&RO#b&RO~OPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s&VO!y[O#U&WO#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!x'SP~PAOO!s&[O#b&[O~OT#TOz#RO!S#UO!b#VO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO~O!x&nO~PCqO!x'VX!}'VX#O'VX#X'VX!n'VXV'VX!q'VX#u'VX#w'VXw'VX~P&sO!y$hO#S&oO~Oo$mOs$lO~O!o&pO~O!}&sO#S;dO#U;cO!x'OP~P9yOT6iOz6gO!S6jO!b6kO!o!{O!v8sO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'PX#X'PX~O#O&tO~PGSO!}&wO#X'OX~O#X&yO~O!}'OO!x'QP~P9yO!n'PO~PCqO!m#oa!o#oa#S#oa#p#qX&s#oa!x#oa#O#oaw#oa~OT#oaz#oa!S#oa!b#oa!v#oa!y#oa#W#oa#`#oa#a#oa#s#oa#z#oa#{#oa#|#oa#}#oa$O#oa$Q#oa$R#oa$S#oa$T#oa$U#oa$V#oa$W#oa$z#oa!}#oa#X#oa!n#oaV#oa!q#oa#u#oa#w#oa~PIpO!s'RO~O!x'UO#l'SO~O!x'VX#l'VX#p#qX#S'VX#U'VX#b'VX!o'VX#O'VXw'VX!m'VX&s'VX~O#S'YO~P*kO!m$Xa&s$Xa!x$Xa!n$Xa~PCqO!m$Ya&s$Ya!x$Ya!n$Ya~PCqO!m$Za&s$Za!x$Za!n$Za~PCqO!m$[a&s$[a!x$[a!n$[a~PCqO!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO$z#dOT$[a!S$[a!b$[a!m$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a&s$[a!x$[a!n$[a~Oz#RO~PNyO!m$_a&s$_a!x$_a!n$_a~PCqO!y!}O!}$fX#X$fX~O!}'^O#X'ZX~O#X'`O~O!s$kO#S'aO~O]'cO~O!s'eO~O!s'fO~O$l'gO~O!`'mO#S'kO#U'lO#b'jO$drO!x'XP~P0aO!^'sO!oXO!q'rO~O!s'uO!y$hO~O!y$hO#S'wO~O!y$hO#S'yO~O#u'zO!m$sX!}$sX&s$sX~O!}'{O!m'bX&s'bX~O!m#cO&s#cO~O!q(PO#O(OO~O!m$ka&s$ka!x$ka!n$ka~PCqOl(ROw(SO!o(TO!y!}O~O!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO~OT$yaz$ya!S$ya!b$ya!m$ya!v$ya#S$ya#z$ya#{$ya#|$ya#}$ya$O$ya$Q$ya$R$ya$S$ya$T$ya$U$ya$V$ya$W$ya$z$ya&s$ya!x$ya!}$ya#O$ya#X$ya!n$ya!q$yaV$ya#u$ya#w$ya~P!'WO!m$|a&s$|a!x$|a!n$|a~PCqO#W([O#`(YO#a(YO&r(ZOR&gX!o&gX#b&gX#e&gX&q&gX'f&gX~O'f(_O~P8lO!q(`O~PhO!o(cO!q(dO~O!q(`O&s(gO~PhO!a(kO~O!m(lO~P9yOZ(wOn(xO~O!s(zO~OT6iOz6gO!S6jO!b6kO!v8sO!}({O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'jX&s'jX~P!'WO#u)PO~O!})QO!m'`X&s'`X~Ol(RO!o(TO~Ow(SO!o)WO!q)ZO~O!m#cO!oXO&s#cO~O!o%pO!s#yO~OV)aO!})_O!m'kX&s'kX~O])cOs)cO!s#gO#peO~O!o%pO!s#gO#p)hO~OT6iOz6gO!S6jO!b6kO!v8sO!})iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&|X&s&|X#O&|X~P!'WOl(ROw(SO!o(TO~O!i)oO&t)oO~OT8vOz8tO!S8wO!b8xO!q)pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#X)rO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!n)rO~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'TX!}'TX~P!'WOT'VXz'VX!S'VX!b'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX~O!q)tO!x'VX!}'VX~P!5xO!x#iX!}#iX~P>UO!})vO!x'SX~O!x)xO~O$z#dOT#yiz#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi$W#yi&s#yi!x#yi!}#yi#O#yi#X#yi!n#yi!q#yiV#yi#u#yi#w#yi~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi&s#yi!x#yi!n#yi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!b#VO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi~P!'WOz#RO$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi~P!'WO_)yO~P9yO!x)|O~O#S*PO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Ta#X#Ta#O#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'Pa#X'Pa#O'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WO#S#oO#U#nO!}&WX#X&WX~P9yO!}&wO#X'Oa~O#X*SO~OT6iOz6gO!S6jO!b6kO!v8sO!}*UO#O*TO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'QX~P!'WO!}*UO!x'QX~O!x*WO~O!m#oi!o#oi#S#oi#p#qX&s#oi!x#oi#O#oiw#oi~OT#oiz#oi!S#oi!b#oi!v#oi!y#oi#W#oi#`#oi#a#oi#s#oi#z#oi#{#oi#|#oi#}#oi$O#oi$Q#oi$R#oi$S#oi$T#oi$U#oi$V#oi$W#oi$z#oi!}#oi#X#oi!n#oiV#oi!q#oi#u#oi#w#oi~P#*zO#l'SO!x#ka#S#ka#U#ka#b#ka!o#ka#O#kaw#ka!m#ka&s#ka~OPgOQ|OU^OW}O[4OOo5xOs#hOx3zOy3zO}`O!O]O!Q2^O!R}O!T4UO!U3|O!V3|O!Y2`O!c3xO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4SO$]4QO$^4SO$aqO$z2_O${!OO$}}O%O}O%V|O'g{O~O#l#oa#U#oa#b#oa~PIpOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pi!S#Pi!b#Pi!m#Pi&s#Pi!x#Pi!n#Pi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#vi!S#vi!b#vi!m#vi&s#vi!x#vi!n#vi~P!'WO!m#xi&s#xi!x#xi!n#xi~PCqO!s#gO#peO!}&^X#X&^X~O!}'^O#X'Za~O!s'uO~Ow(SO!o)WO!q*fO~O!s*jO~O#S*lO#U*mO#b*kO#l'SO~O#S*lO#U*mO#b*kO$drO~P0aO#u*oO!x$cX!}$cX~O#U*mO#b*kO~O#b*pO~O#b*rO~P0aO!}*sO!x'XX~O!x*uO~O!y*wO~O!^*{O!oXO!q*zO~O!q*}O!o'ci!m'ci&s'ci~O!q+QO#O+PO~O#b$nO!m&eX!}&eX&s&eX~O!}'{O!m'ba&s'ba~OT$kiz$ki!S$ki!b$ki!m$ki!o$ki!v$ki!y$ki#S$ki#W$ki#`$ki#a$ki#s$ki#u#fa#w#fa#z$ki#{$ki#|$ki#}$ki$O$ki$Q$ki$R$ki$S$ki$T$ki$U$ki$V$ki$W$ki$z$ki&s$ki!x$ki!}$ki#O$ki#X$ki!n$ki!q$kiV$ki~OS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n+hO#b$nO$aqO$drO~P0aO!s+lO~O#W+nO#`+mO#a+mO~O!s+pO#b+pO$}+pO%T+oO~O!n+qO~PCqOc%XXd%XXh%XXj%XXf%XXg%XXe%XX~PhOc+uOd+sOP%WiQ%WiS%WiU%WiW%WiX%Wi[%Wi]%Wi^%Wi`%Wia%Wib%Wik%Wim%Wio%Wip%Wiq%Wis%Wit%Wiu%Wiv%Wix%Wiy%Wi|%Wi}%Wi!O%Wi!P%Wi!Q%Wi!R%Wi!T%Wi!U%Wi!V%Wi!W%Wi!X%Wi!Y%Wi!Z%Wi![%Wi!]%Wi!^%Wi!`%Wi!a%Wi!c%Wi!m%Wi!o%Wi!s%Wi!y%Wi#W%Wi#b%Wi#d%Wi#e%Wi#p%Wi$T%Wi$]%Wi$^%Wi$a%Wi$d%Wi$l%Wi$z%Wi${%Wi$}%Wi%O%Wi%V%Wi&p%Wi'g%Wi&t%Wi!n%Wih%Wij%Wif%Wig%WiY%Wi_%Wii%Wie%Wi~Oc+yOd+vOh+xO~OY+zO_+{O!n,OO~OY+zO_+{Oi%^X~Oi,QO~Oj,RO~O!m,TO~P9yO!m,VO~Of,WO~OT6iOV,XOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOg,YO~O!y,ZO~OZ(wOn(xOP%liQ%liS%liU%liW%liX%li[%li]%li^%li`%lia%lib%lik%lim%lio%lip%liq%lis%lit%liu%liv%lix%liy%li|%li}%li!O%li!P%li!Q%li!R%li!T%li!U%li!V%li!W%li!X%li!Y%li!Z%li![%li!]%li!^%li!`%li!a%li!c%li!m%li!o%li!s%li!y%li#W%li#b%li#d%li#e%li#p%li$T%li$]%li$^%li$a%li$d%li$l%li$z%li${%li$}%li%O%li%V%li&p%li'g%li&t%li!n%lic%lid%lih%lij%lif%lig%liY%li_%lii%lie%li~O#u,_O~O!}({O!m%da&s%da~O!x,bO~O!s%dO!m&dX!}&dX&s&dX~O!})QO!m'`a&s'`a~OS+^OY,iOm+^Os$aO!^+dO!_+^O!`+^O$aqO$drO~O!n,lO~P#JwO!o)WO~O!o%pO!s'RO~O!s#gO#peO!m&nX!}&nX&s&nX~O!})_O!m'ka&s'ka~O!s,rO~OV,sO!n%|X!}%|X~O!},uO!n'lX~O!n,wO~O!m&UX!}&UX&s&UX#O&UX~P9yO!})iO!m&|a&s&|a#O&|a~Oz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq&s!uq!x!uq!n!uq~P!'WO!n,|O~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#ia!}#ia~P!'WO!x&YX!}&YX~PAOO!})vO!x'Sa~O#O-QO~O!}-RO!n&{X~O!n-TO~O!x-UO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vi#X#Vi~P!'WO!x&XX!}&XX~P9yO!}*UO!x'Qa~O!x-[O~OT#jqz#jq!S#jq!b#jq!m#jq!v#jq#S#jq#u#jq#w#jq#z#jq#{#jq#|#jq#}#jq$O#jq$Q#jq$R#jq$S#jq$T#jq$U#jq$V#jq$W#jq$z#jq&s#jq!x#jq!}#jq#O#jq#X#jq!n#jq!q#jqV#jq~P!'WO#l#oi#U#oi#b#oi~P#*zOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pq!S#Pq!b#Pq!m#Pq&s#Pq!x#Pq!n#Pq~P!'WO#u-dO!x$ca!}$ca~O#U-fO#b-eO~O#b-gO~O#S-hO#U-fO#b-eO#l'SO~O#b-jO#l'SO~O#u-kO!x$ha!}$ha~O!`'mO#S'kO#U'lO#b'jO$drO!x&_X!}&_X~P0aO!}*sO!x'Xa~O!oXO#l'SO~O#S-pO#b-oO!x'[P~O!oXO!q-rO~O!q-uO!o'cq!m'cq&s'cq~O!^-wO!oXO!q-rO~O!q-{O#O-zO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$si!}$si&s$si~P!'WO!m$jq&s$jq!x$jq!n$jq~PCqO#O-zO#l'SO~O!}-|Ow']X!o']X!m']X&s']X~O#b$nO#l'SO~OS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO$drO~P0aOS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO~P0aOS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n.ZO#b$nO$aqO$drO~P0aO!s.^O~O!s._O#b._O$}._O%T+oO~O$}.`O~O#X.aO~Oc%Xad%Xah%Xaj%Xaf%Xag%Xae%Xa~PhOc.dOd+sOP%WqQ%WqS%WqU%WqW%WqX%Wq[%Wq]%Wq^%Wq`%Wqa%Wqb%Wqk%Wqm%Wqo%Wqp%Wqq%Wqs%Wqt%Wqu%Wqv%Wqx%Wqy%Wq|%Wq}%Wq!O%Wq!P%Wq!Q%Wq!R%Wq!T%Wq!U%Wq!V%Wq!W%Wq!X%Wq!Y%Wq!Z%Wq![%Wq!]%Wq!^%Wq!`%Wq!a%Wq!c%Wq!m%Wq!o%Wq!s%Wq!y%Wq#W%Wq#b%Wq#d%Wq#e%Wq#p%Wq$T%Wq$]%Wq$^%Wq$a%Wq$d%Wq$l%Wq$z%Wq${%Wq$}%Wq%O%Wq%V%Wq&p%Wq'g%Wq&t%Wq!n%Wqh%Wqj%Wqf%Wqg%WqY%Wq_%Wqi%Wqe%Wq~Oc.iOd+vOh.hO~O!q(`O~OP6]OQ|OU^OW}O[:fOo>ROs#hOx:dOy:dO}`O!O]O!Q:kO!R}O!T:jO!U:eO!V:eO!Y:oO!c8gO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:hO$]:gO$^:hO$aqO$z:mO${!OO$}}O%O}O%V|O'g{O~O!m.lO!q.lO~OY+zO_+{O!n.nO~OY+zO_+{Oi%^a~O!x.rO~P>UO!m.tO~O!m.tO~P9yOQ|OW}O!R}O$}}O%O}O%V|O'g{O~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&ka!}&ka&s&ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$qi!}$qi&s$qi~P!'WOS+^Om+^Os$aO!_+^O!`+^O$aqO$drO~OY/PO~P$?VOS+^Om+^Os$aO!_+^O!`+^O$aqO~O!s/QO~O!n/SO~P#JwOw(SO!o)WO#l'SO~OV/VO!m&na!}&na&s&na~O!})_O!m'ki&s'ki~O!s/XO~OV/YO!n%|a!}%|a~O]/[Os/[O!s#gO#peO!n&oX!}&oX~O!},uO!n'la~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&Ua!}&Ua&s&Ua#O&Ua~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy&s!uy!x!uy!n!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#hi!}#hi~P!'WO_)yO!n&VX!}&VX~P9yO!}-RO!n&{a~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vq#X#Vq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#[i!}#[i~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O/cO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x&Xa!}&Xa~P!'WO#u/iO!x$ci!}$ci~O#b/jO~O#U/lO#b/kO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$ci!}$ci~P!'WO#u/mO!x$hi!}$hi~O!}/oO!x'[X~O#b/qO~O!x/rO~O!oXO!q/uO~O#l'SO!o'cy!m'cy&s'cy~O!m$jy&s$jy!x$jy!n$jy~PCqO#O/xO#l'SO~O!s#gO#peOw&aX!o&aX!}&aX!m&aX&s&aX~O!}-|Ow']a!o']a!m']a&s']a~OU$PO]0QO!R$PO!s$OO!v#}O#b$nO#p2XO~P$?uO!m#cO!o0VO&s#cO~O#X0YO~Oh0_O~OT:tOz:pO!S:vO!b:xO!m0`O!q0`O!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO~P!'WOY%]a_%]a!n%]ai%]a~PhO!x0bO~O!x0bO~P>UO!m0dO~OT6iOz6gO!S6jO!b6kO!v8sO!x0fO#O0eO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WO!x0fO~O!x0gO#b0hO#l'SO~O!x0iO~O!s0jO~O!m#cO#u0lO&s#cO~O!s0mO~O!})_O!m'kq&s'kq~O!s0nO~OV0oO!n%}X!}%}X~OT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!n!|i!}!|i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cq!}$cq~P!'WO#u0vO!x$cq!}$cq~O#b0wO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hq!}$hq~P!'WO#S0zO#b0yO!x&`X!}&`X~O!}/oO!x'[a~O#l'SO!o'c!R!m'c!R&s'c!R~O!oXO!q1PO~O!m$j!R&s$j!R!x$j!R!n$j!R~PCqO#O1RO#l'SO~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1^O!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOh1_O~OY%[i_%[i!n%[ii%[i~PhOY%]i_%]i!n%]ii%]i~PhO!x1bO~O!x1bO~P>UO!x1eO~O!m#cO#u1iO&s#cO~O$}1jO%V1jO~O!s1kO~OV1lO!n%}a!}%}a~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#]i!}#]i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cy!}$cy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hy!}$hy~P!'WO#b1nO~O!}/oO!x'[i~O!m$j!Z&s$j!Z!x$j!Z!n$j!Z~PCqOT:uOz:qO!S:wO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO~P!'WOV1uO{1tO~P!5xOV1uO{1tOT&}Xz&}X!S&}X!b&}X!o&}X!v&}X!y&}X#S&}X#W&}X#`&}X#a&}X#s&}X#u&}X#w&}X#z&}X#{&}X#|&}X#}&}X$O&}X$Q&}X$R&}X$S&}X$T&}X$U&}X$V&}X$W&}X$z&}X~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1xO!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOY%[q_%[q!n%[qi%[q~PhO!x1zO~O!x%gi~PCqOe1{O~O$}1|O%V1|O~O!s2OO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$c!R!}$c!R~P!'WO!m$j!c&s$j!c!x$j!c!n$j!c~PCqO!s2QO~O!`2SO!s2RO~O!s2VO!m$xi&s$xi~O!s'WO~O!s*]O~OT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$ka#u$ka#w$ka&s$ka!x$ka!n$ka!q$ka#X$ka!}$ka~P!'WO#S2]O~P*kO$l$tO~P#.YOT6iOz6gO!S6jO!b6kO!v8sO#O2[O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX&s'PX!x'PX!n'PX~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O3uO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'PX#X'PX#u'PX#w'PX!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~P!'WO#S3dO~P#.YOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Xa#u$Xa#w$Xa&s$Xa!x$Xa!n$Xa!q$Xa#X$Xa!}$Xa~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Ya#u$Ya#w$Ya&s$Ya!x$Ya!n$Ya!q$Ya#X$Ya!}$Ya~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Za#u$Za#w$Za&s$Za!x$Za!n$Za!q$Za#X$Za!}$Za~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$[a#u$[a#w$[a&s$[a!x$[a!n$[a!q$[a#X$[a!}$[a~P!'WOz2aO#u$[a#w$[a!q$[a#X$[a!}$[a~PNyOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$_a#u$_a#w$_a&s$_a!x$_a!n$_a!q$_a#X$_a!}$_a~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$|a#u$|a#w$|a&s$|a!x$|a!n$|a!q$|a#X$|a!}$|a~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#Ta#u#Ta#w#Ta&s#Ta!x#Ta!n#Ta!q#Ta#X#Ta!}#Ta~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m'Pa#u'Pa#w'Pa&s'Pa!x'Pa!n'Pa!q'Pa#X'Pa!}'Pa~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pi!S#Pi!b#Pi!m#Pi#u#Pi#w#Pi&s#Pi!x#Pi!n#Pi!q#Pi#X#Pi!}#Pi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#vi!S#vi!b#vi!m#vi#u#vi#w#vi&s#vi!x#vi!n#vi!q#vi#X#vi!}#vi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#xi#u#xi#w#xi&s#xi!x#xi!n#xi!q#xi#X#xi!}#xi~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq#u!uq#w!uq&s!uq!x!uq!n!uq!q!uq#X!uq!}!uq~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pq!S#Pq!b#Pq!m#Pq#u#Pq#w#Pq&s#Pq!x#Pq!n#Pq!q#Pq#X#Pq!}#Pq~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jq#u$jq#w$jq&s$jq!x$jq!n$jq!q$jq#X$jq!}$jq~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy#u!uy#w!uy&s!uy!x!uy!n!uy!q!uy#X!uy!}!uy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jy#u$jy#w$jy&s$jy!x$jy!n$jy!q$jy#X$jy!}$jy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!R#u$j!R#w$j!R&s$j!R!x$j!R!n$j!R!q$j!R#X$j!R!}$j!R~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!Z#u$j!Z#w$j!Z&s$j!Z!x$j!Z!n$j!Z!q$j!Z#X$j!Z!}$j!Z~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!c#u$j!c#w$j!c&s$j!c!x$j!c!n$j!c!q$j!c#X$j!c!}$j!c~P!'WOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S3vO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lO#u2uO#w2vO!q&zX#X&zX!}&zX~P0rOP6]OU^O[4POo8^Or2wOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S2tO#U2sO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX!q#xX#X#xX!}#xX~P$;lOP6]OU^O[4POo8^Or4xOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S4uO#U4tO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!o#xX!v#xX!}#xX#O#xX#X#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!m#xX&s#xX!x#xX!n#xXV#xX!q#xX~P$;lO!q3PO~P>UO!q5}O#O3gO~OT8vOz8tO!S8wO!b8xO!q3hO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q6OO#O3kO~O!q6PO#O3oO~O#O3oO#l'SO~O#O3pO#l'SO~O#O3sO#l'SO~OP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$l$tO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S5eO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Xa#O$Xa#X$Xa#u$Xa#w$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Ya#O$Ya#X$Ya#u$Ya#w$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Za#O$Za#X$Za#u$Za#w$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$[a#O$[a#X$[a#u$[a#w$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz4dO!}$[a#O$[a#X$[a#u$[a#w$[aV$[a!q$[a~PNyOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$_a#O$_a#X$_a#u$_a#w$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$|a#O$|a#X$|a#u$|a#w$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#Ta#O#Ta#X#Ta#u#Ta#w#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'Pa#O'Pa#X'Pa#u'Pa#w'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi#u#Pi#w#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi#u#vi#w#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#xi#O#xi#X#xi#u#xi#w#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq#u!uq#w!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq#u#Pq#w#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jq#O$jq#X$jq#u$jq#w$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy#u!uy#w!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jy#O$jy#X$jy#u$jy#w$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!R#O$j!R#X$j!R#u$j!R#w$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!Z#O$j!Z#X$j!Z#u$j!Z#w$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!c#O$j!c#X$j!c#u$j!c#w$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S5wO~P#.YO!y$hO#S5{O~O!x4ZO#l'SO~O!y$hO#S5|O~OT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$ka#O$ka#X$ka#u$ka#w$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O5vO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!m'PX#u'PX#w'PX&s'PX!x'PX!n'PX!q'PX#X'PX!}'PX~P!'WO#u4vO#w4wO!}&zX#O&zX#X&zXV&zX!q&zX~P0rO!q5QO~P>UO!q8bO#O5hO~OT8vOz8tO!S8wO!b8xO!q5iO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q8cO#O5lO~O!q8dO#O5pO~O#O5pO#l'SO~O#O5qO#l'SO~O#O5tO#l'SO~O$l$tO~P9yOo5zOs$lO~O#S7oO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Xa#O$Xa#X$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Ya#O$Ya#X$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Za#O$Za#X$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$[a#O$[a#X$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz6gO!}$[a#O$[a#X$[aV$[a!q$[a~PNyOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$_a#O$_a#X$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$ka#O$ka#X$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$|a#O$|a#X$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7sO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'jX~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7uO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&|X~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WO#S7zO~P>UO!m#Ta&s#Ta!x#Ta!n#Ta~PCqO!m'Pa&s'Pa!x'Pa!n'Pa~PCqO#S;dO#U;cO!x&WX!}&WX~P9yO!}7lO!x'Oa~Oz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#xi#O#xi#X#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WO!}7sO!x%da~O!x&UX!}&UX~P>UO!}7uO!x&|a~Oz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vi!}#Vi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jq#O$jq#X$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&ka!}&ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&Ua!}&Ua~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vq!}#Vq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jy#O$jy#X$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!R#O$j!R#X$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!Z#O$j!Z#X$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!c#O$j!c#X$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S8[O~P9yO#O8ZO!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~PGSO!y$hO#S8`O~O!y$hO#S8aO~O#u6zO#w6{O!}&zX#O&zX#X&zXV&zX!q&zX~P0rOr6|O#S#oO#U#nO!}#xX#O#xX#X#xXV#xX!q#xX~P2yOr;iO#S9XO#U9VOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!n#xX!}#xX~P9yOr9WO#S9WO#U9WOT#xXz#xX!S#xX!b#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX~P9yOr9]O#S;dO#U;cOT#xXz#xX!S#xX!b#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX#X#xX!x#xX!}#xX~P9yO$l$tO~P>UO!q7XO~P>UOT6iOz6gO!S6jO!b6kO!v8sO#O7iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'PX!}'PX~P!'WOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lO!}7lO!x'OX~O#S9yO~P>UOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Xa#X$Xa!x$Xa!}$Xa~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Ya#X$Ya!x$Ya!}$Ya~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Za#X$Za!x$Za!}$Za~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$[a#X$[a!x$[a!}$[a~P!'WOz8tO$z#dOT$[a!S$[a!b$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a#X$[a!x$[a!}$[a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$_a#X$_a!x$_a!}$_a~P!'WO!q=dO#O7rO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$ka#X$ka!x$ka!}$ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$|a#X$|a!x$|a!}$|a~P!'WOT8vOz8tO!S8wO!b8xO!q7wO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi#X#yi!x#yi!}#yi~P!'WOz8tO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pi!S#Pi!b#Pi!q#Pi#X#Pi!x#Pi!}#Pi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#vi!S#vi!b#vi!q#vi#X#vi!x#vi!}#vi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q#xi#X#xi!x#xi!}#xi~P!'WO!q=eO#O7|O~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uq!S!uq!b!uq!q!uq!v!uq#X!uq!x!uq!}!uq~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pq!S#Pq!b#Pq!q#Pq#X#Pq!x#Pq!}#Pq~P!'WO!q=iO#O8TO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jq#X$jq!x$jq!}$jq~P!'WO#O8TO#l'SO~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uy!S!uy!b!uy!q!uy!v!uy#X!uy!x!uy!}!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jy#X$jy!x$jy!}$jy~P!'WO#O8UO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!R#X$j!R!x$j!R!}$j!R~P!'WO#O8XO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!Z#X$j!Z!x$j!Z!}$j!Z~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!c#X$j!c!x$j!c!}$j!c~P!'WO#S:bO~P>UO#O:aO!q'PX!x'PX~PGSO$l$tO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$l$tO$z:nO${!OO~P$;lOo8_Os$lO~O#S<jO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S<kO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Xa!q$Xa!n$Xa!}$Xa~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Ya!q$Ya!n$Ya!}$Ya~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Za!q$Za!n$Za!}$Za~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$[a!q$[a!n$[a!}$[a~P!'WOz:pO$z#dOT$[a!S$[a!b$[a!m$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a!n$[a!}$[a~P!'WOz:qO$z#dOT$[a!S$[a!b$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$_a!q$_a!n$_a!}$_a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$ka!q$ka!n$ka!}$ka~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$|a!q$|a!n$|a!}$|a~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi!n#yi!}#yi~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi~P!'WOT:tOz:pO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi~P!'WOT:tOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi!b#yi~P!'WOz:pO#S#QO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi!n#yi!}#yi~P!'WOz:qO#S#QO#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi~P!'WOz:pO#S#QO#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi!n#yi!}#yi~P!'WOz:qO#S#QO#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi~P!'WOz:pO#S#QO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi!n#yi!}#yi~P!'WOz:qO#S#QO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi~P!'WOz:pO#S#QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO#S#QO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!n#yi!}#yi~P!'WOz:qO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi~P!'WOz:pO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi~P!'WOz:pO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!n#yi!}#yi~P!'WOz:qO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi~P!'WOz:pO$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!n#yi!}#yi~P!'WOz:qO$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi~P!'WOz:pO$S;YO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi~P!'WOz:pO$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!n#yi!}#yi~P!'WOz:qO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Ta!}#Ta!q#Ta#X#Ta~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'Pa!}'Pa!q'Pa#X'Pa~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pi!S#Pi!b#Pi!m#Pi!q#Pi!n#Pi!}#Pi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pi!S#Pi!b#Pi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#vi!S#vi!b#vi!m#vi!q#vi!n#vi!}#vi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#vi!S#vi!b#vi~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#xi!q#xi!n#xi!}#xi~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uq!S!uq!b!uq!m!uq!q!uq!v!uq!n!uq!}!uq~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uq!S!uq!b!uq!v!uq~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pq!S#Pq!b#Pq!m#Pq!q#Pq!n#Pq!}#Pq~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pq!S#Pq!b#Pq~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jq!q$jq!n$jq!}$jq~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uy!S!uy!b!uy!m!uy!q!uy!v!uy!n!uy!}!uy~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uy!S!uy!b!uy!v!uy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jy!q$jy!n$jy!}$jy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!R!q$j!R!n$j!R!}$j!R~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!Z!q$j!Z!n$j!Z!}$j!Z~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!c!q$j!c!n$j!c!}$j!c~P!'WO#S=TO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S=UO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT6iOz6gO!S6jO!b6kO!v8sO#O=SO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O=RO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX!q'PX!n'PX!}'PX~P!'WOT&zXz&zX!S&zX!b&zX!o&zX!q&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX!}&zX~O#u9ZO#w9[O#X&zX!x&zX~P.8oO!y$hO#S=^O~O!q9hO~P>UO!y$hO#S=cO~O!q>OO#O9}O~OT8vOz8tO!S8wO!b8xO!q:OO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#Ta!q#Ta!n#Ta!}#Ta~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m'Pa!q'Pa!n'Pa!}'Pa~P!'WO!q>PO#O:RO~O!q>QO#O:YO~O#O:YO#l'SO~O#O:ZO#l'SO~O#O:_O#l'SO~O#u;eO#w;gO!m&zX!n&zX~P.8oO#u;fO#w;hOT&zXz&zX!S&zX!b&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX~O!q;tO~P>UO!q;uO~P>UO!q>XO#O<oO~O!q>YO#O9WO~OT8vOz8tO!S8wO!b8xO!q<pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!q<qO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q>ZO#O<vO~O!q>[O#O<{O~O#O<{O#l'SO~O#O9WO#l'SO~O#O<|O#l'SO~O#O=PO#l'SO~O!y$hO#S=|O~Oo=[Os$lO~O!y$hO#S=}O~O!y$hO#S>UO~O!y$hO#S>VO~O!y$hO#S>WO~Oo={Os$lO~Oo>TOs$lO~Oo>SOs$lO~O%O$U$}$d!d$V#b%V#e'g!s#d~",
                goto: "%&y'mPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'nP'uPP'{(OPPP(hP(OP(O*ZP*ZPP2W:j:mPP*Z:sBpPBsPBsPP:sCSCVCZ:s:sPPPC^PP:sK^!$S!$S:s!$WP!$W!$W!%UP!.]!7pP!?oP*ZP*Z*ZPPPPP!?rPPPPPPP*Z*Z*Z*ZPP*Z*ZP!E]!GRP!GV!Gy!GR!GR!HP*Z*ZP!HY!Hl!Ib!J`!Jd!J`!Jo!J}!J}!KV!KY!KY*ZPP*ZPP!K^#%[#%[#%`P#%fP(O#%j(O#&S#&V#&V#&](O#&`(O(O#&f#&i(O#&r#&u(O(O(O(O(O#&x(O(O(O(O(O(O(O(O(O#&{!KR(O(O#'_#'o#'r(O(OP#'u#'|#(S#(o#(y#)P#)Z#)b#)h#*d#4X#5T#5Z#5a#5k#5q#5w#6]#6c#6i#6o#6u#6{#7R#7]#7g#7m#7s#7}PPPPPPPP#8T#8X#8}#NO#NR#N]$(f$(r$)X$)_$)b$)e$)k$,X$5v$>_$>b$>h$>k$>n$>w$>{$?X$?k$Bk$CO$C{$K{PP%%y%%}%&Z%&p%&vQ!nQT!qV!rQUOR%x!mRVO}!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a|!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ%^!ZQ%g!aQ%l!eQ'd$dQ'q$iQ)[%kQ*y'tQ,](xU-n*v*x+OQ.W+cQ.{,[S/t-s-tQ0T.SS0}/s/wQ1V0RQ1o1OR2P1p0u!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nQ#j]Q$}!PQ%O!QQ%P!RQ,S(kQ.b+sR.f+vR&q#jQ)z&pR/a-R0uhPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#l^k#p_j#k#s&s&w3x3y7l8f8g8h8iR#u`T&|#t'OR-Y*U0thPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#va-r#OZ#f#m#w$V$W$X$Y$Z$[$u$v%W%Y%[%`%s%|&O&Q&U&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&u&v&{'X'Z'[(](p)q)s)u*O*[*^+S+V,`,c,y,{,}-V-W-X-i-x.k.w/`/h/n/y0r0u0x1Q1X1d1m1q2q2r2x2y2z2{2|2}3O3Q3R3S3T3U3V3W3X3Y3Z3[3]3^3_3`3a3b3c3e3f3i3j3l3m3n3q3r3t4Y4y4z4{4|4}5O5P5R5S5T5U5V5W5X5Y5Z5[5]5^5_5`5a5b5c5d5f5g5j5k5m5n5o5r5s5u6R6V6}7O7P7Q7R7S7U7V7W7Y7Z7[7]7^7_7`7a7b7c7d7e7f7g7h7j7k7n7p7q7x7y7{7}8O8P8Q8R8S8V8W8Y8]9U9^9_9`9a9b9c9f9g9i9j9k9l9m9n9o9p9q9r9s9t9u9v9w9x9z9{:P:Q:T:V:W:[:^:`:c;j;k;l;m;n;o;p;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<a<b<c<d<e<f<g<h<i<l<m<n<r<s<t<u<w<x<y<z<}=O=Q=V=W=_=`=a=q=rQ']$]Y(Q$s7T9e;q;rS(U2Z6QR(X$tT&X!})v!w$Qg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[3ZfPVX[_bgjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#}$R$S$U$h$y$}%P%R%S%T%U%c%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)_)c)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[3scPVX[_bdegjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#{#}$R$S$U$h$y$}%P%R%S%T%U%c%m%n%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)^)_)c)g)h)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u,x-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2W2X2Y2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[0phPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0`0a0d0e0i0v1R1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT1Z0V1]R&]#P!n#[Z#f#w$V$W$X$Y$[$s$v%W%Y%[&Q&_&`&a&b&c&d&e&f'X'Z'[(])q)s*^+V,{-x/y1Q1d1q7j7k!Y2j2Z2x2y2z2{2}3O3Q3R3S3T3U3V3W3X3a3b3c3e3f3i3j3l3m3n3q3r3t!^4m2r4y4z4{4|5O5P5R5S5T5U5V5W5X5Y5b5c5d5f5g5j5k5m5n5o5r5s5u6Q6R#Q6p#m%`%s&u&v&{(p*O+S,`,c,y-V-X.w2q6}7O7P7Q7S7T7U7Y7Z7[7]7^7_7`7a7n7p7q7x7{7}8Q8S8V8W8Y8]9U:c=V=W#^8}%|&O&U)u,}-W-i/h/n0r0u0x1m4Y6V7V7W7y8O8P8R9^9_9`9a9c9e9f9g9i9j9k9l9m9n9o9p9x9z9{:P:Q:T:V:W:[:^:`<f<g=_=q=r!^;S.k/`;j;k;l;m;p;q;s;v;x;z;|<O<Q<S<U<h<l<n<r<t<w<x<z<}=O=Q=`=ao;T1X;r;w;y;{;}<P<R<T<V<i<m<s<u<yS$iu#hQ$qwU't$j$l&oQ'v$kS'x$m$rQ*|'uQ+O'wQ+R'yQ4X5xS4[5z5{Q4]5|Q6U8^S6W8_8`Q6X8aQ9d=YS9|=[=^Q:S=cQ=]=yS=b={=|Q=f=}Q=o>RS=p>S>VS=s>T>UR=t>WT'n$h*s!csPVXt!S!j!r!s!w$h$}%P%S%U'i(T(`)W*s+]+g+r+u,g,k.b.d.l0`0a0i1aQ$^rR*`'^Q*x'sQ-t*{R/w-wQ(W$tQ)U%hQ)n%vQ*i'fQ+k(XR-c*jQ(V$tQ)Y%jQ)m%vQ*e'eS*h'f)nS+j(W(XS-b*i*jQ.]+kQ/T,mQ/e-`R/g-cQ(U$tQ)T%hQ)V%iQ)l%vU*g'f)m)nU+i(V(W(XQ,f)UU-a*h*i*jS.[+j+kS/f-b-cQ0X.]R0t/gT+e(T+g[%e!_$b'c+a.R0QR,d)Qb$ov(T+[+]+`+g.P.Q0PR+T'{S+e(T+gT,j)W,kR0W.XT1[0V1]0w|PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$x{${Q+p([R._+nT$z{${Q(b$}Q(j%PQ(o%SQ(r%UQ.j+yQ0].fQ0^.iR1g0iR(e%OX+|(c(d+},PR(f%OX(h%P%S%U0iR%S!T_%a!]%R(l,T,V.t0dR%U!UR.x,XR,[(wQ)X%jS*d'e)YS-_*e,mS/d-`/TR0s/eQ%q!fU)]%m%n%rU,o)^)g)hR/_,xR)d%pR/],uSSO!mR!oSQ!rVR%y!rQ!jPS!sV!rQ!wX[%u!j!s!w+r0a1aQ+r(`Q0a.lR1a0`Q)j%sS,z)j7vR7v7WQ-S)zR/b-SQ&x#qS*R&x7mR7m9YS*V&{&|R-Z*VQ)w&YR-P)w!l'T#|'h*n*q*v+W+[,m-`-s-v-y.P.z/s/v/z0P1O1p4^4_4`5y6Y6Z6[:U:X:]=g=h=j=u=v=w=xR*Z'T1^dPVX[_bjklmnoprxyz!S!W!X!Y!]!e!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%p%}&S&W&p&s&t&w'O'U'Y'^'z(O(R(S(`(l({)P)_)c)i)p)t)v*P*T*U*o+P+d+r+u+z,T,V,X,u-Q-R-d-k-z-|.b.d.l.t/[/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n`#zd#{%m)^)g,x2W2YQ#{eQ%m!fQ)^%nQ)g%rQ,x)h!v2Wg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[R2Y2X|tPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aW$`t'i+],gS'i$h*sS+](T+gT,g)W,kQ'_$^R*a'_Q*t'oR-m*tQ/p-oS0{/p0|R0|/qQ-}+XR/|-}Q+g(TR.Y+gS+`(T+gS,h)W,kQ.Q+]W.T+`,h.Q/OR/O,gQ)R%eR,e)RQ'|$oR+U'|Q1]0VR1w1]Q${{R(^${Q+t(aR.c+tQ+w(bR.g+wQ+}(cQ,P(dT.m+},PQ(|%`S,a(|7tR7t7VQ(y%^R,^(yQ,k)WR/R,kQ)`%oS,q)`/WR/W,rQ,v)dR/^,vT!uV!rj!iPVX!j!r!s!w(`+r.l0`0a1aQ%Q!SQ(a$}W(h%P%S%U0iQ.e+uQ0Z.bR0[.d|ZPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ#f[U#m_#s&wQ#wbQ$VkQ$WlQ$XmQ$YnQ$ZoQ$[pQ$sx^$uy2_4b6e8q:m:nQ$vzQ%W!WQ%Y!XQ%[!YW%`!]%R(l,VU%s!g&p-RQ%|!yQ&O!zQ&Q!{S&U!})v^&^#R2a4d6g8t:p:qQ&_#SQ&`#TQ&a#UQ&b#VQ&c#WQ&d#XQ&e#YQ&f#ZQ&g#[Q&h#]Q&i#^Q&j#_Q&k#`Q&l#aQ&m#bQ&u#nQ&v#oS&{#t'OQ'X$RQ'Z$SQ'[$UQ(]$yQ(p%TQ)q%}Q)s&SQ)u&WQ*O&tS*['U4ZQ*^'Y^*_2[3u5v8Z:a=R=SQ+S'zQ+V(OQ,`({Q,c)PQ,y)iQ,{)pQ,})tQ-V*PQ-W*TQ-X*U^-]2]3v5w8[:b=T=UQ-i*oQ-x+PQ.k+zQ.w,XQ/`-QQ/h-dQ/n-kQ/y-zQ0r/cQ0u/iQ0x/mQ1Q/xU1X0V1]9WQ1d0eQ1m0vQ1q1RQ2Z2^Q2qjQ2r3yQ2x3zQ2y3|Q2z4OQ2{4QQ2|4SQ2}4UQ3O2`Q3Q2bQ3R2cQ3S2dQ3T2eQ3U2fQ3V2gQ3W2hQ3X2iQ3Y2jQ3Z2kQ3[2lQ3]2mQ3^2nQ3_2oQ3`2pQ3a2sQ3b2tQ3c2uQ3e2vQ3f2wQ3i3PQ3j3dQ3l3gQ3m3hQ3n3kQ3q3oQ3r3pQ3t3sQ4Y4WQ4y3{Q4z3}Q4{4PQ4|4RQ4}4TQ5O4VQ5P4cQ5R4eQ5S4fQ5T4gQ5U4hQ5V4iQ5W4jQ5X4kQ5Y4lQ5Z4mQ5[4nQ5]4oQ5^4pQ5_4qQ5`4rQ5a4sQ5b4tQ5c4uQ5d4vQ5f4wQ5g4xQ5j5QQ5k5eQ5m5hQ5n5iQ5o5lQ5r5pQ5s5qQ5u5tQ6Q4aQ6R3xQ6V6TQ6}6^Q7O6_Q7P6`Q7Q6aQ7R6bQ7S6cQ7T6dQ7U6fU7V,T.t0dQ7W%cQ7Y6hQ7Z6iQ7[6jQ7]6kQ7^6lQ7_6mQ7`6nQ7a6oQ7b6pQ7c6qQ7d6rQ7e6sQ7f6tQ7g6uQ7h6vQ7j6xQ7k6yQ7n6zQ7p6{Q7q6|Q7x7XQ7y7iQ7{7oQ7}7rQ8O7sQ8P7uQ8Q7wQ8R7zQ8S7|Q8V8TQ8W8UQ8Y8XQ8]8fU9U#k&s7lQ9^8jQ9_8kQ9`8lQ9a8mQ9b8nQ9c8oQ9e8pQ9f8rQ9g8sQ9i8uQ9j8vQ9k8wQ9l8xQ9m8yQ9n8zQ9o8{Q9p8|Q9q8}Q9r9OQ9s9PQ9t9QQ9u9RQ9v9SQ9w9TQ9x9ZQ9z9[Q9{9]Q:P9hQ:Q9yQ:T9}Q:V:OQ:W:RQ:[:YQ:^:ZQ:`:_Q:c8iQ;j:dQ;k:eQ;l:fQ;m:gQ;n:hQ;o:iQ;p:jQ;q:kQ;r:lQ;s:oQ;v:rQ;w:sQ;x:tQ;y:uQ;z:vQ;{:wQ;|:xQ;}:yQ<O:zQ<P:{Q<Q:|Q<R:}Q<S;OQ<T;PQ<U;QQ<V;RQ<W;SQ<X;TQ<Y;UQ<Z;VQ<[;WQ<];XQ<^;YQ<_;ZQ<`;[Q<a;]Q<b;^Q<c;_Q<d;`Q<e;aQ<f;cQ<g;dQ<h;eQ<i;fQ<l;gQ<m;hQ<n;iQ<r;tQ<s;uQ<t<jQ<u<kQ<w<oQ<x<pQ<y<qQ<z<vQ<}<{Q=O<|Q=Q=PQ=V8hQ=W8gQ=_=ZQ=`9VQ=a9XQ=q=mR=r=nR){&pQ%t!gQ)O%cT)y&p-R$SiPVX[bklmnopxyz!S!W!X!Y!j!r!s!w!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y$}%P%S%U%}&S'Y(O(`)p+P+r+u-z.b.d.l/x0`0a0e0i1R1a2[2]6x6y!t3w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x6S3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O8e_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|=X!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v=k+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]=l0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UQ#r_Q&r#kQ&z#sR)}&sS#q_#s^$Tj3x3y8f8g8h8iS*Q&w7lT9Y#k&sQ&}#tR*X'OR&T!|R&Z!}Q&Y!}R-O)vQ#|gQ'V#}S'h$h*sQ*Y'SQ*n'iQ*q'mQ*v'rQ+W(PS+[(T+gQ,m)ZQ-`*fQ-s*zQ-v*}Q-y+QS.P+]+`Q.z,ZQ/s-rQ/v-uQ/z-{Q0P.QQ1O/uQ1p1PQ4^5}Q4_6OQ4`6PQ5y6]Q6Y8bQ6Z8cQ6[8dQ:U=dQ:X=eQ:]=iQ=g>OQ=h>PQ=j>QQ=u>XQ=v>YQ=w>ZR=x>[0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n!v$Pg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[S$]r'^Q%k!eS%o!f%rQ)b%pU+X(R(S+dQ,p)_Q,t)cQ/Z,uQ/{-|R0p/[|vPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a#U#i[bklmnopxyz!W!X!Y!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y%}&S'Y(O)p+P-z/x0e1R2[2]6x6yd+^(T)W+]+`+g,g,h,k.Q/O!t6w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x;b3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O=z_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|>]!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v>^+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]>_0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UR'p$hQ'o$hR-l*sR$_rR-q*wQ+Y(RQ+Z(SR.X+dT+f(T+ge+_(T)W+]+`+g,g,h,k.Q/OQ%f!_Q'b$bQ*c'cQ.U+aQ0S.RR1U0QQ#eZQ%X!WQ%Z!XQ%]!YQ'}$pQ(s%VQ(t%WQ(u%YQ(v%[Q(}%bQ)S%fQ)[%kQ)f%qQ)k%tQ*b'bQ,n)]Q-^*cQ.V+bQ.W+cQ.e+xQ.o,QQ.p,RQ.q,SQ.v,WQ.y,YQ.},bQ/U,oQ/}.OQ0T.SQ0U.UQ0W.XQ0[.hQ0k/QQ0q/_Q1S0OQ1V0RQ1W0SQ1`0_Q1h0jQ1r1TQ1s1UQ1v1[Q1y1_Q1}1jQ2T1{R2U1|Q$pvS+b(T+gU.O+[+]+`S0O.P.QR1T0P|!aPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ$dtW+c(T)W+g,kW.S+]+`,g,hT0R.Q/O0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR.|,_0w}PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$w{${Q(i%PQ(n%SQ(q%UR1f0iQ%b!]Q(m%RQ,U(lQ.s,TQ.u,VQ0c.tR1c0dQ%q!fR)]%rR)e%p",
                nodeNames: "\u26a0 ( HeredocString EscapeSequence abstract LogicOp array as Boolean break case catch clone const continue default declare do echo else elseif enddeclare endfor endforeach endif endswitch endwhile enum extends final finally fn for foreach from function global goto if implements include include_once LogicOp insteadof interface list match namespace new null LogicOp print require require_once return switch throw trait try unset use var Visibility while LogicOp yield LineComment BlockComment TextInterpolation PhpClose Text PhpOpen Template TextInterpolation EmptyStatement ; } { Block : LabelStatement Name ExpressionStatement ConditionalExpression LogicOp MatchExpression ) ( ParenthesizedExpression MatchBlock MatchArm , => AssignmentExpression ArrayExpression ValueList & VariadicUnpacking ... Pair [ ] ListExpression ValueList Pair Pair SubscriptExpression MemberExpression -> ?-> VariableName DynamicVariable $ ${ CallExpression ArgList NamedArgument SpreadArgument CastExpression UnionType LogicOp OptionalType NamedType QualifiedName \\ NamespaceName ScopedExpression :: ClassMemberName AssignOp UpdateExpression UpdateOp YieldExpression BinaryExpression LogicOp LogicOp LogicOp BitOp BitOp BitOp CompareOp CompareOp BitOp ArithOp ConcatOp ArithOp ArithOp IncludeExpression RequireExpression CloneExpression UnaryExpression ControlOp LogicOp PrintIntrinsic FunctionExpression static ParamList Parameter #[ Attributes Attribute VariadicParameter PropertyParameter UseList ArrowFunction NewExpression class BaseClause ClassInterfaceClause DeclarationList ConstDeclaration VariableDeclarator PropertyDeclaration VariableDeclarator MethodDeclaration UseDeclaration UseList UseInsteadOfClause UseAsClause UpdateExpression ArithOp ShellExpression ThrowExpression Integer Float String MemberExpression SubscriptExpression UnaryExpression ArithOp Interpolation String IfStatement ColonBlock SwitchStatement Block CaseStatement DefaultStatement ColonBlock WhileStatement EmptyStatement DoStatement ForStatement ForSpec SequenceExpression ForeachStatement ForSpec Pair GotoStatement ContinueStatement BreakStatement ReturnStatement TryStatement CatchDeclarator DeclareStatement EchoStatement UnsetStatement ConstDeclaration FunctionDefinition ClassDeclaration InterfaceDeclaration TraitDeclaration EnumDeclaration EnumBody EnumCase NamespaceDefinition NamespaceUseDeclaration UseGroup UseClause UseClause GlobalDeclaration FunctionStaticDeclaration Program",
                maxTerm: 304,
                nodeProps: [["group", -36, 2, 8, 49, 81, 83, 85, 88, 93, 94, 102, 106, 107, 110, 111, 114, 118, 123, 126, 130, 132, 133, 147, 148, 149, 150, 153, 154, 164, 165, 179, 181, 182, 183, 184, 185, 191, "Expression", -28, 74, 78, 80, 82, 192, 194, 199, 201, 202, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 230, 231, "Statement", -3, 119, 121, 122, "Type"], ["isolate", -4, 66, 67, 70, 191, ""], ["openedBy", 69, "phpOpen", 76, "{", 86, "(", 101, "#["], ["closedBy", 71, "phpClose", 77, "}", 87, ")", 158, "]"]],
                propSources: [g],
                skippedNodes: [0],
                repeatNodeCount: 29,
                tokenData: "!F|_R!]OX$zXY&^YZ'sZ]$z]^&^^p$zpq&^qr)Rrs+Pst+otu2buv5evw6rwx8Vxy>]yz>yz{?g{|@}|}Bb}!OCO!O!PDh!P!QKT!Q!R!!o!R![!$q![!]!,P!]!^!-a!^!_!-}!_!`!1S!`!a!2d!a!b!3t!b!c!7^!c!d!7z!d!e!9W!e!}!7z!}#O!;^#O#P!;z#P#Q!<h#Q#R!=U#R#S!7z#S#T!=u#T#U!7z#U#V!9W#V#o!7z#o#p!Co#p#q!D]#q#r!Er#r#s!F`#s$f$z$f$g&^$g&j!7z&j$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zP%PV&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zP%kO&wPP%nWOY$zYZ%fZ!a$z!b;'S$z;'S;=`&W<%l~$z~O$z~~%fP&ZP;=`<%l$zV&ed&wP&vUOX$zXY&^YZ'sZ]$z]^&^^p$zpq&^q!^$z!^!_%k!_$f$z$f$g&^$g$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zV'zW&wP&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dU(iW&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dR)YW$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`;'S$z;'S;=`&W<%lO$zR)yW$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`*c!`;'S$z;'S;=`&W<%lO$zR*jV$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+YV'fS&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+v]&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b!},o!}#O1f#O;'S,o;'S;=`/s<%lO,oV,vZ&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,oV-nZ!dUOY,oYZ%fZ],o]^$z^!a,o!a!b.a!b;'S,o;'S;=`/s<%l~,o~O,o~~%fU.dWOY.|YZ/nZ].|]^/n^!`.|!a;'S.|;'S;=`/h<%lO.|U/RV!dUOY.|Z].|^!a.|!a!b.a!b;'S.|;'S;=`/h<%lO.|U/kP;=`<%l.|U/sO!dUV/vP;=`<%l,oV0OZ&wPOY,oYZ0qZ],o]^0x^!^,o!^!_-i!_!`,o!`!a$z!a;'S,o;'S;=`/s<%lO,oV0xO&wP!dUV1PV&wP!dUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV1oZ&wP$dQ!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,o_2i`&wP#dQOY$zYZ%fZ!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o#p4w#p$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$z_3ra&wP#b^OY$zYZ%fZ!Q$z!Q![3k![!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$zV5OV&wP#eUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR5lW&wP$VQOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR6]V#wQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV6yY#SU&wPOY$zYZ%fZv$zvw7iw!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR7pV#|Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR8^Z&wP%VQOY8VYZ9PZw8Vwx;_x!^8V!^!_;{!_#O8V#O#P<y#P;'S8V;'S;=`>V<%lO8VR9WV&wP%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ9rV%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ:^O%VQQ:aRO;'S9m;'S;=`:j;=`O9mQ:oW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l9m<%lO9mQ;[P;=`<%l9mR;fV&wP%VQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR<Q]%VQOY8VYZ9PZw8Vwx;_x!a8V!a!b9m!b#O8V#O#P<y#P;'S8V;'S;=`>V<%l~8V~O8V~~%fR=OW&wPOY8VYZ9PZ!^8V!^!_;{!_;'S8V;'S;=`=h;=`<%l9m<%lO8VR=mW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l8V<%lO9mR>YP;=`<%l8VR>dV!yQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV?QV!xU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR?nY&wP$VQOY$zYZ%fZz$zz{@^{!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR@eW$WQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRAUY$TQ&wPOY$zYZ%fZ{$z{|At|!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRA{V$zQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRBiV!}Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_CXZ$TQ%TW&wPOY$zYZ%fZ}$z}!OAt!O!^$z!^!_%k!_!`6U!`!aCz!a;'S$z;'S;=`&W<%lO$zVDRV#`U&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVDo[&wP$UQOY$zYZ%fZ!O$z!O!PEe!P!Q$z!Q![Fs![!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVEjX&wPOY$zYZ%fZ!O$z!O!PFV!P!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVF^V#UU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRFz_&wP%OQOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#SJc#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zRHO]&wPOY$zYZ%fZ{$z{|Hw|}$z}!OHw!O!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRH|X&wPOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRIpZ&wP%OQOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_#R$z#R#SHw#S;'S$z;'S;=`&W<%lO$zRJhX&wPOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVK[[&wP$VQOY$zYZ%fZz$zz{LQ{!P$z!P!Q,o!Q!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVLVX&wPOYLQYZLrZzLQz{N_{!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQVLwT&wPOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMZTOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMmVOzMWz{Mj{!PMW!P!QNS!Q;'SMW;'S;=`NX<%lOMWUNXO!eUUN[P;=`<%lMWVNdZ&wPOYLQYZLrZzLQz{N_{!PLQ!P!Q! V!Q!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQV! ^V!eU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV! vZOYLQYZLrZzLQz{N_{!aLQ!a!bMW!b;'SLQ;'S;=`!!i<%l~LQ~OLQ~~%fV!!lP;=`<%lLQZ!!vm&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!d$z!d!e!&o!e!g$z!g!hGy!h!q$z!q!r!(a!r!z$z!z!{!){!{#R$z#R#S!%}#S#U$z#U#V!&o#V#X$z#X#YGy#Y#c$z#c#d!(a#d#l$z#l#m!){#m;'S$z;'S;=`&W<%lO$zZ!$xa&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#S!%}#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zZ!&SX&wPOY$zYZ%fZ!Q$z!Q![!$q![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!&tY&wPOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!'k[&wP$}YOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_#R$z#R#S!&o#S;'S$z;'S;=`&W<%lO$zZ!(fX&wPOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!)YZ&wP$}YOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_#R$z#R#S!(a#S;'S$z;'S;=`&W<%lO$zZ!*Q]&wPOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zZ!+Q_&wP$}YOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#R$z#R#S!){#S#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zR!,WX!qQ&wPOY$zYZ%fZ![$z![!]!,s!]!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!,zV#sQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!-hV!mU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!.S[$RQOY$zYZ%fZ!^$z!^!_!.x!_!`!/i!`!a*c!a!b!0]!b;'S$z;'S;=`&W<%l~$z~O$z~~%fR!/PW$SQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!/pX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a*c!a;'S$z;'S;=`&W<%lO$zP!0bR!iP!_!`!0k!r!s!0p#d#e!0pP!0pO!iPP!0sQ!j!k!0y#[#]!0yP!0|Q!r!s!0k#d#e!0kV!1ZX#uQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`!a!1v!a;'S$z;'S;=`&W<%lO$zV!1}V#OU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!2kX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`!3W!`!a!.x!a;'S$z;'S;=`&W<%lO$zR!3_V$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!3{[!vQ&wPOY$zYZ%fZ}$z}!O!4q!O!^$z!^!_%k!_!`$z!`!a!6P!a!b!6m!b;'S$z;'S;=`&W<%lO$zV!4vX&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a!5c!a;'S$z;'S;=`&W<%lO$zV!5jV#aU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!6WV!gU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!6tW#zQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!7eV$]Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_!8Ra&wP!s^OY$zYZ%fZ!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$z_!9_e&wP!s^OY$zYZ%fZr$zrs!:psw$zwx8Vx!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$zR!:wV&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!;eV#WU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!<RV#pU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!<oV#XQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!=]W$OQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!=zZ&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%lO!=uR!>rV&wPO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?[VO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?tRO;'S!?X;'S;=`!?};=`O!?XQ!@QWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!?X<%lO!?XQ!@oO${QQ!@rP;=`<%l!?XR!@x]OY!=uYZ!>mZ!a!=u!a!b!?X!b#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%l~!=u~O!=u~~%fR!AvW&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_;'S!=u;'S;=`!B`;=`<%l!?X<%lO!=uR!BcWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!=u<%lO!?XR!CSV${Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!ClP;=`<%l!=uV!CvV!oU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!DfY#}Q#lS&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`#p$z#p#q!EU#q;'S$z;'S;=`&W<%lO$zR!E]V#{Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!EyV!nQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!FgV$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z",
                tokenizers: [d, m, f, 0, 1, 2, 3, h],
                topRules: {
                    Template: [0, 72],
                    Program: [1, 232]
                },
                dynamicPrecedences: {
                    284: 1
                },
                specialized: [{
                    term: 81,
                    get: (e, t) => o(e) << 1,
                    external: o
                }, {
                    term: 81,
                    get: e => Q[e] || -1
                }],
                tokenPrec: 29354
            });
        var b = n(45615)
            , y = n(83182)
            , S = n(25956);
        const P = S.bj.define({
            name: "php",
            parser: $.configure({
                props: [S.Oh.add({
                    IfStatement: (0,
                        S.mz)({
                            except: /^\s*({|else\b|elseif\b|endif\b)/
                        }),
                    TryStatement: (0,
                        S.mz)({
                            except: /^\s*({|catch\b|finally\b)/
                        }),
                    SwitchBody: e => {
                        let t = e.textAfter
                            , n = /^\s*\}/.test(t)
                            , i = /^\s*(case|default)\b/.test(t);
                        return e.baseIndent + (n ? 0 : i ? 1 : 2) * e.unit
                    }
                    ,
                    ColonBlock: e => e.baseIndent + e.unit,
                    "Block EnumBody DeclarationList": (0,
                        S.Ay)({
                            closing: "}"
                        }),
                    ArrowFunction: e => e.baseIndent + e.unit,
                    "String BlockComment": () => null,
                    Statement: (0,
                        S.mz)({
                            except: /^({|end(for|foreach|switch|while)\b)/
                        })
                }), S.b_.add({
                    "Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList": S.yd,
                    ColonBlock: e => ({
                        from: e.from + 1,
                        to: e.to
                    }),
                    BlockComment: e => ({
                        from: e.from + 2,
                        to: e.to - 2
                    })
                })]
            }),
            languageData: {
                commentTokens: {
                    block: {
                        open: "/*",
                        close: "*/"
                    },
                    line: "//"
                },
                indentOnInput: /^\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\{|\})$/,
                wordChars: "$",
                closeBrackets: {
                    stringPrefixes: ["b", "B"]
                }
            }
        });
        function v() {
            let e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = [];
            if (null === t.baseLanguage)
                ;
            else if (t.baseLanguage)
                e = t.baseLanguage;
            else {
                let t = (0,
                    y.html)({
                        matchClosingTags: !1
                    });
                n.push(t.support),
                    e = t.language
            }
            return new S.Yy(P.configure({
                wrap: e && (0,
                    b.$g)((t => t.type.isTop ? {
                        parser: e.parser,
                        overlay: e => "Text" == e.name
                    } : null)),
                top: t.plain ? "Program" : "Template"
            }), n)
        }
    }
    ,
    96434: (e, t, n) => {
        n.r(t),
            n.d(t, {
                rust: () => p,
                rustLanguage: () => f
            });
        var i = n(5178)
            , r = n(14462);
        function a(e) {
            return e >= 48 && e <= 57
        }
        function o(e) {
            return a(e) || 95 == e
        }
        const O = new i.Lu(((e, t) => {
            if (a(e.next)) {
                let t = !1;
                do {
                    e.advance()
                } while (o(e.next));
                if (46 == e.next)
                    if (t = !0,
                        e.advance(),
                        a(e.next))
                        do {
                            e.advance()
                        } while (o(e.next));
                    else if (46 == e.next || e.next > 127 || /\w/.test(String.fromCharCode(e.next)))
                        return;
                if (101 == e.next || 69 == e.next) {
                    if (t = !0,
                        e.advance(),
                        43 != e.next && 45 != e.next || e.advance(),
                        !o(e.next))
                        return;
                    do {
                        e.advance()
                    } while (o(e.next))
                }
                if (102 == e.next) {
                    let n = e.peek(1);
                    if (!(51 == n && 50 == e.peek(2) || 54 == n && 52 == e.peek(2)))
                        return;
                    e.advance(3),
                        t = !0
                }
                t && e.acceptToken(5)
            } else if (98 == e.next || 114 == e.next) {
                if (98 == e.next && e.advance(),
                    114 != e.next)
                    return;
                e.advance();
                let t = 0;
                for (; 35 == e.next;)
                    t++,
                        e.advance();
                if (34 != e.next)
                    return;
                e.advance();
                e: for (; ;) {
                    if (e.next < 0)
                        return;
                    let n = 34 == e.next;
                    if (e.advance(),
                        n) {
                        for (let n = 0; n < t; n++) {
                            if (35 != e.next)
                                continue e;
                            e.advance()
                        }
                        return void e.acceptToken(4)
                    }
                }
            }
        }
        ))
            , s = new i.Lu((e => {
                124 == e.next && e.acceptToken(1, 1)
            }
            ))
            , l = new i.Lu((e => {
                60 == e.next ? e.acceptToken(2, 1) : 62 == e.next && e.acceptToken(3, 1)
            }
            ))
            , c = (0,
                r.pn)({
                    "const macro_rules struct union enum type fn impl trait let static": r._A.definitionKeyword,
                    "mod use crate": r._A.moduleKeyword,
                    "pub unsafe async mut extern default move": r._A.modifier,
                    "for if else loop while match continue break return await": r._A.controlKeyword,
                    "as in ref": r._A.operatorKeyword,
                    "where _ crate super dyn": r._A.keyword,
                    self: r._A.self,
                    String: r._A.string,
                    Char: r._A.character,
                    RawString: r._A.special(r._A.string),
                    Boolean: r._A.bool,
                    Identifier: r._A.variableName,
                    "CallExpression/Identifier": r._A.function(r._A.variableName),
                    BoundIdentifier: r._A.definition(r._A.variableName),
                    "FunctionItem/BoundIdentifier": r._A.function(r._A.definition(r._A.variableName)),
                    LoopLabel: r._A.labelName,
                    FieldIdentifier: r._A.propertyName,
                    "CallExpression/FieldExpression/FieldIdentifier": r._A.function(r._A.propertyName),
                    Lifetime: r._A.special(r._A.variableName),
                    ScopeIdentifier: r._A.namespace,
                    TypeIdentifier: r._A.typeName,
                    "MacroInvocation/Identifier MacroInvocation/ScopedIdentifier/Identifier": r._A.macroName,
                    "MacroInvocation/TypeIdentifier MacroInvocation/ScopedIdentifier/TypeIdentifier": r._A.macroName,
                    '"!"': r._A.macroName,
                    UpdateOp: r._A.updateOperator,
                    LineComment: r._A.lineComment,
                    BlockComment: r._A.blockComment,
                    Integer: r._A.integer,
                    Float: r._A.float,
                    ArithOp: r._A.arithmeticOperator,
                    LogicOp: r._A.logicOperator,
                    BitOp: r._A.bitwiseOperator,
                    CompareOp: r._A.compareOperator,
                    "=": r._A.definitionOperator,
                    ".. ... => ->": r._A.punctuation,
                    "( )": r._A.paren,
                    "[ ]": r._A.squareBracket,
                    "{ }": r._A.brace,
                    ". DerefOp": r._A.derefOperator,
                    "&": r._A.operator,
                    ", ; ::": r._A.separator,
                    "Attribute/...": r._A.meta
                })
            , u = {
                __proto__: null,
                self: 28,
                super: 32,
                crate: 34,
                impl: 46,
                true: 72,
                false: 72,
                pub: 88,
                in: 92,
                const: 96,
                unsafe: 104,
                async: 108,
                move: 110,
                if: 114,
                let: 118,
                ref: 142,
                mut: 144,
                _: 198,
                else: 200,
                match: 204,
                as: 248,
                return: 252,
                await: 262,
                break: 270,
                continue: 276,
                while: 312,
                loop: 316,
                for: 320,
                macro_rules: 327,
                mod: 334,
                extern: 342,
                struct: 346,
                where: 364,
                union: 379,
                enum: 382,
                type: 390,
                default: 395,
                fn: 396,
                trait: 412,
                use: 420,
                static: 438,
                dyn: 476
            }
            , d = i.U1.deserialize({
                version: 14,
                states: "$2xQ]Q_OOP$wOWOOO&sQWO'#CnO)WQWO'#I`OOQP'#I`'#I`OOQQ'#Ie'#IeO)hO`O'#C}OOQR'#Ih'#IhO)sQWO'#IuOOQO'#Hk'#HkO)xQWO'#DpOOQR'#Iw'#IwO)xQWO'#DpO*ZQWO'#DpOOQO'#Iv'#IvO,SQWO'#J`O,ZQWO'#EiOOQV'#Hp'#HpO,cQYO'#F{OOQV'#El'#ElOOQV'#Em'#EmOOQV'#En'#EnO.YQ_O'#EkO0_Q_O'#EoO2gQWOOO4QQ_O'#FPO7hQWO'#J`OOQV'#FY'#FYO7{Q_O'#F^O:WQ_O'#FaOOQO'#F`'#F`O=sQ_O'#FcO=}Q_O'#FbO@VQWO'#FgOOQO'#J`'#J`OOQV'#Io'#IoOA]Q_O'#InOEPQWO'#InOOQV'#Fw'#FwOF[QWO'#JuOFcQWO'#F|OOQO'#IO'#IOOGrQWO'#GhOOQV'#Im'#ImOOQV'#Il'#IlOOQV'#Hj'#HjQGyQ_OOOKeQ_O'#DUOKlQYO'#CqOOQP'#I_'#I_OOQV'#Hg'#HgQ]Q_OOOLuQWO'#I`ONsQYO'#DXO!!eQWO'#JuO!!lQWO'#JuO!!vQ_O'#DfO!%]Q_O'#E}O!(sQ_O'#FWO!,ZQWO'#FZO!.^QXO'#FbO!.cQ_O'#EeO!!vQ_O'#FmO!0uQWO'#FoO!0zQWO'#FoO!1PQ^O'#FqO!1WQWO'#JuO!1_QWO'#FtO!1dQWO'#FxO!2WQWO'#JjO!2_QWO'#GOO!2_QWO'#G`O!2_QWO'#GbO!2_QWO'#GsOOQO'#Ju'#JuO!2dQWO'#GhO!2lQYO'#GpO!2_QWO'#GqO!3uQ^O'#GtO!3|QWO'#GuO!4hQWO'#HOP!4sOpO'#CcPOOO)CC})CC}OOOO'#Hi'#HiO!5OO`O,59iOOQV,59i,59iO!5ZQYO,5?aOOQO-E;i-E;iOOQO,5:[,5:[OOQP,59Z,59ZO)xQWO,5:[O)xQWO,5:[O!5oQWO,5?kO!5zQYO,5;qO!6PQYO,5;TO!6hQWO,59QO!7kQXO'#CnO!7xQXO'#I`O!9SQWO'#CoO,^QWO'#EiOOQV-E;n-E;nO!9eQWO'#FsOOQV,5<g,5<gO!9SQWO'#CoO!9jQWO'#CoO!9oQWO'#I`O! yQWO'#JuO!9yQWO'#J`O!:aQWO,5;VOOQO'#In'#InO!0zQWO'#DaO!<aQWO'#DcO!<iQWO,5;ZO.YQ_O,5;ZOOQO,5;[,5;[OOQV'#Er'#ErOOQV'#Es'#EsOOQV'#Et'#EtOOQV'#Eu'#EuOOQV'#Ev'#EvOOQV'#Ew'#EwOOQV'#Ex'#ExOOQV'#Ey'#EyO.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;fO!=PQ_O,5;kO!@gQ_O'#FROOQO,5;l,5;lO!BrQWO,5;pO.YQ_O,5;wOKlQYO,5;gO!D_QWO,5;kO!EOQWO,5;xOOQO,5;x,5;xO!E]QWO,5;xO!EbQ_O,5;xO!GmQWO'#CfO!GrQWO,5<QO!G|Q_O,5<QOOQO,5;{,5;{O!JjQXO'#CnO!K{QXO'#I`OOQS'#Dk'#DkOOQP'#Ir'#IrO!LuQ[O'#IrO!L}QXO'#DjO!M{QWO'#DnO!M{QWO'#DnO!N^QWO'#DnOOQP'#It'#ItO!NcQXO'#ItO# ^Q^O'#DoO# hQWO'#DrO# pQ^O'#DzO# zQ^O'#D|O#!RQWO'#EPO#!^QXO'#FdOOQP'#ES'#ESOOQP'#Iq'#IqO#!lQXO'#JfOOQP'#Je'#JeO#!tQXO,5;}O#!yQXO'#I`O!1PQ^O'#DyO!1PQ^O'#FdO##sQWO,5;|OOQO,5;|,5;|OKlQYO,5;|O#$ZQWO'#FhOOQO,5<R,5<ROOQV,5=l,5=lO#&`QYO'#FzOOQV,5<h,5<hO#&gQWO,5<hO#&nQWO,5=SO!1WQWO,59rO!1dQWO,5<dO#&uQWO,5=iO!2_QWO,5<jO!2_QWO,5<zO!2_QWO,5<|O!2_QWO,5=QO#&|QWO,5=]O#'TQWO,5=SO!2_QWO,5=]O!3|QWO,5=aO#']QWO,5=jOOQO-E;|-E;|O#'hQWO'#JjOOQV-E;h-E;hO#(PQWO'#HRO#(WQ_O,59pOOQV,59p,59pO#(_QWO,59pO#(dQ_O,59pO#)SQZO'#CuO#+[QZO'#CvOOQV'#C|'#C|O#-wQWO'#HTO#.OQYO'#IdOOQO'#Hh'#HhO#.WQWO'#CwO#.WQWO'#CwO#.iQWO'#CwOOQR'#Ic'#IcO#.nQZO'#IbO#1TQYO'#HTO#1qQYO'#H[O#2}QYO'#H_OKlQYO'#H`OOQR'#Hb'#HbO#4ZQWO'#HeO#4`QYO,59]OOQR'#Ib'#IbO#5PQZO'#CtO#7[QYO'#HUO#7aQWO'#HTO#7fQYO'#CrO#8VQWO'#H]O#7fQYO'#HcOOQV-E;e-E;eO#8_QWO,59sOOQV,59{,59{O#8mQYO,5=[OOQV,59},59}O!0zQWO,59}O#;aQWO'#IpOOQO'#Ip'#IpO!1PQ^O'#DhO!0zQWO,5:QO#;hQWO,5;iO#<OQWO,5;rO#<fQ_O,5;rOOQO,5;u,5;uO#@PQ_O,5;|O#BXQWO,5;PO!0zQWO,5<XO#B`QWO,5<ZOOQV,5<Z,5<ZO#BkQWO,5<]O!1PQ^O'#EOOOQQ'#D_'#D_O#BsQWO,59rO#BxQWO,5<`O#B}QWO,5<dOOQO,5@U,5@UO#CVQWO,5=iOOQQ'#Cv'#CvO#C[QYO,5<jO#CmQYO,5<zO#CxQYO,5<|O#DTQYO,5=_O#DcQYO,5=SO#E{QYO'#GQO#FYQYO,5=[O#FmQWO,5=[O#F{QYO,5=[O#HUQYO,5=]O#HdQWO,5=`O!1PQ^O,5=`O#HrQWO'#CnO#ITQWO'#I`OOQO'#Jy'#JyO#IfQWO'#IQO#IkQWO'#GwOOQO'#Jz'#JzO#JSQWO'#GzOOQO'#G|'#G|OOQO'#Jx'#JxO#IkQWO'#GwO#JZQWO'#GxO#J`QWO,5=aO#JeQWO,5=jO!1dQWO,5=jO#'`QWO,5=jPOOO'#Hf'#HfP#JjOpO,58}POOO,58},58}OOOO-E;g-E;gOOQV1G/T1G/TO#JuQWO1G4{O#JzQ^O'#CyPOQQ'#Cx'#CxOOQO1G/v1G/vOOQP1G.u1G.uO)xQWO1G/vO#NTQ!fO'#ETO#N[Q!fO'#EaO#NcQ!fO'#EbO$ kQWO1G1yO$!_Q_O1G1yOOQP1G5V1G5VOOQO1G1]1G1]O$&RQWO1G0oO$&WQWO'#CiO!7xQXO'#I`O!6PQYO1G.lO!5oQWO,5<_O!9SQWO,59ZO!9SQWO,59ZO!5oQWO,5?kO$&iQWO1G0uO$(vQWO1G0wO$*nQWO1G0wO$+UQWO1G0wO$-YQWO1G0wO$-aQWO1G0wO$/bQWO1G0wO$/iQWO1G0wO$1jQWO1G0wO$1qQWO1G0wO$3YQWO1G1QO$5ZQWO1G1VO$5zQ_O'#JcO$8SQWO'#JcOOQO'#Jb'#JbO$8^QWO,5;mOOQO'#Dw'#DwOOQO1G1[1G1[OOQO1G1Y1G1YO$8cQWO1G1cOOQO1G1R1G1RO$8jQ_O'#HrO$:xQWO,5@OO.YQ_O1G1dOOQO1G1d1G1dO$;QQWO1G1dO$;_QWO1G1dO$;dQWO1G1eOOQO1G1l1G1lO$;lQWO1G1lOOQP,5?^,5?^O$;vQ^O,5:kO$<aQXO,5:YO!M{QWO,5:YO!M{QWO,5:YO!1PQ^O,5:gO$=bQWO'#IyOOQO'#Ix'#IxO$=pQWO,5:ZO# ^Q^O,5:ZO$=uQWO'#DsOOQP,5:^,5:^O$>WQWO,5:fOOQP,5:h,5:hO!1PQ^O,5:hO!1PQ^O,5:mO$>]QYO,5<OO$>gQ_O'#HsO$>tQXO,5@QOOQV1G1i1G1iOOQP,5:e,5:eO$>|QXO,5<OO$?[QWO1G1hO$?dQWO'#CnO$?oQWO'#FiOOQO'#Fi'#FiO$?wQWO'#FjO.YQ_O'#FkOOQO'#Ji'#JiO$?|QWO'#JhOOQO'#Jg'#JgO$@UQWO,5<SOOQQ'#Hv'#HvO$@ZQYO,5<fOOQV,5<f,5<fO$@bQYO,5<fOOQV1G2S1G2SO$@iQWO1G2nO$@qQWO1G/^O$@vQWO1G2OO#CVQWO1G3TO$AOQYO1G2UO#CmQYO1G2fO#CxQYO1G2hO$AaQYO1G2lO!2_QWO1G2wO#DcQYO1G2nO#HUQYO1G2wO$AiQWO1G2{O$AnQWO1G3UO!1dQWO1G3UO$AsQWO1G3UOOQV1G/[1G/[O$A{QWO1G/[O$BQQ_O1G/[O#7aQWO,5=oO$BXQYO,5?OO$BmQWO,5?OO$BrQZO'#IeOOQO-E;f-E;fOOQR,59c,59cO#.WQWO,59cO#.WQWO,59cOOQR,5=n,5=nO$E_QYO'#HVO$FwQZO,5=oO!5oQWO,5={O$IZQWO,5=oO$IbQZO,5=vO$KqQYO,5=vO$>]QYO,5=vO$LRQWO'#KRO$L^QWO,5=xOOQR,5=y,5=yO$LcQWO,5=zO$>]QYO,5>PO$>]QYO,5>POOQO1G.w1G.wO$>]QYO1G.wO$LnQYO,5=pO$LvQZO,59^OOQR,59^,59^O$>]QYO,5=wO% YQZO,5=}OOQR,5=},5=}O%#lQWO1G/_O!6PQYO1G/_O#FYQYO1G2vO%#qQWO1G2vO%$PQYO1G2vOOQV1G/i1G/iO%%YQWO,5:SO%%bQ_O1G/lO%*kQWO1G1^O%+RQWO1G1hOOQO1G1h1G1hO$>]QYO1G1hO%+iQ^O'#EgOOQV1G0k1G0kOOQV1G1s1G1sO!!vQ_O1G1sO!0zQWO1G1uO!1PQ^O1G1wO!.cQ_O1G1wOOQP,5:j,5:jO$>]QYO1G/^OOQO'#Cn'#CnO%+vQWO1G1zOOQV1G2O1G2OO%,OQWO'#CnO%,WQWO1G3TO%,]QWO1G3TO%,bQYO'#GQO%,sQWO'#G]O%-UQYO'#G_O%.hQYO'#GXOOQV1G2U1G2UO%/wQWO1G2UO%/|QWO1G2UO$ARQWO1G2UOOQV1G2f1G2fO%/wQWO1G2fO#CpQWO1G2fO%0UQWO'#GdOOQV1G2h1G2hO%0gQWO1G2hO#C{QWO1G2hO%0lQYO'#GSO$>]QYO1G2lO$AdQWO1G2lOOQV1G2y1G2yO%1xQWO1G2yO%3hQ^O'#GkO%3rQWO1G2nO#DfQWO1G2nO%4QQYO,5<lO%4[QYO,5<lO%4jQYO,5<lO%5XQYO,5<lOOQQ,5<l,5<lO!1WQWO'#JuO%5dQYO,5<lO%5lQWO1G2vOOQV1G2v1G2vO%5tQWO1G2vO$>]QYO1G2vOOQV1G2w1G2wO%5tQWO1G2wO%5yQWO1G2wO#HXQWO1G2wOOQV1G2z1G2zO.YQ_O1G2zO$>]QYO1G2zO%6RQWO1G2zOOQO,5>l,5>lOOQO-E<O-E<OOOQO,5=c,5=cOOQO,5=e,5=eOOQO,5=g,5=gOOQO,5=h,5=hO%6aQWO'#J|OOQO'#J{'#J{O%6iQWO,5=fO%6nQWO,5=cO!1dQWO,5=dOOQV1G2{1G2{O$>]QYO1G3UPOOO-E;d-E;dPOOO1G.i1G.iOOQO7+*g7+*gO%7VQYO'#IcO%7nQYO'#IfO%7yQYO'#IfO%8RQYO'#IfO%8^QYO,59eOOQO7+%b7+%bOOQP7+$a7+$aO%8cQ!fO'#JTOOQS'#EX'#EXOOQS'#EY'#EYOOQS'#EZ'#EZOOQS'#JT'#JTO%;UQWO'#EWOOQS'#E`'#E`OOQS'#JR'#JROOQS'#Hn'#HnO%;ZQ!fO,5:oOOQV,5:o,5:oOOQV'#JQ'#JQO%;bQ!fO,5:{OOQV,5:{,5:{O%;iQ!fO,5:|OOQV,5:|,5:|OOQV7+'e7+'eOOQV7+&Z7+&ZO%;pQ!fO,59TOOQO,59T,59TO%>YQWO7+$WO%>_QWO1G1yOOQV1G1y1G1yO!9SQWO1G.uO%>dQWO,5?}O%>nQ_O'#HqO%@|QWO,5?}OOQO1G1X1G1XOOQO7+&}7+&}O%AUQWO,5>^OOQO-E;p-E;pO%AcQWO7+'OO.YQ_O7+'OOOQO7+'O7+'OOOQO7+'P7+'PO%AjQWO7+'POOQO7+'W7+'WOOQP1G0V1G0VO%ArQXO1G/tO!M{QWO1G/tO%BsQXO1G0RO%CkQ^O'#HlO%C{QWO,5?eOOQP1G/u1G/uO%DWQWO1G/uO%D]QWO'#D_OOQO'#Dt'#DtO%DhQWO'#DtO%DmQWO'#I{OOQO'#Iz'#IzO%DuQWO,5:_O%DzQWO'#DtO%EPQWO'#DtOOQP1G0Q1G0QOOQP1G0S1G0SOOQP1G0X1G0XO%EXQXO1G1jO%EdQXO'#FeOOQP,5>_,5>_O!1PQ^O'#FeOOQP-E;q-E;qO$>]QYO1G1jOOQO7+'S7+'SOOQO,5<T,5<TO%ErQWO,5<UO.YQ_O,5<UO%EwQWO,5<VO%FRQWO'#HtO%FdQWO,5@SOOQO1G1n1G1nOOQQ-E;t-E;tOOQV1G2Q1G2QO%FlQYO1G2QO#DcQYO7+(YO$>]QYO7+$xOOQV7+'j7+'jO%FsQWO7+(oO%FxQWO7+(oOOQV7+'p7+'pO%/wQWO7+'pO%F}QWO7+'pO%GVQWO7+'pOOQV7+(Q7+(QO%/wQWO7+(QO#CpQWO7+(QOOQV7+(S7+(SO%0gQWO7+(SO#C{QWO7+(SO$>]QYO7+(WO%GeQWO7+(WO#HUQYO7+(cO%GjQWO7+(YO#DfQWO7+(YOOQV7+(c7+(cO%5tQWO7+(cO%5yQWO7+(cO#HXQWO7+(cOOQV7+(g7+(gO$>]QYO7+(pO%GxQWO7+(pO!1dQWO7+(pOOQV7+$v7+$vO%G}QWO7+$vO%HSQZO1G3ZO%JfQWO1G4jOOQO1G4j1G4jOOQR1G.}1G.}O#.WQWO1G.}O%JkQWO'#KQOOQO'#HW'#HWO%J|QWO'#HXO%KXQWO'#KQOOQO'#KP'#KPO%KaQWO,5=qO%KfQYO'#H[O%LrQWO'#GmO%L}QYO'#CtO%MXQWO'#GmO$>]QYO1G3ZOOQR1G3g1G3gO#7aQWO1G3ZO%M^QZO1G3bO$>]QYO1G3bO& mQYO'#IVO& }QWO,5@mOOQR1G3d1G3dOOQR1G3f1G3fO.YQ_O1G3fOOQR1G3k1G3kO&!VQYO7+$cO&!_QYO'#KOOOQQ'#J}'#J}O&!gQYO1G3[O&!lQZO1G3cOOQQ7+$y7+$yO&${QWO7+$yO&%QQWO7+(bOOQV7+(b7+(bO%5tQWO7+(bO$>]QYO7+(bO#FYQYO7+(bO&%YQWO7+(bO!.cQ_O1G/nO&%hQWO7+%WO$?[QWO7+'SO&%pQWO'#EhO&%{Q^O'#EhOOQU'#Ho'#HoO&%{Q^O,5;ROOQV,5;R,5;RO&&VQWO,5;RO&&[Q^O,5;RO!0zQWO7+'_OOQV7+'a7+'aO&&iQWO7+'cO&&qQWO7+'cO&&xQWO7+$xO&'TQ!fO7+'fO&'[Q!fO7+'fOOQV7+(o7+(oO!1dQWO7+(oO&'cQYO,5<lO&'nQYO,5<lO!1dQWO'#GWO&'|QWO'#JpO&([QWO'#G^O!BxQWO'#G^O&(aQWO'#JpOOQO'#Jo'#JoO&(iQWO,5<wOOQO'#DX'#DXO&(nQYO'#JrO&)}QWO'#JrO$>]QYO'#JrOOQO'#Jq'#JqO&*YQWO,5<yO&*_QWO'#GZO#D^QWO'#G[O&*gQWO'#G[O&*oQWO'#JmOOQO'#Jl'#JlO&*zQYO'#GTOOQO,5<s,5<sO&+PQWO7+'pO&+UQWO'#JtO&+dQWO'#GeO#BxQWO'#GeO&+uQWO'#JtOOQO'#Js'#JsO&+}QWO,5=OO$>]QYO'#GUO&,SQYO'#JkOOQQ,5<n,5<nO&,kQWO7+(WOOQV7+(e7+(eO&.TQ^O'#D|O&._QWO'#GlO&.gQ^O'#JwOOQO'#Gn'#GnO&.nQWO'#JwOOQO'#Jv'#JvO&.vQWO,5=VO&.{QWO'#I`O&/]Q^O'#GmO&/dQWO'#IqO&/rQWO'#GmOOQV7+(Y7+(YO&/zQWO7+(YO$>]QYO7+(YO&0SQYO'#HxO&0hQYO1G2WOOQQ1G2W1G2WOOQQ,5<m,5<mO$>]QYO,5<qO&0pQWO,5<rO&0uQWO7+(bO&1QQWO7+(fO&1XQWO7+(fOOQV7+(f7+(fO.YQ_O7+(fO$>]QYO7+(fO&1dQWO'#IRO&1nQWO,5@hOOQO1G3Q1G3QOOQO1G2}1G2}OOQO1G3P1G3POOQO1G3R1G3ROOQO1G3S1G3SOOQO1G3O1G3OO&1vQWO7+(pO$>]QYO,59fO&2RQ^O'#ISO&2xQYO,5?QOOQR1G/P1G/PO&3QQ!bO,5:pO&3VQ!fO,5:rOOQS-E;l-E;lOOQV1G0Z1G0ZOOQV1G0g1G0gOOQV1G0h1G0hO&3^QWO'#JTOOQO1G.o1G.oOOQV<<Gr<<GrO&3iQWO1G5iO$5zQ_O,5>]O&3qQWO,5>]OOQO-E;o-E;oOOQO<<Jj<<JjO&3{QWO<<JjOOQO<<Jk<<JkO&4SQXO7+%`O&5TQWO,5>WOOQO-E;j-E;jOOQP7+%a7+%aO!1PQ^O,5:`O&5cQWO'#HmO&5wQWO,5?gOOQP1G/y1G/yOOQO,5:`,5:`O&6PQWO,5:`O%DzQWO,5:`O$>]QYO,5<PO&6UQXO,5<PO&6dQXO7+'UO.YQ_O1G1pO&6oQWO1G1pOOQO,5>`,5>`OOQO-E;r-E;rOOQV7+'l7+'lO&6yQWO<<KtO#DfQWO<<KtO&7XQWO<<HdOOQV<<LZ<<LZO!1dQWO<<LZOOQV<<K[<<K[O&7dQWO<<K[O%/wQWO<<K[O&7iQWO<<K[OOQV<<Kl<<KlO%/wQWO<<KlOOQV<<Kn<<KnO%0gQWO<<KnO&7qQWO<<KrO$>]QYO<<KrOOQV<<K}<<K}O%5tQWO<<K}O%5yQWO<<K}O#HXQWO<<K}OOQV<<Kt<<KtO&7yQWO<<KtO$>]QYO<<KtO&8RQWO<<L[O$>]QYO<<L[O&8^QWO<<L[OOQV<<Hb<<HbO$>]QYO7+(uOOQO7+*U7+*UOOQR7+$i7+$iO&8cQWO,5@lOOQO'#Gm'#GmO&8kQWO'#GmO&8vQYO'#IUO&8cQWO,5@lOOQR1G3]1G3]O&:cQYO,5=vO&;rQYO,5=XO&;|QWO,5=XOOQO,5=X,5=XOOQR7+(u7+(uO&<RQZO7+(uO&>eQZO7+(|O&@tQWO,5>qOOQO-E<T-E<TO&APQWO7+)QOOQO<<G}<<G}O&AWQYO'#ITO&AcQYO,5@jOOQQ7+(v7+(vOOQQ<<He<<HeO$>]QYO<<K|OOQV<<K|<<K|O&0uQWO<<K|O&AkQWO<<K|O%5tQWO<<K|O&AsQWO7+%YOOQV<<Hr<<HrOOQO<<Jn<<JnO.YQ_O,5;SO&AzQWO,5;SO.YQ_O'#EjO&BPQWO,5;SOOQU-E;m-E;mO&B[QWO1G0mOOQV1G0m1G0mO&%{Q^O1G0mOOQV<<Jy<<JyO!.cQ_O<<J}OOQV<<J}<<J}OOQV<<Hd<<HdO.YQ_O<<HdO&BaQWO'#FvO&BfQWO<<KQO&BnQ!fO<<KQO&BuQWO<<KQO&BzQWO<<KQO&CSQ!fO<<KQOOQV<<KQ<<KQO&CZQWO<<LZO&C`QWO,5@[O$>]QYO,5<xO&ChQWO,5<xO&CmQWO'#H{O&C`QWO,5@[OOQV1G2c1G2cO&DRQWO,5@^O$>]QYO,5@^O&D^QYO'#H|O&EsQWO,5@^OOQO1G2e1G2eO%,nQWO,5<uOOQO,5<v,5<vO&E{QYO'#HzO&G_QWO,5@XO%,bQYO,5=pO$>]QYO,5<oO&GjQWO,5@`O.YQ_O,5=PO&GrQWO,5=PO&G}QWO,5=PO&H`QWO'#H}O&GjQWO,5@`OOQV1G2j1G2jO&HtQYO,5<pO%0lQYO,5>PO&I]QYO,5@VOOQV<<Kr<<KrO&ItQWO,5=XO&KfQ^O,5:hO&KmQWO,5=XO$>]QYO,5=WO&KuQWO,5@cO&K}QWO,5@cO&MvQ^O'#IPO&KuQWO,5@cOOQO1G2q1G2qO&NTQWO,5=WO&N]QWO<<KtO&NkQYO,5>oO&NvQYO,5>dO' UQYO,5>dOOQQ,5>d,5>dOOQQ-E;v-E;vOOQQ7+'r7+'rO' aQYO1G2]O$>]QYO1G2^OOQV<<LQ<<LQO.YQ_O<<LQO' lQWO<<LQO' sQWO<<LQOOQO,5>m,5>mOOQO-E<P-E<POOQV<<L[<<L[O.YQ_O<<L[O'!OQYO1G/QO'!ZQYO,5>nOOQQ,5>n,5>nO'!fQYO,5>nOOQQ-E<Q-E<QOOQS1G0[1G0[O'$tQ!fO1G0^O'%RQ!fO1G0^O'%YQWO1G3wOOQOAN@UAN@UO'%dQWO1G/zOOQO,5>X,5>XOOQO-E;k-E;kO!1PQ^O1G/zOOQO1G/z1G/zO'%oQWO1G/zO'%tQXO1G1kO$>]QYO1G1kO'&PQWO7+'[OOQVANA`ANA`O'&ZQWOANA`O$>]QYOANA`O'&cQWOANA`OOQVAN>OAN>OO.YQ_OAN>OO'&qQWOANAuOOQVAN@vAN@vO'&vQWOAN@vOOQVANAWANAWOOQVANAYANAYOOQVANA^ANA^O'&{QWOANA^OOQVANAiANAiO%5tQWOANAiO%5yQWOANAiO''TQWOANA`OOQVANAvANAvO.YQ_OANAvO''cQWOANAvO$>]QYOANAvOOQR<<La<<LaO''nQWO1G6WO%JkQWO,5>pOOQO'#HY'#HYO''vQWO'#HZOOQO,5>p,5>pOOQO-E<S-E<SO'(RQYO1G2sO'(]QWO1G2sOOQO1G2s1G2sO$>]QYO<<LaOOQR<<Ll<<LlOOQQ,5>o,5>oOOQQ-E<R-E<RO&0uQWOANAhOOQVANAhANAhO%5tQWOANAhO$>]QYOANAhO'(bQWO1G1rO')UQ^O1G0nO.YQ_O1G0nO'*zQWO,5;UO'+RQWO1G0nP'+WQWO'#ERP&%{Q^O'#HpOOQV7+&X7+&XO'+cQWO7+&XO&&qQWOAN@iO'+hQWOAN>OO!5oQWO,5<bOOQS,5>a,5>aO'+oQWOAN@lO'+tQWOAN@lOOQS-E;s-E;sOOQVAN@lAN@lO'+|QWOAN@lOOQVANAuANAuO',UQWO1G5vO',^QWO1G2dO$>]QYO1G2dO&'|QWO,5>gOOQO,5>g,5>gOOQO-E;y-E;yO',iQWO1G5xO',qQWO1G5xO&(nQYO,5>hO',|QWO,5>hO$>]QYO,5>hOOQO-E;z-E;zO'-XQWO'#JnOOQO1G2a1G2aOOQO,5>f,5>fOOQO-E;x-E;xO&'cQYO,5<lO'-gQYO1G2ZO'.RQWO1G5zO'.ZQWO1G2kO.YQ_O1G2kO'.eQWO1G2kO&+UQWO,5>iOOQO,5>i,5>iOOQO-E;{-E;{OOQQ,5>c,5>cOOQQ-E;u-E;uO'.pQWO1G2sO'/QQWO1G2rO'/]QWO1G5}O'/eQ^O,5>kOOQO'#Go'#GoOOQO,5>k,5>kO'/lQWO,5>kOOQO-E;}-E;}O$>]QYO1G2rO'/zQYO7+'xO'0VQWOANAlOOQVANAlANAlO.YQ_OANAlO'0^QWOANAvOOQS7+%x7+%xO'0eQWO7+%xO'0pQ!fO7+%xO'0}QWO7+%fO!1PQ^O7+%fO'1YQXO7+'VOOQVG26zG26zO'1eQWOG26zO'1sQWOG26zO$>]QYOG26zO'1{QWOG23jOOQVG27aG27aOOQVG26bG26bOOQVG26xG26xOOQVG27TG27TO%5tQWOG27TO'2SQWOG27bOOQVG27bG27bO.YQ_OG27bO'2ZQWOG27bOOQO1G4[1G4[OOQO7+(_7+(_OOQRANA{ANA{OOQVG27SG27SO%5tQWOG27SO&0uQWOG27SO'2fQ^O7+&YO'4PQWO7+'^O'4sQ^O7+&YO.YQ_O7+&YP.YQ_O,5;SP'6PQWO,5;SP'6UQWO,5;SOOQV<<Is<<IsOOQVG26TG26TOOQVG23jG23jOOQO1G1|1G1|OOQVG26WG26WO'6aQWOG26WP&B}QWO'#HuO'6fQWO7+(OOOQO1G4R1G4RO'6qQWO7++dO'6yQWO1G4SO$>]QYO1G4SO%,nQWO'#HyO'7UQWO,5@YO'7dQWO7+(VO.YQ_O7+(VOOQO1G4T1G4TOOQO1G4V1G4VO'7nQWO1G4VO'7|QWO7+(^OOQVG27WG27WO'8XQWOG27WOOQS<<Id<<IdO'8`QWO<<IdO'8kQWO<<IQOOQVLD,fLD,fO'8vQWOLD,fO'9OQWOLD,fOOQVLD)ULD)UOOQVLD,oLD,oOOQVLD,|LD,|O'9^QWOLD,|O.YQ_OLD,|OOQVLD,nLD,nO%5tQWOLD,nO'9eQ^O<<ItO';OQWO<<JxO';rQ^O<<ItP'=OQWO1G0nP'=oQ^O1G0nP.YQ_O1G0nP'?bQWO1G0nOOQVLD+rLD+rO'?gQWO7+)nOOQO,5>e,5>eOOQO-E;w-E;wO'?rQWO<<KqOOQVLD,rLD,rOOQSAN?OAN?OOOQV!$(!Q!$(!QO'?|QWO!$(!QOOQV!$(!h!$(!hO'@UQWO!$(!hOOQV!$(!Y!$(!YO'@]Q^OAN?`POQU7+&Y7+&YP'AvQWO7+&YP'BgQ^O7+&YP.YQ_O7+&YOOQV!)9El!)9ElOOQV!)9FS!)9FSPOQU<<It<<ItP'DYQWO<<ItP'DyQ^O<<ItPOQUAN?`AN?`O'FlQWO'#CnO'FsQXO'#CnO'GlQWO'#I`O'IRQXO'#I`O'IxQWO'#DpO'IxQWO'#DpO!.cQ_O'#EkO'JZQ_O'#EoO'JbQ_O'#FPO'MfQ_O'#FbO'MmQXO'#I`O'NdQ_O'#E}O( gQ_O'#FWO'IxQWO,5:[O'IxQWO,5:[O!.cQ_O,5;ZO!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;fO(!jQ_O,5;kO(%nQWO,5;kO(&OQWO,5;|O(&VQYO'#CuO(&bQYO'#CvO(&mQWO'#CwO(&mQWO'#CwO('OQYO'#CtO('ZQWO,5;iO('bQWO,5;rO('iQ_O,5;rO((oQ_O,5;|O'IxQWO1G/vO((vQWO1G0uO(*eQWO1G0wO(*oQWO1G0wO(,dQWO1G0wO(,kQWO1G0wO(.]QWO1G0wO(.dQWO1G0wO(0UQWO1G0wO(0]QWO1G0wO(0dQWO1G1QO(0tQWO1G1VO(1UQYO'#IeO(&mQWO,59cO(&mQWO,59cO(1aQWO1G1^O(1hQWO1G1hO(&mQWO1G.}O(1oQWO'#DpO!.^QXO'#FbO(1tQWO,5;ZO(1{QWO'#Cw",
                stateData: "(2_~O&|OSUOS&}PQ~OPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'TQO'ZkO'^UO'gcO'qiO(QdO~O&}!sO~OZbX[bXdbXdlXobXwjX}bX!lbX!qbX!tbX#ObX#PbX#pbX'gbX'qbX'rbX'xbX'ybX'zbX'{bX'|bX'}bX(ObX(PbX(QbX(RbX(TbX~OybXXbX!ebX!PbXvbX#RbX~P$|OZ'SX['SXd'SXd'XXo'SXw'kXy'SX}'SX!l'SX!q'SX!t'SX#O'SX#P'SX#p'SX'g'SX'q'SX'r'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SXv'SX~OX'SX!e'SX!P'SX#R'SX~P'ZOr!uO']!wO'_!uO~Od!xO~O^RO_RO`ROaRO'TQO~Od!}O~Od#PO[(SXo(SXy(SX}(SX!l(SX!q(SX!t(SX#O(SX#P(SX#p(SX'g(SX'q(SX'r(SX'x(SX'y(SX'z(SX'{(SX'|(SX'}(SX(O(SX(P(SX(Q(SX(R(SX(T(SXv(SX~OZ#OO~P*`OZ#RO[#QO~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'T#SO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!j#eO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xO[#}Oo#xO}#zO!l#yO!q#jO!t#yO#O#xO#P#uO#p$OO'g#gO'q#yO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~OPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXy#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sXX#sX!e#sX!P#sXv#sX#R#sX~P)xOX(SX!e(SX!P(SXw(SX#R(SX~P*`OPoOQ!QOSVOTVOX$ROZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!P$XO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOQ!QOSVOTVO[$gO^$pO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j$rOP(XP~P<cOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q$uO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw$vO~Oo'bX#O'bX#P'bX#p'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(R'bX(T'bX~OP%tXQ%tXS%tXT%tXZ%tX[%tX^%tX_%tX`%tXa%tXd%tXg%tXs%tXt%tXu%tXw%tXy%tX|%tX}%tX!Q%tX!U%tX!W%tX!X%tX!Z%tX!]%tX!l%tX!q%tX!t%tX#Y%tX#r%tX#{%tX$O%tX$b%tX$d%tX$f%tX$i%tX$m%tX$q%tX$s%tX%T%tX%V%tX%Z%tX%]%tX%^%tX%f%tX%j%tX%s%tX&z%tX'Q%tX'T%tX'Z%tX'^%tX'g%tX'q%tX(Q%tXv%tX~P@[Oy$xO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bXv'bX~P@[Ow$yO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Oy$zO~PEsO!Q$}O!U%UO!W!lO$m%OO$q%PO$s%QO%T%RO%V%SO%Z%TO%]!lO%^%VO%f%WO%j%XO%s%YO~O!Q!lO!U!lO!W!lO$q%[O%]!lO~O%^%VO~PGaOPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'TQO'ZkO'^UO'gcO'qiO(QdO~Ov%`O~P]OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~P'ZO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~O}%}O'T{XQ{XZ{X[{X^{X_{X`{Xa{Xd{Xg{X!q{X$f{X&W{X'Z{X(Q{X~PMuOg&PO%f%WO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Ow!PO~P! yOw!PO!X&RO~PEvOPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!]&UO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#qXy#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qXX#qX!e#qX!P#qXv#qX#R#qX~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zXy#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zXX#zX!e#zX!P#zXv#zX#R#zX~P)xO'ZkO[#}Xo#}Xy#}X}#}X!l#}X!q#}X!t#}X#O#}X#P#}X#p#}X'g#}X'q#}X'r#}X'x#}X'y#}X'z#}X'{#}X'|#}X'}#}X(O#}X(P#}X(Q#}X(R#}X(T#}XX#}X!e#}X!P#}Xv#}Xw#}X#R#}X~OPoO~OPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~O!S&_O~Ow!PO~O!j&bO~P<cO'T&cO~PEvOZ&eO~O'T&cO~O'^UOw(^Xy(^X!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Oa&hO~P!1iO'T&iO~O_&nO'T&cO~OQ&oOZ&pO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!j&uO~P<cO^&wO_&wO`&wOa&wOd'POw&|O'T&vO(Q&}O~O!i'UO!j'TO'T&cO~O&}!sO'O'VO'P'XO~Or!uO']'ZO'_!uO~OQ']O^'ia_'ia`'iaa'ia'T'ia~O['cOw'dO}'bO~OQ']O~OQ!QO^#TO_#TO`#TOa'kOd#ZO'T#SO~O['lO~OZbXdlXXbXobXPbX!SbX!ebX'rbX!PbX!ObXybX!ZbX#RbXvbX~O[bXwbX}bX~P!6mOZ'SXd'XXX'SX['SXo'SXw'SX}'SX#p'SXP'SX!S'SX!e'SX'r'SX!P'SX!O'SXy'SX!Z'SX#R'SXv'SX~O^#TO_#TO`#TOa'kO'T#SO~OZ'mO~Od'oO~OZ'SXd'XX~PMuOZ'pOX(SX!e(SX!P(SXw(SX#R(SX~P*`O[#}O}#zO(O#|O(R#fOo#_ay#_a!l#_a!q#_a!t#_a#O#_a#P#_a#p#_a'g#_a'q#_a'r#_a'x#_a'y#_a'z#_a'{#_a'|#_a'}#_a(P#_a(Q#_a(T#_aX#_a!e#_a!P#_av#_aw#_a#R#_a~Ow!PO!X&RO~Oy#caX#ca!e#ca!P#cav#ca#R#ca~P2gOPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#say#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#saX#sa!e#sa!P#sav#sa#R#sa~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P(UP~P)xOu(SO#w(TO'T(RO~O[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#sa!t#sa#p#sa'q#sa~Oo#xO#O#xO#P#uOy#saX#sa!e#sa!P#sav#sa#R#sa~P!B}Oy(YO!e(WOX(WX~P2gOX(ZO~OPoOQ!QOSVOTVOX(ZOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZ#RO~O!P(_O!e(WO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZbXdlXwjX}jX!tbX'qbX~OP!RX!S!RX!e!RX'p!RX'r!RX!O!RXo!RXy!RX!P!RXX!RX!Z!RX#R!RXv!RX~P!JUOZ'SXd'XXw'kX}'kX!t'SX'q'SX~OP!`X!S!`X!e!`X'r!`X!O!`Xo!`Xy!`X!P!`XX!`X!Z!`X#R!`Xv!`X~P!KgOT(aOu(aO~O!t(bO'q(bOP!^X!S!^X!e!^X'r!^X!O!^Xo!^Xy!^X!P!^XX!^X!Z!^X#R!^Xv!^X~O^9rO_9rO`9yOa9yO'T9pO~Od(eO~O'p(fOP'hX!S'hX!e'hX'r'hX!O'hXo'hXy'hX!P'hXX'hX!Z'hX#R'hXv'hX~O!j&bO!P'lP~P<cOw(kO}(jO~O!j&bOX'lP~P<cO!j(oO~P<cOZ'pO!t(bO'q(bO~O!S(qO'r(pOP$WX!e$WX~O!e(rOP(YX~OP(tO~OP!aX!S!aX!e!aX'r!aX!O!aXo!aXy!aX!P!aXX!aX!Z!aX#R!aXv!aX~P!KgOy$UaX$Ua!e$Ua!P$Uav$Ua#R$Ua~P2gO!l(|O'Q#VO'T(xOv(ZP~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'T#SO~Ov)TO~P#$iOy)VO~PEsO%^)WO~PGaOa)ZO~P!1iO%f)`O~PEvO_)aO'T&cO~O!i)fO!j)eO'T&cO~O'^UO!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Ov%uX~P2gOv)gO~PGyOv)gO~Ov)gO~P]OQiXQ'XXZiXd'XX}iX#piX(PiX~ORiXwiX$fiX$|iX[iXoiXyiX!liX!qiX!tiX#OiX#PiX'giX'qiX'riX'xiX'yiX'ziX'{iX'|iX'}iX(OiX(QiX(RiX(TiX!PiX!eiXXiXPiXviX!SiX#RiX~P#(kOQjXQlXRjXZjXdlX}jX#pjX(PjXwjX$fjX$|jX[jXojXyjX!ljX!qjX!tjX#OjX#PjX'gjX'qjX'rjX'xjX'yjX'zjX'{jX'|jX'}jX(OjX(QjX(RjX(TjX!PjX!ejXXjX!SjXPjXvjX#RjX~O%^)jO~PGaOQ']Od)kO~O^)mO_)mO`)mOa)mO'T%dO~Od)qO~OQ']OZ)uO})sOR'UX#p'UX(P'UXw'UX$f'UX$|'UX['UXo'UXy'UX!l'UX!q'UX!t'UX#O'UX#P'UX'g'UX'q'UX'r'UX'x'UX'y'UX'z'UX'{'UX'|'UX'}'UX(O'UX(Q'UX(R'UX(T'UX!P'UX!e'UXX'UXP'UXv'UX!S'UX#R'UX~OQ!QO^:bO_:^O`TOaTOd:aO%^)jO'T:_O~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!j)yO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!P)|O!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO(P*OO~OR*QO#p*RO(P*PO~OQhXQ'XXZhXd'XX}hX(PhX~ORhX#phXwhX$fhX$|hX[hXohXyhX!lhX!qhX!thX#OhX#PhX'ghX'qhX'rhX'xhX'yhX'zhX'{hX'|hX'}hX(OhX(QhX(RhX(ThX!PhX!ehXXhXPhXvhX!ShX#RhX~P#4kOQ*SO~O})sO~OQ!QO^%vO_%cO`TOaTOd%jO$f%wO%^%xO'T%dO~PGaO!Q*VO!j*VO~O^*YO`*YOa*YO!O*ZO~OQ&oOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO[#}Oo:YO}#zO!l:ZO!q#jO!t:ZO#O:YO#P:VO#p$OO'g#gO'q:ZO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~Ow'dX~P#9vOy#qaX#qa!e#qa!P#qav#qa#R#qa~P2gOy#zaX#za!e#za!P#zav#za#R#za~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!S&_O!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zay#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#zaX#za!e#za!P#zav#za#R#za~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q*eO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw*fO~P#9vO$b*iO$d*jO$f*kO~O!O*lO'r(pO~O!S*nO~O'T*oO~Ow$yOy*qO~O'T*rO~OQ*uOw*vOy*yO}*wO$|*xO~OQ*uOw*vO$|*xO~OQ*uOw+QO$|*xO~OQ*uOo+VOy+XO!S+UO~OQ*uO}+ZO~OQ!QOZ%rO[%qO^%vO`TOaTOd%jOg%yO}%pO!U!lO!W!lO!q%oO$f%wO$q%[O%]!lO%^%xO&W%{O'T%dO'Z%eO(Q%zO~OR+bO_+^O!Q+cO~P#DkO_%cO!Q!lOw&UX$|&UX(P&UX~P#DkOw$yO$f+hO$|*xO(P*PO~OQ!QOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ*uOw$yO!S+UO$|*xO~Oo+nOy+mO!S+oO'r(pO~OdlXy!RX#pbXv!RX!e!RX~Od'XXy(mX#p'SXv(mX!e(mX~Od+qO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q+vO~Ov(oP~P!3|O#p+{O~Oy+|O~O!S+}O~O&}!sO'O'VO'P,PO~Od,QO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UO~P#DkOS,^OT,^OZ,^O['cO_,YOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~O!P,dO~P#KkOX,gO~P#KkOv,iO~P#KkOo'tX#O'tX#P'tX#p'tX'r'tX'x'tX'y'tX'z'tX'{'tX'|'tX'}'tX(O'tX(P'tX(R'tX(T'tX~Oy,jO['tX}'tX!l'tX!q'tX!t'tX'g'tX'q'tX(Q'tXv'tX~P#NjOP$giQ$giS$giT$giZ$gi[$gi^$gi_$gi`$gia$gid$gig$gis$git$giu$giw$giy$gi|$gi}$gi!Q$gi!U$gi!W$gi!X$gi!Z$gi!]$gi!l$gi!q$gi!t$gi#Y$gi#r$gi#{$gi$O$gi$b$gi$d$gi$f$gi$i$gi$m$gi$q$gi$s$gi%T$gi%V$gi%Z$gi%]$gi%^$gi%f$gi%j$gi%s$gi&z$gi'Q$gi'T$gi'Z$gi'^$gi'g$gi'q$gi(Q$giv$gi~P#NjOX,kO~O['cOo,lOw'dO}'bOX]X~Oy#ciX#ci!e#ci!P#civ#ci#R#ci~P2gO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei(P#ei~P$'PO[#}O}#zO(O#|O(R#fOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei'x#ei(P#ei(Q#ei(T#eiw#ei~P$)QO'g#gO(P#gO~P$'PO[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O!q#ei~P$+`O!q#jO~P$+`O[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'r#ei~P$-hO'r#lO~P$-hO[#}O}#zO!q#jO#P#uO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#eiX#ei!e#ei!P#eiv#ei#R#ei~O'}#ei~P$/pO'}#mO~P$/pO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#ni!t#ni#p#ni'q#ni~Oo#xO#O#xO#P#uOy#niX#ni!e#ni!P#niv#ni#R#ni~P$1xO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#si!t#si#p#si'q#si~Oo#xO#O#xO#P#uOy#siX#si!e#si!P#siv#si#R#si~P$3yOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO~P)xO!e,sO!P(VX~P2gO!P,uO~OX,vO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOX&fX!e&fX!P&fX~P)xO!e(WOX(Wa~Oy,zO!e(WOX(WX~P2gOX,{O~O!P,|O!e(WO~O!P-OO!e(WO~P2gOSVOTVOsVOtVOuVO'^UO'g$[O~P!6POP!baZca!S!ba!e!ba!tca'qca'r!ba!O!bao!bay!ba!P!baX!ba!Z!ba#R!bav!ba~O!e-TO'r(pO!P'mXX'mX~O!P-VO~O!i-`O!j-_O!l-[O'T-XOv'nP~OX-aO~O_%cO!Q!lO~P#DkO!j-gOP&gX!e&gX~P<cO!e(rOP(Ya~O!S-iO'r(pOP$Wa!e$Wa~Ow!PO(P*PO~OvbX!S!kX!ebX~O'Q#VO'T(xO~O!S-mO~O!e-oOv([X~Ov-qO~Ov-sO~P,cOv-sO~P#$iO_-uO'T&cO~O!S-vO~Ow$yOy-wO~OQ*uOw*vOy-zO}*wO$|*xO~OQ*uOo.UO~Oy._O~O!S.`O~O!j.bO'T&cO~Ov.cO~Ov.cO~PGyOQ']O^'Wa_'Wa`'Waa'Wa'T'Wa~Od.gO~OQ'XXQ'kXR'kXZ'kXd'XX}'kX#p'kX(P'kXw'kX$f'kX$|'kX['kXo'kXy'kX!l'kX!q'kX!t'kX#O'kX#P'kX'g'kX'q'kX'r'kX'x'kX'y'kX'z'kX'{'kX'|'kX'}'kX(O'kX(Q'kX(R'kX(T'kX!P'kX!e'kXX'kXP'kXv'kX!S'kX#R'kX~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t.kO#V.mO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(sP~PGaO#Q.tOR%wa#p%wa(P%waw%wa$f%wa$|%wa[%wao%way%wa}%wa!l%wa!q%wa!t%wa#O%wa#P%wa'g%wa'q%wa'r%wa'x%wa'y%wa'z%wa'{%wa'|%wa'}%wa(O%wa(Q%wa(R%wa(T%wa!P%wa!e%waX%waP%wav%wa!S%wa#R%wa~O%^.vO~PGaO(P*POR&Oa#p&Oaw&Oa$f&Oa$|&Oa[&Oao&Oay&Oa}&Oa!l&Oa!q&Oa!t&Oa#O&Oa#P&Oa'g&Oa'q&Oa'r&Oa'x&Oa'y&Oa'z&Oa'{&Oa'|&Oa'}&Oa(O&Oa(Q&Oa(R&Oa(T&Oa!P&Oa!e&OaX&OaP&Oav&Oa!S&Oa#R&Oa~O_%cO!Q!lO!j.xO(P*OO~P#DkO!e.yO(P*PO!P(uX~O!P.{O~OX.|Oy.}O(P*PO~O'Z%eOR(qP~OQ']O})sORfa#pfa(Pfawfa$ffa$|fa[faofayfa!lfa!qfa!tfa#Ofa#Pfa'gfa'qfa'rfa'xfa'yfa'zfa'{fa'|fa'}fa(Ofa(Qfa(Rfa(Tfa!Pfa!efaXfaPfavfa!Sfa#Rfa~OQ']O})sOR&Va#p&Va(P&Vaw&Va$f&Va$|&Va[&Vao&Vay&Va!l&Va!q&Va!t&Va#O&Va#P&Va'g&Va'q&Va'r&Va'x&Va'y&Va'z&Va'{&Va'|&Va'}&Va(O&Va(Q&Va(R&Va(T&Va!P&Va!e&VaX&VaP&Vav&Va!S&Va#R&Va~O!P/UO~Ow$yO$f/ZO$|*xO(P*PO~OQ!QOZ/[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOo/^O'r(pO~O#W/_OP!YiQ!YiS!YiT!YiZ!Yi[!Yi^!Yi_!Yi`!Yia!Yid!Yig!Yio!Yis!Yit!Yiu!Yiw!Yiy!Yi|!Yi}!Yi!Q!Yi!U!Yi!W!Yi!X!Yi!Z!Yi!]!Yi!l!Yi!q!Yi!t!Yi#O!Yi#P!Yi#Y!Yi#p!Yi#r!Yi#{!Yi$O!Yi$b!Yi$d!Yi$f!Yi$i!Yi$m!Yi$q!Yi$s!Yi%T!Yi%V!Yi%Z!Yi%]!Yi%^!Yi%f!Yi%j!Yi%s!Yi&z!Yi'Q!Yi'T!Yi'Z!Yi'^!Yi'g!Yi'q!Yi'r!Yi'x!Yi'y!Yi'z!Yi'{!Yi'|!Yi'}!Yi(O!Yi(P!Yi(Q!Yi(R!Yi(T!YiX!Yi!e!Yi!P!Yiv!Yi!i!Yi!j!Yi#V!Yi#R!Yi~Oy#ziX#zi!e#zi!P#ziv#zi#R#zi~P2gOy$UiX$Ui!e$Ui!P$Uiv$Ui#R$Ui~P2gOv/eO!j&bO'Q`O~P<cOw/nO}/mO~Oy!RX#pbX~Oy/oO~O#p/pO~OR+bO_+dO!Q/sO'T&iO'Z%eO~Oa/zO|!VO'Q#VO'T(ROv(cP~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(eP~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw(`Py(`P~PGaOw*vO~Oy-zO$|*xO~Oa/zO|!VO'Q#VO'T*oOv(gP~Ow+QO~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zO(R0`O~PGaOy0dO~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t0hO'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V0nO!P(jP~P%1}Ow!POy0pO#Q0rO$|*xO~OR0uO!e0sO~P#(kOR0uO!S+UO!e0sO(P*OO~OR0uOo0wO!S+UO!e0sOQ'VXZ'VX}'VX#p'VX(P'VX~OR0uOo0wO!e0sO~OR0uO!e0sO~O$f/ZO(P*PO~Ow$yO~Ow$yO$|*xO~Oo0}Oy0|O!S1OO'r(pO~O!e1POv(pX~Ov1RO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q1VO~Oo1YOQ'VXR'VXZ'VX}'VX!e'VX(P'VX~O!e1ZO(P*POR'YX~O!e1ZOR'YX~O!e1ZO(P*OOR'YX~OR1]O~O!S1^OS'wXT'wXZ'wX['wX_'wXd'wXo'wXs'wXu'wXw'wXy'wX}'wX!P'wX!e'wX!l'wX!q'wX!t'wX!y'wX#O'wX#P'wX#Q'wX#R'wX'Q'wX'Z'wX'^'wX'g'wX'r'wX'v'wX'x'wX'y'wX'z'wX'{'wX'|'wX'}'wX(O'wX(P'wX(Q'wX(R'wXX'wXv'wX~O}1_O~O!P1aO~P#KkOX1bO~P#KkOv1cO~P#KkOS,^OT,^OZ,^O['cO_1dOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~OX1fO~Oy,jO~O!e,sO!P(Va~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P&eX!e&eX~P)xO!e,sO!P(Va~OX&fa!e&fa!P&fa~P2gOX1kO~P2gO!P1mO!e(WO~OP!biZci!S!bi!e!bi!tci'qci'r!bi!O!bio!biy!bi!P!biX!bi!Z!bi#R!biv!bi~O'r(pOP!oi!S!oi!e!oi!O!oio!oiy!oi!P!oiX!oi!Z!oi#R!oiv!oi~O!j&bO!P&`X!e&`XX&`X~P<cO!e-TO!P'maX'ma~O!P1qO~Ov!RX!S!kX!e!RX~O!S1rO~O!e1sOv'oX~Ov1uO~O'T-XO~O!j1xO'T-XO~O(P*POP$Wi!e$Wi~O!S1yO'r(pOP$XX!e$XX~O!S1|O~Ov$_a!e$_a~P2gO!l(|O'Q#VO'T(xOv&hX!e&hX~O!e-oOv([a~Ov2QO~P,cOy2UO~O#p2VO~Oy2WO$|*xO~Ow*vOy2WO}*wO$|*xO~Oo2aO~Ow!POy2fO#Q2hO$|*xO~O!S2jO~Ov2lO~O#Q2mOR%wi#p%wi(P%wiw%wi$f%wi$|%wi[%wio%wiy%wi}%wi!l%wi!q%wi!t%wi#O%wi#P%wi'g%wi'q%wi'r%wi'x%wi'y%wi'z%wi'{%wi'|%wi'}%wi(O%wi(Q%wi(R%wi(T%wi!P%wi!e%wiX%wiP%wiv%wi!S%wi#R%wi~Od2nO~O^2qO!j.sO!q2rO'Q#VO'Z%eO~O(P*PO!P%{X!e%{X~O!e2sO!P(tX~O!P2uO~OQ!QOZ%rO[%qO^2wO_%cO`TOaTOd%jOg%yO}%pO!j2xO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO^2yO!j2xO(P*OO~O!P%aX!e%aX~P#4kO^2yO~O(P*POR&Oi#p&Oiw&Oi$f&Oi$|&Oi[&Oio&Oiy&Oi}&Oi!l&Oi!q&Oi!t&Oi#O&Oi#P&Oi'g&Oi'q&Oi'r&Oi'x&Oi'y&Oi'z&Oi'{&Oi'|&Oi'}&Oi(O&Oi(Q&Oi(R&Oi(T&Oi!P&Oi!e&OiX&OiP&Oiv&Oi!S&Oi#R&Oi~O_%cO!Q!lO!P&yX!e&yX~P#DkO!e.yO!P(ua~OR3QO(P*PO~O!e3ROR(rX~OR3TO~O(P*POR&Pi#p&Piw&Pi$f&Pi$|&Pi[&Pio&Piy&Pi}&Pi!l&Pi!q&Pi!t&Pi#O&Pi#P&Pi'g&Pi'q&Pi'r&Pi'x&Pi'y&Pi'z&Pi'{&Pi'|&Pi'}&Pi(O&Pi(Q&Pi(R&Pi(T&Pi!P&Pi!e&PiX&PiP&Piv&Pi!S&Pi#R&Pi~O!P3UO~O$f3VO(P*PO~Ow$yO$f3VO$|*xO(P*PO~Ow!PO!Z!YO~O!Z3aO#R3_O'r(pO~O!j&bO'Q#VO~P<cOv3eO~Ov3eO!j&bO'Q`O~P<cO!O3hO'r(pO~Ow!PO~P#9vOo3kOy3jO(P*PO~O!P3oO~P%;pOv3rO~P%;pOR0uO!S+UO!e0sO~OR0uOo0wO!S+UO!e0sO~Oa/zO|!VO'Q#VO'T(RO~O!S3uO~O!e3wOv(dX~Ov3yO~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO~PGaO!e3|O(P*PO!P(fX~O!P4OO~O!S4PO(P*OO~O!S+UO(P*PO~O!e4ROw(aXy(aX~OQ4TO~Oy2WO~Oa/zO|!VO'Q#VO'T*oO~Oo4WOw*vO}*wOv%XX!e%XX~O!e4ZOv(hX~Ov4]O~O(P4_Oy(_Xw(_X$|(_XR(_Xo(_X!e(_X~Oy4aO(P*PO~OQ!QOSVOTVO[$gO^4bO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j4cO'Z%eO~P&,sO!S4eO'r(pO~O#V4gO~P%1}O!e4hO!P(kX~O!P4jO~O!P%aX!S!aX!e%aX'r!aX~P!KgO!j&bO~P&,sO!e4hO!P(kX!S'eX'r'eX~O^2yO!j2xO~Ow!POy2fO~O_4pO!Q/sO'T&iO'Z%eOR&lX!e&lX~OR4rO!e0sO~O!S4tO~Ow$yO$|*xO(P*PO~Oy4uO~P2gOo4vOy4uO(P*PO~Ov&uX!e&uX~P!3|O!e1POv(pa~Oo4|Oy4{O(P*PO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UOR&vX!e&vX~P#DkO!e1ZOR'Ya~O!y5SO~O!P5TO~P#KkO!S1^OX'wX#R'wX~O!e,sO!P(Vi~O!P&ea!e&ea~P2gOX5WO~P2gOP!bqZcq!S!bq!e!bq!tcq'qcq'r!bq!O!bqo!bqy!bq!P!bqX!bq!Z!bq#R!bqv!bq~O'r(pO!P&`a!e&`aX&`a~O!i-`O!j-_O!l5YO'T-XOv&aX!e&aX~O!e1sOv'oa~O!S5[O~O!S5`O'r(pOP$Xa!e$Xa~O(P*POP$Wq!e$Wq~Ov$^i!e$^i~P2gOw!POy5bO#Q5dO$|*xO~Oo5gOy5fO(P*PO~Oy5iO~Oy5iO$|*xO~Oy5mO(P*PO~Ow!POy5bO~Oo5tOy5sO(P*PO~O!S5vO~O!e2sO!P(ta~O^2yO!j2xO'Z%eO~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t5zO#V5|O$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&xX!e&xX~PGaOQ!QOZ%rO[%qO^6OO_%cO`TOaTOd%jOg%yO}%pO!j6PO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(P*OO(Q%zO~PGaO!P%aa!e%aa~P#4kO^6QO~O#Q6ROR%wq#p%wq(P%wqw%wq$f%wq$|%wq[%wqo%wqy%wq}%wq!l%wq!q%wq!t%wq#O%wq#P%wq'g%wq'q%wq'r%wq'x%wq'y%wq'z%wq'{%wq'|%wq'}%wq(O%wq(Q%wq(R%wq(T%wq!P%wq!e%wqX%wqP%wqv%wq!S%wq#R%wq~O(P*POR&Oq#p&Oqw&Oq$f&Oq$|&Oq[&Oqo&Oqy&Oq}&Oq!l&Oq!q&Oq!t&Oq#O&Oq#P&Oq'g&Oq'q&Oq'r&Oq'x&Oq'y&Oq'z&Oq'{&Oq'|&Oq'}&Oq(O&Oq(Q&Oq(R&Oq(T&Oq!P&Oq!e&OqX&OqP&Oqv&Oq!S&Oq#R&Oq~O(P*PO!P&ya!e&ya~OX6SO~P2gO'Z%eOR&wX!e&wX~O!e3ROR(ra~O$f6YO(P*PO~Ow![q~P#9vO#R6]O~O!Z3aO#R6]O'r(pO~Ov6bO~O#R6fO~Oy6gO!P6hO~O!P6hO~P%;pOy6kO~Ov6kOy6gO~Ov6kO~P%;pOy6mO~O!e3wOv(da~O!S6pO~Oa/zO|!VO'Q#VO'T(ROv&oX!e&oX~O!e3|O(P*PO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&pX!e&pX~PGaO!e3|O!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw&nX!e&nXy&nX~PGaO!e4ROw(aay(aa~O!e4ZOv(ha~Oo7SOv%Xa!e%Xa~Oo7SOw*vO}*wOv%Xa!e%Xa~Oa/zO|!VO'Q#VO'T*oOv&qX!e&qX~O(P*POy$xaw$xa$|$xaR$xao$xa!e$xa~O(P4_Oy(_aw(_a$|(_aR(_ao(_a!e(_a~O!P%aa!S!aX!e%aa'r!aX~P!KgOQ!QOSVOTVO[$gO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O^7ZO~P&JUO^6QO!j6PO~O!e4hO!P(ka~O!e4hO!P(ka!S'eX'r'eX~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t7_O'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V7aO!P&sX!e&sX~P&L]O!S7cO'r(pO~Ow!POy5bO$|*xO(P*PO~O!S+UOR&la!e&la~Oo0wO!S+UOR&la!e&la~Oo0wOR&la!e&la~O(P*POR$yi!e$yi~Oy7fO~P2gOo7gOy7fO(P*PO~O(P*PORni!eni~O(P*POR&va!e&va~O(P*OOR&va!e&va~OS,^OT,^OZ,^O_,^Od,^Oo,^Os,^Ou,^Oy,^O!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O~O(P7iO(Q7iO(R7iO~P'!qO!P7kO~P#KkO!P&ei!e&ei~P2gO'r(pOv!hi!e!hi~O!S7mO~O(P*POP$Xi!e$Xi~Ov$^q!e$^q~P2gOw!POy7oO~Ow!POy7oO#Q7rO$|*xO~Oy7tO~Oy7uO~Oy7vO(P*PO~Ow!POy7oO$|*xO(P*PO~Oo7{Oy7zO(P*PO~O!e2sO!P(ti~O(P*PO!P%}X!e%}X~O!P%ai!e%ai~P#4kO^8OO~O!e8TO['bXv$`i}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[iv$`i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R#^a~P2gO#R8WO~O!Z3aO#R8XO'r(pO~Ov8[O~Oy8^O~P2gOy8`O~Oy6gO!P8aO~Ov8`Oy6gO~O!e3wOv(di~O(P*POv%Qi!e%Qi~O!e3|O!P(fi~O!e3|O(P*PO!P(fi~O(P*PO!P&pa!e&pa~O(P8hOw(bX!e(bXy(bX~O(P*PO!S$wiy$wiw$wi$|$wiR$wio$wi!e$wi~O!e4ZOv(hi~Ov%Xi!e%Xi~P2gOo8kOv%Xi!e%Xi~O!P%ai!S!aX!e%ai'r!aX~P!KgO(P*PO!P%`i!e%`i~O!e4hO!P(ki~O#V8nO~P&L]O!P&sa!S'eX!e&sa'r'eX~O(P*POR$zq!e$zq~Oy8pO~P2gOy7zO~P2gO(P8rO(Q8rO(R8rO~O(P8rO(Q8rO(R8rO~P'!qO'r(pOv!hq!e!hq~O(P*POP$Xq!e$Xq~Ow!POy8uO$|*xO(P*PO~Ow!POy8uO~Oy8xO~P2gOy8zO~P2gOo8|Oy8zO(P*PO~OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[qv$`q}#[q!i#[q!j#[q!l#[q!q#[q#V#[q'Q#[q'T#[q'^#[q'g#[q~O!e9PO['bXv$`q}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'2fO#R9UO~O!Z3aO#R9UO'r(pO~Oy9WO~O(P*POv%Qq!e%Qq~O!e3|O!P(fq~O(P*PO!P&pi!e&pi~O(P8hOw(ba!e(bay(ba~Ov%Xq!e%Xq~P2gO!P&si!S'eX!e&si'r'eX~O(P*PO!P%`q!e%`q~Oy9]O~P2gO(P9^O(Q9^O(R9^O~O'r(pOv!hy!e!hy~Ow!POy9_O~Ow!POy9_O$|*xO(P*PO~Oy9aO~P2gOQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[yv$`y}#[y!i#[y!j#[y!l#[y!q#[y#V#[y'Q#[y'T#[y'^#[y'g#[y~O!e9dO['bXv$`y}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'9eO!e9eO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R9hO~O(P*PO!P&pq!e&pq~Ov%Xy!e%Xy~P2gOw!POy9iO~Oy9jO~P2gOQ#[!RS#[!RT#[!R[#[!R^#[!R_#[!R`#[!Ra#[!Rd#[!Rs#[!Rt#[!Ru#[!Rv$`!R}#[!R!i#[!R!j#[!R!l#[!R!q#[!R#V#[!R'Q#[!R'T#[!R'^#[!R'g#[!R~O!e9kO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[q}#[q!i#[q!j#[q!l#[q!q#[q!t'bX#V#[q'Q#[q'T#[q'^#[q'g#[q'q'bX(Q'bX~P@[O!e9nO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[y}#[y!i#[y!j#[y!l#[y!q#[y!t'bX#V#[y'Q#[y'T#[y'^#[y'g#[y'q'bX(Q'bX~P@[OwbX~P$|OwjX}jX!tbX'qbX~P!6mOZ'SXd'XXo'SXw'kX!t'SX'q'SX'r'SX~O['SXd'SXw'SX}'SX!l'SX!q'SX#O'SX#P'SX#p'SX'g'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SX~P'GTOP'SX}'kX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTO^9qO_9qO`9qOa9qO'T9oO~O!j:OO~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXw#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sX~P'IxO#Q$uO~P!.cO}'kXP'SX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTOo#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qX~P!.cOo#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zX~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#saw#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#sa~P'IxOo:YO#O:YO#P:VOw#sa~P!B}Ow$Ua~P#9vOQ'XXd'XX}iX~OQlXdlX}jX~O^:sO_:sO`:sOa:sO'T:_O~OQ'XXd'XX}hX~Ow#qa~P#9vOw#za~P#9vO!S&_Oo#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#za~P!.cO#Q*eO~P!.cOw#ci~P#9vO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#ei~O'g#ei(P#ei~P((}O'g#gO(P#gO~P((}O[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#ei~O!q#ei~P(*yO!q#jO~P(*yO[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#ei~O'r#ei~P(,rO'r#lO~P(,rO[#}O}#zO!q#jO#P:VO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#ei~O'}#ei~P(.kO'}#mO~P(.kOo:YO#O:YO#P:VOw#ni~P$1xOo:YO#O:YO#P:VOw#si~P$3yOQ'XXd'XX}'kX~Ow#zi~P#9vOw$Ui~P#9vOd9}O~Ow#ca~P#9vOd:uO~OU'x_'v'P'O'^s!y'^'T'Z~",
                goto: "$Ku(vPPPPPPP(wPP)OPP)^PPPP)d-hP0f5aP7R7R8v7R>wD_DpPDvHQPPPPPPK`P! P! _PPPPP!!VP!$oP!$oPP!&oP!(rP!(w!)n!*f!*f!*f!(w!+]P!(w!.Q!.TPP!.ZP!(w!(w!(w!(wP!(w!(wP!(w!(w!.y!/dP!/dJ}J}J}PPPP!/d!.y!/sPP!$oP!0^!0a!0g!1h!1t!3t!3t!5r!7t!1t!1t!9p!;_!=O!>k!@U!Am!CS!De!1t!1tP!1tP!1t!1t!Et!1tP!Ge!1t!1tP!Ie!1tP!1t!7t!7t!1t!7t!1t!Kl!Mt!Mw!7t!1t!Mz!M}!M}!M}!NR!$oP!$oP!$oP! P! PP!N]! P! PP!Ni# }! PP! PP#!^##c##k#$Z#$_#$e#$e#$mP#&s#&s#&y#'o#'{! PP! PP#(]#(l! PP! PPP#(x#)W#)d#)|#)^! P! PP! P! P! PP#*S#*S#*Y#*`#*S#*S! P! PP#*m#*v#+Q#+Q#,x#.l#.x#.x#.{#.{5a5a5a5a5a5a5a5aP5a#/O#/U#/p#1{#2R#2b#6^#6d#6j#6|#7W#8w#9R#9b#9h#9n#9x#:S#:Y#:g#:m#:s#:}#;]#;g#=u#>R#>`#>f#>n#>u#?PPPPPPPP#?V#BaP#F^#Jx#Ls#Nr$&^P$&aPPP$)_$)h$)z$/U$1d$1m$3fP!(w$4`$7r$:i$>T$>^$>c$>fPPP$>i$A`$A|P$BaPPPPPPPPPP$BvP$EU$EX$E[$Eb$Ee$Eh$Ek$En$Et$HO$HR$HU$HX$H[$H_$Hb$He$Hh$Hk$Hn$Jt$Jw$Jz#*S$KW$K^$Ka$Kd$Kh$Kl$Ko$KrQ!tPT'V!s'Wi!SOlm!P!T$T$W$y%b)U*f/gQ'i#QR,n'l(OSOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%X%_%b&U&Y&[&b&u&z&|'P'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n+z,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1P1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:gS(z$v-oQ*p&eQ*t&hQ-k(yQ-y)ZW0Z+Q0Y4Z7UR4Y0[&w!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#r]Ofgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hb#[b#Q$y'l(b)S)U*Z-t!h$bo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m$b%k!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g!W:y!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:|%n$_%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g$e%l!Q!n$O$u%n%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g'hZOY[fgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r%_%b%i%j&U&Y&[&b&u'a'}(W(Y(d(e(f(j(o(p(r(|)i)p)q*f*i*k*l+Z+n,s,z-R-T-g-m.i.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:x$^%l!Q!n$O$u%n%o%p%q%y%{&P&p&r(q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ&j!hQ&k!iQ&l!jQ&m!kQ&s!oQ)[%QQ)]%RQ)^%SQ)_%TQ)b%WQ+`&oS,R']1ZQ.W)`S/r*u4TR4n0s+yTOY[bfgilmop!O!P!Q!T!Y!Z![!_!`!c!n!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$O$T$W$`$a$e$g$h$q$r$u$y%X%_%b%i%j%n%o%p%q%y%{&P&U&Y&[&b&o&p&r&u&z&|'P']'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(q(r(|)S)U)i)p)q)s)x)y*O*P*R*V*Z*[*^*e*f*i*k*l*n*w*x+U+V+Z+h+n+o+z+},q,s,z-R-T-g-i-m-t-v.U.`.i.p.t.x.y.}/Z/[/^/b/d/g/{/}0`0e0g0m0r0w0}1O1P1Y1Z1h1r1y1|2a2h2j2m2s2v3V3_3a3f3h3k3u3{3|4R4U4W4_4c4e4h4t4v4|5[5`5d5g5t5v6R6Y6]6a6p6v6x7S7^7c7g7m7r7{8W8X8g8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:xQ'[!xQ'h#PQ)l%gU)r%m*T*WR.f)kQ,T']R5P1Z#t%s!Q!n$O$u%p%q&P&p&r(q)x)y*O*R*V*[*^*e*n*w+V+h+o+}-i-v.U.`.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2v3V3u3{3|4U4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)x%oQ+_&oQ,U']n,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7kS.q)s2sQ/O*PQ/Q*SQ/q*uS0Q*x4RQ0a+U[0o+Z.j0g4h5y7^Q2v.pS4d0e2rQ4m0sQ5Q1ZQ6T3RQ6z4PQ7O4TQ7X4_R9Y8h&jVOfgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u']'}(W(Y(b(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1Z1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fU&g!g%P%[o,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7k$nsOfgilm!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y'}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9z9{:O:P:Q:R:S:T:U:V:W:X:Y:eS$tp9xS&O!W#bS&Q!X#cQ&`!bQ*_&RQ*a&VS*d&[:fQ*h&^Q,T']Q-j(wQ/i*jQ0p+[S2f.X0qQ3]/_Q3^/`Q3g/hQ3i/kQ5P1ZU5b2R2g4lU7o5c5e5rQ8]6dS8u7p7qS9_8v8wR9i9`i{Ob!O!P!T$y%_%b)S)U)i-thxOb!O!P!T$y%_%b)S)U)i-tW/v*v/t3w6qQ/}*wW0[+Q0Y4Z7UQ3{/{Q6x3|R8g6v!h$do!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ&d!dQ&f!fQ&n!mW&x!q%X&|1PQ'S!rQ)X$}Q)Y%OQ)a%VU)d%Y'T'UQ*s&hS+s&z'PS-Y(k1sQ-u)WQ-x)ZS.a)e)fS0x+c/sQ1S+zQ1W+{S1v-_-`Q2k.bQ3s/pQ5]1xR5h2V${sOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$zsOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR3]/_V&T!Y!`*i!i$lo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!k$^o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!i$co!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&e^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR(l$fQ-[(kR5Y1sQ(S#|S({$v-oS-Z(k1sQ-l(yW/u*v/t3w6qS1w-_-`Q3v/vR5^1xQ'e#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,o'mk,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ'f#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,p'mR*g&]X/c*f/d/g3f!}aOb!O!P!T#z$v$y%_%b'}(y)S)U)i)s*f*v*w+Q+Z,s-o-t.j/b/d/g/t/{0Y0g1h2s3f3w3|4Z4h5y6a6q6v7U7^Q3`/aQ6_3bQ8Y6`R9V8Z${rOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#nfOfglmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!T9u!Y!_!`*i*l/^3h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#rfOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!X9u!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$srOfglmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#U#oh#d$P$Q$V$s%^&W&X'q't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b}:P&S&]/k3[6d:[:]:c:d:h:j:k:l:m:n:o:p:q:r:v:w:{#W#ph#d$P$Q$V$s%^&W&X'q'r't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b!P:Q&S&]/k3[6d:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{#S#qh#d$P$Q$V$s%^&W&X'q'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b{:R&S&]/k3[6d:[:]:c:d:h:k:l:m:n:o:p:q:r:v:w:{#Q#rh#d$P$Q$V$s%^&W&X'q'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9by:S&S&]/k3[6d:[:]:c:d:h:l:m:n:o:p:q:r:v:w:{#O#sh#d$P$Q$V$s%^&W&X'q'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bw:T&S&]/k3[6d:[:]:c:d:h:m:n:o:p:q:r:v:w:{!|#th#d$P$Q$V$s%^&W&X'q'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bu:U&S&]/k3[6d:[:]:c:d:h:n:o:p:q:r:v:w:{!x#vh#d$P$Q$V$s%^&W&X'q'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bq:W&S&]/k3[6d:[:]:c:d:h:p:q:r:v:w:{!v#wh#d$P$Q$V$s%^&W&X'q'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bo:X&S&]/k3[6d:[:]:c:d:h:q:r:v:w:{$]#{h#`#d$P$Q$V$s%^&S&W&X&]'q'r's't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n/k0z1i1l1}3P3[4w5V5a6^6d6e7R7e7h7s7y8j8q8{9[9b:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{${jOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$v!aOfgilmp!O!P!T!Y!Z!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ&Y![Q&Z!]R:e9{#rpOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hQ&[!^!W9x!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:f:zR$moR-f(rR$wqT(}$v-oQ/f*fS3d/d/gR6c3fQ3m/mQ3p/nQ6i3nR6l3qQ$zwQ)V${Q*q&fQ+f&qQ+i&sQ-w)YW.Z)b+j+k+lS/X*]+gW2b.W.[.].^U3W/Y/]0yU5o2c2d2eS6W3X3ZS7w5p5qS8Q6V6XQ8y7xS8}8R8SR9c9O^|O!O!P!T%_%b)iX)R$y)S)U-tQ&r!nQ*^&PQ*|&jQ+P&kQ+T&lQ+W&mQ+]&nQ+l&sQ-})[Q.Q)]Q.T)^Q.V)_Q.Y)aQ.^)bQ2S-uQ2e.WR4U0VU+a&o*u4TR4o0sQ+Y&mQ+k&sS.])b+l^0v+_+`/q/r4m4n7OS2d.W.^S4Q0R0SR5q2eS0R*x4RQ0a+UR7X4_U+d&o*u4TR4p0sQ*z&jQ+O&kQ+S&lQ+g&qQ+j&sS-{)[*|S.P)]+PS.S)^+TU.[)b+k+lQ/Y*]Q0X*{Q0q+[Q2X-|Q2Y-}Q2].QQ2_.TU2c.W.].^Q2g.XS3Z/]0yS5c2R4lQ5j2ZS5p2d2eQ6X3XS7q5e5rQ7x5qQ8R6VQ8v7pQ9O8SR9`8wQ0T*xR6|4RQ*y&jQ*}&kU-z)[*z*|U.O)]+O+PS2W-{-}S2[.P.QQ4X0ZQ5i2YQ5k2]R7T4YQ/w*vQ3t/tQ6r3wR8d6qQ*{&jS-|)[*|Q2Z-}Q4X0ZR7T4YQ+R&lU.R)^+S+TS2^.S.TR5l2_Q0]+QQ4V0YQ7V4ZR8l7UQ+[&nS.X)a+]S2R-u.YR5e2SQ0i+ZQ4f0gQ7`4hR8m7^Q.m)sQ0i+ZQ2p.jQ4f0gQ5|2sQ7`4hQ7}5yR8m7^Q0i+ZR4f0gX'O!q%X&|1PX&{!q%X&|1PW'O!q%X&|1PS+u&z'PR1U+z_|O!O!P!T%_%b)iQ%a!PS)h%_%bR.d)i$^%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ*U%yR*X%{$c%n!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gW)t%m%x*T*WQ.e)jR2{.vR.m)sR5|2sQ'W!sR,O'WQ!TOQ$TlQ$WmQ%b!P[%|!T$T$W%b)U/gQ)U$yR/g*f$b%i!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g[)n%i)p.i:`:t:xQ)p%jQ.i)qQ:`%nQ:t:aR:x:uQ!vUR'Y!vS!OO!TU%]!O%_)iQ%_!PR)i%b#rYOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hh!yY!|#U$`'a'n(d,q-R9s9|:gQ!|[b#Ub#Q$y'l(b)S)U*Z-t!h$`o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ'a!}Q'n#ZQ(d$aQ,q'oQ-R(e!W9s!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ9|9tR:g9}Q-U(gR1p-UQ1t-[R5Z1tQ,c'bQ,f'cQ,h'dW1`,c,f,h5UR5U1_Q/d*fS3c/d3fR3f/gfbO!O!P!T$y%_%b)S)U)i-tp#Wb'}(y.j/b/t/{0Y0g1h5y6a6q6v7U7^Q'}#zS(y$v-oQ.j)sW/b*f/d/g3fQ/t*vQ/{*wQ0Y+QQ0g+ZQ1h,sQ5y2sQ6q3wQ6v3|Q7U4ZR7^4hQ,t(OQ1g,rT1j,t1gS(X$Q([Q(^$VU,x(X(^,}R,}(`Q(s$mR-h(sQ-p)OR2P-pQ3n/mQ3q/nT6j3n3qQ)S$yS-r)S-tR-t)UQ4`0aR7Y4``0t+^+_+`+a+d/q/r7OR4q0tQ8i6zR9Z8iQ4S0TR6}4SQ3x/wQ6n3tT6s3x6nQ3}/|Q6t3zU6y3}6t8eR8e6uQ4[0]Q7Q4VT7W4[7QhzOb!O!P!T$y%_%b)S)U)i-tQ$|xW%Zz$|%f)v$b%f!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR)v%nS4i0i0nS7]4f4gT7b4i7]W&z!q%X&|1PS+r&z+zR+z'PQ1Q+wR4z1QU1[,S,T,UR5R1[S3S/Q7OR6U3SQ2t.mQ5x2pT5}2t5xQ.z)zR3O.z^_O!O!P!T%_%b)iY#Xb$y)S)U-t$l#_fgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!h$io!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'j#Q'lQ-P(bR/V*Z&v!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!{Y[#U#Z9s9tW&{!q%X&|1P['`!|!}'n'o9|9}S(c$`$aS+t&z'PU,X'a,q:gS-Q(d(eQ1T+zR1n-RS%t!Q&oQ&q!nQ(V$OQ(w$uS)w%o.pQ)z%pQ)}%qS*]&P&rQ+e&pQ,S']Q-d(qQ.l)sU.w)x)y2vS/O*O*PQ/P*RQ/T*VQ/W*[Q/]*^Q/`*eQ/l*nQ/|*wS0S*x4RQ0a+UQ0c+VQ0y+hQ0{+oQ1X+}Q1{-iQ2T-vQ2`.UQ2i.`Q2z.tQ2|.xQ2}.yQ3X/ZQ3Y/[S3z/{/}Q4^0`Q4l0rQ4s0wQ4x1OQ4}1YQ5O1ZQ5_1yQ5n2aQ5r2hQ5u2jQ5w2mQ5{2sQ6V3VQ6o3uQ6u3{Q6w3|Q7P4UQ7X4_Q7[4eQ7d4tQ7n5`Q7p5dQ7|5vQ8P6RQ8S6YQ8c6pS8f6v6xQ8o7cQ8w7rR9X8g$^%m!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)j%nQ*T%yR*W%{$y%h!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x'pWOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$x%g!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x_&y!q%X&z&|'P+z1PR,V']$zrOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!j$]o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ,T']R5P1Z_}O!O!P!T%_%b)i^|O!O!P!T%_%b)iQ#YbX)R$y)S)U-tbhO!O!T3_6]8W8X9U9hS#`f9uQ#dgQ$PiQ$QlQ$VmQ$spW%^!P%_%b)iU&S!Y!`*iQ&W!ZQ&X![Q&]!_Q'q#eQ'r#oS's#p:QQ't#qQ'u#rQ'v#sQ'w#tQ'x#uQ'y#vQ'z#wQ'{#xQ'|#yQ(O#zQ(U#}Q([$TQ(`$WQ*b&YQ*c&[Q,r'}Q,w(WQ,y(YQ-n(|Q/k*lQ0z+nQ1i,sQ1l,zQ1}-mQ3P.}Q3[/^Q4w0}Q5V1hQ5a1|Q6^3aQ6d3hQ6e3kQ7R4WQ7e4vQ7h4|Q7s5gQ7y5tQ8j7SQ8q7gQ8{7{Q9[8kQ9b8|Q:[9wQ:]9xQ:c9zQ:d9{Q:h:OQ:i:PQ:j:RQ:k:SQ:l:TQ:m:UQ:n:VQ:o:WQ:p:XQ:q:YQ:r:ZQ:v:eQ:w:fR:{9v^tO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6[3_Q8V6]Q9R8WQ9T8XQ9g9UR9m9hQ&V!YQ&^!`R/h*iQ$joQ&a!cQ&t!pU(g$e$g(jS(n$h0eQ(u$qQ(v$rQ*`&UQ*m&bQ+p&uQ-S(fS-b(o4cQ-c(pQ-e(rW/a*f/d/g3fQ/j*kW0f+Z0g4h7^Q1o-TQ1z-gQ3b/bQ4k0mQ5X1rQ7l5[Q8Z6aR8t7m!h$_o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mR-P(b'qXOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$zqOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$fo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&d^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!zY[$`$a9s9t['_!|!}(d(e9|9}W)o%i%j:`:aU,W'a-R:gW.h)p)q:t:uT2o.i:xQ(i$eQ(m$gR-W(jV(h$e$g(jR-^(kR-](k$znOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$ko!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'g#O'pj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ,m'jQ.u)uR8_6f`,b'b'c'd,c,f,h1_5UQ1e,lX3l/m/n3n3qj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ7j5TR8s7k^uO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6Z3_Q8U6]Q9Q8WQ9S8XQ9f9UR9l9hR(Q#zR(P#zQ$SlR(]$TR$ooR$noR)Q$vR)P$vQ)O$vR2O-ohwOb!O!P!T$y%_%b)S)U)i-t$l!lz!Q!n$O$u$|%f%n%o%p%q%y%{&P&o&p&r'](q)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR${xR0b+UR0W*xR0U*xR6{4PR/y*vR/x*vR0P*wR0O*wR0_+QR0^+Q%XyObxz!O!P!Q!T!n$O$u$y$|%_%b%f%n%o%p%q%y%{&P&o&p&r'](q)S)U)i)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-t-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR0k+ZR0j+ZQ'R!qQ)c%XQ+w&|R4y1PX'Q!q%X&|1PR+y&|R+x&|T/S*S4TT/R*S4TR.o)sR.n)sR){%p",
                nodeNames: "\u26a0 | < > RawString Float LineComment BlockComment SourceFile ] InnerAttribute ! [ MetaItem self Metavariable super crate Identifier ScopedIdentifier :: QualifiedScope AbstractType impl SelfType MetaType TypeIdentifier ScopedTypeIdentifier ScopeIdentifier TypeArgList TypeBinding = Lifetime String Escape Char Boolean Integer } { Block ; ConstItem Vis pub ( in ) const BoundIdentifier : UnsafeBlock unsafe AsyncBlock async move IfExpression if LetDeclaration let LiteralPattern ArithOp MetaPattern SelfPattern ScopedIdentifier TuplePattern ScopedTypeIdentifier , StructPattern FieldPatternList FieldPattern ref mut FieldIdentifier .. RefPattern SlicePattern CapturedPattern ReferencePattern & MutPattern RangePattern ... OrPattern MacroPattern ParenthesizedTokens TokenBinding Identifier TokenRepetition ArithOp BitOp LogicOp UpdateOp CompareOp -> => ArithOp BracketedTokens BracedTokens _ else MatchExpression match MatchBlock MatchArm Attribute Guard UnaryExpression ArithOp DerefOp LogicOp ReferenceExpression TryExpression BinaryExpression ArithOp ArithOp BitOp BitOp BitOp BitOp LogicOp LogicOp AssignmentExpression TypeCastExpression as ReturnExpression return RangeExpression CallExpression ArgList AwaitExpression await FieldExpression GenericFunction BreakExpression break LoopLabel ContinueExpression continue IndexExpression ArrayExpression TupleExpression MacroInvocation UnitExpression ClosureExpression ParamList Parameter Parameter ParenthesizedExpression StructExpression FieldInitializerList ShorthandFieldInitializer FieldInitializer BaseFieldInitializer MatchArm WhileExpression while LoopExpression loop ForExpression for MacroInvocation MacroDefinition macro_rules MacroRule EmptyStatement ModItem mod DeclarationList AttributeItem ForeignModItem extern StructItem struct TypeParamList ConstrainedTypeParameter TraitBounds HigherRankedTraitBound RemovedTraitBound OptionalTypeParameter ConstParameter WhereClause where LifetimeClause TypeBoundClause FieldDeclarationList FieldDeclaration OrderedFieldDeclarationList UnionItem union EnumItem enum EnumVariantList EnumVariant TypeItem type FunctionItem default fn ParamList Parameter SelfParameter VariadicParameter VariadicParameter ImplItem TraitItem trait AssociatedType LetDeclaration UseDeclaration use ScopedIdentifier UseAsClause ScopedIdentifier UseList ScopedUseList UseWildcard ExternCrateDeclaration StaticItem static ExpressionStatement ExpressionStatement GenericType FunctionType ForLifetimes ParamList VariadicParameter Parameter VariadicParameter Parameter ReferenceType PointerType TupleType UnitType ArrayType MacroInvocation EmptyType DynamicType dyn BoundedType",
                maxTerm: 359,
                nodeProps: [["isolate", -4, 4, 6, 7, 33, ""], ["group", -42, 4, 5, 14, 15, 16, 17, 18, 19, 33, 35, 36, 37, 40, 51, 53, 56, 101, 107, 111, 112, 113, 122, 123, 125, 127, 128, 130, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 148, 149, 155, 157, 159, "Expression", -16, 22, 24, 25, 26, 27, 222, 223, 230, 231, 232, 233, 234, 235, 236, 237, 239, "Type", -20, 42, 161, 162, 165, 166, 169, 170, 172, 188, 190, 194, 196, 204, 205, 207, 208, 209, 217, 218, 220, "Statement", -17, 49, 60, 62, 63, 64, 65, 68, 74, 75, 76, 77, 78, 80, 81, 83, 84, 99, "Pattern"], ["openedBy", 9, "[", 38, "{", 47, "("], ["closedBy", 12, "]", 39, "}", 45, ")"]],
                propSources: [c],
                skippedNodes: [0, 6, 7, 240],
                repeatNodeCount: 32,
                tokenData: "$%h_R!XOX$nXY5gYZ6iZ]$n]^5g^p$npq5gqr7Xrs9cst:Rtu;Tuv>vvwAQwxCbxy!+Tyz!,Vz{!-X{|!/_|}!0g}!O!1i!O!P!3v!P!Q!8[!Q!R!Bw!R![!Dr![!]#+q!]!^#-{!^!_#.}!_!`#1b!`!a#3o!a!b#6S!b!c#7U!c!}#8W!}#O#:T#O#P#;V#P#Q#Cb#Q#R#Dd#R#S#8W#S#T$n#T#U#8W#U#V#El#V#f#8W#f#g#Ic#g#o#8W#o#p$ S#p#q$!U#q#r$$f#r${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$nU$u]'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU%uV'_Q'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S&aV'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S&yVOz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`S'cVOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S'{UOz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`S(bUOz(t{!P(t!P!Q(_!Q;'S(t;'S;=`*a<%lO(tS(wVOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^S)eV'PS'OSOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^S)}UOz(tz{)z{!P(t!Q;'S(t;'S;=`*a<%lO(tS*dP;=`<%l(tS*jP;=`<%l)^S*pP;=`<%l'`S*vP;=`<%l&[S+OO'PSU+T]'_QOY+|YZ-xZr+|rs'`sz+|z{+O{!P+|!P!Q4y!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|U,R]'_QOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU-P]'_QOY+|YZ-xZr+|rs'`sz+|z{.d{!P+|!P!Q/Z!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|U-}V'_QOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[Q.iV'_QOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.dQ/TO'_QQ/WP;=`<%l.dU/`]'_QOY0XYZ3uZr0Xrs(tsz0Xz{.d{!P0X!P!Q/Z!Q#O0X#O#P(t#P;'S0X;'S;=`4a<%lO0XU0^]'_QOY1VYZ2XZr1Vrs)^sz1Vz{2w{!P1V!P!Q/Z!Q#O1V#O#P)^#P;'S1V;'S;=`4g<%lO1VU1`]'_Q'PS'OSOY1VYZ2XZr1Vrs)^sz1Vz{2w{!P1V!P!Q/Z!Q#O1V#O#P)^#P;'S1V;'S;=`4g<%lO1VU2bV'_Q'PS'OSOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^U2|]'_QOY0XYZ3uZr0Xrs(tsz0Xz{2w{!P0X!P!Q.d!Q#O0X#O#P(t#P;'S0X;'S;=`4a<%lO0XU3zV'_QOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^U4dP;=`<%l0XU4jP;=`<%l1VU4pP;=`<%l+|U4vP;=`<%l$nU5QV'_Q'PSOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.d_5p]'_Q&|X'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_6rV'_Q&|X'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_7b_ZX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_8j]#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_9lV']Q'OS'^XOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_:[]'QX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_;^i'_Q'vW'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!c$n!c!}<{!}#O$n#O#P&[#P#R$n#R#S<{#S#T$n#T#o<{#o${$n${$|<{$|4w$n4w5b<{5b5i$n5i6S<{6S;'S$n;'S;=`4s<%lO$n_=Uj'_Q_X'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![<{![!c$n!c!}<{!}#O$n#O#P&[#P#R$n#R#S<{#S#T$n#T#o<{#o${$n${$|<{$|4w$n4w5b<{5b5i$n5i6S<{6S;'S$n;'S;=`4s<%lO$n_?P_(TP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_@X]#OX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_AZa!qX'_Q'OSOY$nYZ%nZr$nrs&[sv$nvwB`wz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Bi]'}X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Cik'_Q'OSOYE^YZGfZrE^rsHvswE^wxFdxzE^z{Ih{!PE^!P!QKl!Q!cE^!c!}Lp!}#OE^#O#P!!l#P#RE^#R#SLp#S#TE^#T#oLp#o${E^${$|Lp$|4wE^4w5bLp5b5iE^5i6SLp6S;'SE^;'S;=`!*}<%lOE^_Ee_'_Q'OSOY$nYZ%nZr$nrs&[sw$nwxFdxz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Fm]'_Q'OSsXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_GmX'_Q'OSOw&[wxHYxz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]HaV'OSsXOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]H{X'OSOw&[wxHYxz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_Im_'_QOY+|YZ-xZr+|rs'`sw+|wxJlxz+|z{+O{!P+|!P!Q4y!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_Js]'_QsXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Kq_'_QOY+|YZ-xZr+|rs'`sw+|wxJlxz+|z{.d{!P+|!P!Q/Z!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_Lyl'_Q'OS'ZXOY$nYZ%nZr$nrs&[sw$nwxFdxz$nz{+O{!P$n!P!Q,z!Q![Nq![!c$n!c!}Nq!}#O$n#O#P&[#P#R$n#R#SNq#S#T$n#T#oNq#o${$n${$|Nq$|4w$n4w5bNq5b5i$n5i6SNq6S;'S$n;'S;=`4s<%lO$n_Nzj'_Q'OS'ZXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![Nq![!c$n!c!}Nq!}#O$n#O#P&[#P#R$n#R#SNq#S#T$n#T#oNq#o${$n${$|Nq$|4w$n4w5bNq5b5i$n5i6SNq6S;'S$n;'S;=`4s<%lO$n]!!qZ'OSOzHvz{!#d{!PHv!P!Q!$n!Q#iHv#i#j!%Z#j#lHv#l#m!'V#m;'SHv;'S;=`!*w<%lOHv]!#gXOw'`wx!$Sxz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`]!$XVsXOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]!$qWOw'`wx!$Sxz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`]!%`^'OSOz&[z{&v{!P&[!P!Q'x!Q![!&[![!c&[!c!i!&[!i#T&[#T#Z!&[#Z#o&[#o#p!({#p;'S&[;'S;=`*s<%lO&[]!&a['OSOz&[z{&v{!P&[!P!Q'x!Q![!'V![!c&[!c!i!'V!i#T&[#T#Z!'V#Z;'S&[;'S;=`*s<%lO&[]!'[['OSOz&[z{&v{!P&[!P!Q'x!Q![!(Q![!c&[!c!i!(Q!i#T&[#T#Z!(Q#Z;'S&[;'S;=`*s<%lO&[]!(V['OSOz&[z{&v{!P&[!P!Q'x!Q![Hv![!c&[!c!iHv!i#T&[#T#ZHv#Z;'S&[;'S;=`*s<%lO&[]!)Q['OSOz&[z{&v{!P&[!P!Q'x!Q![!)v![!c&[!c!i!)v!i#T&[#T#Z!)v#Z;'S&[;'S;=`*s<%lO&[]!){^'OSOz&[z{&v{!P&[!P!Q'x!Q![!)v![!c&[!c!i!)v!i#T&[#T#Z!)v#Z#q&[#q#rHv#r;'S&[;'S;=`*s<%lO&[]!*zP;=`<%lHv_!+QP;=`<%lE^_!+^]}X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!,`]!PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!-`_(QX'_QOY+|YZ-xZr+|rs'`sz+|z{+O{!P+|!P!Q4y!Q!_+|!_!`!._!`#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_!.f]#OX'_QOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!/h_(PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!0p]!eX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!1r`'gX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`!a!2t!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!2}]#QX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!4P^(OX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!O$n!O!P!4{!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!5U`!lX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!O$n!O!P!6W!P!Q,z!Q!_$n!_!`!7Y!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!6a]!tX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nV!7c]'qP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!8c_'_Q'xXOY+|YZ-xZr+|rs'`sz+|z{!9b{!P+|!P!Q!:O!Q!_+|!_!`!._!`#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_!9iV&}]'_QOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.d_!:V]'_QUXOY!;OYZ3uZr!;Ors!>jsz!;Oz{!Aq{!P!;O!P!Q!:O!Q#O!;O#O#P!>j#P;'S!;O;'S;=`!Bk<%lO!;O_!;V]'_QUXOY!<OYZ2XZr!<Ors!=Ssz!<Oz{!@q{!P!<O!P!Q!:O!Q#O!<O#O#P!=S#P;'S!<O;'S;=`!Bq<%lO!<O_!<Z]'_QUX'PS'OSOY!<OYZ2XZr!<Ors!=Ssz!<Oz{!@q{!P!<O!P!Q!:O!Q#O!<O#O#P!=S#P;'S!<O;'S;=`!Bq<%lO!<O]!=]XUX'PS'OSOY!=SYZ)^Zz!=Sz{!=x{!P!=S!P!Q!?[!Q;'S!=S;'S;=`!@k<%lO!=S]!=}XUXOY!>jYZ(tZz!>jz{!=x{!P!>j!P!Q!?|!Q;'S!>j;'S;=`!@e<%lO!>j]!>oXUXOY!=SYZ)^Zz!=Sz{!=x{!P!=S!P!Q!?[!Q;'S!=S;'S;=`!@k<%lO!=S]!?aXUXOY!>jYZ(tZz!>jz{!?|{!P!>j!P!Q!?[!Q;'S!>j;'S;=`!@e<%lO!>jX!@RSUXOY!?|Z;'S!?|;'S;=`!@_<%lO!?|X!@bP;=`<%l!?|]!@hP;=`<%l!>j]!@nP;=`<%l!=S_!@x]'_QUXOY!;OYZ3uZr!;Ors!>jsz!;Oz{!@q{!P!;O!P!Q!Aq!Q#O!;O#O#P!>j#P;'S!;O;'S;=`!Bk<%lO!;OZ!AxX'_QUXOY!AqYZ/OZr!Aqrs!?|s#O!Aq#O#P!?|#P;'S!Aq;'S;=`!Be<%lO!AqZ!BhP;=`<%l!Aq_!BnP;=`<%l!;O_!BtP;=`<%l!<O_!CQjuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![!Dr![#O$n#O#P&[#P#R$n#R#S!Dr#S#U$n#U#V#!}#V#]$n#]#^!FZ#^#c$n#c#d#%u#d#i$n#i#j!FZ#j#l$n#l#m#(g#m;'S$n;'S;=`4s<%lO$n_!D{duX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![!Dr![#O$n#O#P&[#P#R$n#R#S!Dr#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_!Fbg'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R$n!R!S!Gy!S!T$n!T!U!K_!U!W$n!W!X!Le!X!Y$n!Y!Z!J]!Z#O$n#O#P&[#P#g$n#g#h!Mk#h;'S$n;'S;=`4s<%lO$n_!HQa'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!S$n!S!T!IV!T!W$n!W!X!J]!X#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!I^_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y$n!Y!Z!J]!Z#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Jf]uX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Kf_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!S$n!S!T!J]!T#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Ll_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!U$n!U!V!J]!V#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Mr_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#]$n#]#^!Nq#^;'S$n;'S;=`4s<%lO$n_!Nx_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#n$n#n#o# w#o;'S$n;'S;=`4s<%lO$n_#!O_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#X$n#X#Y!J]#Y;'S$n;'S;=`4s<%lO$n_##Ua'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R#$Z!R!S#$Z!S#O$n#O#P&[#P#R$n#R#S#$Z#S;'S$n;'S;=`4s<%lO$n_#$deuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R#$Z!R!S#$Z!S#O$n#O#P&[#P#R$n#R#S#$Z#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#%|`'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y#'O!Y#O$n#O#P&[#P#R$n#R#S#'O#S;'S$n;'S;=`4s<%lO$n_#'XduX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y#'O!Y#O$n#O#P&[#P#R$n#R#S#'O#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#(nd'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#)|![!c$n!c!i#)|!i#O$n#O#P&[#P#R$n#R#S#)|#S#T$n#T#Z#)|#Z;'S$n;'S;=`4s<%lO$n_#*VhuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#)|![!c$n!c!i#)|!i#O$n#O#P&[#P#R$n#R#S#)|#S#T$n#T#Z#)|#Z#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#+z_!SX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![$n![!]#,y!]#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#-S]dX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#.U]yX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#/W`#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!^$n!^!_#0Y!_!`8a!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#0c_'yX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#1k`oX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`!a#2m!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#2v]#RX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#3x`#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`!a#4z!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#5T_'zX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#6]](RX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nV#7_]'pP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#8cj'_Q'OS!yW'TPOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$n_#:^][X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU#;[Z'OSOz#;}z{#<k{!P#;}!P!Q#=V!Q#i#;}#i#j#=n#j#l#;}#l#m#?j#m;'S#;};'S;=`#C[<%lO#;}U#<UVrQ'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[U#<pVrQOz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`U#=[UrQOz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`U#=s^'OSOz&[z{&v{!P&[!P!Q'x!Q![#>o![!c&[!c!i#>o!i#T&[#T#Z#>o#Z#o&[#o#p#A`#p;'S&[;'S;=`*s<%lO&[U#>t['OSOz&[z{&v{!P&[!P!Q'x!Q![#?j![!c&[!c!i#?j!i#T&[#T#Z#?j#Z;'S&[;'S;=`*s<%lO&[U#?o['OSOz&[z{&v{!P&[!P!Q'x!Q![#@e![!c&[!c!i#@e!i#T&[#T#Z#@e#Z;'S&[;'S;=`*s<%lO&[U#@j['OSOz&[z{&v{!P&[!P!Q'x!Q![#;}![!c&[!c!i#;}!i#T&[#T#Z#;}#Z;'S&[;'S;=`*s<%lO&[U#Ae['OSOz&[z{&v{!P&[!P!Q'x!Q![#BZ![!c&[!c!i#BZ!i#T&[#T#Z#BZ#Z;'S&[;'S;=`*s<%lO&[U#B`^'OSOz&[z{&v{!P&[!P!Q'x!Q![#BZ![!c&[!c!i#BZ!i#T&[#T#Z#BZ#Z#q&[#q#r#;}#r;'S&[;'S;=`*s<%lO&[U#C_P;=`<%l#;}_#Ck]XX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#Dm_'{X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#Ewl'_Q'OS!yW'TPOY$nYZ%nZr$nrs#Gosw$nwx#H]xz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$n]#GvV'OS'^XOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_#Hd_'_Q'OSOYE^YZGfZrE^rsHvswE^wxFdxzE^z{Ih{!PE^!P!QKl!Q#OE^#O#P!!l#P;'SE^;'S;=`!*}<%lOE^_#Ink'_Q'OS!yW'TPOY$nYZ%nZr$nrs&[st#Kctz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$nV#Kji'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!c$n!c!}#MX!}#O$n#O#P&[#P#R$n#R#S#MX#S#T$n#T#o#MX#o${$n${$|#MX$|4w$n4w5b#MX5b5i$n5i6S#MX6S;'S$n;'S;=`4s<%lO$nV#Mbj'_Q'OS'TPOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#MX![!c$n!c!}#MX!}#O$n#O#P&[#P#R$n#R#S#MX#S#T$n#T#o#MX#o${$n${$|#MX$|4w$n4w5b#MX5b5i$n5i6S#MX6S;'S$n;'S;=`4s<%lO$n_$ ]]wX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_$!_a'rX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P#p$n#p#q$#d#q;'S$n;'S;=`4s<%lO$n_$#m]'|X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_$$o]vX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n",
                tokenizers: [s, l, O, 0, 1, 2, 3],
                topRules: {
                    SourceFile: [0, 8]
                },
                specialized: [{
                    term: 281,
                    get: e => u[e] || -1
                }],
                tokenPrec: 15596
            });
        var h = n(25956);
        const f = h.bj.define({
            name: "rust",
            parser: d.configure({
                props: [h.Oh.add({
                    IfExpression: (0,
                        h.mz)({
                            except: /^\s*({|else\b)/
                        }),
                    "String BlockComment": () => null,
                    AttributeItem: e => e.continue(),
                    "Statement MatchArm": (0,
                        h.mz)()
                }), h.b_.add((e => /(Block|edTokens|List)$/.test(e.name) ? h.yd : "BlockComment" == e.name ? e => ({
                    from: e.from + 2,
                    to: e.to - 2
                }) : void 0))]
            }),
            languageData: {
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                indentOnInput: /^\s*(?:\{|\})$/,
                closeBrackets: {
                    stringPrefixes: ["b", "r", "br"]
                }
            }
        });
        function p() {
            return new h.Yy(f)
        }
    }
    ,
    80900: (e, t, n) => {
        n.r(t),
            n.d(t, {
                wast: () => l,
                wastLanguage: () => s
            });
        var i = n(25956)
            , r = n(14462)
            , a = n(5178);
        const o = {
            __proto__: null,
            anyref: 34,
            dataref: 34,
            eqref: 34,
            externref: 34,
            i31ref: 34,
            funcref: 34,
            i8: 34,
            i16: 34,
            i32: 34,
            i64: 34,
            f32: 34,
            f64: 34
        }
            , O = a.U1.deserialize({
                version: 14,
                states: "!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h",
                stateData: "!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O",
                goto: "xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV",
                nodeNames: "\u26a0 LineComment BlockComment Module ) ( App Identifier Type Keyword Number String",
                maxTerm: 17,
                nodeProps: [["isolate", -3, 1, 2, 11, ""], ["openedBy", 4, "("], ["closedBy", 5, ")"], ["group", -6, 6, 7, 8, 9, 10, 11, "Expression"]],
                skippedNodes: [0, 1, 2],
                repeatNodeCount: 1,
                tokenData: "0o~R^XY}YZ}]^}pq}rs!Stu#pxy'Uyz(e{|(j}!O(j!Q!R(s!R![*p!]!^.^#T#o.{~!SO_~~!VVOr!Srs!ls#O!S#O#P!q#P;'S!S;'S;=`#j<%lO!S~!qOZ~~!tRO;'S!S;'S;=`!};=`O!S~#QWOr!Srs!ls#O!S#O#P!q#P;'S!S;'S;=`#j;=`<%l!S<%lO!S~#mP;=`<%l!S~#siqr%bst%btu%buv%bvw%bwx%bz{%b{|%b}!O%b!O!P%b!P!Q%b!Q![%b![!]%b!^!_%b!_!`%b!`!a%b!a!b%b!b!c%b!c!}%b#Q#R%b#R#S%b#S#T%b#T#o%b#p#q%b#r#s%b~%giV~qr%bst%btu%buv%bvw%bwx%bz{%b{|%b}!O%b!O!P%b!P!Q%b!Q![%b![!]%b!^!_%b!_!`%b!`!a%b!a!b%b!b!c%b!c!}%b#Q#R%b#R#S%b#S#T%b#T#o%b#p#q%b#r#s%b~'ZPT~!]!^'^~'aTO!]'^!]!^'p!^;'S'^;'S;=`(_<%lO'^~'sVOy'^yz(Yz!]'^!]!^'p!^;'S'^;'S;=`(_<%lO'^~(_OQ~~(bP;=`<%l'^~(jOS~~(mQ!Q!R(s!R![*p~(xUY~!O!P)[!Q![*p!g!h){#R#S+U#X#Y){#l#m+[~)aRY~!Q![)j!g!h){#X#Y){~)oSY~!Q![)j!g!h){#R#S*j#X#Y){~*OR{|*X}!O*X!Q![*_~*[P!Q![*_~*dQY~!Q![*_#R#S*X~*mP!Q![)j~*uTY~!O!P)[!Q![*p!g!h){#R#S+U#X#Y){~+XP!Q![*p~+_R!Q![+h!c!i+h#T#Z+h~+mVY~!O!P,S!Q![+h!c!i+h!r!s-P#R#S+[#T#Z+h#d#e-P~,XTY~!Q![,h!c!i,h!r!s-P#T#Z,h#d#e-P~,mUY~!Q![,h!c!i,h!r!s-P#R#S.Q#T#Z,h#d#e-P~-ST{|-c}!O-c!Q![-o!c!i-o#T#Z-o~-fR!Q![-o!c!i-o#T#Z-o~-tSY~!Q![-o!c!i-o#R#S-c#T#Z-o~.TR!Q![,h!c!i,h#T#Z,h~.aP!]!^.d~.iSP~OY.dZ;'S.d;'S;=`.u<%lO.d~.xP;=`<%l.d~/QiX~qr.{st.{tu.{uv.{vw.{wx.{z{.{{|.{}!O.{!O!P.{!P!Q.{!Q![.{![!].{!^!_.{!_!`.{!`!a.{!a!b.{!b!c.{!c!}.{#Q#R.{#R#S.{#S#T.{#T#o.{#p#q.{#r#s.{",
                tokenizers: [0],
                topRules: {
                    Module: [0, 3]
                },
                specialized: [{
                    term: 9,
                    get: e => o[e] || -1
                }],
                tokenPrec: 0
            })
            , s = i.bj.define({
                name: "wast",
                parser: O.configure({
                    props: [i.Oh.add({
                        App: (0,
                            i.Ay)({
                                closing: ")",
                                align: !1
                            })
                    }), i.b_.add({
                        App: i.yd,
                        BlockComment: e => ({
                            from: e.from + 2,
                            to: e.to - 2
                        })
                    }), (0,
                        r.pn)({
                            Keyword: r._A.keyword,
                            Type: r._A.typeName,
                            Number: r._A.number,
                            String: r._A.string,
                            Identifier: r._A.variableName,
                            LineComment: r._A.lineComment,
                            BlockComment: r._A.blockComment,
                            "( )": r._A.paren
                        })]
                }),
                languageData: {
                    commentTokens: {
                        line: ";;",
                        block: {
                            open: "(;",
                            close: ";)"
                        }
                    },
                    closeBrackets: {
                        brackets: ["(", '"']
                    }
                }
            });
        function l() {
            return new i.Yy(s)
        }
    }
    ,
    25956: (e, t, n) => {
        n.d(t, {
            Ay: () => V,
            EI: () => T,
            KB: () => R,
            Lv: () => fe,
            Oh: () => W,
            Q0: () => u,
            Q_: () => We,
            SG: () => Re,
            TM: () => d,
            Tg: () => Ce,
            WD: () => I,
            Xt: () => X,
            Yy: () => x,
            Zt: () => Pe,
            _Y: () => j,
            _v: () => z,
            b_: () => N,
            bj: () => f,
            cr: () => me,
            f7: () => ae,
            iB: () => l,
            jU: () => Ue,
            mv: () => p,
            mz: () => C,
            nq: () => Q,
            p9: () => c,
            t: () => D,
            t$: () => k,
            tp: () => _,
            y9: () => be,
            yd: () => L
        });
        var i, r = n(45615), a = n(17471), o = n(32043), O = n(14462), s = n(63079);
        const l = new r.uY;
        function c(e) {
            return a.sj.define({
                combine: e ? t => t.concat(e) : void 0
            })
        }
        const u = new r.uY;
        class d {
            constructor(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : []
                    , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "";
                this.data = e,
                    this.name = i,
                    a.$t.prototype.hasOwnProperty("tree") || Object.defineProperty(a.$t.prototype, "tree", {
                        get() {
                            return p(this)
                        }
                    }),
                    this.parser = t,
                    this.extension = [v.of(this), a.$t.languageData.of(((e, t, n) => {
                        let i = h(e, t, n)
                            , r = i.type.prop(l);
                        if (!r)
                            return [];
                        let a = e.facet(r)
                            , o = i.type.prop(u);
                        if (o) {
                            let r = i.resolve(t - i.from, n);
                            for (let t of o)
                                if (t.test(r, e)) {
                                    let n = e.facet(t.facet);
                                    return "replace" == t.type ? n : n.concat(a)
                                }
                        }
                        return a
                    }
                    ))].concat(n)
            }
            isActiveAt(e, t) {
                return h(e, t, arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1).type.prop(l) == this.data
            }
            findRegions(e) {
                let t = e.facet(v);
                if ((null === t || void 0 === t ? void 0 : t.data) == this.data)
                    return [{
                        from: 0,
                        to: e.doc.length
                    }];
                if (!t || !t.allowsNesting)
                    return [];
                let n = []
                    , i = (e, t) => {
                        if (e.prop(l) == this.data)
                            return void n.push({
                                from: t,
                                to: t + e.length
                            });
                        let a = e.prop(r.uY.mounted);
                        if (a) {
                            if (a.tree.prop(l) == this.data) {
                                if (a.overlay)
                                    for (let e of a.overlay)
                                        n.push({
                                            from: e.from + t,
                                            to: e.to + t
                                        });
                                else
                                    n.push({
                                        from: t,
                                        to: t + e.length
                                    });
                                return
                            }
                            if (a.overlay) {
                                let e = n.length;
                                if (i(a.tree, a.overlay[0].from + t),
                                    n.length > e)
                                    return
                            }
                        }
                        for (let n = 0; n < e.children.length; n++) {
                            let a = e.children[n];
                            a instanceof r.PH && i(a, e.positions[n] + t)
                        }
                    }
                    ;
                return i(p(e), 0),
                    n
            }
            get allowsNesting() {
                return !0
            }
        }
        function h(e, t, n) {
            let i = e.facet(v)
                , a = p(e).topNode;
            if (!i || i.allowsNesting)
                for (let o = a; o; o = o.enter(t, n, r.Qj.ExcludeBuffers))
                    o.type.isTop && (a = o);
            return a
        }
        d.setState = a.Pe.define();
        class f extends d {
            constructor(e, t, n) {
                super(e, t, [], n),
                    this.parser = t
            }
            static define(e) {
                let t = c(e.languageData);
                return new f(t, e.parser.configure({
                    props: [l.add((e => e.isTop ? t : void 0))]
                }), e.name)
            }
            configure(e, t) {
                return new f(this.data, this.parser.configure(e), t || this.name)
            }
            get allowsNesting() {
                return this.parser.hasWrappers()
            }
        }
        function p(e) {
            let t = e.field(d.state, !1);
            return t ? t.tree : r.PH.empty
        }
        class m {
            constructor(e) {
                this.doc = e,
                    this.cursorPos = 0,
                    this.string = "",
                    this.cursor = e.iter()
            }
            get length() {
                return this.doc.length
            }
            syncTo(e) {
                return this.string = this.cursor.next(e - this.cursorPos).value,
                    this.cursorPos = e + this.string.length,
                    this.cursorPos - this.string.length
            }
            chunk(e) {
                return this.syncTo(e),
                    this.string
            }
            get lineChunks() {
                return !0
            }
            read(e, t) {
                let n = this.cursorPos - this.string.length;
                return e < n || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - n, t - n)
            }
        }
        let g = null;
        class Q {
            constructor(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : []
                    , i = arguments.length > 3 ? arguments[3] : void 0
                    , r = arguments.length > 4 ? arguments[4] : void 0
                    , a = arguments.length > 5 ? arguments[5] : void 0
                    , o = arguments.length > 6 ? arguments[6] : void 0
                    , O = arguments.length > 7 ? arguments[7] : void 0;
                this.parser = e,
                    this.state = t,
                    this.fragments = n,
                    this.tree = i,
                    this.treeLen = r,
                    this.viewport = a,
                    this.skipped = o,
                    this.scheduleOn = O,
                    this.parse = null,
                    this.tempSkipped = []
            }
            static create(e, t, n) {
                return new Q(e, t, [], r.PH.empty, 0, n, [], null)
            }
            startParse() {
                return this.parser.startParse(new m(this.state.doc), this.fragments)
            }
            work(e, t) {
                return null != t && t >= this.state.doc.length && (t = void 0),
                    this.tree != r.PH.empty && this.isDone(null !== t && void 0 !== t ? t : this.state.doc.length) ? (this.takeTree(),
                        !0) : this.withContext((() => {
                            var n;
                            if ("number" == typeof e) {
                                let t = Date.now() + e;
                                e = () => Date.now() > t
                            }
                            for (this.parse || (this.parse = this.startParse()),
                                null != t && (null == this.parse.stoppedAt || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ;) {
                                let i = this.parse.advance();
                                if (i) {
                                    if (this.fragments = this.withoutTempSkipped(r.rr.addTree(i, this.fragments, null != this.parse.stoppedAt)),
                                        this.treeLen = null !== (n = this.parse.stoppedAt) && void 0 !== n ? n : this.state.doc.length,
                                        this.tree = i,
                                        this.parse = null,
                                        !(this.treeLen < (null !== t && void 0 !== t ? t : this.state.doc.length)))
                                        return !0;
                                    this.parse = this.startParse()
                                }
                                if (e())
                                    return !1
                            }
                        }
                        ))
            }
            takeTree() {
                let e, t;
                this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((null == this.parse.stoppedAt || this.parse.stoppedAt > e) && this.parse.stopAt(e),
                    this.withContext((() => {
                        for (; !(t = this.parse.advance());)
                            ;
                    }
                    )),
                    this.treeLen = e,
                    this.tree = t,
                    this.fragments = this.withoutTempSkipped(r.rr.addTree(this.tree, this.fragments, !0)),
                    this.parse = null)
            }
            withContext(e) {
                let t = g;
                g = this;
                try {
                    return e()
                } finally {
                    g = t
                }
            }
            withoutTempSkipped(e) {
                for (let t; t = this.tempSkipped.pop();)
                    e = $(e, t.from, t.to);
                return e
            }
            changes(e, t) {
                let { fragments: n, tree: i, treeLen: a, viewport: o, skipped: O } = this;
                if (this.takeTree(),
                    !e.empty) {
                    let t = [];
                    if (e.iterChangedRanges(((e, n, i, r) => t.push({
                        fromA: e,
                        toA: n,
                        fromB: i,
                        toB: r
                    }))),
                        n = r.rr.applyChanges(n, t),
                        i = r.PH.empty,
                        a = 0,
                        o = {
                            from: e.mapPos(o.from, -1),
                            to: e.mapPos(o.to, 1)
                        },
                        this.skipped.length) {
                        O = [];
                        for (let t of this.skipped) {
                            let n = e.mapPos(t.from, 1)
                                , i = e.mapPos(t.to, -1);
                            n < i && O.push({
                                from: n,
                                to: i
                            })
                        }
                    }
                }
                return new Q(this.parser, t, n, i, a, o, O, this.scheduleOn)
            }
            updateViewport(e) {
                if (this.viewport.from == e.from && this.viewport.to == e.to)
                    return !1;
                this.viewport = e;
                let t = this.skipped.length;
                for (let n = 0; n < this.skipped.length; n++) {
                    let { from: t, to: i } = this.skipped[n];
                    t < e.to && i > e.from && (this.fragments = $(this.fragments, t, i),
                        this.skipped.splice(n--, 1))
                }
                return !(this.skipped.length >= t) && (this.reset(),
                    !0)
            }
            reset() {
                this.parse && (this.takeTree(),
                    this.parse = null)
            }
            skipUntilInView(e, t) {
                this.skipped.push({
                    from: e,
                    to: t
                })
            }
            static getSkippingParser(e) {
                return new class extends r.iX {
                    createParse(t, n, i) {
                        let a = i[0].from
                            , o = i[i.length - 1].to;
                        return {
                            parsedPos: a,
                            advance() {
                                let t = g;
                                if (t) {
                                    for (let e of i)
                                        t.tempSkipped.push(e);
                                    e && (t.scheduleOn = t.scheduleOn ? Promise.all([t.scheduleOn, e]) : e)
                                }
                                return this.parsedPos = o,
                                    new r.PH(r.Z6.none, [], [], o - a)
                            },
                            stoppedAt: null,
                            stopAt() { }
                        }
                    }
                }
            }
            isDone(e) {
                e = Math.min(e, this.state.doc.length);
                let t = this.fragments;
                return this.treeLen >= e && t.length && 0 == t[0].from && t[0].to >= e
            }
            static get() {
                return g
            }
        }
        function $(e, t, n) {
            return r.rr.applyChanges(e, [{
                fromA: t,
                toA: n,
                fromB: t,
                toB: n
            }])
        }
        class b {
            constructor(e) {
                this.context = e,
                    this.tree = e.tree
            }
            apply(e) {
                if (!e.docChanged && this.tree == this.context.tree)
                    return this;
                let t = this.context.changes(e.changes, e.state)
                    , n = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
                return t.work(20, n) || t.takeTree(),
                    new b(t)
            }
            static init(e) {
                let t = Math.min(3e3, e.doc.length)
                    , n = Q.create(e.facet(v).parser, e, {
                        from: 0,
                        to: t
                    });
                return n.work(20, t) || n.takeTree(),
                    new b(n)
            }
        }
        d.state = a.sU.define({
            create: b.init,
            update(e, t) {
                for (let n of t.effects)
                    if (n.is(d.setState))
                        return n.value;
                return t.startState.facet(v) != t.state.facet(v) ? b.init(t.state) : e.apply(t)
            }
        });
        let y = e => {
            let t = setTimeout((() => e()), 500);
            return () => clearTimeout(t)
        }
            ;
        "undefined" != typeof requestIdleCallback && (y = e => {
            let t = -1
                , n = setTimeout((() => {
                    t = requestIdleCallback(e, {
                        timeout: 400
                    })
                }
                ), 100);
            return () => t < 0 ? clearTimeout(n) : cancelIdleCallback(t)
        }
        );
        const S = "undefined" != typeof navigator && (null === (i = navigator.scheduling) || void 0 === i ? void 0 : i.isInputPending) ? () => navigator.scheduling.isInputPending() : null
            , P = o.Z9.fromClass(class {
                constructor(e) {
                    this.view = e,
                        this.working = null,
                        this.workScheduled = 0,
                        this.chunkEnd = -1,
                        this.chunkBudget = -1,
                        this.work = this.work.bind(this),
                        this.scheduleWork()
                }
                update(e) {
                    let t = this.view.state.field(d.state).context;
                    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(),
                        (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50),
                            this.scheduleWork()),
                        this.checkAsyncSchedule(t)
                }
                scheduleWork() {
                    if (this.working)
                        return;
                    let { state: e } = this.view
                        , t = e.field(d.state);
                    t.tree == t.context.tree && t.context.isDone(e.doc.length) || (this.working = y(this.work))
                }
                work(e) {
                    this.working = null;
                    let t = Date.now();
                    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4,
                        this.chunkBudget = 3e3),
                        this.chunkBudget <= 0)
                        return;
                    let { state: n, viewport: { to: i } } = this.view
                        , r = n.field(d.state);
                    if (r.tree == r.context.tree && r.context.isDone(i + 1e5))
                        return;
                    let a = Date.now() + Math.min(this.chunkBudget, 100, e && !S ? Math.max(25, e.timeRemaining() - 5) : 1e9)
                        , o = r.context.treeLen < i && n.doc.length > i + 1e3
                        , O = r.context.work((() => S && S() || Date.now() > a), i + (o ? 0 : 1e5));
                    this.chunkBudget -= Date.now() - t,
                        (O || this.chunkBudget <= 0) && (r.context.takeTree(),
                            this.view.dispatch({
                                effects: d.setState.of(new b(r.context))
                            })),
                        this.chunkBudget > 0 && (!O || o) && this.scheduleWork(),
                        this.checkAsyncSchedule(r.context)
                }
                checkAsyncSchedule(e) {
                    e.scheduleOn && (this.workScheduled++,
                        e.scheduleOn.then((() => this.scheduleWork())).catch((e => (0,
                            o.c_)(this.view.state, e))).then((() => this.workScheduled--)),
                        e.scheduleOn = null)
                }
                destroy() {
                    this.working && this.working()
                }
                isWorking() {
                    return !!(this.working || this.workScheduled > 0)
                }
            }
                , {
                    eventHandlers: {
                        focus() {
                            this.scheduleWork()
                        }
                    }
                })
            , v = a.sj.define({
                combine: e => e.length ? e[0] : null,
                enables: e => [d.state, P, o.Lz.contentAttributes.compute([e], (t => {
                    let n = t.facet(e);
                    return n && n.name ? {
                        "data-language": n.name
                    } : {}
                }
                ))]
            });
        class x {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                this.language = e,
                    this.support = t,
                    this.extension = [e, t]
            }
        }
        class k {
            constructor(e, t, n, i, r) {
                let a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : void 0;
                this.name = e,
                    this.alias = t,
                    this.extensions = n,
                    this.filename = i,
                    this.loadFunc = r,
                    this.support = a,
                    this.loading = null
            }
            load() {
                return this.loading || (this.loading = this.loadFunc().then((e => this.support = e), (e => {
                    throw this.loading = null,
                    e
                }
                )))
            }
            static of(e) {
                let { load: t, support: n } = e;
                if (!t) {
                    if (!n)
                        throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
                    t = () => Promise.resolve(n)
                }
                return new k(e.name, (e.alias || []).concat(e.name).map((e => e.toLowerCase())), e.extensions || [], e.filename, t, n)
            }
            static matchFilename(e, t) {
                for (let i of e)
                    if (i.filename && i.filename.test(t))
                        return i;
                let n = /\.([^.]+)$/.exec(t);
                if (n)
                    for (let i of e)
                        if (i.extensions.indexOf(n[1]) > -1)
                            return i;
                return null
            }
            static matchLanguageName(e, t) {
                let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                t = t.toLowerCase();
                for (let i of e)
                    if (i.alias.some((e => e == t)))
                        return i;
                if (n)
                    for (let i of e)
                        for (let e of i.alias) {
                            let n = t.indexOf(e);
                            if (n > -1 && (e.length > 2 || !/\w/.test(t[n - 1]) && !/\w/.test(t[n + e.length])))
                                return i
                        }
                return null
            }
        }
        const w = a.sj.define()
            , X = a.sj.define({
                combine: e => {
                    if (!e.length)
                        return "  ";
                    let t = e[0];
                    if (!t || /\S/.test(t) || Array.from(t).some((e => e != t[0])))
                        throw new Error("Invalid indent unit: " + JSON.stringify(e[0]));
                    return t
                }
            });
        function _(e) {
            let t = e.facet(X);
            return 9 == t.charCodeAt(0) ? e.tabSize * t.length : t.length
        }
        function T(e, t) {
            let n = ""
                , i = e.tabSize
                , r = e.facet(X)[0];
            if ("\t" == r) {
                for (; t >= i;)
                    n += "\t",
                        t -= i;
                r = " "
            }
            for (let a = 0; a < t; a++)
                n += r;
            return n
        }
        function z(e, t) {
            e instanceof a.$t && (e = new R(e));
            for (let i of e.state.facet(w)) {
                let n = i(e, t);
                if (void 0 !== n)
                    return n
            }
            let n = p(e.state);
            return n.length >= t ? function (e, t, n) {
                let i = t.resolveStack(n)
                    , r = i.node.enterUnfinishedNodesBefore(n);
                if (r != i.node) {
                    let e = [];
                    for (let t = r; t != i.node; t = t.parent)
                        e.push(t);
                    for (let t = e.length - 1; t >= 0; t--)
                        i = {
                            node: e[t],
                            next: i
                        }
                }
                return Z(i, e, n)
            }(e, n, t) : null
        }
        class R {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                this.state = e,
                    this.options = t,
                    this.unit = _(e)
            }
            lineAt(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1
                    , n = this.state.doc.lineAt(e)
                    , { simulateBreak: i, simulateDoubleBreak: r } = this.options;
                return null != i && i >= n.from && i <= n.to ? r && i == e ? {
                    text: "",
                    from: e
                } : (t < 0 ? i < e : i <= e) ? {
                    text: n.text.slice(i - n.from),
                    from: i
                } : {
                    text: n.text.slice(0, i - n.from),
                    from: n.from
                } : n
            }
            textAfterPos(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
                    return "";
                let { text: n, from: i } = this.lineAt(e, t);
                return n.slice(e - i, Math.min(n.length, e + 100 - i))
            }
            column(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1
                    , { text: n, from: i } = this.lineAt(e, t)
                    , r = this.countColumn(n, e - i)
                    , a = this.options.overrideIndentation ? this.options.overrideIndentation(i) : -1;
                return a > -1 && (r += a - this.countColumn(n, n.search(/\S|$/))),
                    r
            }
            countColumn(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.length;
                return (0,
                    a.y$)(e, this.state.tabSize, t)
            }
            lineIndent(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1
                    , { text: n, from: i } = this.lineAt(e, t)
                    , r = this.options.overrideIndentation;
                if (r) {
                    let e = r(i);
                    if (e > -1)
                        return e
                }
                return this.countColumn(n, n.search(/\S|$/))
            }
            get simulatedBreak() {
                return this.options.simulateBreak || null
            }
        }
        const W = new r.uY;
        function Z(e, t, n) {
            for (let i = e; i; i = i.next) {
                let e = q(i.node);
                if (e)
                    return e(Y.create(t, n, i))
            }
            return 0
        }
        function q(e) {
            let t = e.type.prop(W);
            if (t)
                return t;
            let n, i = e.firstChild;
            if (i && (n = i.type.prop(r.uY.closedBy))) {
                let t = e.lastChild
                    , i = t && n.indexOf(t.name) > -1;
                return e => E(e, !0, 1, void 0, i && !function (e) {
                    return e.pos == e.options.simulateBreak && e.options.simulateDoubleBreak
                }(e) ? t.from : void 0)
            }
            return null == e.parent ? U : null
        }
        function U() {
            return 0
        }
        class Y extends R {
            constructor(e, t, n) {
                super(e.state, e.options),
                    this.base = e,
                    this.pos = t,
                    this.context = n
            }
            get node() {
                return this.context.node
            }
            static create(e, t, n) {
                return new Y(e, t, n)
            }
            get textAfter() {
                return this.textAfterPos(this.pos)
            }
            get baseIndent() {
                return this.baseIndentFor(this.node)
            }
            baseIndentFor(e) {
                let t = this.state.doc.lineAt(e.from);
                for (; ;) {
                    let n = e.resolve(t.from);
                    for (; n.parent && n.parent.from == n.from;)
                        n = n.parent;
                    if (A(n, e))
                        break;
                    t = this.state.doc.lineAt(n.from)
                }
                return this.lineIndent(t.from)
            }
            continue() {
                return Z(this.context.next, this.base, this.pos)
            }
        }
        function A(e, t) {
            for (let n = t; n; n = n.parent)
                if (e == n)
                    return !0;
            return !1
        }
        function V(e) {
            let { closing: t, align: n = !0, units: i = 1 } = e;
            return e => E(e, n, i, t)
        }
        function E(e, t, n, i, r) {
            let a = e.textAfter
                , o = a.match(/^\s*/)[0].length
                , O = i && a.slice(o, o + i.length) == i || r == e.pos + o
                , s = t ? function (e) {
                    let t = e.node
                        , n = t.childAfter(t.from)
                        , i = t.lastChild;
                    if (!n)
                        return null;
                    let r = e.options.simulateBreak
                        , a = e.state.doc.lineAt(n.from)
                        , o = null == r || r <= a.from ? a.to : Math.min(a.to, r);
                    for (let O = n.to; ;) {
                        let e = t.childAfter(O);
                        if (!e || e == i)
                            return null;
                        if (!e.type.isSkipped)
                            return e.from < o ? n : null;
                        O = e.to
                    }
                }(e) : null;
            return s ? O ? e.column(s.from) : e.column(s.to) : e.baseIndent + (O ? 0 : e.unit * n)
        }
        const j = e => e.baseIndent;
        function C() {
            let { except: e, units: t = 1 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return n => {
                let i = e && e.test(n.textAfter);
                return n.baseIndent + (i ? 0 : t * n.unit)
            }
        }
        const G = 200;
        function I() {
            return a.$t.transactionFilter.of((e => {
                if (!e.docChanged || !e.isUserEvent("input.type") && !e.isUserEvent("input.complete"))
                    return e;
                let t = e.startState.languageDataAt("indentOnInput", e.startState.selection.main.head);
                if (!t.length)
                    return e;
                let n = e.newDoc
                    , { head: i } = e.newSelection.main
                    , r = n.lineAt(i);
                if (i > r.from + G)
                    return e;
                let a = n.sliceString(r.from, i);
                if (!t.some((e => e.test(a))))
                    return e;
                let { state: o } = e
                    , O = -1
                    , s = [];
                for (let { head: l } of o.selection.ranges) {
                    let e = o.doc.lineAt(l);
                    if (e.from == O)
                        continue;
                    O = e.from;
                    let t = z(o, e.from);
                    if (null == t)
                        continue;
                    let n = /^\s*/.exec(e.text)[0]
                        , i = T(o, t);
                    n != i && s.push({
                        from: e.from,
                        to: e.from + n.length,
                        insert: i
                    })
                }
                return s.length ? [e, {
                    changes: s,
                    sequential: !0
                }] : e
            }
            ))
        }
        const D = a.sj.define()
            , N = new r.uY;
        function L(e) {
            let t = e.firstChild
                , n = e.lastChild;
            return t && t.to < n.from ? {
                from: t.to,
                to: n.type.isError ? e.to : n.from
            } : null
        }
        function M(e) {
            let t = e.lastChild;
            return t && t.to == e.to && t.type.isError
        }
        function F(e, t, n) {
            for (let i of e.facet(D)) {
                let r = i(e, t, n);
                if (r)
                    return r
            }
            return function (e, t, n) {
                let i = p(e);
                if (i.length < n)
                    return null;
                let r = null;
                for (let a = i.resolveStack(n, 1); a; a = a.next) {
                    let o = a.node;
                    if (o.to <= n || o.from > n)
                        continue;
                    if (r && o.from < t)
                        break;
                    let O = o.type.prop(N);
                    if (O && (o.to < i.length - 50 || i.length == e.doc.length || !M(o))) {
                        let i = O(o, e);
                        i && i.from <= n && i.from >= t && i.to > n && (r = i)
                    }
                }
                return r
            }(e, t, n)
        }
        function B(e, t) {
            let n = t.mapPos(e.from, 1)
                , i = t.mapPos(e.to, -1);
            return n >= i ? void 0 : {
                from: n,
                to: i
            }
        }
        const H = a.Pe.define({
            map: B
        })
            , K = a.Pe.define({
                map: B
            });
        function J(e) {
            let t = [];
            for (let { head: n } of e.state.selection.ranges)
                t.some((e => e.from <= n && e.to >= n)) || t.push(e.lineBlockAt(n));
            return t
        }
        const ee = a.sU.define({
            create: () => o.NZ.none,
            update(e, t) {
                e = e.map(t.changes);
                for (let n of t.effects)
                    if (n.is(H) && !ne(e, n.value.from, n.value.to)) {
                        let { preparePlaceholder: i } = t.state.facet(Oe)
                            , r = i ? o.NZ.replace({
                                widget: new ue(i(t.state, n.value))
                            }) : ce;
                        e = e.update({
                            add: [r.range(n.value.from, n.value.to)]
                        })
                    } else
                        n.is(K) && (e = e.update({
                            filter: (e, t) => n.value.from != e || n.value.to != t,
                            filterFrom: n.value.from,
                            filterTo: n.value.to
                        }));
                if (t.selection) {
                    let n = !1
                        , { head: i } = t.selection.main;
                    e.between(i, i, ((e, t) => {
                        e < i && t > i && (n = !0)
                    }
                    )),
                        n && (e = e.update({
                            filterFrom: i,
                            filterTo: i,
                            filter: (e, t) => t <= i || e >= i
                        }))
                }
                return e
            },
            provide: e => o.Lz.decorations.from(e),
            toJSON(e, t) {
                let n = [];
                return e.between(0, t.doc.length, ((e, t) => {
                    n.push(e, t)
                }
                )),
                    n
            },
            fromJSON(e) {
                if (!Array.isArray(e) || e.length % 2)
                    throw new RangeError("Invalid JSON for fold state");
                let t = [];
                for (let n = 0; n < e.length;) {
                    let i = e[n++]
                        , r = e[n++];
                    if ("number" != typeof i || "number" != typeof r)
                        throw new RangeError("Invalid JSON for fold state");
                    t.push(ce.range(i, r))
                }
                return o.NZ.set(t, !0)
            }
        });
        function te(e, t, n) {
            var i;
            let r = null;
            return null === (i = e.field(ee, !1)) || void 0 === i || i.between(t, n, ((e, t) => {
                (!r || r.from > e) && (r = {
                    from: e,
                    to: t
                })
            }
            )),
                r
        }
        function ne(e, t, n) {
            let i = !1;
            return e.between(t, t, ((e, r) => {
                e == t && r == n && (i = !0)
            }
            )),
                i
        }
        function ie(e, t) {
            return e.field(ee, !1) ? t : t.concat(a.Pe.appendConfig.of(se()))
        }
        function re(e, t) {
            let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]
                , i = e.state.doc.lineAt(t.from).number
                , r = e.state.doc.lineAt(t.to).number;
            return o.Lz.announce.of(`${e.state.phrase(n ? "Folded lines" : "Unfolded lines")} ${i} ${e.state.phrase("to")} ${r}.`)
        }
        const ae = [{
            key: "Ctrl-Shift-[",
            mac: "Cmd-Alt-[",
            run: e => {
                for (let t of J(e)) {
                    let n = F(e.state, t.from, t.to);
                    if (n)
                        return e.dispatch({
                            effects: ie(e.state, [H.of(n), re(e, n)])
                        }),
                            !0
                }
                return !1
            }
        }, {
            key: "Ctrl-Shift-]",
            mac: "Cmd-Alt-]",
            run: e => {
                if (!e.state.field(ee, !1))
                    return !1;
                let t = [];
                for (let n of J(e)) {
                    let i = te(e.state, n.from, n.to);
                    i && t.push(K.of(i), re(e, i, !1))
                }
                return t.length && e.dispatch({
                    effects: t
                }),
                    t.length > 0
            }
        }, {
            key: "Ctrl-Alt-[",
            run: e => {
                let { state: t } = e
                    , n = [];
                for (let i = 0; i < t.doc.length;) {
                    let r = e.lineBlockAt(i)
                        , a = F(t, r.from, r.to);
                    a && n.push(H.of(a)),
                        i = (a ? e.lineBlockAt(a.to) : r).to + 1
                }
                return n.length && e.dispatch({
                    effects: ie(e.state, n)
                }),
                    !!n.length
            }
        }, {
            key: "Ctrl-Alt-]",
            run: e => {
                let t = e.state.field(ee, !1);
                if (!t || !t.size)
                    return !1;
                let n = [];
                return t.between(0, e.state.doc.length, ((e, t) => {
                    n.push(K.of({
                        from: e,
                        to: t
                    }))
                }
                )),
                    e.dispatch({
                        effects: n
                    }),
                    !0
            }
        }]
            , oe = {
                placeholderDOM: null,
                preparePlaceholder: null,
                placeholderText: "\u2026"
            }
            , Oe = a.sj.define({
                combine: e => (0,
                    a.QR)(e, oe)
            });
        function se(e) {
            let t = [ee, pe];
            return e && t.push(Oe.of(e)),
                t
        }
        function le(e, t) {
            let { state: n } = e
                , i = n.facet(Oe)
                , r = t => {
                    let n = e.lineBlockAt(e.posAtDOM(t.target))
                        , i = te(e.state, n.from, n.to);
                    i && e.dispatch({
                        effects: K.of(i)
                    }),
                        t.preventDefault()
                }
                ;
            if (i.placeholderDOM)
                return i.placeholderDOM(e, r, t);
            let a = document.createElement("span");
            return a.textContent = i.placeholderText,
                a.setAttribute("aria-label", n.phrase("folded code")),
                a.title = n.phrase("unfold"),
                a.className = "cm-foldPlaceholder",
                a.onclick = r,
                a
        }
        const ce = o.NZ.replace({
            widget: new class extends o.xO {
                toDOM(e) {
                    return le(e, null)
                }
            }
        });
        class ue extends o.xO {
            constructor(e) {
                super(),
                    this.value = e
            }
            eq(e) {
                return this.value == e.value
            }
            toDOM(e) {
                return le(e, this.value)
            }
        }
        const de = {
            openText: "\u2304",
            closedText: "\u203a",
            markerDOM: null,
            domEventHandlers: {},
            foldingChanged: () => !1
        };
        class he extends o.wJ {
            constructor(e, t) {
                super(),
                    this.config = e,
                    this.open = t
            }
            eq(e) {
                return this.config == e.config && this.open == e.open
            }
            toDOM(e) {
                if (this.config.markerDOM)
                    return this.config.markerDOM(this.open);
                let t = document.createElement("span");
                return t.textContent = this.open ? this.config.openText : this.config.closedText,
                    t.title = e.state.phrase(this.open ? "Fold line" : "Unfold line"),
                    t
            }
        }
        function fe() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , t = Object.assign(Object.assign({}, de), e)
                , n = new he(t, !0)
                , i = new he(t, !1)
                , r = o.Z9.fromClass(class {
                    constructor(e) {
                        this.from = e.viewport.from,
                            this.markers = this.buildMarkers(e)
                    }
                    update(e) {
                        (e.docChanged || e.viewportChanged || e.startState.facet(v) != e.state.facet(v) || e.startState.field(ee, !1) != e.state.field(ee, !1) || p(e.startState) != p(e.state) || t.foldingChanged(e)) && (this.markers = this.buildMarkers(e.view))
                    }
                    buildMarkers(e) {
                        let t = new a.vB;
                        for (let r of e.viewportLineBlocks) {
                            let a = te(e.state, r.from, r.to) ? i : F(e.state, r.from, r.to) ? n : null;
                            a && t.add(r.from, r.from, a)
                        }
                        return t.finish()
                    }
                }
                )
                , { domEventHandlers: O } = t;
            return [r, (0,
                o.cU)({
                    class: "cm-foldGutter",
                    markers(e) {
                        var t;
                        return (null === (t = e.plugin(r)) || void 0 === t ? void 0 : t.markers) || a.om.empty
                    },
                    initialSpacer: () => new he(t, !1),
                    domEventHandlers: Object.assign(Object.assign({}, O), {
                        click: (e, t, n) => {
                            if (O.click && O.click(e, t, n))
                                return !0;
                            let i = te(e.state, t.from, t.to);
                            if (i)
                                return e.dispatch({
                                    effects: K.of(i)
                                }),
                                    !0;
                            let r = F(e.state, t.from, t.to);
                            return !!r && (e.dispatch({
                                effects: H.of(r)
                            }),
                                !0)
                        }
                    })
                }), se()]
        }
        const pe = o.Lz.baseTheme({
            ".cm-foldPlaceholder": {
                backgroundColor: "#eee",
                border: "1px solid #ddd",
                color: "#888",
                borderRadius: ".2em",
                margin: "0 1px",
                padding: "0 1px",
                cursor: "pointer"
            },
            ".cm-foldGutter span": {
                padding: "0 1px",
                cursor: "pointer"
            }
        });
        class me {
            constructor(e, t) {
                let n;
                function i(e) {
                    let t = s.G.newName();
                    return (n || (n = Object.create(null)))["." + t] = e,
                        t
                }
                this.specs = e;
                const r = "string" == typeof t.all ? t.all : t.all ? i(t.all) : void 0
                    , a = t.scope;
                this.scope = a instanceof d ? e => e.prop(l) == a.data : a ? e => e == a : void 0,
                    this.style = (0,
                        O.az)(e.map((e => ({
                            tag: e.tag,
                            class: e.class || i(Object.assign({}, e, {
                                tag: null
                            }))
                        }))), {
                            all: r
                        }).style,
                    this.module = n ? new s.G(n) : null,
                    this.themeType = t.themeType
            }
            static define(e, t) {
                return new me(e, t || {})
            }
        }
        const ge = a.sj.define()
            , Qe = a.sj.define({
                combine: e => e.length ? [e[0]] : null
            });
        function $e(e) {
            let t = e.facet(ge);
            return t.length ? t : e.facet(Qe)
        }
        function be(e, t) {
            let n, i = [Se];
            return e instanceof me && (e.module && i.push(o.Lz.styleModule.of(e.module)),
                n = e.themeType),
                (null === t || void 0 === t ? void 0 : t.fallback) ? i.push(Qe.of(e)) : n ? i.push(ge.computeN([o.Lz.darkTheme], (t => t.facet(o.Lz.darkTheme) == ("dark" == n) ? [e] : []))) : i.push(ge.of(e)),
                i
        }
        class ye {
            constructor(e) {
                this.markCache = Object.create(null),
                    this.tree = p(e.state),
                    this.decorations = this.buildDeco(e, $e(e.state)),
                    this.decoratedTo = e.viewport.to
            }
            update(e) {
                let t = p(e.state)
                    , n = $e(e.state)
                    , i = n != $e(e.startState)
                    , { viewport: r } = e.view
                    , a = e.changes.mapPos(this.decoratedTo, 1);
                t.length < r.to && !i && t.type == this.tree.type && a >= r.to ? (this.decorations = this.decorations.map(e.changes),
                    this.decoratedTo = a) : (t != this.tree || e.viewportChanged || i) && (this.tree = t,
                        this.decorations = this.buildDeco(e.view, n),
                        this.decoratedTo = r.to)
            }
            buildDeco(e, t) {
                if (!t || !this.tree.length)
                    return o.NZ.none;
                let n = new a.vB;
                for (let { from: i, to: r } of e.visibleRanges)
                    (0,
                        O.DM)(this.tree, t, ((e, t, i) => {
                            n.add(e, t, this.markCache[i] || (this.markCache[i] = o.NZ.mark({
                                class: i
                            })))
                        }
                        ), i, r);
                return n.finish()
            }
        }
        const Se = a.Nb.high(o.Z9.fromClass(ye, {
            decorations: e => e.decorations
        }))
            , Pe = me.define([{
                tag: O._A.meta,
                color: "#404740"
            }, {
                tag: O._A.link,
                textDecoration: "underline"
            }, {
                tag: O._A.heading,
                textDecoration: "underline",
                fontWeight: "bold"
            }, {
                tag: O._A.emphasis,
                fontStyle: "italic"
            }, {
                tag: O._A.strong,
                fontWeight: "bold"
            }, {
                tag: O._A.strikethrough,
                textDecoration: "line-through"
            }, {
                tag: O._A.keyword,
                color: "#708"
            }, {
                tag: [O._A.atom, O._A.bool, O._A.url, O._A.contentSeparator, O._A.labelName],
                color: "#219"
            }, {
                tag: [O._A.literal, O._A.inserted],
                color: "#164"
            }, {
                tag: [O._A.string, O._A.deleted],
                color: "#a11"
            }, {
                tag: [O._A.regexp, O._A.escape, O._A.special(O._A.string)],
                color: "#e40"
            }, {
                tag: O._A.definition(O._A.variableName),
                color: "#00f"
            }, {
                tag: O._A.local(O._A.variableName),
                color: "#30a"
            }, {
                tag: [O._A.typeName, O._A.namespace],
                color: "#085"
            }, {
                tag: O._A.className,
                color: "#167"
            }, {
                tag: [O._A.special(O._A.variableName), O._A.macroName],
                color: "#256"
            }, {
                tag: O._A.definition(O._A.propertyName),
                color: "#00c"
            }, {
                tag: O._A.comment,
                color: "#940"
            }, {
                tag: O._A.invalid,
                color: "#f00"
            }])
            , ve = o.Lz.baseTheme({
                "&.cm-focused .cm-matchingBracket": {
                    backgroundColor: "#328c8252"
                },
                "&.cm-focused .cm-nonmatchingBracket": {
                    backgroundColor: "#bb555544"
                }
            })
            , xe = 1e4
            , ke = "()[]{}"
            , we = a.sj.define({
                combine: e => (0,
                    a.QR)(e, {
                        afterCursor: !0,
                        brackets: ke,
                        maxScanDistance: xe,
                        renderMatch: Te
                    })
            })
            , Xe = o.NZ.mark({
                class: "cm-matchingBracket"
            })
            , _e = o.NZ.mark({
                class: "cm-nonmatchingBracket"
            });
        function Te(e) {
            let t = []
                , n = e.matched ? Xe : _e;
            return t.push(n.range(e.start.from, e.start.to)),
                e.end && t.push(n.range(e.end.from, e.end.to)),
                t
        }
        const ze = [a.sU.define({
            create: () => o.NZ.none,
            update(e, t) {
                if (!t.docChanged && !t.selection)
                    return e;
                let n = []
                    , i = t.state.facet(we);
                for (let r of t.state.selection.ranges) {
                    if (!r.empty)
                        continue;
                    let e = Ue(t.state, r.head, -1, i) || r.head > 0 && Ue(t.state, r.head - 1, 1, i) || i.afterCursor && (Ue(t.state, r.head, 1, i) || r.head < t.state.doc.length && Ue(t.state, r.head + 1, -1, i));
                    e && (n = n.concat(i.renderMatch(e, t.state)))
                }
                return o.NZ.set(n, !0)
            },
            provide: e => o.Lz.decorations.from(e)
        }), ve];
        function Re() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return [we.of(e), ze]
        }
        const We = new r.uY;
        function Ze(e, t, n) {
            let i = e.prop(t < 0 ? r.uY.openedBy : r.uY.closedBy);
            if (i)
                return i;
            if (1 == e.name.length) {
                let i = n.indexOf(e.name);
                if (i > -1 && i % 2 == (t < 0 ? 1 : 0))
                    return [n[i + t]]
            }
            return null
        }
        function qe(e) {
            let t = e.type.prop(We);
            return t ? t(e.node) : e
        }
        function Ue(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
                , r = i.maxScanDistance || xe
                , a = i.brackets || ke
                , o = p(e)
                , O = o.resolveInner(t, n);
            for (let s = O; s; s = s.parent) {
                let i = Ze(s.type, n, a);
                if (i && s.from < s.to) {
                    let r = qe(s);
                    if (r && (n > 0 ? t >= r.from && t < r.to : t > r.from && t <= r.to))
                        return Ye(e, t, n, s, r, i, a)
                }
            }
            return function (e, t, n, i, r, a, o) {
                let O = n < 0 ? e.sliceDoc(t - 1, t) : e.sliceDoc(t, t + 1)
                    , s = o.indexOf(O);
                if (s < 0 || s % 2 == 0 != n > 0)
                    return null;
                let l = {
                    from: n < 0 ? t - 1 : t,
                    to: n > 0 ? t + 1 : t
                }
                    , c = e.doc.iterRange(t, n > 0 ? e.doc.length : 0)
                    , u = 0;
                for (let d = 0; !c.next().done && d <= a;) {
                    let e = c.value;
                    n < 0 && (d += e.length);
                    let a = t + d * n;
                    for (let t = n > 0 ? 0 : e.length - 1, O = n > 0 ? e.length : -1; t != O; t += n) {
                        let O = o.indexOf(e[t]);
                        if (!(O < 0 || i.resolveInner(a + t, 1).type != r))
                            if (O % 2 == 0 == n > 0)
                                u++;
                            else {
                                if (1 == u)
                                    return {
                                        start: l,
                                        end: {
                                            from: a + t,
                                            to: a + t + 1
                                        },
                                        matched: O >> 1 == s >> 1
                                    };
                                u--
                            }
                    }
                    n > 0 && (d += e.length)
                }
                return c.done ? {
                    start: l,
                    matched: !1
                } : null
            }(e, t, n, o, O.type, r, a)
        }
        function Ye(e, t, n, i, r, a, o) {
            let O = i.parent
                , s = {
                    from: r.from,
                    to: r.to
                }
                , l = 0
                , c = null === O || void 0 === O ? void 0 : O.cursor();
            if (c && (n < 0 ? c.childBefore(i.from) : c.childAfter(i.to)))
                do {
                    if (n < 0 ? c.to <= i.from : c.from >= i.to) {
                        if (0 == l && a.indexOf(c.type.name) > -1 && c.from < c.to) {
                            let e = qe(c);
                            return {
                                start: s,
                                end: e ? {
                                    from: e.from,
                                    to: e.to
                                } : void 0,
                                matched: !0
                            }
                        }
                        if (Ze(c.type, n, o))
                            l++;
                        else if (Ze(c.type, -n, o)) {
                            if (0 == l) {
                                let e = qe(c);
                                return {
                                    start: s,
                                    end: e && e.from < e.to ? {
                                        from: e.from,
                                        to: e.to
                                    } : void 0,
                                    matched: !1
                                }
                            }
                            l--
                        }
                    }
                } while (n < 0 ? c.prevSibling() : c.nextSibling());
            return {
                start: s,
                matched: !1
            }
        }
        function Ae(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
                , r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
            null == t && -1 == (t = e.search(/[^\s\u00a0]/)) && (t = e.length);
            let a = r;
            for (let o = i; o < t; o++)
                9 == e.charCodeAt(o) ? a += n - a % n : a++;
            return a
        }
        class Ve {
            constructor(e, t, n, i) {
                this.string = e,
                    this.tabSize = t,
                    this.indentUnit = n,
                    this.overrideIndent = i,
                    this.pos = 0,
                    this.start = 0,
                    this.lastColumnPos = 0,
                    this.lastColumnValue = 0
            }
            eol() {
                return this.pos >= this.string.length
            }
            sol() {
                return 0 == this.pos
            }
            peek() {
                return this.string.charAt(this.pos) || void 0
            }
            next() {
                if (this.pos < this.string.length)
                    return this.string.charAt(this.pos++)
            }
            eat(e) {
                let t, n = this.string.charAt(this.pos);
                if (t = "string" == typeof e ? n == e : n && (e instanceof RegExp ? e.test(n) : e(n)),
                    t)
                    return ++this.pos,
                        n
            }
            eatWhile(e) {
                let t = this.pos;
                for (; this.eat(e);)
                    ;
                return this.pos > t
            }
            eatSpace() {
                let e = this.pos;
                for (; /[\s\u00a0]/.test(this.string.charAt(this.pos));)
                    ++this.pos;
                return this.pos > e
            }
            skipToEnd() {
                this.pos = this.string.length
            }
            skipTo(e) {
                let t = this.string.indexOf(e, this.pos);
                if (t > -1)
                    return this.pos = t,
                        !0
            }
            backUp(e) {
                this.pos -= e
            }
            column() {
                return this.lastColumnPos < this.start && (this.lastColumnValue = Ae(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue),
                    this.lastColumnPos = this.start),
                    this.lastColumnValue
            }
            indentation() {
                var e;
                return null !== (e = this.overrideIndent) && void 0 !== e ? e : Ae(this.string, null, this.tabSize)
            }
            match(e, t, n) {
                if ("string" == typeof e) {
                    let i = e => n ? e.toLowerCase() : e;
                    return i(this.string.substr(this.pos, e.length)) == i(e) ? (!1 !== t && (this.pos += e.length),
                        !0) : null
                }
                {
                    let n = this.string.slice(this.pos).match(e);
                    return n && n.index > 0 ? null : (n && !1 !== t && (this.pos += n[0].length),
                        n)
                }
            }
            current() {
                return this.string.slice(this.start, this.pos)
            }
        }
        function Ee(e) {
            if ("object" != typeof e)
                return e;
            let t = {};
            for (let n in e) {
                let i = e[n];
                t[n] = i instanceof Array ? i.slice() : i
            }
            return t
        }
        const je = new WeakMap;
        class Ce extends d {
            constructor(e) {
                let t, n = c(e.languageData), i = {
                    name: (a = e).name || "",
                    token: a.token,
                    blankLine: a.blankLine || (() => { }
                    ),
                    startState: a.startState || (() => !0),
                    copyState: a.copyState || Ee,
                    indent: a.indent || (() => null),
                    languageData: a.languageData || {},
                    tokenTable: a.tokenTable || Le
                };
                var a;
                super(n, new class extends r.iX {
                    createParse(e, n, i) {
                        return new De(t, e, n, i)
                    }
                }
                    , [w.of(((e, t) => this.getIndent(e, t)))], e.name),
                    this.topNode = function (e) {
                        let t = r.Z6.define({
                            id: Me.length,
                            name: "Document",
                            props: [l.add((() => e))],
                            top: !0
                        });
                        return Me.push(t),
                            t
                    }(n),
                    t = this,
                    this.streamParser = i,
                    this.stateAfter = new r.uY({
                        perNode: !0
                    }),
                    this.tokenTable = e.tokenTable ? new Je(i.tokenTable) : et
            }
            static define(e) {
                return new Ce(e)
            }
            getIndent(e, t) {
                let n, i = p(e.state), r = i.resolve(t);
                for (; r && r.type != this.topNode;)
                    r = r.parent;
                if (!r)
                    return null;
                let { overrideIndentation: a } = e.options;
                a && (n = je.get(e.state),
                    null != n && n < t - 1e4 && (n = void 0));
                let o, O, s = Ge(this, i, 0, r.from, null !== n && void 0 !== n ? n : t);
                if (s ? (O = s.state,
                    o = s.pos + 1) : (O = this.streamParser.startState(e.unit),
                        o = 0),
                    t - o > 1e4)
                    return null;
                for (; o < t;) {
                    let n = e.state.doc.lineAt(o)
                        , i = Math.min(t, n.to);
                    if (n.length) {
                        let t = a ? a(n.from) : -1
                            , r = new Ve(n.text, e.state.tabSize, e.unit, t < 0 ? void 0 : t);
                        for (; r.pos < i - n.from;)
                            Ne(this.streamParser.token, r, O)
                    } else
                        this.streamParser.blankLine(O, e.unit);
                    if (i == t)
                        break;
                    o = n.to + 1
                }
                let l = e.lineAt(t);
                return a && null == n && je.set(e.state, l.from),
                    this.streamParser.indent(O, /^\s*(.*)/.exec(l.text)[1], e)
            }
            get allowsNesting() {
                return !1
            }
        }
        function Ge(e, t, n, i, a) {
            let o = n >= i && n + t.length <= a && t.prop(e.stateAfter);
            if (o)
                return {
                    state: e.streamParser.copyState(o),
                    pos: n + t.length
                };
            for (let O = t.children.length - 1; O >= 0; O--) {
                let o = t.children[O]
                    , s = n + t.positions[O]
                    , l = o instanceof r.PH && s < a && Ge(e, o, s, i, a);
                if (l)
                    return l
            }
            return null
        }
        function Ie(e, t, n, i, a) {
            if (a && n <= 0 && i >= t.length)
                return t;
            a || t.type != e.topNode || (a = !0);
            for (let o = t.children.length - 1; o >= 0; o--) {
                let O, s = t.positions[o], l = t.children[o];
                if (s < i && l instanceof r.PH) {
                    if (!(O = Ie(e, l, n - s, i - s, a)))
                        break;
                    return a ? new r.PH(t.type, t.children.slice(0, o).concat(O), t.positions.slice(0, o + 1), s + O.length) : O
                }
            }
            return null
        }
        class De {
            constructor(e, t, n, i) {
                this.lang = e,
                    this.input = t,
                    this.fragments = n,
                    this.ranges = i,
                    this.stoppedAt = null,
                    this.chunks = [],
                    this.chunkPos = [],
                    this.chunk = [],
                    this.chunkReused = void 0,
                    this.rangeIndex = 0,
                    this.to = i[i.length - 1].to;
                let a = Q.get()
                    , o = i[0].from
                    , { state: O, tree: s } = function (e, t, n, i) {
                        for (let r of t) {
                            let t, i = r.from + (r.openStart ? 25 : 0), a = r.to - (r.openEnd ? 25 : 0), o = i <= n && a > n && Ge(e, r.tree, 0 - r.offset, n, a);
                            if (o && (t = Ie(e, r.tree, n + r.offset, o.pos + r.offset, !1)))
                                return {
                                    state: o.state,
                                    tree: t
                                }
                        }
                        return {
                            state: e.streamParser.startState(i ? _(i) : 4),
                            tree: r.PH.empty
                        }
                    }(e, n, o, null === a || void 0 === a ? void 0 : a.state);
                this.state = O,
                    this.parsedPos = this.chunkStart = o + s.length;
                for (let r = 0; r < s.children.length; r++)
                    this.chunks.push(s.children[r]),
                        this.chunkPos.push(s.positions[r]);
                a && this.parsedPos < a.viewport.from - 1e5 && (this.state = this.lang.streamParser.startState(_(a.state)),
                    a.skipUntilInView(this.parsedPos, a.viewport.from),
                    this.parsedPos = a.viewport.from),
                    this.moveRangeIndex()
            }
            advance() {
                let e = Q.get()
                    , t = null == this.stoppedAt ? this.to : Math.min(this.to, this.stoppedAt)
                    , n = Math.min(t, this.chunkStart + 2048);
                for (e && (n = Math.min(n, e.viewport.to)); this.parsedPos < n;)
                    this.parseLine(e);
                return this.chunkStart < this.parsedPos && this.finishChunk(),
                    this.parsedPos >= t ? this.finish() : e && this.parsedPos >= e.viewport.to ? (e.skipUntilInView(this.parsedPos, t),
                        this.finish()) : null
            }
            stopAt(e) {
                this.stoppedAt = e
            }
            lineAfter(e) {
                let t = this.input.chunk(e);
                if (this.input.lineChunks)
                    "\n" == t && (t = "");
                else {
                    let e = t.indexOf("\n");
                    e > -1 && (t = t.slice(0, e))
                }
                return e + t.length <= this.to ? t : t.slice(0, this.to - e)
            }
            nextLine() {
                let e = this.parsedPos
                    , t = this.lineAfter(e)
                    , n = e + t.length;
                for (let i = this.rangeIndex; ;) {
                    let e = this.ranges[i].to;
                    if (e >= n)
                        break;
                    if (t = t.slice(0, e - (n - t.length)),
                        i++,
                        i == this.ranges.length)
                        break;
                    let r = this.ranges[i].from
                        , a = this.lineAfter(r);
                    t += a,
                        n = r + a.length
                }
                return {
                    line: t,
                    end: n
                }
            }
            skipGapsTo(e, t, n) {
                for (; ;) {
                    let i = this.ranges[this.rangeIndex].to
                        , r = e + t;
                    if (n > 0 ? i > r : i >= r)
                        break;
                    t += this.ranges[++this.rangeIndex].from - i
                }
                return t
            }
            moveRangeIndex() {
                for (; this.ranges[this.rangeIndex].to < this.parsedPos;)
                    this.rangeIndex++
            }
            emitToken(e, t, n, i, r) {
                if (this.ranges.length > 1) {
                    t += r = this.skipGapsTo(t, r, 1);
                    let e = this.chunk.length;
                    n += r = this.skipGapsTo(n, r, -1),
                        i += this.chunk.length - e
                }
                return this.chunk.push(e, t, n, i),
                    r
            }
            parseLine(e) {
                let { line: t, end: n } = this.nextLine()
                    , i = 0
                    , { streamParser: r } = this.lang
                    , a = new Ve(t, e ? e.state.tabSize : 4, e ? _(e.state) : 2);
                if (a.eol())
                    r.blankLine(this.state, a.indentUnit);
                else
                    for (; !a.eol();) {
                        let e = Ne(r.token, a, this.state);
                        if (e && (i = this.emitToken(this.lang.tokenTable.resolve(e), this.parsedPos + a.start, this.parsedPos + a.pos, 4, i)),
                            a.start > 1e4)
                            break
                    }
                this.parsedPos = n,
                    this.moveRangeIndex(),
                    this.parsedPos < this.to && this.parsedPos++
            }
            finishChunk() {
                let e = r.PH.build({
                    buffer: this.chunk,
                    start: this.chunkStart,
                    length: this.parsedPos - this.chunkStart,
                    nodeSet: Fe,
                    topID: 0,
                    maxBufferLength: 2048,
                    reused: this.chunkReused
                });
                e = new r.PH(e.type, e.children, e.positions, e.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]),
                    this.chunks.push(e),
                    this.chunkPos.push(this.chunkStart - this.ranges[0].from),
                    this.chunk = [],
                    this.chunkReused = void 0,
                    this.chunkStart = this.parsedPos
            }
            finish() {
                return new r.PH(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance()
            }
        }
        function Ne(e, t, n) {
            t.start = t.pos;
            for (let i = 0; i < 10; i++) {
                let i = e(t, n);
                if (t.pos > t.start)
                    return i
            }
            throw new Error("Stream parser failed to advance stream.")
        }
        const Le = Object.create(null)
            , Me = [r.Z6.none]
            , Fe = new r.fI(Me)
            , Be = []
            , He = Object.create(null)
            , Ke = Object.create(null);
        for (let [it, rt] of [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]])
            Ke[it] = nt(Le, rt);
        class Je {
            constructor(e) {
                this.extra = e,
                    this.table = Object.assign(Object.create(null), Ke)
            }
            resolve(e) {
                return e ? this.table[e] || (this.table[e] = nt(this.extra, e)) : 0
            }
        }
        const et = new Je(Le);
        function tt(e, t) {
            Be.indexOf(e) > -1 || (Be.push(e),
                console.warn(t))
        }
        function nt(e, t) {
            let n = [];
            for (let r of t.split(" ")) {
                let t = [];
                for (let n of r.split(".")) {
                    let i = e[n] || O._A[n];
                    i ? "function" == typeof i ? t.length ? t = t.map(i) : tt(n, `Modifier ${n} used at start of tag`) : t.length ? tt(n, `Tag ${n} used as modifier`) : t = Array.isArray(i) ? i : [i] : tt(n, `Unknown highlighting tag ${n}`)
                }
                for (let e of t)
                    n.push(e)
            }
            if (!n.length)
                return 0;
            let i = t.replace(/ /g, "_")
                , a = i + " " + n.map((e => e.id))
                , o = He[a];
            if (o)
                return o.id;
            let s = He[a] = r.Z6.define({
                id: Me.length,
                name: i,
                props: [(0,
                    O.pn)({
                        [i]: n
                    })]
            });
            return Me.push(s),
                s.id
        }
        o.OP.RTL,
            o.OP.LTR
    }
    ,
    34480: (e, t, n) => {
        n.r(t),
            n.d(t, {
                apl: () => l
            });
        var i = {
            "+": ["conjugate", "add"],
            "\u2212": ["negate", "subtract"],
            "\xd7": ["signOf", "multiply"],
            "\xf7": ["reciprocal", "divide"],
            "\u2308": ["ceiling", "greaterOf"],
            "\u230a": ["floor", "lesserOf"],
            "\u2223": ["absolute", "residue"],
            "\u2373": ["indexGenerate", "indexOf"],
            "?": ["roll", "deal"],
            "\u22c6": ["exponentiate", "toThePowerOf"],
            "\u235f": ["naturalLog", "logToTheBase"],
            "\u25cb": ["piTimes", "circularFuncs"],
            "!": ["factorial", "binomial"],
            "\u2339": ["matrixInverse", "matrixDivide"],
            "<": [null, "lessThan"],
            "\u2264": [null, "lessThanOrEqual"],
            "=": [null, "equals"],
            ">": [null, "greaterThan"],
            "\u2265": [null, "greaterThanOrEqual"],
            "\u2260": [null, "notEqual"],
            "\u2261": ["depth", "match"],
            "\u2262": [null, "notMatch"],
            "\u2208": ["enlist", "membership"],
            "\u2377": [null, "find"],
            "\u222a": ["unique", "union"],
            "\u2229": [null, "intersection"],
            "\u223c": ["not", "without"],
            "\u2228": [null, "or"],
            "\u2227": [null, "and"],
            "\u2371": [null, "nor"],
            "\u2372": [null, "nand"],
            "\u2374": ["shapeOf", "reshape"],
            ",": ["ravel", "catenate"],
            "\u236a": [null, "firstAxisCatenate"],
            "\u233d": ["reverse", "rotate"],
            "\u2296": ["axis1Reverse", "axis1Rotate"],
            "\u2349": ["transpose", null],
            "\u2191": ["first", "take"],
            "\u2193": [null, "drop"],
            "\u2282": ["enclose", "partitionWithAxis"],
            "\u2283": ["diclose", "pick"],
            "\u2337": [null, "index"],
            "\u234b": ["gradeUp", null],
            "\u2352": ["gradeDown", null],
            "\u22a4": ["encode", null],
            "\u22a5": ["decode", null],
            "\u2355": ["format", "formatByExample"],
            "\u234e": ["execute", null],
            "\u22a3": ["stop", "left"],
            "\u22a2": ["pass", "right"]
        }
            , r = /[\.\/\u233f\u2340\xa8\u2363]/
            , a = /\u236c/
            , o = /[\+\u2212\xd7\xf7\u2308\u230a\u2223\u2373\?\u22c6\u235f\u25cb!\u2339<\u2264=>\u2265\u2260\u2261\u2262\u2208\u2377\u222a\u2229\u223c\u2228\u2227\u2371\u2372\u2374,\u236a\u233d\u2296\u2349\u2191\u2193\u2282\u2283\u2337\u234b\u2352\u22a4\u22a5\u2355\u234e\u22a3\u22a2]/
            , O = /\u2190/
            , s = /[\u235d#].*$/;
        const l = {
            name: "apl",
            startState: function () {
                return {
                    prev: !1,
                    func: !1,
                    op: !1,
                    string: !1,
                    escape: !1
                }
            },
            token: function (e, t) {
                var n;
                return e.eatSpace() ? null : '"' === (n = e.next()) || "'" === n ? (e.eatWhile(function (e) {
                    var t;
                    return t = !1,
                        function (n) {
                            return t = n,
                                n !== e || "\\" === t
                        }
                }(n)),
                    e.next(),
                    t.prev = !0,
                    "string") : /[\[{\(]/.test(n) ? (t.prev = !1,
                        null) : /[\]}\)]/.test(n) ? (t.prev = !0,
                            null) : a.test(n) ? (t.prev = !1,
                                "atom") : /[\xaf\d]/.test(n) ? (t.func ? (t.func = !1,
                                    t.prev = !1) : t.prev = !0,
                                    e.eatWhile(/[\w\.]/),
                                    "number") : r.test(n) || O.test(n) ? "operator" : o.test(n) ? (t.func = !0,
                                        t.prev = !1,
                                        i[n] ? "variableName.function.standard" : "variableName.function") : s.test(n) ? (e.skipToEnd(),
                                            "comment") : "\u2218" === n && "." === e.peek() ? (e.next(),
                                                "variableName.function") : (e.eatWhile(/[\w\$_]/),
                                                    t.prev = !0,
                                                    "keyword")
            }
        }
    }
    ,
    11121: (e, t, n) => {
        function i(e) {
            var t = e.match(/^\s*\S/);
            return e.skipToEnd(),
                t ? "error" : null
        }
        n.r(t),
            n.d(t, {
                asciiArmor: () => r
            });
        const r = {
            name: "asciiarmor",
            token: function (e, t) {
                var n;
                if ("top" == t.state)
                    return e.sol() && (n = e.match(/^-----BEGIN (.*)?-----\s*$/)) ? (t.state = "headers",
                        t.type = n[1],
                        "tag") : i(e);
                if ("headers" == t.state) {
                    if (e.sol() && e.match(/^\w+:/))
                        return t.state = "header",
                            "atom";
                    var r = i(e);
                    return r && (t.state = "body"),
                        r
                }
                return "header" == t.state ? (e.skipToEnd(),
                    t.state = "headers",
                    "string") : "body" == t.state ? e.sol() && (n = e.match(/^-----END (.*)?-----\s*$/)) ? n[1] != t.type ? "error" : (t.state = "end",
                        "tag") : e.eatWhile(/[A-Za-z0-9+\/=]/) ? null : (e.next(),
                            "error") : "end" == t.state ? i(e) : void 0
            },
            blankLine: function (e) {
                "headers" == e.state && (e.state = "body")
            },
            startState: function () {
                return {
                    state: "top",
                    type: null
                }
            }
        }
    }
    ,
    32951: (e, t, n) => {
        n.r(t),
            n.d(t, {
                asterisk: () => o
            });
        var i = ["exten", "same", "include", "ignorepat", "switch"]
            , r = ["#include", "#exec"]
            , a = ["addqueuemember", "adsiprog", "aelsub", "agentlogin", "agentmonitoroutgoing", "agi", "alarmreceiver", "amd", "answer", "authenticate", "background", "backgrounddetect", "bridge", "busy", "callcompletioncancel", "callcompletionrequest", "celgenuserevent", "changemonitor", "chanisavail", "channelredirect", "chanspy", "clearhash", "confbridge", "congestion", "continuewhile", "controlplayback", "dahdiacceptr2call", "dahdibarge", "dahdiras", "dahdiscan", "dahdisendcallreroutingfacility", "dahdisendkeypadfacility", "datetime", "dbdel", "dbdeltree", "deadagi", "dial", "dictate", "directory", "disa", "dumpchan", "eagi", "echo", "endwhile", "exec", "execif", "execiftime", "exitwhile", "extenspy", "externalivr", "festival", "flash", "followme", "forkcdr", "getcpeid", "gosub", "gosubif", "goto", "gotoif", "gotoiftime", "hangup", "iax2provision", "ices", "importvar", "incomplete", "ivrdemo", "jabberjoin", "jabberleave", "jabbersend", "jabbersendgroup", "jabberstatus", "jack", "log", "macro", "macroexclusive", "macroexit", "macroif", "mailboxexists", "meetme", "meetmeadmin", "meetmechanneladmin", "meetmecount", "milliwatt", "minivmaccmess", "minivmdelete", "minivmgreet", "minivmmwi", "minivmnotify", "minivmrecord", "mixmonitor", "monitor", "morsecode", "mp3player", "mset", "musiconhold", "nbscat", "nocdr", "noop", "odbc", "odbc", "odbcfinish", "originate", "ospauth", "ospfinish", "osplookup", "ospnext", "page", "park", "parkandannounce", "parkedcall", "pausemonitor", "pausequeuemember", "pickup", "pickupchan", "playback", "playtones", "privacymanager", "proceeding", "progress", "queue", "queuelog", "raiseexception", "read", "readexten", "readfile", "receivefax", "receivefax", "receivefax", "record", "removequeuemember", "resetcdr", "retrydial", "return", "ringing", "sayalpha", "saycountedadj", "saycountednoun", "saycountpl", "saydigits", "saynumber", "sayphonetic", "sayunixtime", "senddtmf", "sendfax", "sendfax", "sendfax", "sendimage", "sendtext", "sendurl", "set", "setamaflags", "setcallerpres", "setmusiconhold", "sipaddheader", "sipdtmfmode", "sipremoveheader", "skel", "slastation", "slatrunk", "sms", "softhangup", "speechactivategrammar", "speechbackground", "speechcreate", "speechdeactivategrammar", "speechdestroy", "speechloadgrammar", "speechprocessingsound", "speechstart", "speechunloadgrammar", "stackpop", "startmusiconhold", "stopmixmonitor", "stopmonitor", "stopmusiconhold", "stopplaytones", "system", "testclient", "testserver", "transfer", "tryexec", "trysystem", "unpausemonitor", "unpausequeuemember", "userevent", "verbose", "vmauthenticate", "vmsayname", "voicemail", "voicemailmain", "wait", "waitexten", "waitfornoise", "waitforring", "waitforsilence", "waitmusiconhold", "waituntil", "while", "zapateller"];
        const o = {
            name: "asterisk",
            startState: function () {
                return {
                    blockComment: !1,
                    extenStart: !1,
                    extenSame: !1,
                    extenInclude: !1,
                    extenExten: !1,
                    extenPriority: !1,
                    extenApplication: !1
                }
            },
            token: function (e, t) {
                var n = "";
                return e.eatSpace() ? null : t.extenStart ? (e.eatWhile(/[^\s]/),
                    n = e.current(),
                    /^=>?$/.test(n) ? (t.extenExten = !0,
                        t.extenStart = !1,
                        "strong") : (t.extenStart = !1,
                            e.skipToEnd(),
                            "error")) : t.extenExten ? (t.extenExten = !1,
                                t.extenPriority = !0,
                                e.eatWhile(/[^,]/),
                                t.extenInclude && (e.skipToEnd(),
                                    t.extenPriority = !1,
                                    t.extenInclude = !1),
                                t.extenSame && (t.extenPriority = !1,
                                    t.extenSame = !1,
                                    t.extenApplication = !0),
                                "tag") : t.extenPriority ? (t.extenPriority = !1,
                                    t.extenApplication = !0,
                                    e.next(),
                                    t.extenSame ? null : (e.eatWhile(/[^,]/),
                                        "number")) : t.extenApplication ? (e.eatWhile(/,/),
                                            "," === (n = e.current()) ? null : (e.eatWhile(/\w/),
                                                n = e.current().toLowerCase(),
                                                t.extenApplication = !1,
                                                -1 !== a.indexOf(n) ? "def" : null)) : function (e, t) {
                                                    var n = ""
                                                        , a = e.next();
                                                    if (t.blockComment)
                                                        return "-" == a && e.match("-;", !0) ? t.blockComment = !1 : e.skipTo("--;") ? (e.next(),
                                                            e.next(),
                                                            e.next(),
                                                            t.blockComment = !1) : e.skipToEnd(),
                                                            "comment";
                                                    if (";" == a)
                                                        return e.match("--", !0) && !e.match("-", !1) ? (t.blockComment = !0,
                                                            "comment") : (e.skipToEnd(),
                                                                "comment");
                                                    if ("[" == a)
                                                        return e.skipTo("]"),
                                                            e.eat("]"),
                                                            "header";
                                                    if ('"' == a)
                                                        return e.skipTo('"'),
                                                            "string";
                                                    if ("'" == a)
                                                        return e.skipTo("'"),
                                                            "string.special";
                                                    if ("#" == a && (e.eatWhile(/\w/),
                                                        n = e.current(),
                                                        -1 !== r.indexOf(n)))
                                                        return e.skipToEnd(),
                                                            "strong";
                                                    if ("$" == a && "{" == e.peek())
                                                        return e.skipTo("}"),
                                                            e.eat("}"),
                                                            "variableName.special";
                                                    if (e.eatWhile(/\w/),
                                                        n = e.current(),
                                                        -1 !== i.indexOf(n)) {
                                                        switch (t.extenStart = !0,
                                                        n) {
                                                            case "same":
                                                                t.extenSame = !0;
                                                                break;
                                                            case "include":
                                                            case "switch":
                                                            case "ignorepat":
                                                                t.extenInclude = !0
                                                        }
                                                        return "atom"
                                                    }
                                                }(e, t)
            },
            languageData: {
                commentTokens: {
                    line: ";",
                    block: {
                        open: ";--",
                        close: "--;"
                    }
                }
            }
        }
    }
    ,
    92872: (e, t, n) => {
        n.r(t),
            n.d(t, {
                brainfuck: () => r
            });
        var i = "><+-.,[]".split("");
        const r = {
            name: "brainfuck",
            startState: function () {
                return {
                    commentLine: !1,
                    left: 0,
                    right: 0,
                    commentLoop: !1
                }
            },
            token: function (e, t) {
                if (e.eatSpace())
                    return null;
                e.sol() && (t.commentLine = !1);
                var n = e.next().toString();
                return -1 === i.indexOf(n) ? (t.commentLine = !0,
                    e.eol() && (t.commentLine = !1),
                    "comment") : !0 === t.commentLine ? (e.eol() && (t.commentLine = !1),
                        "comment") : "]" === n || "[" === n ? ("[" === n ? t.left++ : t.right++,
                            "bracket") : "+" === n || "-" === n ? "keyword" : "<" === n || ">" === n ? "atom" : "." === n || "," === n ? "def" : void (e.eol() && (t.commentLine = !1))
            }
        }
    }
    ,
    49921: (e, t, n) => {
        n.r(t),
            n.d(t, {
                c: () => T,
                ceylon: () => D,
                clike: () => l,
                cpp: () => z,
                csharp: () => W,
                dart: () => H,
                java: () => R,
                kotlin: () => Y,
                nesC: () => V,
                objectiveC: () => E,
                objectiveCpp: () => j,
                scala: () => U,
                shader: () => A,
                squirrel: () => C
            });
        var i = n(27051);
        function r(e, t, n, i, r, a) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.info = i,
                this.align = r,
                this.prev = a
        }
        function a(e, t, n, i) {
            var a = e.indented;
            return e.context && "statement" == e.context.type && "statement" != n && (a = e.context.indented),
                e.context = new r(a, t, n, i, null, e.context)
        }
        function o(e) {
            var t = e.context.type;
            return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                e.context = e.context.prev
        }
        function O(e, t, n) {
            return "variable" == t.prevToken || "type" == t.prevToken || (!!/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(e.string.slice(0, n)) || (!(!t.typeAtEndOfLine || e.column() != e.indentation()) || void 0))
        }
        function s(e) {
            for (; ;) {
                if (!e || "top" == e.type)
                    return !0;
                if ("}" == e.type && "namespace" != e.prev.info)
                    return !1;
                e = e.prev
            }
        }
        function l(e) {
            var t, n, l = e.statementIndentUnit, c = e.dontAlignCalls, d = e.keywords || {}, h = e.types || {}, f = e.builtin || {}, p = e.blockKeywords || {}, m = e.defKeywords || {}, g = e.atoms || {}, Q = e.hooks || {}, $ = e.multiLineStrings, b = !1 !== e.indentStatements, y = !1 !== e.indentSwitch, S = e.namespaceSeparator, P = e.isPunctuationChar || /[\[\]{}\(\),;\:\.]/, v = e.numberStart || /[\d\.]/, x = e.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i, k = e.isOperatorChar || /[+\-*&%=<>!?|\/]/, w = e.isIdentifierChar || /[\w\$_\xa1-\uffff]/, X = e.isReservedIdentifier || !1;
            function _(e, i) {
                var r, a = e.next();
                if (Q[a]) {
                    var o = Q[a](e, i);
                    if (!1 !== o)
                        return o
                }
                if ('"' == a || "'" == a)
                    return i.tokenize = (r = a,
                        function (e, t) {
                            for (var n, i = !1, a = !1; null != (n = e.next());) {
                                if (n == r && !i) {
                                    a = !0;
                                    break
                                }
                                i = !i && "\\" == n
                            }
                            return (a || !i && !$) && (t.tokenize = null),
                                "string"
                        }
                    ),
                        i.tokenize(e, i);
                if (v.test(a)) {
                    if (e.backUp(1),
                        e.match(x))
                        return "number";
                    e.next()
                }
                if (P.test(a))
                    return t = a,
                        null;
                if ("/" == a) {
                    if (e.eat("*"))
                        return i.tokenize = T,
                            T(e, i);
                    if (e.eat("/"))
                        return e.skipToEnd(),
                            "comment"
                }
                if (k.test(a)) {
                    for (; !e.match(/^\/[\/*]/, !1) && e.eat(k);)
                        ;
                    return "operator"
                }
                if (e.eatWhile(w),
                    S)
                    for (; e.match(S);)
                        e.eatWhile(w);
                var O = e.current();
                return u(d, O) ? (u(p, O) && (t = "newstatement"),
                    u(m, O) && (n = !0),
                    "keyword") : u(h, O) ? "type" : u(f, O) || X && X(O) ? (u(p, O) && (t = "newstatement"),
                        "builtin") : u(g, O) ? "atom" : "variable"
            }
            function T(e, t) {
                for (var n, i = !1; n = e.next();) {
                    if ("/" == n && i) {
                        t.tokenize = null;
                        break
                    }
                    i = "*" == n
                }
                return "comment"
            }
            function z(t, n) {
                e.typeFirstDefinitions && t.eol() && s(n.context) && (n.typeAtEndOfLine = O(t, n, t.pos))
            }
            return {
                name: e.name,
                startState: function (e) {
                    return {
                        tokenize: null,
                        context: new r(-e, 0, "top", null, !1),
                        indented: 0,
                        startOfLine: !0,
                        prevToken: null
                    }
                },
                token: function (i, r) {
                    var l = r.context;
                    if (i.sol() && (null == l.align && (l.align = !1),
                        r.indented = i.indentation(),
                        r.startOfLine = !0),
                        i.eatSpace())
                        return z(i, r),
                            null;
                    t = n = null;
                    var c = (r.tokenize || _)(i, r);
                    if ("comment" == c || "meta" == c)
                        return c;
                    if (null == l.align && (l.align = !0),
                        ";" == t || ":" == t || "," == t && i.match(/^\s*(?:\/\/.*)?$/, !1))
                        for (; "statement" == r.context.type;)
                            o(r);
                    else if ("{" == t)
                        a(r, i.column(), "}");
                    else if ("[" == t)
                        a(r, i.column(), "]");
                    else if ("(" == t)
                        a(r, i.column(), ")");
                    else if ("}" == t) {
                        for (; "statement" == l.type;)
                            l = o(r);
                        for ("}" == l.type && (l = o(r)); "statement" == l.type;)
                            l = o(r)
                    } else
                        t == l.type ? o(r) : b && (("}" == l.type || "top" == l.type) && ";" != t || "statement" == l.type && "newstatement" == t) && a(r, i.column(), "statement", i.current());
                    if ("variable" == c && ("def" == r.prevToken || e.typeFirstDefinitions && O(i, r, i.start) && s(r.context) && i.match(/^\s*\(/, !1)) && (c = "def"),
                        Q.token) {
                        var u = Q.token(i, r, c);
                        void 0 !== u && (c = u)
                    }
                    return "def" == c && !1 === e.styleDefs && (c = "variable"),
                        r.startOfLine = !1,
                        r.prevToken = n ? "def" : c || t,
                        z(i, r),
                        c
                },
                indent: function (t, n, i) {
                    if (t.tokenize != _ && null != t.tokenize || t.typeAtEndOfLine && s(t.context))
                        return null;
                    var r = t.context
                        , a = n && n.charAt(0)
                        , o = a == r.type;
                    if ("statement" == r.type && "}" == a && (r = r.prev),
                        e.dontIndentStatements)
                        for (; "statement" == r.type && e.dontIndentStatements.test(r.info);)
                            r = r.prev;
                    if (Q.indent) {
                        var O = Q.indent(t, r, n, i.unit);
                        if ("number" == typeof O)
                            return O
                    }
                    var u = r.prev && "switch" == r.prev.info;
                    if (e.allmanIndentation && /[{(]/.test(a)) {
                        for (; "top" != r.type && "}" != r.type;)
                            r = r.prev;
                        return r.indented
                    }
                    return "statement" == r.type ? r.indented + ("{" == a ? 0 : l || i.unit) : !r.align || c && ")" == r.type ? ")" != r.type || o ? r.indented + (o ? 0 : i.unit) + (o || !u || /^(?:case|default)\b/.test(n) ? 0 : i.unit) : r.indented + (l || i.unit) : r.column + (o ? 0 : 1)
                },
                languageData: (0,
                    i.A)({
                        indentOnInput: y ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
                        commentTokens: {
                            line: "//",
                            block: {
                                open: "/*",
                                close: "*/"
                            }
                        },
                        autocomplete: Object.keys(d).concat(Object.keys(h)).concat(Object.keys(f)).concat(Object.keys(g))
                    }, e.languageData)
            }
        }
        function c(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        function u(e, t) {
            return "function" === typeof e ? e(t) : e.propertyIsEnumerable(t)
        }
        var d = "auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile inline restrict asm fortran"
            , h = "alignas alignof and and_eq audit axiom bitand bitor catch class compl concept constexpr const_cast decltype delete dynamic_cast explicit export final friend import module mutable namespace new noexcept not not_eq operator or or_eq override private protected public reinterpret_cast requires static_assert static_cast template this thread_local throw try typeid typename using virtual xor xor_eq"
            , f = "bycopy byref in inout oneway out self super atomic nonatomic retain copy readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd @interface @implementation @end @protocol @encode @property @synthesize @dynamic @class @public @package @private @protected @required @optional @try @catch @finally @import @selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available"
            , p = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION  NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT"
            , m = c("int long char short double float unsigned signed void bool")
            , g = c("SEL instancetype id Class Protocol BOOL");
        function Q(e) {
            return u(m, e) || /.+_t$/.test(e)
        }
        function $(e) {
            return Q(e) || u(g, e)
        }
        var b = "case do else for if switch while struct enum union"
            , y = "struct enum union";
        function S(e, t) {
            if (!t.startOfLine)
                return !1;
            for (var n, i = null; n = e.peek();) {
                if ("\\" == n && e.match(/^.$/)) {
                    i = S;
                    break
                }
                if ("/" == n && e.match(/^\/[\/\*]/, !1))
                    break;
                e.next()
            }
            return t.tokenize = i,
                "meta"
        }
        function P(e, t) {
            return "type" == t.prevToken && "type"
        }
        function v(e) {
            return !(!e || e.length < 2) && ("_" == e[0] && ("_" == e[1] || e[1] !== e[1].toLowerCase()))
        }
        function x(e) {
            return e.eatWhile(/[\w\.']/),
                "number"
        }
        function k(e, t) {
            if (e.backUp(1),
                e.match(/^(?:R|u8R|uR|UR|LR)/)) {
                var n = e.match(/^"([^\s\\()]{0,16})\(/);
                return !!n && (t.cpp11RawStringDelim = n[1],
                    t.tokenize = _,
                    _(e, t))
            }
            return e.match(/^(?:u8|u|U|L)/) ? !!e.match(/^["']/, !1) && "string" : (e.next(),
                !1)
        }
        function w(e) {
            var t = /(\w+)::~?(\w+)$/.exec(e);
            return t && t[1] == t[2]
        }
        function X(e, t) {
            for (var n; null != (n = e.next());)
                if ('"' == n && !e.eat('"')) {
                    t.tokenize = null;
                    break
                }
            return "string"
        }
        function _(e, t) {
            var n = t.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&");
            return e.match(new RegExp(".*?\\)" + n + '"')) ? t.tokenize = null : e.skipToEnd(),
                "string"
        }
        const T = l({
            name: "c",
            keywords: c(d),
            types: Q,
            blockKeywords: c(b),
            defKeywords: c(y),
            typeFirstDefinitions: !0,
            atoms: c("NULL true false"),
            isReservedIdentifier: v,
            hooks: {
                "#": S,
                "*": P
            }
        })
            , z = l({
                name: "cpp",
                keywords: c(d + " " + h),
                types: Q,
                blockKeywords: c(b + " class try catch"),
                defKeywords: c(y + " class namespace"),
                typeFirstDefinitions: !0,
                atoms: c("true false NULL nullptr"),
                dontIndentStatements: /^template$/,
                isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
                isReservedIdentifier: v,
                hooks: {
                    "#": S,
                    "*": P,
                    u: k,
                    U: k,
                    L: k,
                    R: k,
                    0: x,
                    1: x,
                    2: x,
                    3: x,
                    4: x,
                    5: x,
                    6: x,
                    7: x,
                    8: x,
                    9: x,
                    token: function (e, t, n) {
                        if ("variable" == n && "(" == e.peek() && (";" == t.prevToken || null == t.prevToken || "}" == t.prevToken) && w(e.current()))
                            return "def"
                    }
                },
                namespaceSeparator: "::"
            })
            , R = l({
                name: "java",
                keywords: c("abstract assert break case catch class const continue default do else enum extends final finally for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),
                types: c("var byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),
                blockKeywords: c("catch class do else finally for if switch try while"),
                defKeywords: c("class interface enum @interface"),
                typeFirstDefinitions: !0,
                atoms: c("true false null"),
                number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
                hooks: {
                    "@": function (e) {
                        return !e.match("interface", !1) && (e.eatWhile(/[\w\$_]/),
                            "meta")
                    },
                    '"': function (e, t) {
                        return !!e.match(/""$/) && (t.tokenize = Z,
                            t.tokenize(e, t))
                    }
                }
            })
            , W = l({
                name: "csharp",
                keywords: c("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in init interface internal is lock namespace new operator out override params private protected public readonly record ref required return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),
                types: c("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),
                blockKeywords: c("catch class do else finally for foreach if struct switch try while"),
                defKeywords: c("class interface namespace record struct var"),
                typeFirstDefinitions: !0,
                atoms: c("true false null"),
                hooks: {
                    "@": function (e, t) {
                        return e.eat('"') ? (t.tokenize = X,
                            X(e, t)) : (e.eatWhile(/[\w\$_]/),
                                "meta")
                    }
                }
            });
        function Z(e, t) {
            for (var n = !1; !e.eol();) {
                if (!n && e.match('"""')) {
                    t.tokenize = null;
                    break
                }
                n = "\\" == e.next() && !n
            }
            return "string"
        }
        function q(e) {
            return function (t, n) {
                for (var i; i = t.next();) {
                    if ("*" == i && t.eat("/")) {
                        if (1 == e) {
                            n.tokenize = null;
                            break
                        }
                        return n.tokenize = q(e - 1),
                            n.tokenize(t, n)
                    }
                    if ("/" == i && t.eat("*"))
                        return n.tokenize = q(e + 1),
                            n.tokenize(t, n)
                }
                return "comment"
            }
        }
        const U = l({
            name: "scala",
            keywords: c("abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"),
            types: c("AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"),
            multiLineStrings: !0,
            blockKeywords: c("catch class enum do else finally for forSome if match switch try while"),
            defKeywords: c("class enum def object package trait type val var"),
            atoms: c("true false null"),
            indentStatements: !1,
            indentSwitch: !1,
            isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
            hooks: {
                "@": function (e) {
                    return e.eatWhile(/[\w\$_]/),
                        "meta"
                },
                '"': function (e, t) {
                    return !!e.match('""') && (t.tokenize = Z,
                        t.tokenize(e, t))
                },
                "'": function (e) {
                    return e.match(/^(\\[^'\s]+|[^\\'])'/) ? "character" : (e.eatWhile(/[\w\$_\xa1-\uffff]/),
                        "atom")
                },
                "=": function (e, t) {
                    var n = t.context;
                    return !("}" != n.type || !n.align || !e.eat(">")) && (t.context = new r(n.indented, n.column, n.type, n.info, null, n.prev),
                        "operator")
                },
                "/": function (e, t) {
                    return !!e.eat("*") && (t.tokenize = q(1),
                        t.tokenize(e, t))
                }
            },
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', '"""']
                }
            }
        });
        const Y = l({
            name: "kotlin",
            keywords: c("package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"),
            types: c("Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"),
            intendSwitch: !1,
            indentStatements: !1,
            multiLineStrings: !0,
            number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
            blockKeywords: c("catch class do else finally for if where try while enum"),
            defKeywords: c("class val var object interface fun"),
            atoms: c("true false null this"),
            hooks: {
                "@": function (e) {
                    return e.eatWhile(/[\w\$_]/),
                        "meta"
                },
                "*": function (e, t) {
                    return "." == t.prevToken ? "variable" : "operator"
                },
                '"': function (e, t) {
                    var n;
                    return t.tokenize = (n = e.match('""'),
                        function (e, t) {
                            for (var i, r = !1, a = !1; !e.eol();) {
                                if (!n && !r && e.match('"')) {
                                    a = !0;
                                    break
                                }
                                if (n && e.match('"""')) {
                                    a = !0;
                                    break
                                }
                                i = e.next(),
                                    !r && "$" == i && e.match("{") && e.skipTo("}"),
                                    r = !r && "\\" == i && !n
                            }
                            return !a && n || (t.tokenize = null),
                                "string"
                        }
                    ),
                        t.tokenize(e, t)
                },
                "/": function (e, t) {
                    return !!e.eat("*") && (t.tokenize = q(1),
                        t.tokenize(e, t))
                },
                indent: function (e, t, n, i) {
                    var r = n && n.charAt(0);
                    return "}" != e.prevToken && ")" != e.prevToken || "" != n ? "operator" == e.prevToken && "}" != n && "}" != e.context.type || "variable" == e.prevToken && "." == r || ("}" == e.prevToken || ")" == e.prevToken) && "." == r ? 2 * i + t.indented : t.align && "}" == t.type ? t.indented + (e.context.type == (n || "").charAt(0) ? 0 : i) : void 0 : e.indented
                }
            },
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', '"""']
                }
            }
        })
            , A = l({
                name: "shader",
                keywords: c("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),
                types: c("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),
                blockKeywords: c("for while do if else struct"),
                builtin: c("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),
                atoms: c("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),
                indentSwitch: !1,
                hooks: {
                    "#": S
                }
            })
            , V = l({
                name: "nesc",
                keywords: c(d + " as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),
                types: Q,
                blockKeywords: c(b),
                atoms: c("null true false"),
                hooks: {
                    "#": S
                }
            })
            , E = l({
                name: "objectivec",
                keywords: c(d + " " + f),
                types: $,
                builtin: c(p),
                blockKeywords: c(b + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
                defKeywords: c(y + " @interface @implementation @protocol @class"),
                dontIndentStatements: /^@.*$/,
                typeFirstDefinitions: !0,
                atoms: c("YES NO NULL Nil nil true false nullptr"),
                isReservedIdentifier: v,
                hooks: {
                    "#": S,
                    "*": P
                }
            })
            , j = l({
                name: "objectivecpp",
                keywords: c(d + " " + f + " " + h),
                types: $,
                builtin: c(p),
                blockKeywords: c(b + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
                defKeywords: c(y + " @interface @implementation @protocol @class class namespace"),
                dontIndentStatements: /^@.*$|^template$/,
                typeFirstDefinitions: !0,
                atoms: c("YES NO NULL Nil nil true false nullptr"),
                isReservedIdentifier: v,
                hooks: {
                    "#": S,
                    "*": P,
                    u: k,
                    U: k,
                    L: k,
                    R: k,
                    0: x,
                    1: x,
                    2: x,
                    3: x,
                    4: x,
                    5: x,
                    6: x,
                    7: x,
                    8: x,
                    9: x,
                    token: function (e, t, n) {
                        if ("variable" == n && "(" == e.peek() && (";" == t.prevToken || null == t.prevToken || "}" == t.prevToken) && w(e.current()))
                            return "def"
                    }
                },
                namespaceSeparator: "::"
            })
            , C = l({
                name: "squirrel",
                keywords: c("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),
                types: Q,
                blockKeywords: c("case catch class else for foreach if switch try while"),
                defKeywords: c("function local class"),
                typeFirstDefinitions: !0,
                atoms: c("true false null"),
                hooks: {
                    "#": S
                }
            });
        var G = null;
        function I(e) {
            return function (t, n) {
                for (var i, r = !1, a = !1; !t.eol();) {
                    if (!r && t.match('"') && ("single" == e || t.match('""'))) {
                        a = !0;
                        break
                    }
                    if (!r && t.match("``")) {
                        G = I(e),
                            a = !0;
                        break
                    }
                    i = t.next(),
                        r = "single" == e && !r && "\\" == i
                }
                return a && (n.tokenize = null),
                    "string"
            }
        }
        const D = l({
            name: "ceylon",
            keywords: c("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),
            types: function (e) {
                var t = e.charAt(0);
                return t === t.toUpperCase() && t !== t.toLowerCase()
            },
            blockKeywords: c("case catch class dynamic else finally for function if interface module new object switch try while"),
            defKeywords: c("class dynamic function interface module object package value"),
            builtin: c("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),
            isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
            isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
            numberStart: /[\d#$]/,
            number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
            multiLineStrings: !0,
            typeFirstDefinitions: !0,
            atoms: c("true false null larger smaller equal empty finished"),
            indentSwitch: !1,
            styleDefs: !1,
            hooks: {
                "@": function (e) {
                    return e.eatWhile(/[\w\$_]/),
                        "meta"
                },
                '"': function (e, t) {
                    return t.tokenize = I(e.match('""') ? "triple" : "single"),
                        t.tokenize(e, t)
                },
                "`": function (e, t) {
                    return !(!G || !e.match("`")) && (t.tokenize = G,
                        G = null,
                        t.tokenize(e, t))
                },
                "'": function (e) {
                    return e.match(/^(\\[^'\s]+|[^\\'])'/) ? "string.special" : (e.eatWhile(/[\w\$_\xa1-\uffff]/),
                        "atom")
                },
                token: function (e, t, n) {
                    if (("variable" == n || "type" == n) && "." == t.prevToken)
                        return "variableName.special"
                }
            },
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', '"""']
                }
            }
        });
        function N(e) {
            (e.interpolationStack || (e.interpolationStack = [])).push(e.tokenize)
        }
        function L(e) {
            return (e.interpolationStack || (e.interpolationStack = [])).pop()
        }
        function M(e, t, n, i) {
            var r = !1;
            if (t.eat(e)) {
                if (!t.eat(e))
                    return "string";
                r = !0
            }
            function a(t, n) {
                for (var a = !1; !t.eol();) {
                    if (!i && !a && "$" == t.peek())
                        return N(n),
                            n.tokenize = F,
                            "string";
                    var o = t.next();
                    if (o == e && !a && (!r || t.match(e + e))) {
                        n.tokenize = null;
                        break
                    }
                    a = !i && !a && "\\" == o
                }
                return "string"
            }
            return n.tokenize = a,
                a(t, n)
        }
        function F(e, t) {
            return e.eat("$"),
                e.eat("{") ? t.tokenize = null : t.tokenize = B,
                null
        }
        function B(e, t) {
            return e.eatWhile(/[\w_]/),
                t.tokenize = L(t),
                "variable"
        }
        const H = l({
            name: "dart",
            keywords: c("this super static final const abstract class extends external factory implements mixin get native set typedef with enum throw rethrow assert break case continue default in return new deferred async await covariant try catch finally do else for if switch while import library export part of show hide is as extension on yield late required sealed base interface when inline"),
            blockKeywords: c("try catch finally do else for if switch while"),
            builtin: c("void bool num int double dynamic var String Null Never"),
            atoms: c("true false null"),
            hooks: {
                "@": function (e) {
                    return e.eatWhile(/[\w\$_\.]/),
                        "meta"
                },
                "'": function (e, t) {
                    return M("'", e, t, !1)
                },
                '"': function (e, t) {
                    return M('"', e, t, !1)
                },
                r: function (e, t) {
                    var n = e.peek();
                    return ("'" == n || '"' == n) && M(e.next(), e, t, !0)
                },
                "}": function (e, t) {
                    return function (e) {
                        return e.interpolationStack ? e.interpolationStack.length : 0
                    }(t) > 0 && (t.tokenize = L(t),
                        null)
                },
                "/": function (e, t) {
                    return !!e.eat("*") && (t.tokenize = q(1),
                        t.tokenize(e, t))
                },
                token: function (e, t, n) {
                    if ("variable" == n && RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$", "g").test(e.current()))
                        return "type"
                }
            }
        })
    }
    ,
    82143: (e, t, n) => {
        n.r(t),
            n.d(t, {
                clojure: () => $
            });
        var i = ["false", "nil", "true"]
            , r = [".", "catch", "def", "do", "if", "monitor-enter", "monitor-exit", "new", "quote", "recur", "set!", "throw", "try", "var"]
            , a = ["*", "*'", "*1", "*2", "*3", "*agent*", "*allow-unresolved-vars*", "*assert*", "*clojure-version*", "*command-line-args*", "*compile-files*", "*compile-path*", "*compiler-options*", "*data-readers*", "*default-data-reader-fn*", "*e", "*err*", "*file*", "*flush-on-newline*", "*fn-loader*", "*in*", "*math-context*", "*ns*", "*out*", "*print-dup*", "*print-length*", "*print-level*", "*print-meta*", "*print-namespace-maps*", "*print-readably*", "*read-eval*", "*reader-resolver*", "*source-path*", "*suppress-read*", "*unchecked-math*", "*use-context-classloader*", "*verbose-defrecords*", "*warn-on-reflection*", "+", "+'", "-", "-'", "->", "->>", "->ArrayChunk", "->Eduction", "->Vec", "->VecNode", "->VecSeq", "-cache-protocol-fn", "-reset-methods", "..", "/", "<", "<=", "=", "==", ">", ">=", "EMPTY-NODE", "Inst", "StackTraceElement->vec", "Throwable->map", "accessor", "aclone", "add-classpath", "add-watch", "agent", "agent-error", "agent-errors", "aget", "alength", "alias", "all-ns", "alter", "alter-meta!", "alter-var-root", "amap", "ancestors", "and", "any?", "apply", "areduce", "array-map", "as->", "aset", "aset-boolean", "aset-byte", "aset-char", "aset-double", "aset-float", "aset-int", "aset-long", "aset-short", "assert", "assoc", "assoc!", "assoc-in", "associative?", "atom", "await", "await-for", "await1", "bases", "bean", "bigdec", "bigint", "biginteger", "binding", "bit-and", "bit-and-not", "bit-clear", "bit-flip", "bit-not", "bit-or", "bit-set", "bit-shift-left", "bit-shift-right", "bit-test", "bit-xor", "boolean", "boolean-array", "boolean?", "booleans", "bound-fn", "bound-fn*", "bound?", "bounded-count", "butlast", "byte", "byte-array", "bytes", "bytes?", "case", "cast", "cat", "char", "char-array", "char-escape-string", "char-name-string", "char?", "chars", "chunk", "chunk-append", "chunk-buffer", "chunk-cons", "chunk-first", "chunk-next", "chunk-rest", "chunked-seq?", "class", "class?", "clear-agent-errors", "clojure-version", "coll?", "comment", "commute", "comp", "comparator", "compare", "compare-and-set!", "compile", "complement", "completing", "concat", "cond", "cond->", "cond->>", "condp", "conj", "conj!", "cons", "constantly", "construct-proxy", "contains?", "count", "counted?", "create-ns", "create-struct", "cycle", "dec", "dec'", "decimal?", "declare", "dedupe", "default-data-readers", "definline", "definterface", "defmacro", "defmethod", "defmulti", "defn", "defn-", "defonce", "defprotocol", "defrecord", "defstruct", "deftype", "delay", "delay?", "deliver", "denominator", "deref", "derive", "descendants", "destructure", "disj", "disj!", "dissoc", "dissoc!", "distinct", "distinct?", "doall", "dorun", "doseq", "dosync", "dotimes", "doto", "double", "double-array", "double?", "doubles", "drop", "drop-last", "drop-while", "eduction", "empty", "empty?", "ensure", "ensure-reduced", "enumeration-seq", "error-handler", "error-mode", "eval", "even?", "every-pred", "every?", "ex-data", "ex-info", "extend", "extend-protocol", "extend-type", "extenders", "extends?", "false?", "ffirst", "file-seq", "filter", "filterv", "find", "find-keyword", "find-ns", "find-protocol-impl", "find-protocol-method", "find-var", "first", "flatten", "float", "float-array", "float?", "floats", "flush", "fn", "fn?", "fnext", "fnil", "for", "force", "format", "frequencies", "future", "future-call", "future-cancel", "future-cancelled?", "future-done?", "future?", "gen-class", "gen-interface", "gensym", "get", "get-in", "get-method", "get-proxy-class", "get-thread-bindings", "get-validator", "group-by", "halt-when", "hash", "hash-combine", "hash-map", "hash-ordered-coll", "hash-set", "hash-unordered-coll", "ident?", "identical?", "identity", "if-let", "if-not", "if-some", "ifn?", "import", "in-ns", "inc", "inc'", "indexed?", "init-proxy", "inst-ms", "inst-ms*", "inst?", "instance?", "int", "int-array", "int?", "integer?", "interleave", "intern", "interpose", "into", "into-array", "ints", "io!", "isa?", "iterate", "iterator-seq", "juxt", "keep", "keep-indexed", "key", "keys", "keyword", "keyword?", "last", "lazy-cat", "lazy-seq", "let", "letfn", "line-seq", "list", "list*", "list?", "load", "load-file", "load-reader", "load-string", "loaded-libs", "locking", "long", "long-array", "longs", "loop", "macroexpand", "macroexpand-1", "make-array", "make-hierarchy", "map", "map-entry?", "map-indexed", "map?", "mapcat", "mapv", "max", "max-key", "memfn", "memoize", "merge", "merge-with", "meta", "method-sig", "methods", "min", "min-key", "mix-collection-hash", "mod", "munge", "name", "namespace", "namespace-munge", "nat-int?", "neg-int?", "neg?", "newline", "next", "nfirst", "nil?", "nnext", "not", "not-any?", "not-empty", "not-every?", "not=", "ns", "ns-aliases", "ns-imports", "ns-interns", "ns-map", "ns-name", "ns-publics", "ns-refers", "ns-resolve", "ns-unalias", "ns-unmap", "nth", "nthnext", "nthrest", "num", "number?", "numerator", "object-array", "odd?", "or", "parents", "partial", "partition", "partition-all", "partition-by", "pcalls", "peek", "persistent!", "pmap", "pop", "pop!", "pop-thread-bindings", "pos-int?", "pos?", "pr", "pr-str", "prefer-method", "prefers", "primitives-classnames", "print", "print-ctor", "print-dup", "print-method", "print-simple", "print-str", "printf", "println", "println-str", "prn", "prn-str", "promise", "proxy", "proxy-call-with-super", "proxy-mappings", "proxy-name", "proxy-super", "push-thread-bindings", "pvalues", "qualified-ident?", "qualified-keyword?", "qualified-symbol?", "quot", "rand", "rand-int", "rand-nth", "random-sample", "range", "ratio?", "rational?", "rationalize", "re-find", "re-groups", "re-matcher", "re-matches", "re-pattern", "re-seq", "read", "read-line", "read-string", "reader-conditional", "reader-conditional?", "realized?", "record?", "reduce", "reduce-kv", "reduced", "reduced?", "reductions", "ref", "ref-history-count", "ref-max-history", "ref-min-history", "ref-set", "refer", "refer-clojure", "reify", "release-pending-sends", "rem", "remove", "remove-all-methods", "remove-method", "remove-ns", "remove-watch", "repeat", "repeatedly", "replace", "replicate", "require", "reset!", "reset-meta!", "reset-vals!", "resolve", "rest", "restart-agent", "resultset-seq", "reverse", "reversible?", "rseq", "rsubseq", "run!", "satisfies?", "second", "select-keys", "send", "send-off", "send-via", "seq", "seq?", "seqable?", "seque", "sequence", "sequential?", "set", "set-agent-send-executor!", "set-agent-send-off-executor!", "set-error-handler!", "set-error-mode!", "set-validator!", "set?", "short", "short-array", "shorts", "shuffle", "shutdown-agents", "simple-ident?", "simple-keyword?", "simple-symbol?", "slurp", "some", "some->", "some->>", "some-fn", "some?", "sort", "sort-by", "sorted-map", "sorted-map-by", "sorted-set", "sorted-set-by", "sorted?", "special-symbol?", "spit", "split-at", "split-with", "str", "string?", "struct", "struct-map", "subs", "subseq", "subvec", "supers", "swap!", "swap-vals!", "symbol", "symbol?", "sync", "tagged-literal", "tagged-literal?", "take", "take-last", "take-nth", "take-while", "test", "the-ns", "thread-bound?", "time", "to-array", "to-array-2d", "trampoline", "transduce", "transient", "tree-seq", "true?", "type", "unchecked-add", "unchecked-add-int", "unchecked-byte", "unchecked-char", "unchecked-dec", "unchecked-dec-int", "unchecked-divide-int", "unchecked-double", "unchecked-float", "unchecked-inc", "unchecked-inc-int", "unchecked-int", "unchecked-long", "unchecked-multiply", "unchecked-multiply-int", "unchecked-negate", "unchecked-negate-int", "unchecked-remainder-int", "unchecked-short", "unchecked-subtract", "unchecked-subtract-int", "underive", "unquote", "unquote-splicing", "unreduced", "unsigned-bit-shift-right", "update", "update-in", "update-proxy", "uri?", "use", "uuid?", "val", "vals", "var-get", "var-set", "var?", "vary-meta", "vec", "vector", "vector-of", "vector?", "volatile!", "volatile?", "vreset!", "vswap!", "when", "when-first", "when-let", "when-not", "when-some", "while", "with-bindings", "with-bindings*", "with-in-str", "with-loading-context", "with-local-vars", "with-meta", "with-open", "with-out-str", "with-precision", "with-redefs", "with-redefs-fn", "xml-seq", "zero?", "zipmap"]
            , o = g(i)
            , O = g(r)
            , s = g(a)
            , l = g(["->", "->>", "as->", "binding", "bound-fn", "case", "catch", "comment", "cond", "cond->", "cond->>", "condp", "def", "definterface", "defmethod", "defn", "defmacro", "defprotocol", "defrecord", "defstruct", "deftype", "do", "doseq", "dotimes", "doto", "extend", "extend-protocol", "extend-type", "fn", "for", "future", "if", "if-let", "if-not", "if-some", "let", "letfn", "locking", "loop", "ns", "proxy", "reify", "struct-map", "some->", "some->>", "try", "when", "when-first", "when-let", "when-not", "when-some", "while", "with-bindings", "with-bindings*", "with-in-str", "with-loading-context", "with-local-vars", "with-meta", "with-open", "with-out-str", "with-precision", "with-redefs", "with-redefs-fn"])
            , c = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/
            , u = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/
            , d = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/
            , h = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;
        function f(e, t) {
            if (e.eatSpace() || e.eat(","))
                return ["space", null];
            if (e.match(u))
                return [null, "number"];
            if (e.match(d))
                return [null, "string.special"];
            if (e.eat(/^"/))
                return (t.tokenize = p)(e, t);
            if (e.eat(/^[(\[{]/))
                return ["open", "bracket"];
            if (e.eat(/^[)\]}]/))
                return ["close", "bracket"];
            if (e.eat(/^;/))
                return e.skipToEnd(),
                    ["space", "comment"];
            if (e.eat(/^[#'@^`~]/))
                return [null, "meta"];
            var n = e.match(h)
                , i = n && n[0];
            return i ? "comment" === i && "(" === t.lastToken ? (t.tokenize = m)(e, t) : Q(i, o) || ":" === i.charAt(0) ? ["symbol", "atom"] : Q(i, O) || Q(i, s) ? ["symbol", "keyword"] : "(" === t.lastToken ? ["symbol", "builtin"] : ["symbol", "variable"] : (e.next(),
                e.eatWhile((function (e) {
                    return !Q(e, c)
                }
                )),
                [null, "error"])
        }
        function p(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ('"' === n && !i) {
                    t.tokenize = f;
                    break
                }
                i = !i && "\\" === n
            }
            return [null, "string"]
        }
        function m(e, t) {
            for (var n, i = 1; n = e.next();)
                if (")" === n && i--,
                    "(" === n && i++,
                    0 === i) {
                    e.backUp(1),
                        t.tokenize = f;
                    break
                }
            return ["space", "comment"]
        }
        function g(e) {
            for (var t = {}, n = 0; n < e.length; ++n)
                t[e[n]] = !0;
            return t
        }
        function Q(e, t) {
            return t instanceof RegExp ? t.test(e) : t instanceof Object ? t.propertyIsEnumerable(e) : void 0
        }
        const $ = {
            name: "clojure",
            startState: function () {
                return {
                    ctx: {
                        prev: null,
                        start: 0,
                        indentTo: 0
                    },
                    lastToken: null,
                    tokenize: f
                }
            },
            token: function (e, t) {
                e.sol() && "number" !== typeof t.ctx.indentTo && (t.ctx.indentTo = t.ctx.start + 1);
                var n = t.tokenize(e, t)
                    , i = n[0]
                    , r = n[1]
                    , a = e.current();
                return "space" !== i && ("(" === t.lastToken && null === t.ctx.indentTo ? "symbol" === i && Q(a, l) ? t.ctx.indentTo = t.ctx.start + e.indentUnit : t.ctx.indentTo = "next" : "next" === t.ctx.indentTo && (t.ctx.indentTo = e.column()),
                    t.lastToken = a),
                    "open" === i ? t.ctx = {
                        prev: t.ctx,
                        start: e.column(),
                        indentTo: null
                    } : "close" === i && (t.ctx = t.ctx.prev || t.ctx),
                    r
            },
            indent: function (e) {
                var t = e.ctx.indentTo;
                return "number" === typeof t ? t : e.ctx.start + 1
            },
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", '"']
                },
                commentTokens: {
                    line: ";;"
                },
                autocomplete: [].concat(i, r, a)
            }
        }
    }
    ,
    56956: (e, t, n) => {
        n.r(t),
            n.d(t, {
                cmake: () => a
            });
        var i = /({)?[a-zA-Z0-9_]+(})?/;
        function r(e, t) {
            for (var n, i, r = !1; !e.eol() && (n = e.next()) != t.pending;) {
                if ("$" === n && "\\" != i && '"' == t.pending) {
                    r = !0;
                    break
                }
                i = n
            }
            return r && e.backUp(1),
                n == t.pending ? t.continueString = !1 : t.continueString = !0,
                "string"
        }
        const a = {
            name: "cmake",
            startState: function () {
                var e = {
                    inDefinition: !1,
                    inInclude: !1,
                    continueString: !1,
                    pending: !1
                };
                return e
            },
            token: function (e, t) {
                return e.eatSpace() ? null : function (e, t) {
                    var n = e.next();
                    return "$" === n ? e.match(i) ? "variableName.special" : "variable" : t.continueString ? (e.backUp(1),
                        r(e, t)) : e.match(/(\s+)?\w+\(/) || e.match(/(\s+)?\w+\ \(/) ? (e.backUp(1),
                            "def") : "#" == n ? (e.skipToEnd(),
                                "comment") : "'" == n || '"' == n ? (t.pending = n,
                                    r(e, t)) : "(" == n || ")" == n ? "bracket" : n.match(/[0-9]/) ? "number" : (e.eatWhile(/[\w-]/),
                                        null)
                }(e, t)
            }
        }
    }
    ,
    39740: (e, t, n) => {
        n.r(t),
            n.d(t, {
                cobol: () => c
            });
        var i = "string"
            , r = "atom";
        function a(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        var o = a("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ")
            , O = a("ACCEPT ACCESS ACQUIRE ADD ADDRESS ADVANCING AFTER ALIAS ALL ALPHABET ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED ALSO ALTER ALTERNATE AND ANY ARE AREA AREAS ARITHMETIC ASCENDING ASSIGN AT ATTRIBUTE AUTHOR AUTO AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP BEFORE BELL BINARY BIT BITS BLANK BLINK BLOCK BOOLEAN BOTTOM BY CALL CANCEL CD CF CH CHARACTER CHARACTERS CLASS CLOCK-UNITS CLOSE COBOL CODE CODE-SET COL COLLATING COLUMN COMMA COMMIT COMMITMENT COMMON COMMUNICATION COMP COMP-0 COMP-1 COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS CONVERTING COPY CORR CORRESPONDING COUNT CRT CRT-UNDER CURRENCY CURRENT CURSOR DATA DATE DATE-COMPILED DATE-WRITTEN DAY DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION DOWN DROP DUPLICATE DUPLICATES DYNAMIC EBCDIC EGI EJECT ELSE EMI EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT END-UNSTRING END-WRITE END-XML ENTER ENTRY ENVIRONMENT EOP EQUAL EQUALS ERASE ERROR ESI EVALUATE EVERY EXCEEDS EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL FILE-STREAM FILES FILLER FINAL FIND FINISH FIRST FOOTING FOR FOREGROUND-COLOR FOREGROUND-COLOUR FORMAT FREE FROM FULL FUNCTION GENERATE GET GIVING GLOBAL GO GOBACK GREATER GROUP HEADING HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL ID IDENTIFICATION IF IN INDEX INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED INDIC INDICATE INDICATOR INDICATORS INITIAL INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT INSTALLATION INTO INVALID INVOKE IS JUST JUSTIFIED KANJI KEEP KEY LABEL LAST LD LEADING LEFT LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE LOCALE LOCALLY LOCK MEMBER MEMORY MERGE MESSAGE METACLASS MODE MODIFIED MODIFY MODULES MOVE MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE NEXT NO NO-ECHO NONE NOT NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS OF OFF OMITTED ON ONLY OPEN OPTIONAL OR ORDER ORGANIZATION OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL PADDING PAGE PAGE-COUNTER PARSE PERFORM PF PH PIC PICTURE PLUS POINTER POSITION POSITIVE PREFIX PRESENT PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID PROMPT PROTECTED PURGE QUEUE QUOTE QUOTES RANDOM RD READ READY REALM RECEIVE RECONNECT RECORD RECORD-NAME RECORDS RECURSIVE REDEFINES REEL REFERENCE REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE REMAINDER REMOVAL RENAMES REPEATED REPLACE REPLACING REPORT REPORTING REPORTS REPOSITORY REQUIRED RERUN RESERVE RESET RETAINING RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO REVERSED REWIND REWRITE RF RH RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED RUN SAME SCREEN SD SEARCH SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT SELECT SEND SENTENCE SEPARATE SEQUENCE SEQUENTIAL SET SHARED SIGN SIZE SKIP1 SKIP2 SKIP3 SORT SORT-MERGE SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 START STARTING STATUS STOP STORE STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT TABLE TALLYING TAPE TENANT TERMINAL TERMINATE TEST TEXT THAN THEN THROUGH THRU TIME TIMES TITLE TO TOP TRAILING TRAILING-SIGN TRANSACTION TYPE TYPEDEF UNDERLINE UNEQUAL UNIT UNSTRING UNTIL UP UPDATE UPON USAGE USAGE-MODE USE USING VALID VALIDATE VALUE VALUES VARYING VLR WAIT WHEN WHEN-COMPILED WITH WITHIN WORDS WORKING-STORAGE WRITE XML XML-CODE XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL ")
            , s = a("- * ** / + < <= = > >= ")
            , l = {
                digit: /\d/,
                digit_or_colon: /[\d:]/,
                hex: /[0-9a-f]/i,
                sign: /[+-]/,
                exponent: /e/i,
                keyword_char: /[^\s\(\[\;\)\]]/,
                symbol: /[\w*+\-]/
            };
        const c = {
            name: "cobol",
            startState: function () {
                return {
                    indentStack: null,
                    indentation: 0,
                    mode: !1
                }
            },
            token: function (e, t) {
                if (null == t.indentStack && e.sol() && (t.indentation = 6),
                    e.eatSpace())
                    return null;
                var n = null;
                if ("string" === t.mode) {
                    for (var a = !1; null != (a = e.next());)
                        if (('"' == a || "'" == a) && !e.match(/['"]/, !1)) {
                            t.mode = !1;
                            break
                        }
                    n = i
                } else {
                    var c = e.next()
                        , u = e.column();
                    if (u >= 0 && u <= 5)
                        n = "def";
                    else if (u >= 72 && u <= 79)
                        e.skipToEnd(),
                            n = "header";
                    else if ("*" == c && 6 == u)
                        e.skipToEnd(),
                            n = "comment";
                    else if ('"' == c || "'" == c)
                        t.mode = "string",
                            n = i;
                    else if ("'" != c || l.digit_or_colon.test(e.peek()))
                        if ("." == c)
                            n = "link";
                        else if (function (e, t) {
                            return "0" === e && t.eat(/x/i) ? (t.eatWhile(l.hex),
                                !0) : ("+" != e && "-" != e || !l.digit.test(t.peek()) || (t.eat(l.sign),
                                    e = t.next()),
                                    !!l.digit.test(e) && (t.eat(e),
                                        t.eatWhile(l.digit),
                                        "." == t.peek() && (t.eat("."),
                                            t.eatWhile(l.digit)),
                                        t.eat(l.exponent) && (t.eat(l.sign),
                                            t.eatWhile(l.digit)),
                                        !0))
                        }(c, e))
                            n = "number";
                        else {
                            if (e.current().match(l.symbol))
                                for (; u < 71 && void 0 !== e.eat(l.symbol);)
                                    u++;
                            n = O && O.propertyIsEnumerable(e.current().toUpperCase()) ? "keyword" : s && s.propertyIsEnumerable(e.current().toUpperCase()) ? "builtin" : o && o.propertyIsEnumerable(e.current().toUpperCase()) ? r : null
                        }
                    else
                        n = r
                }
                return n
            },
            indent: function (e) {
                return null == e.indentStack ? e.indentation : e.indentStack.indent
            }
        }
    }
    ,
    69976: (e, t, n) => {
        n.r(t),
            n.d(t, {
                coffeeScript: () => b
            });
        var i = "error";
        function r(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b")
        }
        var a = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/
            , o = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/
            , O = /^[_A-Za-z$][_A-Za-z$0-9]*/
            , s = /^@[_A-Za-z$][_A-Za-z$0-9]*/
            , l = r(["and", "or", "not", "is", "isnt", "in", "instanceof", "typeof"])
            , c = ["for", "while", "loop", "if", "unless", "else", "switch", "try", "catch", "finally", "class"]
            , u = r(c.concat(["break", "by", "continue", "debugger", "delete", "do", "in", "of", "new", "return", "then", "this", "@", "throw", "when", "until", "extends"]));
        c = r(c);
        var d = /^('{3}|\"{3}|['\"])/
            , h = /^(\/{3}|\/)/
            , f = r(["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"]);
        function p(e, t) {
            if (e.sol()) {
                null === t.scope.align && (t.scope.align = !1);
                var n = t.scope.offset;
                if (e.eatSpace()) {
                    var r = e.indentation();
                    return r > n && "coffee" == t.scope.type ? "indent" : r < n ? "dedent" : null
                }
                n > 0 && $(e, t)
            }
            if (e.eatSpace())
                return null;
            var c = e.peek();
            if (e.match("####"))
                return e.skipToEnd(),
                    "comment";
            if (e.match("###"))
                return t.tokenize = g,
                    t.tokenize(e, t);
            if ("#" === c)
                return e.skipToEnd(),
                    "comment";
            if (e.match(/^-?[0-9\.]/, !1)) {
                var p = !1;
                if (e.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i) && (p = !0),
                    e.match(/^-?\d+\.\d*/) && (p = !0),
                    e.match(/^-?\.\d+/) && (p = !0),
                    p)
                    return "." == e.peek() && e.backUp(1),
                        "number";
                var Q = !1;
                if (e.match(/^-?0x[0-9a-f]+/i) && (Q = !0),
                    e.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/) && (Q = !0),
                    e.match(/^-?0(?![\dx])/i) && (Q = !0),
                    Q)
                    return "number"
            }
            if (e.match(d))
                return t.tokenize = m(e.current(), !1, "string"),
                    t.tokenize(e, t);
            if (e.match(h)) {
                if ("/" != e.current() || e.match(/^.*\//, !1))
                    return t.tokenize = m(e.current(), !0, "string.special"),
                        t.tokenize(e, t);
                e.backUp(1)
            }
            return e.match(a) || e.match(l) ? "operator" : e.match(o) ? "punctuation" : e.match(f) ? "atom" : e.match(s) || t.prop && e.match(O) ? "property" : e.match(u) ? "keyword" : e.match(O) ? "variable" : (e.next(),
                i)
        }
        function m(e, t, n) {
            return function (i, r) {
                for (; !i.eol();)
                    if (i.eatWhile(/[^'"\/\\]/),
                        i.eat("\\")) {
                        if (i.next(),
                            t && i.eol())
                            return n
                    } else {
                        if (i.match(e))
                            return r.tokenize = p,
                                n;
                        i.eat(/['"\/]/)
                    }
                return t && (r.tokenize = p),
                    n
            }
        }
        function g(e, t) {
            for (; !e.eol();) {
                if (e.eatWhile(/[^#]/),
                    e.match("###")) {
                    t.tokenize = p;
                    break
                }
                e.eatWhile("#")
            }
            return "comment"
        }
        function Q(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "coffee";
            for (var i = 0, r = !1, a = null, o = t.scope; o; o = o.prev)
                if ("coffee" === o.type || "}" == o.type) {
                    i = o.offset + e.indentUnit;
                    break
                }
            "coffee" !== n ? (r = null,
                a = e.column() + e.current().length) : t.scope.align && (t.scope.align = !1),
                t.scope = {
                    offset: i,
                    type: n,
                    prev: t.scope,
                    align: r,
                    alignOffset: a
                }
        }
        function $(e, t) {
            if (t.scope.prev) {
                if ("coffee" === t.scope.type) {
                    for (var n = e.indentation(), i = !1, r = t.scope; r; r = r.prev)
                        if (n === r.offset) {
                            i = !0;
                            break
                        }
                    if (!i)
                        return !0;
                    for (; t.scope.prev && t.scope.offset !== n;)
                        t.scope = t.scope.prev;
                    return !1
                }
                return t.scope = t.scope.prev,
                    !1
            }
        }
        const b = {
            name: "coffeescript",
            startState: function () {
                return {
                    tokenize: p,
                    scope: {
                        offset: 0,
                        type: "coffee",
                        prev: null,
                        align: !1
                    },
                    prop: !1,
                    dedent: 0
                }
            },
            token: function (e, t) {
                var n = null === t.scope.align && t.scope;
                n && e.sol() && (n.align = !1);
                var r = function (e, t) {
                    var n = t.tokenize(e, t)
                        , r = e.current();
                    "return" === r && (t.dedent = !0),
                        (("->" === r || "=>" === r) && e.eol() || "indent" === n) && Q(e, t);
                    var a = "[({".indexOf(r);
                    if (-1 !== a && Q(e, t, "])}".slice(a, a + 1)),
                        c.exec(r) && Q(e, t),
                        "then" == r && $(e, t),
                        "dedent" === n && $(e, t))
                        return i;
                    if (-1 !== (a = "])}".indexOf(r))) {
                        for (; "coffee" == t.scope.type && t.scope.prev;)
                            t.scope = t.scope.prev;
                        t.scope.type == r && (t.scope = t.scope.prev)
                    }
                    return t.dedent && e.eol() && ("coffee" == t.scope.type && t.scope.prev && (t.scope = t.scope.prev),
                        t.dedent = !1),
                        "indent" == n || "dedent" == n ? null : n
                }(e, t);
                return r && "comment" != r && (n && (n.align = !0),
                    t.prop = "punctuation" == r && "." == e.current()),
                    r
            },
            indent: function (e, t) {
                if (e.tokenize != p)
                    return 0;
                var n = e.scope
                    , i = t && "])}".indexOf(t.charAt(0)) > -1;
                if (i)
                    for (; "coffee" == n.type && n.prev;)
                        n = n.prev;
                var r = i && n.type === t.charAt(0);
                return n.align ? n.alignOffset - (r ? 1 : 0) : (r ? n.prev : n).offset
            },
            languageData: {
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    11206: (e, t, n) => {
        n.r(t),
            n.d(t, {
                commonLisp: () => d
            });
        var i, r = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/, a = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/, o = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/, O = /[^\s'`,@()\[\]";]/;
        function s(e) {
            for (var t; t = e.next();)
                if ("\\" == t)
                    e.next();
                else if (!O.test(t)) {
                    e.backUp(1);
                    break
                }
            return e.current()
        }
        function l(e, t) {
            if (e.eatSpace())
                return i = "ws",
                    null;
            if (e.match(o))
                return "number";
            var n;
            if ("\\" == (n = e.next()) && (n = e.next()),
                '"' == n)
                return (t.tokenize = c)(e, t);
            if ("(" == n)
                return i = "open",
                    "bracket";
            if (")" == n)
                return i = "close",
                    "bracket";
            if (";" == n)
                return e.skipToEnd(),
                    i = "ws",
                    "comment";
            if (/['`,@]/.test(n))
                return null;
            if ("|" == n)
                return e.skipTo("|") ? (e.next(),
                    "variableName") : (e.skipToEnd(),
                        "error");
            if ("#" == n)
                return "(" == (n = e.next()) ? (i = "open",
                    "bracket") : /[+\-=\.']/.test(n) || /\d/.test(n) && e.match(/^\d*#/) ? null : "|" == n ? (t.tokenize = u)(e, t) : ":" == n ? (s(e),
                        "meta") : "\\" == n ? (e.next(),
                            s(e),
                            "string.special") : "error";
            var O = s(e);
            return "." == O ? null : (i = "symbol",
                "nil" == O || "t" == O || ":" == O.charAt(0) ? "atom" : "open" == t.lastType && (r.test(O) || a.test(O)) ? "keyword" : "&" == O.charAt(0) ? "variableName.special" : "variableName")
        }
        function c(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ('"' == n && !i) {
                    t.tokenize = l;
                    break
                }
                i = !i && "\\" == n
            }
            return "string"
        }
        function u(e, t) {
            for (var n, r; n = e.next();) {
                if ("#" == n && "|" == r) {
                    t.tokenize = l;
                    break
                }
                r = n
            }
            return i = "ws",
                "comment"
        }
        const d = {
            name: "commonlisp",
            startState: function () {
                return {
                    ctx: {
                        prev: null,
                        start: 0,
                        indentTo: 0
                    },
                    lastType: null,
                    tokenize: l
                }
            },
            token: function (e, t) {
                e.sol() && "number" != typeof t.ctx.indentTo && (t.ctx.indentTo = t.ctx.start + 1),
                    i = null;
                var n = t.tokenize(e, t);
                return "ws" != i && (null == t.ctx.indentTo ? "symbol" == i && a.test(e.current()) ? t.ctx.indentTo = t.ctx.start + e.indentUnit : t.ctx.indentTo = "next" : "next" == t.ctx.indentTo && (t.ctx.indentTo = e.column()),
                    t.lastType = i),
                    "open" == i ? t.ctx = {
                        prev: t.ctx,
                        start: e.column(),
                        indentTo: null
                    } : "close" == i && (t.ctx = t.ctx.prev || t.ctx),
                    n
            },
            indent: function (e) {
                var t = e.ctx.indentTo;
                return "number" == typeof t ? t : e.ctx.start + 1
            },
            languageData: {
                commentTokens: {
                    line: ";;",
                    block: {
                        open: "#|",
                        close: "|#"
                    }
                },
                closeBrackets: {
                    brackets: ["(", "[", "{", '"']
                }
            }
        }
    }
    ,
    35833: (e, t, n) => {
        function i(e, t) {
            return new RegExp((t ? "" : "^") + "(?:" + e.join("|") + ")" + (t ? "$" : "\\b"))
        }
        function r(e, t, n) {
            return n.tokenize.push(e),
                e(t, n)
        }
        n.r(t),
            n.d(t, {
                crystal: () => w
            });
        var a = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/
            , o = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/
            , O = /^(?:\[\][?=]?)/
            , s = /^(?:\.(?:\.{2})?|->|[?:])/
            , l = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/
            , c = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/
            , u = i(["abstract", "alias", "as", "asm", "begin", "break", "case", "class", "def", "do", "else", "elsif", "end", "ensure", "enum", "extend", "for", "fun", "if", "include", "instance_sizeof", "lib", "macro", "module", "next", "of", "out", "pointerof", "private", "protected", "rescue", "return", "require", "select", "sizeof", "struct", "super", "then", "type", "typeof", "uninitialized", "union", "unless", "until", "when", "while", "with", "yield", "__DIR__", "__END_LINE__", "__FILE__", "__LINE__"])
            , d = i(["true", "false", "nil", "self"])
            , h = i(["def", "fun", "macro", "class", "module", "struct", "lib", "enum", "union", "do", "for"])
            , f = i(["if", "unless", "case", "while", "until", "begin", "then"])
            , p = ["end", "else", "elsif", "rescue", "ensure"]
            , m = i(p)
            , g = ["\\)", "\\}", "\\]"]
            , Q = new RegExp("^(?:" + g.join("|") + ")$")
            , $ = {
                def: v,
                fun: v,
                macro: function (e, t) {
                    if (e.eatSpace())
                        return null;
                    var n;
                    if (n = e.match(l)) {
                        if ("def" == n)
                            return "keyword";
                        e.eat(/[?!]/)
                    }
                    return t.tokenize.pop(),
                        "def"
                },
                class: x,
                module: x,
                struct: x,
                lib: x,
                enum: x,
                union: x
            }
            , b = {
                "[": "]",
                "{": "}",
                "(": ")",
                "<": ">"
            };
        function y(e, t) {
            if (e.eatSpace())
                return null;
            if ("\\" != t.lastToken && e.match("{%", !1))
                return r(P("%", "%"), e, t);
            if ("\\" != t.lastToken && e.match("{{", !1))
                return r(P("{", "}"), e, t);
            if ("#" == e.peek())
                return e.skipToEnd(),
                    "comment";
            var n;
            if (e.match(l))
                return e.eat(/[?!]/),
                    n = e.current(),
                    e.eat(":") ? "atom" : "." == t.lastToken ? "property" : u.test(n) ? (h.test(n) ? "fun" == n && t.blocks.indexOf("lib") >= 0 || "def" == n && "abstract" == t.lastToken || (t.blocks.push(n),
                        t.currentIndent += 1) : "operator" != t.lastStyle && t.lastStyle || !f.test(n) ? "end" == n && (t.blocks.pop(),
                            t.currentIndent -= 1) : (t.blocks.push(n),
                                t.currentIndent += 1),
                        $.hasOwnProperty(n) && t.tokenize.push($[n]),
                        "keyword") : d.test(n) ? "atom" : "variable";
            if (e.eat("@"))
                return "[" == e.peek() ? r(S("[", "]", "meta"), e, t) : (e.eat("@"),
                    e.match(l) || e.match(c),
                    "propertyName");
            if (e.match(c))
                return "tag";
            if (e.eat(":"))
                return e.eat('"') ? r(k('"', "atom", !1), e, t) : e.match(l) || e.match(c) || e.match(a) || e.match(o) || e.match(O) ? "atom" : (e.eat(":"),
                    "operator");
            if (e.eat('"'))
                return r(k('"', "string", !0), e, t);
            if ("%" == e.peek()) {
                var i, p = "string", m = !0;
                if (e.match("%r"))
                    p = "string.special",
                        i = e.next();
                else if (e.match("%w"))
                    m = !1,
                        i = e.next();
                else if (e.match("%q"))
                    m = !1,
                        i = e.next();
                else if (i = e.match(/^%([^\w\s=])/))
                    i = i[1];
                else {
                    if (e.match(/^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/))
                        return "meta";
                    if (e.eat("%"))
                        return "operator"
                }
                return b.hasOwnProperty(i) && (i = b[i]),
                    r(k(i, p, m), e, t)
            }
            return (n = e.match(/^<<-('?)([A-Z]\w*)\1/)) ? r(function (e, t) {
                return function (n, i) {
                    if (n.sol() && (n.eatSpace(),
                        n.match(e)))
                        return i.tokenize.pop(),
                            "string";
                    for (var r = !1; n.peek();)
                        if (r)
                            n.next(),
                                r = !1;
                        else {
                            if (n.match("{%", !1))
                                return i.tokenize.push(P("%", "%")),
                                    "string";
                            if (n.match("{{", !1))
                                return i.tokenize.push(P("{", "}")),
                                    "string";
                            if (t && n.match("#{", !1))
                                return i.tokenize.push(S("#{", "}", "meta")),
                                    "string";
                            r = "\\" == n.next() && t
                        }
                    return "string"
                }
            }(n[2], !n[1]), e, t) : e.eat("'") ? (e.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/),
                e.eat("'"),
                "atom") : e.eat("0") ? (e.eat("x") ? e.match(/^[0-9a-fA-F_]+/) : e.eat("o") ? e.match(/^[0-7_]+/) : e.eat("b") && e.match(/^[01_]+/),
                    "number") : e.eat(/^\d/) ? (e.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/),
                        "number") : e.match(a) ? (e.eat("="),
                            "operator") : e.match(o) || e.match(s) ? "operator" : (n = e.match(/[({[]/, !1)) ? r(S(n = n[0], b[n], null), e, t) : e.eat("\\") ? (e.next(),
                                "meta") : (e.next(),
                                    null)
        }
        function S(e, t, n, i) {
            return function (r, a) {
                if (!i && r.match(e))
                    return a.tokenize[a.tokenize.length - 1] = S(e, t, n, !0),
                        a.currentIndent += 1,
                        n;
                var o = y(r, a);
                return r.current() === t && (a.tokenize.pop(),
                    a.currentIndent -= 1,
                    o = n),
                    o
            }
        }
        function P(e, t, n) {
            return function (i, r) {
                return !n && i.match("{" + e) ? (r.currentIndent += 1,
                    r.tokenize[r.tokenize.length - 1] = P(e, t, !0),
                    "meta") : i.match(t + "}") ? (r.currentIndent -= 1,
                        r.tokenize.pop(),
                        "meta") : y(i, r)
            }
        }
        function v(e, t) {
            return e.eatSpace() ? null : (e.match(l) ? e.eat(/[!?]/) : e.match(a) || e.match(o) || e.match(O),
                t.tokenize.pop(),
                "def")
        }
        function x(e, t) {
            return e.eatSpace() ? null : (e.match(c),
                t.tokenize.pop(),
                "def")
        }
        function k(e, t, n) {
            return function (i, r) {
                for (var a = !1; i.peek();)
                    if (a)
                        i.next(),
                            a = !1;
                    else {
                        if (i.match("{%", !1))
                            return r.tokenize.push(P("%", "%")),
                                t;
                        if (i.match("{{", !1))
                            return r.tokenize.push(P("{", "}")),
                                t;
                        if (n && i.match("#{", !1))
                            return r.tokenize.push(S("#{", "}", "meta")),
                                t;
                        var o = i.next();
                        if (o == e)
                            return r.tokenize.pop(),
                                t;
                        a = n && "\\" == o
                    }
                return t
            }
        }
        const w = {
            name: "crystal",
            startState: function () {
                return {
                    tokenize: [y],
                    currentIndent: 0,
                    lastToken: null,
                    lastStyle: null,
                    blocks: []
                }
            },
            token: function (e, t) {
                var n = t.tokenize[t.tokenize.length - 1](e, t)
                    , i = e.current();
                return n && "comment" != n && (t.lastToken = i,
                    t.lastStyle = n),
                    n
            },
            indent: function (e, t, n) {
                return t = t.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, ""),
                    m.test(t) || Q.test(t) ? n.unit * (e.currentIndent - 1) : n.unit * e.currentIndent
            },
            languageData: {
                indentOnInput: i(g.concat(p), !0),
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    39624: (e, t, n) => {
        n.r(t),
            n.d(t, {
                css: () => X,
                gss: () => R,
                keywords: () => k,
                less: () => z,
                mkCSS: () => r,
                sCSS: () => T
            });
        var i = n(27051);
        function r(e) {
            var t, n, r = (e = (0,
                i.A)((0,
                    i.A)({}, w), e)).inline, a = e.tokenHooks, o = e.documentTypes || {}, O = e.mediaTypes || {}, s = e.mediaFeatures || {}, l = e.mediaValueKeywords || {}, c = e.propertyKeywords || {}, u = e.nonStandardPropertyKeywords || {}, d = e.fontProperties || {}, h = e.counterDescriptors || {}, f = e.colorKeywords || {}, p = e.valueKeywords || {}, m = e.allowNested, g = e.lineComment, Q = !0 === e.supportsAtComponent, $ = !1 !== e.highlightNonStandardPropertyKeywords;
            function b(e, n) {
                return t = n,
                    e
            }
            function y(e, t) {
                var n = e.next();
                if (a[n]) {
                    var i = a[n](e, t);
                    if (!1 !== i)
                        return i
                }
                return "@" == n ? (e.eatWhile(/[\w\\\-]/),
                    b("def", e.current())) : "=" == n || ("~" == n || "|" == n) && e.eat("=") ? b(null, "compare") : '"' == n || "'" == n ? (t.tokenize = S(n),
                        t.tokenize(e, t)) : "#" == n ? (e.eatWhile(/[\w\\\-]/),
                            b("atom", "hash")) : "!" == n ? (e.match(/^\s*\w*/),
                                b("keyword", "important")) : /\d/.test(n) || "." == n && e.eat(/\d/) ? (e.eatWhile(/[\w.%]/),
                                    b("number", "unit")) : "-" !== n ? /[,+>*\/]/.test(n) ? b(null, "select-op") : "." == n && e.match(/^-?[_a-z][_a-z0-9-]*/i) ? b("qualifier", "qualifier") : /[:;{}\[\]\(\)]/.test(n) ? b(null, n) : e.match(/^[\w-.]+(?=\()/) ? (/^(url(-prefix)?|domain|regexp)$/i.test(e.current()) && (t.tokenize = P),
                                        b("variableName.function", "variable")) : /[\w\\\-]/.test(n) ? (e.eatWhile(/[\w\\\-]/),
                                            b("property", "word")) : b(null, null) : /[\d.]/.test(e.peek()) ? (e.eatWhile(/[\w.%]/),
                                                b("number", "unit")) : e.match(/^-[\w\\\-]*/) ? (e.eatWhile(/[\w\\\-]/),
                                                    e.match(/^\s*:/, !1) ? b("def", "variable-definition") : b("variableName", "variable")) : e.match(/^\w+-/) ? b("meta", "meta") : void 0
            }
            function S(e) {
                return function (t, n) {
                    for (var i, r = !1; null != (i = t.next());) {
                        if (i == e && !r) {
                            ")" == e && t.backUp(1);
                            break
                        }
                        r = !r && "\\" == i
                    }
                    return (i == e || !r && ")" != e) && (n.tokenize = null),
                        b("string", "string")
                }
            }
            function P(e, t) {
                return e.next(),
                    e.match(/^\s*[\"\')]/, !1) ? t.tokenize = null : t.tokenize = S(")"),
                    b(null, "(")
            }
            function v(e, t, n) {
                this.type = e,
                    this.indent = t,
                    this.prev = n
            }
            function k(e, t, n, i) {
                return e.context = new v(n, t.indentation() + (!1 === i ? 0 : t.indentUnit), e.context),
                    n
            }
            function X(e) {
                return e.context.prev && (e.context = e.context.prev),
                    e.context.type
            }
            function _(e, t, n) {
                return R[n.context.type](e, t, n)
            }
            function T(e, t, n, i) {
                for (var r = i || 1; r > 0; r--)
                    n.context = n.context.prev;
                return _(e, t, n)
            }
            function z(e) {
                var t = e.current().toLowerCase();
                n = p.hasOwnProperty(t) ? "atom" : f.hasOwnProperty(t) ? "keyword" : "variable"
            }
            var R = {
                top: function (e, t, i) {
                    if ("{" == e)
                        return k(i, t, "block");
                    if ("}" == e && i.context.prev)
                        return X(i);
                    if (Q && /@component/i.test(e))
                        return k(i, t, "atComponentBlock");
                    if (/^@(-moz-)?document$/i.test(e))
                        return k(i, t, "documentTypes");
                    if (/^@(media|supports|(-moz-)?document|import)$/i.test(e))
                        return k(i, t, "atBlock");
                    if (/^@(font-face|counter-style)/i.test(e))
                        return i.stateArg = e,
                            "restricted_atBlock_before";
                    if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(e))
                        return "keyframes";
                    if (e && "@" == e.charAt(0))
                        return k(i, t, "at");
                    if ("hash" == e)
                        n = "builtin";
                    else if ("word" == e)
                        n = "tag";
                    else {
                        if ("variable-definition" == e)
                            return "maybeprop";
                        if ("interpolation" == e)
                            return k(i, t, "interpolation");
                        if (":" == e)
                            return "pseudo";
                        if (m && "(" == e)
                            return k(i, t, "parens")
                    }
                    return i.context.type
                },
                block: function (e, t, i) {
                    if ("word" == e) {
                        var r = t.current().toLowerCase();
                        return c.hasOwnProperty(r) ? (n = "property",
                            "maybeprop") : u.hasOwnProperty(r) ? (n = $ ? "string.special" : "property",
                                "maybeprop") : m ? (n = t.match(/^\s*:(?:\s|$)/, !1) ? "property" : "tag",
                                    "block") : (n = "error",
                                        "maybeprop")
                    }
                    return "meta" == e ? "block" : m || "hash" != e && "qualifier" != e ? R.top(e, t, i) : (n = "error",
                        "block")
                },
                maybeprop: function (e, t, n) {
                    return ":" == e ? k(n, t, "prop") : _(e, t, n)
                },
                prop: function (e, t, i) {
                    if (";" == e)
                        return X(i);
                    if ("{" == e && m)
                        return k(i, t, "propBlock");
                    if ("}" == e || "{" == e)
                        return T(e, t, i);
                    if ("(" == e)
                        return k(i, t, "parens");
                    if ("hash" != e || /^#([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(t.current())) {
                        if ("word" == e)
                            z(t);
                        else if ("interpolation" == e)
                            return k(i, t, "interpolation")
                    } else
                        n = "error";
                    return "prop"
                },
                propBlock: function (e, t, i) {
                    return "}" == e ? X(i) : "word" == e ? (n = "property",
                        "maybeprop") : i.context.type
                },
                parens: function (e, t, n) {
                    return "{" == e || "}" == e ? T(e, t, n) : ")" == e ? X(n) : "(" == e ? k(n, t, "parens") : "interpolation" == e ? k(n, t, "interpolation") : ("word" == e && z(t),
                        "parens")
                },
                pseudo: function (e, t, i) {
                    return "meta" == e ? "pseudo" : "word" == e ? (n = "variableName.constant",
                        i.context.type) : _(e, t, i)
                },
                documentTypes: function (e, t, i) {
                    return "word" == e && o.hasOwnProperty(t.current()) ? (n = "tag",
                        i.context.type) : R.atBlock(e, t, i)
                },
                atBlock: function (e, t, i) {
                    if ("(" == e)
                        return k(i, t, "atBlock_parens");
                    if ("}" == e || ";" == e)
                        return T(e, t, i);
                    if ("{" == e)
                        return X(i) && k(i, t, m ? "block" : "top");
                    if ("interpolation" == e)
                        return k(i, t, "interpolation");
                    if ("word" == e) {
                        var r = t.current().toLowerCase();
                        n = "only" == r || "not" == r || "and" == r || "or" == r ? "keyword" : O.hasOwnProperty(r) ? "attribute" : s.hasOwnProperty(r) ? "property" : l.hasOwnProperty(r) ? "keyword" : c.hasOwnProperty(r) ? "property" : u.hasOwnProperty(r) ? $ ? "string.special" : "property" : p.hasOwnProperty(r) ? "atom" : f.hasOwnProperty(r) ? "keyword" : "error"
                    }
                    return i.context.type
                },
                atComponentBlock: function (e, t, i) {
                    return "}" == e ? T(e, t, i) : "{" == e ? X(i) && k(i, t, m ? "block" : "top", !1) : ("word" == e && (n = "error"),
                        i.context.type)
                },
                atBlock_parens: function (e, t, n) {
                    return ")" == e ? X(n) : "{" == e || "}" == e ? T(e, t, n, 2) : R.atBlock(e, t, n)
                },
                restricted_atBlock_before: function (e, t, i) {
                    return "{" == e ? k(i, t, "restricted_atBlock") : "word" == e && "@counter-style" == i.stateArg ? (n = "variable",
                        "restricted_atBlock_before") : _(e, t, i)
                },
                restricted_atBlock: function (e, t, i) {
                    return "}" == e ? (i.stateArg = null,
                        X(i)) : "word" == e ? (n = "@font-face" == i.stateArg && !d.hasOwnProperty(t.current().toLowerCase()) || "@counter-style" == i.stateArg && !h.hasOwnProperty(t.current().toLowerCase()) ? "error" : "property",
                            "maybeprop") : "restricted_atBlock"
                },
                keyframes: function (e, t, i) {
                    return "word" == e ? (n = "variable",
                        "keyframes") : "{" == e ? k(i, t, "top") : _(e, t, i)
                },
                at: function (e, t, i) {
                    return ";" == e ? X(i) : "{" == e || "}" == e ? T(e, t, i) : ("word" == e ? n = "tag" : "hash" == e && (n = "builtin"),
                        "at")
                },
                interpolation: function (e, t, i) {
                    return "}" == e ? X(i) : "{" == e || ";" == e ? T(e, t, i) : ("word" == e ? n = "variable" : "variable" != e && "(" != e && ")" != e && (n = "error"),
                        "interpolation")
                }
            };
            return {
                name: e.name,
                startState: function () {
                    return {
                        tokenize: null,
                        state: r ? "block" : "top",
                        stateArg: null,
                        context: new v(r ? "block" : "top", 0, null)
                    }
                },
                token: function (e, i) {
                    if (!i.tokenize && e.eatSpace())
                        return null;
                    var r = (i.tokenize || y)(e, i);
                    return r && "object" == typeof r && (t = r[1],
                        r = r[0]),
                        n = r,
                        "comment" != t && (i.state = R[i.state](t, e, i)),
                        n
                },
                indent: function (e, t, n) {
                    var i = e.context
                        , r = t && t.charAt(0)
                        , a = i.indent;
                    return "prop" != i.type || "}" != r && ")" != r || (i = i.prev),
                        i.prev && ("}" != r || "block" != i.type && "top" != i.type && "interpolation" != i.type && "restricted_atBlock" != i.type ? (")" != r || "parens" != i.type && "atBlock_parens" != i.type) && ("{" != r || "at" != i.type && "atBlock" != i.type) || (a = Math.max(0, i.indent - n.unit)) : a = (i = i.prev).indent),
                        a
                },
                languageData: {
                    indentOnInput: /^\s*\}$/,
                    commentTokens: {
                        line: g,
                        block: {
                            open: "/*",
                            close: "*/"
                        }
                    },
                    autocomplete: x
                }
            }
        }
        function a(e) {
            for (var t = {}, n = 0; n < e.length; ++n)
                t[e[n].toLowerCase()] = !0;
            return t
        }
        var o = ["domain", "regexp", "url", "url-prefix"]
            , O = a(o)
            , s = ["all", "aural", "braille", "handheld", "print", "projection", "screen", "tty", "tv", "embossed"]
            , l = a(s)
            , c = ["width", "min-width", "max-width", "height", "min-height", "max-height", "device-width", "min-device-width", "max-device-width", "device-height", "min-device-height", "max-device-height", "aspect-ratio", "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio", "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color", "max-color", "color-index", "min-color-index", "max-color-index", "monochrome", "min-monochrome", "max-monochrome", "resolution", "min-resolution", "max-resolution", "scan", "grid", "orientation", "device-pixel-ratio", "min-device-pixel-ratio", "max-device-pixel-ratio", "pointer", "any-pointer", "hover", "any-hover", "prefers-color-scheme", "dynamic-range", "video-dynamic-range"]
            , u = a(c)
            , d = ["landscape", "portrait", "none", "coarse", "fine", "on-demand", "hover", "interlace", "progressive", "dark", "light", "standard", "high"]
            , h = a(d)
            , f = ["align-content", "align-items", "align-self", "alignment-adjust", "alignment-baseline", "all", "anchor-point", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timing-function", "appearance", "azimuth", "backdrop-filter", "backface-visibility", "background", "background-attachment", "background-blend-mode", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-position-x", "background-position-y", "background-repeat", "background-size", "baseline-shift", "binding", "bleed", "block-size", "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target", "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "caret-color", "clear", "clip", "color", "color-profile", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "contain", "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after", "cue-before", "cursor", "direction", "display", "dominant-baseline", "drop-initial-after-adjust", "drop-initial-after-align", "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size", "drop-initial-value", "elevation", "empty-cells", "fit", "fit-content", "fit-position", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into", "font", "font-family", "font-feature-settings", "font-kerning", "font-language-override", "font-optical-sizing", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-variation-settings", "font-weight", "gap", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-gap", "grid-column-start", "grid-gap", "grid-row", "grid-row-end", "grid-row-gap", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon", "image-orientation", "image-rendering", "image-resolution", "inline-box-align", "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline", "inset-inline-end", "inset-inline-start", "isolation", "justify-content", "justify-items", "justify-self", "left", "letter-spacing", "line-break", "line-height", "line-height-step", "line-stacking", "line-stacking-ruby", "line-stacking-shift", "line-stacking-strategy", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "marks", "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed", "marquee-style", "mask-clip", "mask-composite", "mask-image", "mask-mode", "mask-origin", "mask-position", "mask-repeat", "mask-size", "mask-type", "max-block-size", "max-height", "max-inline-size", "max-width", "min-block-size", "min-height", "min-inline-size", "min-width", "mix-blend-mode", "move-to", "nav-down", "nav-index", "nav-left", "nav-right", "nav-up", "object-fit", "object-position", "offset", "offset-anchor", "offset-distance", "offset-path", "offset-position", "offset-rotate", "opacity", "order", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-style", "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "page", "page-break-after", "page-break-before", "page-break-inside", "page-policy", "pause", "pause-after", "pause-before", "perspective", "perspective-origin", "pitch", "pitch-range", "place-content", "place-items", "place-self", "play-during", "position", "presentation-level", "punctuation-trim", "quotes", "region-break-after", "region-break-before", "region-break-inside", "region-fragment", "rendering-intent", "resize", "rest", "rest-after", "rest-before", "richness", "right", "rotate", "rotation", "rotation-point", "row-gap", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span", "scale", "scroll-behavior", "scroll-margin", "scroll-margin-block", "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom", "scroll-margin-inline", "scroll-margin-inline-end", "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right", "scroll-margin-top", "scroll-padding", "scroll-padding-block", "scroll-padding-block-end", "scroll-padding-block-start", "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end", "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right", "scroll-padding-top", "scroll-snap-align", "scroll-snap-type", "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside", "size", "speak", "speak-as", "speak-header", "speak-numeral", "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size", "table-layout", "target", "target-name", "target-new", "target-position", "text-align", "text-align-last", "text-combine-upright", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-skip-ink", "text-decoration-style", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-height", "text-indent", "text-justify", "text-orientation", "text-outline", "text-overflow", "text-rendering", "text-shadow", "text-size-adjust", "text-space-collapse", "text-transform", "text-underline-position", "text-wrap", "top", "touch-action", "transform", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "translate", "unicode-bidi", "user-select", "vertical-align", "visibility", "voice-balance", "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate", "voice-stress", "voice-volume", "volume", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "writing-mode", "z-index", "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color", "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events", "color-interpolation", "color-interpolation-filters", "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering", "marker", "marker-end", "marker-mid", "marker-start", "paint-order", "shape-rendering", "stroke", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering", "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal", "glyph-orientation-vertical", "text-anchor", "writing-mode"]
            , p = a(f)
            , m = ["accent-color", "aspect-ratio", "border-block", "border-block-color", "border-block-end", "border-block-end-color", "border-block-end-style", "border-block-end-width", "border-block-start", "border-block-start-color", "border-block-start-style", "border-block-start-width", "border-block-style", "border-block-width", "border-inline", "border-inline-color", "border-inline-end", "border-inline-end-color", "border-inline-end-style", "border-inline-end-width", "border-inline-start", "border-inline-start-color", "border-inline-start-style", "border-inline-start-width", "border-inline-style", "border-inline-width", "content-visibility", "margin-block", "margin-block-end", "margin-block-start", "margin-inline", "margin-inline-end", "margin-inline-start", "overflow-anchor", "overscroll-behavior", "padding-block", "padding-block-end", "padding-block-start", "padding-inline", "padding-inline-end", "padding-inline-start", "scroll-snap-stop", "scrollbar-3d-light-color", "scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color", "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color", "scrollbar-track-color", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "shape-inside", "zoom"]
            , g = a(m)
            , Q = ["font-display", "font-family", "src", "unicode-range", "font-variant", "font-feature-settings", "font-stretch", "font-weight", "font-style"]
            , $ = a(Q)
            , b = a(["additive-symbols", "fallback", "negative", "pad", "prefix", "range", "speak-as", "suffix", "symbols", "system"])
            , y = ["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"]
            , S = a(y)
            , P = ["above", "absolute", "activeborder", "additive", "activecaption", "afar", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "amharic", "amharic-abegede", "antialiased", "appworkspace", "arabic-indic", "armenian", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column", "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below", "bidi-override", "binary", "bengali", "blink", "block", "block-axis", "blur", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "brightness", "bullets", "button", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch", "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse", "compact", "condensed", "conic-gradient", "contain", "content", "contents", "content-box", "context-menu", "continuous", "contrast", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "cubic-bezier", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in", "destination-out", "destination-over", "devanagari", "difference", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "drop-shadow", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede", "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er", "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er", "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et", "ethiopic-halehame-gez", "ethiopic-halehame-om-et", "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et", "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig", "ethiopic-numeric", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from", "geometricPrecision", "georgian", "grayscale", "graytext", "grid", "groove", "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hard-light", "hebrew", "help", "hidden", "hide", "higher", "highlight", "highlighttext", "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "hue", "hue-rotate", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "japanese-formal", "japanese-informal", "justify", "kannada", "katakana", "katakana-iroha", "keep-all", "khmer", "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal", "landscape", "lao", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian", "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lower-roman", "lowercase", "ltr", "luminosity", "malayalam", "manipulation", "match", "matrix", "matrix3d", "media-play-button", "media-slider", "media-sliderthumb", "media-volume-slider", "media-volume-sliderthumb", "medium", "menu", "menulist", "menulist-button", "menutext", "message-box", "middle", "min-intrinsic", "mix", "mongolian", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "myanmar", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "persian", "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeating-conic-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturate", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "sepia", "serif", "show", "sidama", "simp-chinese-formal", "simp-chinese-informal", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "somali", "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "square-button", "start", "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks", "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "tamil", "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er", "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top", "trad-chinese-formal", "trad-chinese-informal", "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal", "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"]
            , v = a(P)
            , x = o.concat(s).concat(c).concat(d).concat(f).concat(m).concat(y).concat(P);
        const k = {
            properties: f,
            colors: y,
            fonts: Q,
            values: P,
            all: x
        }
            , w = {
                documentTypes: O,
                mediaTypes: l,
                mediaFeatures: u,
                mediaValueKeywords: h,
                propertyKeywords: p,
                nonStandardPropertyKeywords: g,
                fontProperties: $,
                counterDescriptors: b,
                colorKeywords: S,
                valueKeywords: v,
                tokenHooks: {
                    "/": function (e, t) {
                        return !!e.eat("*") && (t.tokenize = _,
                            _(e, t))
                    }
                }
            }
            , X = r({
                name: "css"
            });
        function _(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (i && "/" == n) {
                    t.tokenize = null;
                    break
                }
                i = "*" == n
            }
            return ["comment", "comment"]
        }
        const T = r({
            name: "scss",
            mediaTypes: l,
            mediaFeatures: u,
            mediaValueKeywords: h,
            propertyKeywords: p,
            nonStandardPropertyKeywords: g,
            colorKeywords: S,
            valueKeywords: v,
            fontProperties: $,
            allowNested: !0,
            lineComment: "//",
            tokenHooks: {
                "/": function (e, t) {
                    return e.eat("/") ? (e.skipToEnd(),
                        ["comment", "comment"]) : e.eat("*") ? (t.tokenize = _,
                            _(e, t)) : ["operator", "operator"]
                },
                ":": function (e) {
                    return !!e.match(/^\s*\{/, !1) && [null, null]
                },
                $: function (e) {
                    return e.match(/^[\w-]+/),
                        e.match(/^\s*:/, !1) ? ["def", "variable-definition"] : ["variableName.special", "variable"]
                },
                "#": function (e) {
                    return !!e.eat("{") && [null, "interpolation"]
                }
            }
        })
            , z = r({
                name: "less",
                mediaTypes: l,
                mediaFeatures: u,
                mediaValueKeywords: h,
                propertyKeywords: p,
                nonStandardPropertyKeywords: g,
                colorKeywords: S,
                valueKeywords: v,
                fontProperties: $,
                allowNested: !0,
                lineComment: "//",
                tokenHooks: {
                    "/": function (e, t) {
                        return e.eat("/") ? (e.skipToEnd(),
                            ["comment", "comment"]) : e.eat("*") ? (t.tokenize = _,
                                _(e, t)) : ["operator", "operator"]
                    },
                    "@": function (e) {
                        return e.eat("{") ? [null, "interpolation"] : !e.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, !1) && (e.eatWhile(/[\w\\\-]/),
                            e.match(/^\s*:/, !1) ? ["def", "variable-definition"] : ["variableName", "variable"])
                    },
                    "&": function () {
                        return ["atom", "atom"]
                    }
                }
            })
            , R = r({
                name: "gss",
                documentTypes: O,
                mediaTypes: l,
                mediaFeatures: u,
                propertyKeywords: p,
                nonStandardPropertyKeywords: g,
                fontProperties: $,
                counterDescriptors: b,
                colorKeywords: S,
                valueKeywords: v,
                supportsAtComponent: !0,
                tokenHooks: {
                    "/": function (e, t) {
                        return !!e.eat("*") && (t.tokenize = _,
                            _(e, t))
                    }
                }
            })
    }
    ,
    43840: (e, t, n) => {
        n.r(t),
            n.d(t, {
                cypher: () => h
            });
        var i, r = function (e) {
            return new RegExp("^(?:" + e.join("|") + ")$", "i")
        }, a = function (e) {
            i = null;
            var t = e.next();
            if ('"' === t)
                return e.match(/^.*?"/),
                    "string";
            if ("'" === t)
                return e.match(/^.*?'/),
                    "string";
            if (/[{}\(\),\.;\[\]]/.test(t))
                return i = t,
                    "punctuation";
            if ("/" === t && e.eat("/"))
                return e.skipToEnd(),
                    "comment";
            if (d.test(t))
                return e.eatWhile(d),
                    null;
            if (e.eatWhile(/[_\w\d]/),
                e.eat(":"))
                return e.eatWhile(/[\w\d_\-]/),
                    "atom";
            var n = e.current();
            return s.test(n) ? "builtin" : l.test(n) ? "def" : c.test(n) || u.test(n) ? "keyword" : "variable"
        }, o = function (e, t, n) {
            return e.context = {
                prev: e.context,
                indent: e.indent,
                col: n,
                type: t
            }
        }, O = function (e) {
            return e.indent = e.context.indent,
                e.context = e.context.prev
        }, s = r(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]), l = r(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]), c = r(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]), u = r(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]), d = /[*+\-<>=&|~%^]/;
        const h = {
            name: "cypher",
            startState: function () {
                return {
                    tokenize: a,
                    context: null,
                    indent: 0,
                    col: 0
                }
            },
            token: function (e, t) {
                if (e.sol() && (t.context && null == t.context.align && (t.context.align = !1),
                    t.indent = e.indentation()),
                    e.eatSpace())
                    return null;
                var n = t.tokenize(e, t);
                if ("comment" !== n && t.context && null == t.context.align && "pattern" !== t.context.type && (t.context.align = !0),
                    "(" === i)
                    o(t, ")", e.column());
                else if ("[" === i)
                    o(t, "]", e.column());
                else if ("{" === i)
                    o(t, "}", e.column());
                else if (/[\]\}\)]/.test(i)) {
                    for (; t.context && "pattern" === t.context.type;)
                        O(t);
                    t.context && i === t.context.type && O(t)
                } else
                    "." === i && t.context && "pattern" === t.context.type ? O(t) : /atom|string|variable/.test(n) && t.context && (/[\}\]]/.test(t.context.type) ? o(t, "pattern", e.column()) : "pattern" !== t.context.type || t.context.align || (t.context.align = !0,
                        t.context.col = e.column()));
                return n
            },
            indent: function (e, t, n) {
                var i = t && t.charAt(0)
                    , r = e.context;
                if (/[\]\}]/.test(i))
                    for (; r && "pattern" === r.type;)
                        r = r.prev;
                var a = r && i === r.type;
                return r ? "keywords" === r.type ? null : r.align ? r.col + (a ? 0 : 1) : r.indent + (a ? 0 : n.unit) : 0
            }
        }
    }
    ,
    41191: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                d: () => y
            });
        var r = "body catch class do else enum for foreach foreach_reverse if in interface mixin out scope struct switch try union unittest version while with";
        const a = {
            keywords: i("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue debug default delegate delete deprecated export extern final finally function goto immutable import inout invariant is lazy macro module new nothrow override package pragma private protected public pure ref return shared short static super synchronized template this throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " + r),
            blockKeywords: i(r),
            builtin: i("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
            atoms: i("exit failure success true false null"),
            hooks: {
                "@": function (e, t) {
                    return e.eatWhile(/[\w\$_]/),
                        "meta"
                }
            }
        };
        var o, O = a.statementIndentUnit, s = a.keywords, l = a.builtin, c = a.blockKeywords, u = a.atoms, d = a.hooks, h = a.multiLineStrings, f = /[+\-*&%=<>!?|\/]/;
        function p(e, t) {
            var n, i = e.next();
            if (d[i]) {
                var r = d[i](e, t);
                if (!1 !== r)
                    return r
            }
            if ('"' == i || "'" == i || "`" == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "\\" == i
                        }
                        return (a || !r && !h) && (t.tokenize = null),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[\[\]{}\(\),;\:\.]/.test(i))
                return o = i,
                    null;
            if (/\d/.test(i))
                return e.eatWhile(/[\w\.]/),
                    "number";
            if ("/" == i) {
                if (e.eat("+"))
                    return t.tokenize = g,
                        g(e, t);
                if (e.eat("*"))
                    return t.tokenize = m,
                        m(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment"
            }
            if (f.test(i))
                return e.eatWhile(f),
                    "operator";
            e.eatWhile(/[\w\$_\xa1-\uffff]/);
            var a = e.current();
            return s.propertyIsEnumerable(a) ? (c.propertyIsEnumerable(a) && (o = "newstatement"),
                "keyword") : l.propertyIsEnumerable(a) ? (c.propertyIsEnumerable(a) && (o = "newstatement"),
                    "builtin") : u.propertyIsEnumerable(a) ? "atom" : "variable"
        }
        function m(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = null;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function g(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = null;
                    break
                }
                i = "+" == n
            }
            return "comment"
        }
        function Q(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        function $(e, t, n) {
            var i = e.indented;
            return e.context && "statement" == e.context.type && (i = e.context.indented),
                e.context = new Q(i, t, n, null, e.context)
        }
        function b(e) {
            var t = e.context.type;
            return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                e.context = e.context.prev
        }
        const y = {
            name: "d",
            startState: function (e) {
                return {
                    tokenize: null,
                    context: new Q(-e, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0),
                    e.eatSpace())
                    return null;
                o = null;
                var i = (t.tokenize || p)(e, t);
                if ("comment" == i || "meta" == i)
                    return i;
                if (null == n.align && (n.align = !0),
                    ";" != o && ":" != o && "," != o || "statement" != n.type)
                    if ("{" == o)
                        $(t, e.column(), "}");
                    else if ("[" == o)
                        $(t, e.column(), "]");
                    else if ("(" == o)
                        $(t, e.column(), ")");
                    else if ("}" == o) {
                        for (; "statement" == n.type;)
                            n = b(t);
                        for ("}" == n.type && (n = b(t)); "statement" == n.type;)
                            n = b(t)
                    } else
                        o == n.type ? b(t) : (("}" == n.type || "top" == n.type) && ";" != o || "statement" == n.type && "newstatement" == o) && $(t, e.column(), "statement");
                else
                    b(t);
                return t.startOfLine = !1,
                    i
            },
            indent: function (e, t, n) {
                if (e.tokenize != p && null != e.tokenize)
                    return null;
                var i = e.context
                    , r = t && t.charAt(0);
                "statement" == i.type && "}" == r && (i = i.prev);
                var a = r == i.type;
                return "statement" == i.type ? i.indented + ("{" == r ? 0 : O || n.unit) : i.align ? i.column + (a ? 0 : 1) : i.indented + (a ? 0 : n.unit)
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        }
    }
    ,
    63480: (e, t, n) => {
        n.r(t),
            n.d(t, {
                diff: () => r
            });
        var i = {
            "+": "inserted",
            "-": "deleted",
            "@": "meta"
        };
        const r = {
            name: "diff",
            token: function (e) {
                var t = e.string.search(/[\t ]+?$/);
                if (!e.sol() || 0 === t)
                    return e.skipToEnd(),
                        ("error " + (i[e.string.charAt(0)] || "")).replace(/ $/, "");
                var n = i[e.peek()] || e.skipToEnd();
                return -1 === t ? e.skipToEnd() : e.pos = t,
                    n
            }
        }
    }
    ,
    71081: (e, t, n) => {
        n.r(t),
            n.d(t, {
                dockerFile: () => h
            });
        var i = n(44649)
            , r = "from"
            , a = new RegExp("^(\\s*)\\b(" + r + ")\\b", "i")
            , o = ["run", "cmd", "entrypoint", "shell"]
            , O = new RegExp("^(\\s*)(" + o.join("|") + ")(\\s+\\[)", "i")
            , s = "expose"
            , l = new RegExp("^(\\s*)(" + s + ")(\\s+)", "i")
            , c = "(" + [r, s].concat(o).concat(["arg", "from", "maintainer", "label", "env", "add", "copy", "volume", "user", "workdir", "onbuild", "stopsignal", "healthcheck", "shell"]).join("|") + ")"
            , u = new RegExp("^(\\s*)" + c + "(\\s*)(#.*)?$", "i")
            , d = new RegExp("^(\\s*)" + c + "(\\s+)", "i");
        const h = (0,
            i.I)({
                start: [{
                    regex: /^\s*#.*$/,
                    sol: !0,
                    token: "comment"
                }, {
                    regex: a,
                    token: [null, "keyword"],
                    sol: !0,
                    next: "from"
                }, {
                    regex: u,
                    token: [null, "keyword", null, "error"],
                    sol: !0
                }, {
                    regex: O,
                    token: [null, "keyword", null],
                    sol: !0,
                    next: "array"
                }, {
                    regex: l,
                    token: [null, "keyword", null],
                    sol: !0,
                    next: "expose"
                }, {
                    regex: d,
                    token: [null, "keyword", null],
                    sol: !0,
                    next: "arguments"
                }, {
                    regex: /./,
                    token: null
                }],
                from: [{
                    regex: /\s*$/,
                    token: null,
                    next: "start"
                }, {
                    regex: /(\s*)(#.*)$/,
                    token: [null, "error"],
                    next: "start"
                }, {
                    regex: /(\s*\S+\s+)(as)/i,
                    token: [null, "keyword"],
                    next: "start"
                }, {
                    token: null,
                    next: "start"
                }],
                single: [{
                    regex: /(?:[^\\']|\\.)/,
                    token: "string"
                }, {
                    regex: /'/,
                    token: "string",
                    pop: !0
                }],
                double: [{
                    regex: /(?:[^\\"]|\\.)/,
                    token: "string"
                }, {
                    regex: /"/,
                    token: "string",
                    pop: !0
                }],
                array: [{
                    regex: /\]/,
                    token: null,
                    next: "start"
                }, {
                    regex: /"(?:[^\\"]|\\.)*"?/,
                    token: "string"
                }],
                expose: [{
                    regex: /\d+$/,
                    token: "number",
                    next: "start"
                }, {
                    regex: /[^\d]+$/,
                    token: null,
                    next: "start"
                }, {
                    regex: /\d+/,
                    token: "number"
                }, {
                    regex: /[^\d]+/,
                    token: null
                }, {
                    token: null,
                    next: "start"
                }],
                arguments: [{
                    regex: /^\s*#.*$/,
                    sol: !0,
                    token: "comment"
                }, {
                    regex: /"(?:[^\\"]|\\.)*"?$/,
                    token: "string",
                    next: "start"
                }, {
                    regex: /"/,
                    token: "string",
                    push: "double"
                }, {
                    regex: /'(?:[^\\']|\\.)*'?$/,
                    token: "string",
                    next: "start"
                }, {
                    regex: /'/,
                    token: "string",
                    push: "single"
                }, {
                    regex: /[^#"']+[\\`]$/,
                    token: null
                }, {
                    regex: /[^#"']+$/,
                    token: null,
                    next: "start"
                }, {
                    regex: /[^#"']+/,
                    token: null
                }, {
                    token: null,
                    next: "start"
                }],
                languageData: {
                    commentTokens: {
                        line: "#"
                    }
                }
            })
    }
    ,
    66687: (e, t, n) => {
        var i;
        function r(e, t) {
            return i = t,
                e
        }
        function a(e, t) {
            var n, i, O, s = e.next();
            if ("<" != s || !e.eat("!")) {
                if ("<" == s && e.eat("?"))
                    return t.tokenize = (i = "meta",
                        O = "?>",
                        function (e, t) {
                            for (; !e.eol();) {
                                if (e.match(O)) {
                                    t.tokenize = a;
                                    break
                                }
                                e.next()
                            }
                            return i
                        }
                    ),
                        r("meta", s);
                if ("#" == s && e.eatWhile(/[\w]/))
                    return r("atom", "tag");
                if ("|" == s)
                    return r("keyword", "separator");
                if (s.match(/[\(\)\[\]\-\.,\+\?>]/))
                    return r(null, s);
                if (s.match(/[\[\]]/))
                    return r("rule", s);
                if ('"' == s || "'" == s)
                    return t.tokenize = (n = s,
                        function (e, t) {
                            for (var i, o = !1; null != (i = e.next());) {
                                if (i == n && !o) {
                                    t.tokenize = a;
                                    break
                                }
                                o = !o && "\\" == i
                            }
                            return r("string", "tag")
                        }
                    ),
                        t.tokenize(e, t);
                if (e.eatWhile(/[a-zA-Z\?\+\d]/)) {
                    var l = e.current();
                    return null !== l.substr(l.length - 1, l.length).match(/\?|\+/) && e.backUp(1),
                        r("tag", "tag")
                }
                return "%" == s || "*" == s ? r("number", "number") : (e.eatWhile(/[\w\\\-_%.{,]/),
                    r(null, null))
            }
            return e.eatWhile(/[\-]/) ? (t.tokenize = o,
                o(e, t)) : e.eatWhile(/[\w]/) ? r("keyword", "doindent") : void 0
        }
        function o(e, t) {
            for (var n, i = 0; null != (n = e.next());) {
                if (i >= 2 && ">" == n) {
                    t.tokenize = a;
                    break
                }
                i = "-" == n ? i + 1 : 0
            }
            return r("comment", "comment")
        }
        n.r(t),
            n.d(t, {
                dtd: () => O
            });
        const O = {
            name: "dtd",
            startState: function () {
                return {
                    tokenize: a,
                    baseIndent: 0,
                    stack: []
                }
            },
            token: function (e, t) {
                if (e.eatSpace())
                    return null;
                var n = t.tokenize(e, t)
                    , r = t.stack[t.stack.length - 1];
                return "[" == e.current() || "doindent" === i || "[" == i ? t.stack.push("rule") : "endtag" === i ? t.stack[t.stack.length - 1] = "endtag" : "]" == e.current() || "]" == i || ">" == i && "rule" == r ? t.stack.pop() : "[" == i && t.stack.push("["),
                    n
            },
            indent: function (e, t, n) {
                var r = e.stack.length;
                return "]" === t.charAt(0) ? r-- : ">" === t.substr(t.length - 1, t.length) && ("<" === t.substr(0, 1) || "doindent" == i && t.length > 1 || ("doindent" == i ? r-- : ">" == i && t.length > 1 || "tag" == i && ">" !== t || ("tag" == i && "rule" == e.stack[e.stack.length - 1] ? r-- : "tag" == i ? r++ : ">" === t && "rule" == e.stack[e.stack.length - 1] && ">" === i ? r-- : ">" === t && "rule" == e.stack[e.stack.length - 1] || ("<" !== t.substr(0, 1) && ">" === t.substr(0, 1) ? r -= 1 : ">" === t || (r -= 1)))),
                    null != i && "]" != i || r--),
                    e.baseIndent + r * n.unit
            },
            languageData: {
                indentOnInput: /^\s*[\]>]$/
            }
        }
    }
    ,
    71257: (e, t, n) => {
        function i(e, t) {
            for (var n = 0; n < e.length; n++)
                t(e[n], n)
        }
        function r(e, t) {
            for (var n = 0; n < e.length; n++)
                if (t(e[n], n))
                    return !0;
            return !1
        }
        n.r(t),
            n.d(t, {
                dylan: () => Q
            });
        var a = {
            unnamedDefinition: ["interface"],
            namedDefinition: ["module", "library", "macro", "C-struct", "C-union", "C-function", "C-callable-wrapper"],
            typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],
            otherParameterizedDefinition: ["method", "function", "C-variable", "C-address"],
            constantSimpleDefinition: ["constant"],
            variableSimpleDefinition: ["variable"],
            otherSimpleDefinition: ["generic", "domain", "C-pointer-type", "table"],
            statement: ["if", "block", "begin", "method", "case", "for", "select", "when", "unless", "until", "while", "iterate", "profiling", "dynamic-bind"],
            separator: ["finally", "exception", "cleanup", "else", "elseif", "afterwards"],
            other: ["above", "below", "by", "from", "handler", "in", "instance", "let", "local", "otherwise", "slot", "subclass", "then", "to", "keyed-by", "virtual"],
            signalingCalls: ["signal", "error", "cerror", "break", "check-type", "abort"]
        };
        a.otherDefinition = a.unnamedDefinition.concat(a.namedDefinition).concat(a.otherParameterizedDefinition),
            a.definition = a.typeParameterizedDefinition.concat(a.otherDefinition),
            a.parameterizedDefinition = a.typeParameterizedDefinition.concat(a.otherParameterizedDefinition),
            a.simpleDefinition = a.constantSimpleDefinition.concat(a.variableSimpleDefinition).concat(a.otherSimpleDefinition),
            a.keyword = a.statement.concat(a.separator).concat(a.other);
        var o = "[-_a-zA-Z?!*@<>$%]+"
            , O = new RegExp("^" + o)
            , s = {
                symbolKeyword: o + ":",
                symbolClass: "<" + o + ">",
                symbolGlobal: "\\*" + o + "\\*",
                symbolConstant: "\\$" + o
            }
            , l = {
                symbolKeyword: "atom",
                symbolClass: "tag",
                symbolGlobal: "variableName.standard",
                symbolConstant: "variableName.constant"
            };
        for (var c in s)
            s.hasOwnProperty(c) && (s[c] = new RegExp("^" + s[c]));
        s.keyword = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];
        var u = {
            keyword: "keyword",
            definition: "def",
            simpleDefinition: "def",
            signalingCalls: "builtin"
        }
            , d = {}
            , h = {};
        function f(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function p(e, t) {
            var n = e.peek();
            if ("'" == n || '"' == n)
                return e.next(),
                    f(e, t, g(n, "string"));
            if ("/" == n) {
                if (e.next(),
                    e.eat("*"))
                    return f(e, t, m);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment";
                e.backUp(1)
            } else if (/[+\-\d\.]/.test(n)) {
                if (e.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) || e.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || e.match(/^[+-]?\d+/))
                    return "number"
            } else {
                if ("#" == n)
                    return e.next(),
                        '"' == (n = e.peek()) ? (e.next(),
                            f(e, t, g('"', "string"))) : "b" == n ? (e.next(),
                                e.eatWhile(/[01]/),
                                "number") : "x" == n ? (e.next(),
                                    e.eatWhile(/[\da-f]/i),
                                    "number") : "o" == n ? (e.next(),
                                        e.eatWhile(/[0-7]/),
                                        "number") : "#" == n ? (e.next(),
                                            "punctuation") : "[" == n || "(" == n ? (e.next(),
                                                "bracket") : e.match(/f|t|all-keys|include|key|next|rest/i) ? "atom" : (e.eatWhile(/[-a-zA-Z]/),
                                                    "error");
                if ("~" == n)
                    return e.next(),
                        "=" == (n = e.peek()) ? (e.next(),
                            "=" == (n = e.peek()) ? (e.next(),
                                "operator") : "operator") : "operator";
                if (":" == n) {
                    if (e.next(),
                        "=" == (n = e.peek()))
                        return e.next(),
                            "operator";
                    if (":" == n)
                        return e.next(),
                            "punctuation"
                } else {
                    if (-1 != "[](){}".indexOf(n))
                        return e.next(),
                            "bracket";
                    if (-1 != ".,".indexOf(n))
                        return e.next(),
                            "punctuation";
                    if (e.match("end"))
                        return "keyword"
                }
            }
            for (var i in s)
                if (s.hasOwnProperty(i)) {
                    var a = s[i];
                    if (a instanceof Array && r(a, (function (t) {
                        return e.match(t)
                    }
                    )) || e.match(a))
                        return l[i]
                }
            return /[+\-*\/^=<>&|]/.test(n) ? (e.next(),
                "operator") : e.match("define") ? "def" : (e.eatWhile(/[\w\-]/),
                    d.hasOwnProperty(e.current()) ? h[e.current()] : e.current().match(O) ? "variable" : (e.next(),
                        "variableName.standard"))
        }
        function m(e, t) {
            for (var n, i = !1, r = !1, a = 0; n = e.next();) {
                if ("/" == n && i) {
                    if (!(a > 0)) {
                        t.tokenize = p;
                        break
                    }
                    a--
                } else
                    "*" == n && r && a++;
                i = "*" == n,
                    r = "/" == n
            }
            return "comment"
        }
        function g(e, t) {
            return function (n, i) {
                for (var r, a = !1, o = !1; null != (r = n.next());) {
                    if (r == e && !a) {
                        o = !0;
                        break
                    }
                    a = !a && "\\" == r
                }
                return !o && a || (i.tokenize = p),
                    t
            }
        }
        i(["keyword", "definition", "simpleDefinition", "signalingCalls"], (function (e) {
            i(a[e], (function (t) {
                d[t] = e,
                    h[t] = u[e]
            }
            ))
        }
        ));
        const Q = {
            name: "dylan",
            startState: function () {
                return {
                    tokenize: p,
                    currentIndent: 0
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            languageData: {
                commentTokens: {
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        }
    }
    ,
    79624: (e, t, n) => {
        n.r(t),
            n.d(t, {
                ebnf: () => s
            });
        var i = 0
            , r = 1
            , a = 0
            , o = 1
            , O = 2;
        const s = {
            name: "ebnf",
            startState: function () {
                return {
                    stringType: null,
                    commentType: null,
                    braced: 0,
                    lhs: !0,
                    localState: null,
                    stack: [],
                    inDefinition: !1
                }
            },
            token: function (e, t) {
                if (e) {
                    switch (0 === t.stack.length && ('"' == e.peek() || "'" == e.peek() ? (t.stringType = e.peek(),
                        e.next(),
                        t.stack.unshift(o)) : e.match("/*") ? (t.stack.unshift(a),
                            t.commentType = i) : e.match("(*") && (t.stack.unshift(a),
                                t.commentType = r)),
                    t.stack[0]) {
                        case o:
                            for (; t.stack[0] === o && !e.eol();)
                                e.peek() === t.stringType ? (e.next(),
                                    t.stack.shift()) : "\\" === e.peek() ? (e.next(),
                                        e.next()) : e.match(/^.[^\\\"\']*/);
                            return t.lhs ? "property" : "string";
                        case a:
                            for (; t.stack[0] === a && !e.eol();)
                                t.commentType === i && e.match("*/") || t.commentType === r && e.match("*)") ? (t.stack.shift(),
                                    t.commentType = null) : e.match(/^.[^\*]*/);
                            return "comment";
                        case O:
                            for (; t.stack[0] === O && !e.eol();)
                                e.match(/^[^\]\\]+/) || e.match(".") || t.stack.shift();
                            return "operator"
                    }
                    var n = e.peek();
                    switch (n) {
                        case "[":
                            return e.next(),
                                t.stack.unshift(O),
                                "bracket";
                        case ":":
                        case "|":
                        case ";":
                            return e.next(),
                                "operator";
                        case "%":
                            if (e.match("%%"))
                                return "header";
                            if (e.match(/[%][A-Za-z]+/))
                                return "keyword";
                            if (e.match(/[%][}]/))
                                return "bracket";
                            break;
                        case "/":
                            if (e.match(/[\/][A-Za-z]+/))
                                return "keyword";
                        case "\\":
                            if (e.match(/[\][a-z]+/))
                                return "string.special";
                        case ".":
                            if (e.match("."))
                                return "atom";
                        case "*":
                        case "-":
                        case "+":
                        case "^":
                            if (e.match(n))
                                return "atom";
                        case "$":
                            if (e.match("$$"))
                                return "builtin";
                            if (e.match(/[$][0-9]+/))
                                return "variableName.special";
                        case "<":
                            if (e.match(/<<[a-zA-Z_]+>>/))
                                return "builtin"
                    }
                    return e.match("//") ? (e.skipToEnd(),
                        "comment") : e.match("return") ? "operator" : e.match(/^[a-zA-Z_][a-zA-Z0-9_]*/) ? e.match(/(?=[\(.])/) ? "variable" : e.match(/(?=[\s\n]*[:=])/) ? "def" : "variableName.special" : -1 != ["[", "]", "(", ")"].indexOf(e.peek()) ? (e.next(),
                            "bracket") : (e.eatSpace() || e.next(),
                                null)
                }
            }
        }
    }
    ,
    5563: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                ecl: () => $
            });
        var r, a = i("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode"), o = i("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait"), O = i("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath"), s = i("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode"), l = i("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when"), c = i("catch class do else finally for if switch try while"), u = i("true false null"), d = {
            "#": function (e, t) {
                return !!t.startOfLine && (e.skipToEnd(),
                    "meta")
            }
        }, h = /[+\-*&%=<>!?|\/]/;
        function f(e, t) {
            var n, i = e.next();
            if (d[i]) {
                var m = d[i](e, t);
                if (!1 !== m)
                    return m
            }
            if ('"' == i || "'" == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "\\" == i
                        }
                        return !a && r || (t.tokenize = f),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[\[\]{}\(\),;\:\.]/.test(i))
                return r = i,
                    null;
            if (/\d/.test(i))
                return e.eatWhile(/[\w\.]/),
                    "number";
            if ("/" == i) {
                if (e.eat("*"))
                    return t.tokenize = p,
                        p(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment"
            }
            if (h.test(i))
                return e.eatWhile(h),
                    "operator";
            e.eatWhile(/[\w\$_]/);
            var g = e.current().toLowerCase();
            if (a.propertyIsEnumerable(g))
                return c.propertyIsEnumerable(g) && (r = "newstatement"),
                    "keyword";
            if (o.propertyIsEnumerable(g))
                return c.propertyIsEnumerable(g) && (r = "newstatement"),
                    "variable";
            if (O.propertyIsEnumerable(g))
                return c.propertyIsEnumerable(g) && (r = "newstatement"),
                    "modifier";
            if (s.propertyIsEnumerable(g))
                return c.propertyIsEnumerable(g) && (r = "newstatement"),
                    "type";
            if (l.propertyIsEnumerable(g))
                return c.propertyIsEnumerable(g) && (r = "newstatement"),
                    "builtin";
            for (var Q = g.length - 1; Q >= 0 && (!isNaN(g[Q]) || "_" == g[Q]);)
                --Q;
            if (Q > 0) {
                var $ = g.substr(0, Q + 1);
                if (s.propertyIsEnumerable($))
                    return c.propertyIsEnumerable($) && (r = "newstatement"),
                        "type"
            }
            return u.propertyIsEnumerable(g) ? "atom" : null
        }
        function p(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = f;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function m(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        function g(e, t, n) {
            return e.context = new m(e.indented, t, n, null, e.context)
        }
        function Q(e) {
            var t = e.context.type;
            return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                e.context = e.context.prev
        }
        const $ = {
            name: "ecl",
            startState: function (e) {
                return {
                    tokenize: null,
                    context: new m(-e, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0),
                    e.eatSpace())
                    return null;
                r = null;
                var i = (t.tokenize || f)(e, t);
                if ("comment" == i || "meta" == i)
                    return i;
                if (null == n.align && (n.align = !0),
                    ";" != r && ":" != r || "statement" != n.type)
                    if ("{" == r)
                        g(t, e.column(), "}");
                    else if ("[" == r)
                        g(t, e.column(), "]");
                    else if ("(" == r)
                        g(t, e.column(), ")");
                    else if ("}" == r) {
                        for (; "statement" == n.type;)
                            n = Q(t);
                        for ("}" == n.type && (n = Q(t)); "statement" == n.type;)
                            n = Q(t)
                    } else
                        r == n.type ? Q(t) : ("}" == n.type || "top" == n.type || "statement" == n.type && "newstatement" == r) && g(t, e.column(), "statement");
                else
                    Q(t);
                return t.startOfLine = !1,
                    i
            },
            indent: function (e, t, n) {
                if (e.tokenize != f && null != e.tokenize)
                    return 0;
                var i = e.context
                    , r = t && t.charAt(0);
                "statement" == i.type && "}" == r && (i = i.prev);
                var a = r == i.type;
                return "statement" == i.type ? i.indented + ("{" == r ? 0 : n.unit) : i.align ? i.column + (a ? 0 : 1) : i.indented + (a ? 0 : n.unit)
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/
            }
        }
    }
    ,
    56344: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = 0, i = e.length; n < i; ++n)
                t[e[n]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                eiffel: () => O
            });
        var r = i(["note", "across", "when", "variant", "until", "unique", "undefine", "then", "strip", "select", "retry", "rescue", "require", "rename", "reference", "redefine", "prefix", "once", "old", "obsolete", "loop", "local", "like", "is", "inspect", "infix", "include", "if", "frozen", "from", "external", "export", "ensure", "end", "elseif", "else", "do", "creation", "create", "check", "alias", "agent", "separate", "invariant", "inherit", "indexing", "feature", "expanded", "deferred", "class", "Void", "True", "Result", "Precursor", "False", "Current", "create", "attached", "detachable", "as", "and", "implies", "not", "or"])
            , a = i([":=", "and then", "and", "or", "<<", ">>"]);
        function o(e, t) {
            if (e.eatSpace())
                return null;
            var n, i, r, a = e.next();
            return '"' == a || "'" == a ? function (e, t, n) {
                return n.tokenize.push(e),
                    e(t, n)
            }((n = a,
                i = "string",
                function (e, t) {
                    for (var a, o = !1; null != (a = e.next());) {
                        if (a == n && (r || !o)) {
                            t.tokenize.pop();
                            break
                        }
                        o = !o && "%" == a
                    }
                    return i
                }
            ), e, t) : "-" == a && e.eat("-") ? (e.skipToEnd(),
                "comment") : ":" == a && e.eat("=") ? "operator" : /[0-9]/.test(a) ? (e.eatWhile(/[xXbBCc0-9\.]/),
                    e.eat(/[\?\!]/),
                    "variable") : /[a-zA-Z_0-9]/.test(a) ? (e.eatWhile(/[a-zA-Z_0-9]/),
                        e.eat(/[\?\!]/),
                        "variable") : /[=+\-\/*^%<>~]/.test(a) ? (e.eatWhile(/[=+\-\/*^%<>~]/),
                            "operator") : null
        }
        const O = {
            name: "eiffel",
            startState: function () {
                return {
                    tokenize: [o]
                }
            },
            token: function (e, t) {
                var n = t.tokenize[t.tokenize.length - 1](e, t);
                if ("variable" == n) {
                    var i = e.current();
                    n = r.propertyIsEnumerable(e.current()) ? "keyword" : a.propertyIsEnumerable(e.current()) ? "operator" : /^[A-Z][A-Z_0-9]*$/g.test(i) ? "tag" : /^0[bB][0-1]+$/g.test(i) || /^0[cC][0-7]+$/g.test(i) || /^0[xX][a-fA-F0-9]+$/g.test(i) || /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(i) || /^[0-9]+$/g.test(i) ? "number" : "variable"
                }
                return n
            },
            languageData: {
                commentTokens: {
                    line: "--"
                }
            }
        }
    }
    ,
    93895: (e, t, n) => {
        function i(e, t, n) {
            return t(n),
                n(e, t)
        }
        n.r(t),
            n.d(t, {
                elm: () => $
            });
        var r = /[a-z]/
            , a = /[A-Z]/
            , o = /[a-zA-Z0-9_]/
            , O = /[0-9]/
            , s = /[0-9A-Fa-f]/
            , l = /[-&*+.\\/<>=?^|:]/
            , c = /[(),[\]{}]/
            , u = /[ \v\f]/;
        function d() {
            return function (e, t) {
                if (e.eatWhile(u))
                    return null;
                var n = e.next();
                if (c.test(n))
                    return "{" === n && e.eat("-") ? i(e, t, h(1)) : "[" === n && e.match("glsl|") ? i(e, t, g) : "builtin";
                if ("'" === n)
                    return i(e, t, m);
                if ('"' === n)
                    return e.eat('"') ? e.eat('"') ? i(e, t, f) : "string" : i(e, t, p);
                if (a.test(n))
                    return e.eatWhile(o),
                        "type";
                if (r.test(n)) {
                    var d = 1 === e.pos;
                    return e.eatWhile(o),
                        d ? "def" : "variable"
                }
                if (O.test(n)) {
                    if ("0" === n) {
                        if (e.eat(/[xX]/))
                            return e.eatWhile(s),
                                "number"
                    } else
                        e.eatWhile(O);
                    return e.eat(".") && e.eatWhile(O),
                        e.eat(/[eE]/) && (e.eat(/[-+]/),
                            e.eatWhile(O)),
                        "number"
                }
                return l.test(n) ? "-" === n && e.eat("-") ? (e.skipToEnd(),
                    "comment") : (e.eatWhile(l),
                        "keyword") : "_" === n ? "keyword" : "error"
            }
        }
        function h(e) {
            return 0 == e ? d() : function (t, n) {
                for (; !t.eol();) {
                    var i = t.next();
                    if ("{" == i && t.eat("-"))
                        ++e;
                    else if ("-" == i && t.eat("}") && 0 === --e)
                        return n(d()),
                            "comment"
                }
                return n(h(e)),
                    "comment"
            }
        }
        function f(e, t) {
            for (; !e.eol();) {
                if ('"' === e.next() && e.eat('"') && e.eat('"'))
                    return t(d()),
                        "string"
            }
            return "string"
        }
        function p(e, t) {
            for (; e.skipTo('\\"');)
                e.next(),
                    e.next();
            return e.skipTo('"') ? (e.next(),
                t(d()),
                "string") : (e.skipToEnd(),
                    t(d()),
                    "error")
        }
        function m(e, t) {
            for (; e.skipTo("\\'");)
                e.next(),
                    e.next();
            return e.skipTo("'") ? (e.next(),
                t(d()),
                "string") : (e.skipToEnd(),
                    t(d()),
                    "error")
        }
        function g(e, t) {
            for (; !e.eol();) {
                if ("|" === e.next() && e.eat("]"))
                    return t(d()),
                        "string"
            }
            return "string"
        }
        var Q = {
            case: 1,
            of: 1,
            as: 1,
            if: 1,
            then: 1,
            else: 1,
            let: 1,
            in: 1,
            type: 1,
            alias: 1,
            module: 1,
            where: 1,
            import: 1,
            exposing: 1,
            port: 1
        };
        const $ = {
            name: "elm",
            startState: function () {
                return {
                    f: d()
                }
            },
            copyState: function (e) {
                return {
                    f: e.f
                }
            },
            token: function (e, t) {
                var n = t.f(e, (function (e) {
                    t.f = e
                }
                ))
                    , i = e.current();
                return Q.hasOwnProperty(i) ? "keyword" : n
            },
            languageData: {
                commentTokens: {
                    line: "--"
                }
            }
        }
    }
    ,
    79448: (e, t, n) => {
        n.r(t),
            n.d(t, {
                erlang: () => R
            });
        var i = ["-type", "-spec", "-export_type", "-opaque"]
            , r = ["after", "begin", "catch", "case", "cond", "end", "fun", "if", "let", "of", "query", "receive", "try", "when"]
            , a = /[\->,;]/
            , o = ["->", ";", ","]
            , O = ["and", "andalso", "band", "bnot", "bor", "bsl", "bsr", "bxor", "div", "not", "or", "orelse", "rem", "xor"]
            , s = /[\+\-\*\/<>=\|:!]/
            , l = ["=", "+", "-", "*", "/", ">", ">=", "<", "=<", "=:=", "==", "=/=", "/=", "||", "<-", "!"]
            , c = /[<\(\[\{]/
            , u = ["<<", "(", "[", "{"]
            , d = /[>\)\]\}]/
            , h = ["}", "]", ")", ">>"]
            , f = ["is_atom", "is_binary", "is_bitstring", "is_boolean", "is_float", "is_function", "is_integer", "is_list", "is_number", "is_pid", "is_port", "is_record", "is_reference", "is_tuple", "atom", "binary", "bitstring", "boolean", "function", "integer", "list", "number", "pid", "port", "record", "reference", "tuple"]
            , p = ["abs", "adler32", "adler32_combine", "alive", "apply", "atom_to_binary", "atom_to_list", "binary_to_atom", "binary_to_existing_atom", "binary_to_list", "binary_to_term", "bit_size", "bitstring_to_list", "byte_size", "check_process_code", "contact_binary", "crc32", "crc32_combine", "date", "decode_packet", "delete_module", "disconnect_node", "element", "erase", "exit", "float", "float_to_list", "garbage_collect", "get", "get_keys", "group_leader", "halt", "hd", "integer_to_list", "internal_bif", "iolist_size", "iolist_to_binary", "is_alive", "is_atom", "is_binary", "is_bitstring", "is_boolean", "is_float", "is_function", "is_integer", "is_list", "is_number", "is_pid", "is_port", "is_process_alive", "is_record", "is_reference", "is_tuple", "length", "link", "list_to_atom", "list_to_binary", "list_to_bitstring", "list_to_existing_atom", "list_to_float", "list_to_integer", "list_to_pid", "list_to_tuple", "load_module", "make_ref", "module_loaded", "monitor_node", "node", "node_link", "node_unlink", "nodes", "notalive", "now", "open_port", "pid_to_list", "port_close", "port_command", "port_connect", "port_control", "pre_loaded", "process_flag", "process_info", "processes", "purge_module", "put", "register", "registered", "round", "self", "setelement", "size", "spawn", "spawn_link", "spawn_monitor", "spawn_opt", "split_binary", "statistics", "term_to_binary", "time", "throw", "tl", "trunc", "tuple_size", "tuple_to_list", "unlink", "unregister", "whereis"]
            , m = /[\w@\xd8-\xde\xc0-\xd6\xdf-\xf6\xf8-\xff]/
            , g = /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;
        function Q(e, t, n) {
            if (1 == e.current().length && t.test(e.current())) {
                for (e.backUp(1); t.test(e.peek());)
                    if (e.next(),
                        P(e.current(), n))
                        return !0;
                e.backUp(e.current().length - 1)
            }
            return !1
        }
        function $(e, t, n) {
            if (1 == e.current().length && t.test(e.current())) {
                for (; t.test(e.peek());)
                    e.next();
                for (; 0 < e.current().length;) {
                    if (P(e.current(), n))
                        return !0;
                    e.backUp(1)
                }
                e.next()
            }
            return !1
        }
        function b(e) {
            return S(e, '"', "\\")
        }
        function y(e) {
            return S(e, "'", "\\")
        }
        function S(e, t, n) {
            for (; !e.eol();) {
                var i = e.next();
                if (i == t)
                    return !0;
                i == n && e.next()
            }
            return !1
        }
        function P(e, t) {
            return -1 < t.indexOf(e)
        }
        function v(e, t, n) {
            switch (function (e, t) {
                "comment" != t.type && "whitespace" != t.type && (e.tokenStack = function (e, t) {
                    var n = e.length - 1;
                    0 < n && "record" === e[n].type && "dot" === t.type ? e.pop() : 0 < n && "group" === e[n].type ? (e.pop(),
                        e.push(t)) : e.push(t);
                    return e
                }(e.tokenStack, t),
                    e.tokenStack = function (e) {
                        if (!e.length)
                            return e;
                        var t = e.length - 1;
                        if ("dot" === e[t].type)
                            return [];
                        if (t > 1 && "fun" === e[t].type && "fun" === e[t - 1].token)
                            return e.slice(0, t - 1);
                        switch (e[t].token) {
                            case "}":
                                return X(e, {
                                    g: ["{"]
                                });
                            case "]":
                                return X(e, {
                                    i: ["["]
                                });
                            case ")":
                                return X(e, {
                                    i: ["("]
                                });
                            case ">>":
                                return X(e, {
                                    i: ["<<"]
                                });
                            case "end":
                                return X(e, {
                                    i: ["begin", "case", "fun", "if", "receive", "try"]
                                });
                            case ",":
                                return X(e, {
                                    e: ["begin", "try", "when", "->", ",", "(", "[", "{", "<<"]
                                });
                            case "->":
                                return X(e, {
                                    r: ["when"],
                                    m: ["try", "if", "case", "receive"]
                                });
                            case ";":
                                return X(e, {
                                    E: ["case", "fun", "if", "receive", "try", "when"]
                                });
                            case "catch":
                                return X(e, {
                                    e: ["try"]
                                });
                            case "of":
                                return X(e, {
                                    e: ["case"]
                                });
                            case "after":
                                return X(e, {
                                    e: ["receive", "try"]
                                });
                            default:
                                return e
                        }
                    }(e.tokenStack))
            }(e, function (e, t) {
                return x(t.current(), t.column(), t.indentation(), e)
            }(n, t)),
            n) {
                case "atom":
                case "boolean":
                    return "atom";
                case "attribute":
                    return "attribute";
                case "builtin":
                    return "builtin";
                case "close_paren":
                case "colon":
                case "dot":
                case "open_paren":
                case "separator":
                default:
                    return null;
                case "comment":
                    return "comment";
                case "error":
                    return "error";
                case "fun":
                    return "meta";
                case "function":
                    return "tag";
                case "guard":
                    return "property";
                case "keyword":
                    return "keyword";
                case "macro":
                    return "macroName";
                case "number":
                    return "number";
                case "operator":
                    return "operator";
                case "record":
                    return "bracket";
                case "string":
                    return "string";
                case "type":
                    return "def";
                case "variable":
                    return "variable"
            }
        }
        function x(e, t, n, i) {
            return {
                token: e,
                column: t,
                indent: n,
                type: i
            }
        }
        function k(e) {
            return x(e, 0, 0, e)
        }
        function w(e, t) {
            var n = e.tokenStack.length
                , i = t || 1;
            return !(n < i) && e.tokenStack[n - i]
        }
        function X(e, t) {
            for (var n in t)
                for (var i = e.length - 1, r = t[n], a = i - 1; -1 < a; a--)
                    if (P(e[a].token, r)) {
                        var o = e.slice(0, a);
                        switch (n) {
                            case "m":
                                return o.concat(e[a]).concat(e[i]);
                            case "r":
                                return o.concat(e[i]);
                            case "i":
                                return o;
                            case "g":
                                return o.concat(k("group"));
                            case "E":
                            case "e":
                                return o.concat(e[a])
                        }
                    }
            return "E" == n ? [] : e
        }
        function _(e, t) {
            var n = e.tokenStack
                , i = T(n, "token", t);
            return !!z(n[i]) && n[i]
        }
        function T(e, t, n) {
            for (var i = e.length - 1; -1 < i; i--)
                if (P(e[i][t], n))
                    return i;
            return !1
        }
        function z(e) {
            return !1 !== e && null != e
        }
        const R = {
            name: "erlang",
            startState: () => ({
                tokenStack: [],
                in_string: !1,
                in_atom: !1
            }),
            token: function (e, t) {
                if (t.in_string)
                    return t.in_string = !b(e),
                        v(t, e, "string");
                if (t.in_atom)
                    return t.in_atom = !y(e),
                        v(t, e, "atom");
                if (e.eatSpace())
                    return v(t, e, "whitespace");
                if (!w(t) && e.match(/-\s*[a-z\xdf-\xf6\xf8-\xff][\w\xd8-\xde\xc0-\xd6\xdf-\xf6\xf8-\xff]*/))
                    return P(e.current(), i) ? v(t, e, "type") : v(t, e, "attribute");
                var n = e.next();
                if ("%" == n)
                    return e.skipToEnd(),
                        v(t, e, "comment");
                if (":" == n)
                    return v(t, e, "colon");
                if ("?" == n)
                    return e.eatSpace(),
                        e.eatWhile(m),
                        v(t, e, "macro");
                if ("#" == n)
                    return e.eatSpace(),
                        e.eatWhile(m),
                        v(t, e, "record");
                if ("$" == n)
                    return "\\" != e.next() || e.match(g) ? v(t, e, "number") : v(t, e, "error");
                if ("." == n)
                    return v(t, e, "dot");
                if ("'" == n) {
                    if (!(t.in_atom = !y(e))) {
                        if (e.match(/\s*\/\s*[0-9]/, !1))
                            return e.match(/\s*\/\s*[0-9]/, !0),
                                v(t, e, "fun");
                        if (e.match(/\s*\(/, !1) || e.match(/\s*:/, !1))
                            return v(t, e, "function")
                    }
                    return v(t, e, "atom")
                }
                if ('"' == n)
                    return t.in_string = !b(e),
                        v(t, e, "string");
                if (/[A-Z_\xd8-\xde\xc0-\xd6]/.test(n))
                    return e.eatWhile(m),
                        v(t, e, "variable");
                if (/[a-z_\xdf-\xf6\xf8-\xff]/.test(n)) {
                    if (e.eatWhile(m),
                        e.match(/\s*\/\s*[0-9]/, !1))
                        return e.match(/\s*\/\s*[0-9]/, !0),
                            v(t, e, "fun");
                    var S = e.current();
                    return P(S, r) ? v(t, e, "keyword") : P(S, O) ? v(t, e, "operator") : e.match(/\s*\(/, !1) ? !P(S, p) || ":" == w(t).token && "erlang" != w(t, 2).token ? P(S, f) ? v(t, e, "guard") : v(t, e, "function") : v(t, e, "builtin") : ":" == function (e) {
                        var t = e.match(/^\s*([^\s%])/, !1);
                        return t ? t[1] : ""
                    }(e) ? v(t, e, "erlang" == S ? "builtin" : "function") : P(S, ["true", "false"]) ? v(t, e, "boolean") : v(t, e, "atom")
                }
                var x = /[0-9]/;
                return x.test(n) ? (e.eatWhile(x),
                    e.eat("#") ? e.eatWhile(/[0-9a-zA-Z]/) || e.backUp(1) : e.eat(".") && (e.eatWhile(x) ? e.eat(/[eE]/) && (e.eat(/[-+]/) ? e.eatWhile(x) || e.backUp(2) : e.eatWhile(x) || e.backUp(1)) : e.backUp(1)),
                    v(t, e, "number")) : Q(e, c, u) ? v(t, e, "open_paren") : Q(e, d, h) ? v(t, e, "close_paren") : $(e, a, o) ? v(t, e, "separator") : $(e, s, l) ? v(t, e, "operator") : v(t, e, null)
            },
            indent: function (e, t, n) {
                var i, r = function (e) {
                    var t = e.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);
                    return z(t) && 0 === t.index ? t[0] : ""
                }(t), a = w(e, 1), o = w(e, 2);
                return e.in_string || e.in_atom ? null : o ? "when" == a.token ? a.column + n.unit : "when" === r && "function" === o.type ? o.indent + n.unit : "(" === r && "fun" === a.token ? a.column + 3 : "catch" === r && (i = _(e, ["try"])) ? i.column : P(r, ["end", "after", "of"]) ? (i = _(e, ["begin", "case", "fun", "if", "receive", "try"])) ? i.column : null : P(r, h) ? (i = _(e, u)) ? i.column : null : P(a.token, [",", "|", "||"]) || P(r, [",", "|", "||"]) ? (i = function (e) {
                    var t = e.tokenStack.slice(0, -1)
                        , n = T(t, "type", ["open_paren"]);
                    return !!z(t[n]) && t[n]
                }(e)) ? i.column + i.token.length : n.unit : "->" == a.token ? P(o.token, ["receive", "case", "if", "try"]) ? o.column + n.unit + n.unit : o.column + n.unit : P(a.token, u) ? a.column + a.token.length : (i = function (e) {
                    var t = e.tokenStack
                        , n = T(t, "type", ["open_paren", "separator", "keyword"])
                        , i = T(t, "type", ["operator"]);
                    return z(n) && z(i) && n < i ? t[n + 1] : !!z(n) && t[n]
                }(e),
                    z(i) ? i.column + n.unit : 0) : 0
            },
            languageData: {
                commentTokens: {
                    line: "%"
                }
            }
        }
    }
    ,
    8204: (e, t, n) => {
        n.r(t),
            n.d(t, {
                factor: () => i
            });
        const i = (0,
            n(44649).I)({
                start: [{
                    regex: /#?!.*/,
                    token: "comment"
                }, {
                    regex: /"""/,
                    token: "string",
                    next: "string3"
                }, {
                    regex: /(STRING:)(\s)/,
                    token: ["keyword", null],
                    next: "string2"
                }, {
                    regex: /\S*?"/,
                    token: "string",
                    next: "string"
                }, {
                    regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/,
                    token: "number"
                }, {
                    regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/,
                    token: ["keyword", null, "def", null, "bracket"],
                    next: "stack"
                }, {
                    regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/,
                    token: ["keyword", null, "def", null, "tag"]
                }, {
                    regex: /USING\:/,
                    token: "keyword",
                    next: "vocabulary"
                }, {
                    regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/,
                    token: ["keyword", null, "tag"]
                }, {
                    regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/,
                    token: ["keyword", null, "def"]
                }, {
                    regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/,
                    token: "keyword"
                }, {
                    regex: /\S+[\)>\.\*\?]+(?=\s|$)/,
                    token: "builtin"
                }, {
                    regex: /[\)><]+\S+(?=\s|$)/,
                    token: "builtin"
                }, {
                    regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/,
                    token: "keyword"
                }, {
                    regex: /\S+/,
                    token: "variable"
                }, {
                    regex: /\s+|./,
                    token: null
                }],
                vocabulary: [{
                    regex: /;/,
                    token: "keyword",
                    next: "start"
                }, {
                    regex: /\S+/,
                    token: "tag"
                }, {
                    regex: /\s+|./,
                    token: null
                }],
                string: [{
                    regex: /(?:[^\\]|\\.)*?"/,
                    token: "string",
                    next: "start"
                }, {
                    regex: /.*/,
                    token: "string"
                }],
                string2: [{
                    regex: /^;/,
                    token: "keyword",
                    next: "start"
                }, {
                    regex: /.*/,
                    token: "string"
                }],
                string3: [{
                    regex: /(?:[^\\]|\\.)*?"""/,
                    token: "string",
                    next: "start"
                }, {
                    regex: /.*/,
                    token: "string"
                }],
                stack: [{
                    regex: /\)/,
                    token: "bracket",
                    next: "start"
                }, {
                    regex: /--/,
                    token: "bracket"
                }, {
                    regex: /\S+/,
                    token: "meta"
                }, {
                    regex: /\s+|./,
                    token: null
                }],
                languageData: {
                    name: "factor",
                    dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
                    commentTokens: {
                        line: "!"
                    }
                }
            })
    }
    ,
    5826: (e, t, n) => {
        n.r(t),
            n.d(t, {
                fcl: () => u
            });
        var i = {
            term: !0,
            method: !0,
            accu: !0,
            rule: !0,
            then: !0,
            is: !0,
            and: !0,
            or: !0,
            if: !0,
            default: !0
        }
            , r = {
                var_input: !0,
                var_output: !0,
                fuzzify: !0,
                defuzzify: !0,
                function_block: !0,
                ruleblock: !0
            }
            , a = {
                end_ruleblock: !0,
                end_defuzzify: !0,
                end_function_block: !0,
                end_fuzzify: !0,
                end_var: !0
            }
            , o = {
                true: !0,
                false: !0,
                nan: !0,
                real: !0,
                min: !0,
                max: !0,
                cog: !0,
                cogs: !0
            }
            , O = /[+\-*&^%:=<>!|\/]/;
        function s(e, t) {
            var n = e.next();
            if (/[\d\.]/.test(n))
                return "." == n ? e.match(/^[0-9]+([eE][\-+]?[0-9]+)?/) : "0" == n ? e.match(/^[xX][0-9a-fA-F]+/) || e.match(/^0[0-7]+/) : e.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/),
                    "number";
            if ("/" == n || "(" == n) {
                if (e.eat("*"))
                    return t.tokenize = l,
                        l(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment"
            }
            if (O.test(n))
                return e.eatWhile(O),
                    "operator";
            e.eatWhile(/[\w\$_\xa1-\uffff]/);
            var s = e.current().toLowerCase();
            return i.propertyIsEnumerable(s) || r.propertyIsEnumerable(s) || a.propertyIsEnumerable(s) ? "keyword" : o.propertyIsEnumerable(s) ? "atom" : "variable"
        }
        function l(e, t) {
            for (var n, i = !1; n = e.next();) {
                if (("/" == n || ")" == n) && i) {
                    t.tokenize = s;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function c(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        const u = {
            name: "fcl",
            startState: function (e) {
                return {
                    tokenize: null,
                    context: new c(-e, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0),
                    e.eatSpace())
                    return null;
                var i = (t.tokenize || s)(e, t);
                if ("comment" == i)
                    return i;
                null == n.align && (n.align = !0);
                var o = e.current().toLowerCase();
                return r.propertyIsEnumerable(o) ? function (e, t, n) {
                    e.context = new c(e.indented, t, n, null, e.context)
                }(t, e.column(), "end_block") : a.propertyIsEnumerable(o) && function (e) {
                    if (e.context.prev)
                        "end_block" == e.context.type && (e.indented = e.context.indented),
                            e.context = e.context.prev
                }(t),
                    t.startOfLine = !1,
                    i
            },
            indent: function (e, t, n) {
                if (e.tokenize != s && null != e.tokenize)
                    return 0;
                var i = e.context
                    , r = a.propertyIsEnumerable(t);
                return i.align ? i.column + (r ? 0 : 1) : i.indented + (r ? 0 : n.unit)
            },
            languageData: {
                commentTokens: {
                    line: "//",
                    block: {
                        open: "(*",
                        close: "*)"
                    }
                }
            }
        }
    }
    ,
    71540: (e, t, n) => {
        function i(e) {
            var t = [];
            return e.split(" ").forEach((function (e) {
                t.push({
                    name: e
                })
            }
            )),
                t
        }
        n.r(t),
            n.d(t, {
                forth: () => O
            });
        var r = i("INVERT AND OR XOR 2* 2/ LSHIFT RSHIFT 0= = 0< < > U< MIN MAX 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP >R R> R@ + - 1+ 1- ABS NEGATE S>D * M* UM* FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2! ALIGN ALIGNED +! ALLOT CHAR [CHAR] [ ] BL FIND EXECUTE IMMEDIATE COUNT LITERAL STATE ; DOES> >BODY EVALUATE SOURCE >IN <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL FILL MOVE . CR EMIT SPACE SPACES TYPE U. .R U.R ACCEPT TRUE FALSE <> U> 0<> 0> NIP TUCK ROLL PICK 2>R 2R@ 2R> WITHIN UNUSED MARKER I J TO COMPILE, [COMPILE] SAVE-INPUT RESTORE-INPUT PAD ERASE 2LITERAL DNEGATE D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS M+ M*/ D. D.R 2ROT DU< CATCH THROW FREE RESIZE ALLOCATE CS-PICK CS-ROLL GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL")
            , a = i("IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE");
        function o(e, t) {
            var n;
            for (n = e.length - 1; n >= 0; n--)
                if (e[n].name === t.toUpperCase())
                    return e[n]
        }
        const O = {
            name: "forth",
            startState: function () {
                return {
                    state: "",
                    base: 10,
                    coreWordList: r,
                    immediateWordList: a,
                    wordList: []
                }
            },
            token: function (e, t) {
                var n;
                if (e.eatSpace())
                    return null;
                if ("" === t.state) {
                    if (e.match(/^(\]|:NONAME)(\s|$)/i))
                        return t.state = " compilation",
                            "builtin";
                    if (n = e.match(/^(\:)\s+(\S+)(\s|$)+/))
                        return t.wordList.push({
                            name: n[2].toUpperCase()
                        }),
                            t.state = " compilation",
                            "def";
                    if (n = e.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i))
                        return t.wordList.push({
                            name: n[2].toUpperCase()
                        }),
                            "def";
                    if (n = e.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/))
                        return "builtin"
                } else {
                    if (e.match(/^(\;|\[)(\s)/))
                        return t.state = "",
                            e.backUp(1),
                            "builtin";
                    if (e.match(/^(\;|\[)($)/))
                        return t.state = "",
                            "builtin";
                    if (e.match(/^(POSTPONE)\s+\S+(\s|$)+/))
                        return "builtin"
                }
                return (n = e.match(/^(\S+)(\s+|$)/)) ? void 0 !== o(t.wordList, n[1]) ? "variable" : "\\" === n[1] ? (e.skipToEnd(),
                    "comment") : void 0 !== o(t.coreWordList, n[1]) ? "builtin" : void 0 !== o(t.immediateWordList, n[1]) ? "keyword" : "(" === n[1] ? (e.eatWhile((function (e) {
                        return ")" !== e
                    }
                    )),
                        e.eat(")"),
                        "comment") : ".(" === n[1] ? (e.eatWhile((function (e) {
                            return ")" !== e
                        }
                        )),
                            e.eat(")"),
                            "string") : 'S"' === n[1] || '."' === n[1] || 'C"' === n[1] ? (e.eatWhile((function (e) {
                                return '"' !== e
                            }
                            )),
                                e.eat('"'),
                                "string") : n[1] - 68719476735 ? "number" : "atom" : void 0
            }
        }
    }
    ,
    81433: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = 0; n < e.length; ++n)
                t[e[n]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                fortran: () => c
            });
        var r = i(["abstract", "accept", "allocatable", "allocate", "array", "assign", "asynchronous", "backspace", "bind", "block", "byte", "call", "case", "class", "close", "common", "contains", "continue", "cycle", "data", "deallocate", "decode", "deferred", "dimension", "do", "elemental", "else", "encode", "end", "endif", "entry", "enumerator", "equivalence", "exit", "external", "extrinsic", "final", "forall", "format", "function", "generic", "go", "goto", "if", "implicit", "import", "include", "inquire", "intent", "interface", "intrinsic", "module", "namelist", "non_intrinsic", "non_overridable", "none", "nopass", "nullify", "open", "optional", "options", "parameter", "pass", "pause", "pointer", "print", "private", "program", "protected", "public", "pure", "read", "recursive", "result", "return", "rewind", "save", "select", "sequence", "stop", "subroutine", "target", "then", "to", "type", "use", "value", "volatile", "where", "while", "write"])
            , a = i(["abort", "abs", "access", "achar", "acos", "adjustl", "adjustr", "aimag", "aint", "alarm", "all", "allocated", "alog", "amax", "amin", "amod", "and", "anint", "any", "asin", "associated", "atan", "besj", "besjn", "besy", "besyn", "bit_size", "btest", "cabs", "ccos", "ceiling", "cexp", "char", "chdir", "chmod", "clog", "cmplx", "command_argument_count", "complex", "conjg", "cos", "cosh", "count", "cpu_time", "cshift", "csin", "csqrt", "ctime", "c_funloc", "c_loc", "c_associated", "c_null_ptr", "c_null_funptr", "c_f_pointer", "c_null_char", "c_alert", "c_backspace", "c_form_feed", "c_new_line", "c_carriage_return", "c_horizontal_tab", "c_vertical_tab", "dabs", "dacos", "dasin", "datan", "date_and_time", "dbesj", "dbesj", "dbesjn", "dbesy", "dbesy", "dbesyn", "dble", "dcos", "dcosh", "ddim", "derf", "derfc", "dexp", "digits", "dim", "dint", "dlog", "dlog", "dmax", "dmin", "dmod", "dnint", "dot_product", "dprod", "dsign", "dsinh", "dsin", "dsqrt", "dtanh", "dtan", "dtime", "eoshift", "epsilon", "erf", "erfc", "etime", "exit", "exp", "exponent", "extends_type_of", "fdate", "fget", "fgetc", "float", "floor", "flush", "fnum", "fputc", "fput", "fraction", "fseek", "fstat", "ftell", "gerror", "getarg", "get_command", "get_command_argument", "get_environment_variable", "getcwd", "getenv", "getgid", "getlog", "getpid", "getuid", "gmtime", "hostnm", "huge", "iabs", "iachar", "iand", "iargc", "ibclr", "ibits", "ibset", "ichar", "idate", "idim", "idint", "idnint", "ieor", "ierrno", "ifix", "imag", "imagpart", "index", "int", "ior", "irand", "isatty", "ishft", "ishftc", "isign", "iso_c_binding", "is_iostat_end", "is_iostat_eor", "itime", "kill", "kind", "lbound", "len", "len_trim", "lge", "lgt", "link", "lle", "llt", "lnblnk", "loc", "log", "logical", "long", "lshift", "lstat", "ltime", "matmul", "max", "maxexponent", "maxloc", "maxval", "mclock", "merge", "move_alloc", "min", "minexponent", "minloc", "minval", "mod", "modulo", "mvbits", "nearest", "new_line", "nint", "not", "or", "pack", "perror", "precision", "present", "product", "radix", "rand", "random_number", "random_seed", "range", "real", "realpart", "rename", "repeat", "reshape", "rrspacing", "rshift", "same_type_as", "scale", "scan", "second", "selected_int_kind", "selected_real_kind", "set_exponent", "shape", "short", "sign", "signal", "sinh", "sin", "sleep", "sngl", "spacing", "spread", "sqrt", "srand", "stat", "sum", "symlnk", "system", "system_clock", "tan", "tanh", "time", "tiny", "transfer", "transpose", "trim", "ttynam", "ubound", "umask", "unlink", "unpack", "verify", "xor", "zabs", "zcos", "zexp", "zlog", "zsin", "zsqrt"])
            , o = i(["c_bool", "c_char", "c_double", "c_double_complex", "c_float", "c_float_complex", "c_funptr", "c_int", "c_int16_t", "c_int32_t", "c_int64_t", "c_int8_t", "c_int_fast16_t", "c_int_fast32_t", "c_int_fast64_t", "c_int_fast8_t", "c_int_least16_t", "c_int_least32_t", "c_int_least64_t", "c_int_least8_t", "c_intmax_t", "c_intptr_t", "c_long", "c_long_double", "c_long_double_complex", "c_long_long", "c_ptr", "c_short", "c_signed_char", "c_size_t", "character", "complex", "double", "integer", "logical", "real"])
            , O = /[+\-*&=<>\/\:]/
            , s = /^\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\./i;
        function l(e, t) {
            if (e.match(s))
                return "operator";
            var n, i = e.next();
            if ("!" == i)
                return e.skipToEnd(),
                    "comment";
            if ('"' == i || "'" == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "\\" == i
                        }
                        return !a && r || (t.tokenize = null),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[\[\]\(\),]/.test(i))
                return null;
            if (/\d/.test(i))
                return e.eatWhile(/[\w\.]/),
                    "number";
            if (O.test(i))
                return e.eatWhile(O),
                    "operator";
            e.eatWhile(/[\w\$_]/);
            var l = e.current().toLowerCase();
            return r.hasOwnProperty(l) ? "keyword" : a.hasOwnProperty(l) || o.hasOwnProperty(l) ? "builtin" : "variable"
        }
        const c = {
            name: "fortran",
            startState: function () {
                return {
                    tokenize: null
                }
            },
            token: function (e, t) {
                if (e.eatSpace())
                    return null;
                var n = (t.tokenize || l)(e, t);
                return n
            }
        }
    }
    ,
    79554: (e, t, n) => {
        function i(e) {
            var t = []
                , n = ""
                , i = {
                    ".abort": "builtin",
                    ".align": "builtin",
                    ".altmacro": "builtin",
                    ".ascii": "builtin",
                    ".asciz": "builtin",
                    ".balign": "builtin",
                    ".balignw": "builtin",
                    ".balignl": "builtin",
                    ".bundle_align_mode": "builtin",
                    ".bundle_lock": "builtin",
                    ".bundle_unlock": "builtin",
                    ".byte": "builtin",
                    ".cfi_startproc": "builtin",
                    ".comm": "builtin",
                    ".data": "builtin",
                    ".def": "builtin",
                    ".desc": "builtin",
                    ".dim": "builtin",
                    ".double": "builtin",
                    ".eject": "builtin",
                    ".else": "builtin",
                    ".elseif": "builtin",
                    ".end": "builtin",
                    ".endef": "builtin",
                    ".endfunc": "builtin",
                    ".endif": "builtin",
                    ".equ": "builtin",
                    ".equiv": "builtin",
                    ".eqv": "builtin",
                    ".err": "builtin",
                    ".error": "builtin",
                    ".exitm": "builtin",
                    ".extern": "builtin",
                    ".fail": "builtin",
                    ".file": "builtin",
                    ".fill": "builtin",
                    ".float": "builtin",
                    ".func": "builtin",
                    ".global": "builtin",
                    ".gnu_attribute": "builtin",
                    ".hidden": "builtin",
                    ".hword": "builtin",
                    ".ident": "builtin",
                    ".if": "builtin",
                    ".incbin": "builtin",
                    ".include": "builtin",
                    ".int": "builtin",
                    ".internal": "builtin",
                    ".irp": "builtin",
                    ".irpc": "builtin",
                    ".lcomm": "builtin",
                    ".lflags": "builtin",
                    ".line": "builtin",
                    ".linkonce": "builtin",
                    ".list": "builtin",
                    ".ln": "builtin",
                    ".loc": "builtin",
                    ".loc_mark_labels": "builtin",
                    ".local": "builtin",
                    ".long": "builtin",
                    ".macro": "builtin",
                    ".mri": "builtin",
                    ".noaltmacro": "builtin",
                    ".nolist": "builtin",
                    ".octa": "builtin",
                    ".offset": "builtin",
                    ".org": "builtin",
                    ".p2align": "builtin",
                    ".popsection": "builtin",
                    ".previous": "builtin",
                    ".print": "builtin",
                    ".protected": "builtin",
                    ".psize": "builtin",
                    ".purgem": "builtin",
                    ".pushsection": "builtin",
                    ".quad": "builtin",
                    ".reloc": "builtin",
                    ".rept": "builtin",
                    ".sbttl": "builtin",
                    ".scl": "builtin",
                    ".section": "builtin",
                    ".set": "builtin",
                    ".short": "builtin",
                    ".single": "builtin",
                    ".size": "builtin",
                    ".skip": "builtin",
                    ".sleb128": "builtin",
                    ".space": "builtin",
                    ".stab": "builtin",
                    ".string": "builtin",
                    ".struct": "builtin",
                    ".subsection": "builtin",
                    ".symver": "builtin",
                    ".tag": "builtin",
                    ".text": "builtin",
                    ".title": "builtin",
                    ".type": "builtin",
                    ".uleb128": "builtin",
                    ".val": "builtin",
                    ".version": "builtin",
                    ".vtable_entry": "builtin",
                    ".vtable_inherit": "builtin",
                    ".warning": "builtin",
                    ".weak": "builtin",
                    ".weakref": "builtin",
                    ".word": "builtin"
                }
                , r = {};
            function a(e, t) {
                for (var n, i = !1; null != (n = e.next());) {
                    if ("/" === n && i) {
                        t.tokenize = null;
                        break
                    }
                    i = "*" === n
                }
                return "comment"
            }
            return "x86" === e ? (n = "#",
                r.al = "variable",
                r.ah = "variable",
                r.ax = "variable",
                r.eax = "variableName.special",
                r.rax = "variableName.special",
                r.bl = "variable",
                r.bh = "variable",
                r.bx = "variable",
                r.ebx = "variableName.special",
                r.rbx = "variableName.special",
                r.cl = "variable",
                r.ch = "variable",
                r.cx = "variable",
                r.ecx = "variableName.special",
                r.rcx = "variableName.special",
                r.dl = "variable",
                r.dh = "variable",
                r.dx = "variable",
                r.edx = "variableName.special",
                r.rdx = "variableName.special",
                r.si = "variable",
                r.esi = "variableName.special",
                r.rsi = "variableName.special",
                r.di = "variable",
                r.edi = "variableName.special",
                r.rdi = "variableName.special",
                r.sp = "variable",
                r.esp = "variableName.special",
                r.rsp = "variableName.special",
                r.bp = "variable",
                r.ebp = "variableName.special",
                r.rbp = "variableName.special",
                r.ip = "variable",
                r.eip = "variableName.special",
                r.rip = "variableName.special",
                r.cs = "keyword",
                r.ds = "keyword",
                r.ss = "keyword",
                r.es = "keyword",
                r.fs = "keyword",
                r.gs = "keyword") : "arm" !== e && "armv6" !== e || (n = "@",
                    i.syntax = "builtin",
                    r.r0 = "variable",
                    r.r1 = "variable",
                    r.r2 = "variable",
                    r.r3 = "variable",
                    r.r4 = "variable",
                    r.r5 = "variable",
                    r.r6 = "variable",
                    r.r7 = "variable",
                    r.r8 = "variable",
                    r.r9 = "variable",
                    r.r10 = "variable",
                    r.r11 = "variable",
                    r.r12 = "variable",
                    r.sp = "variableName.special",
                    r.lr = "variableName.special",
                    r.pc = "variableName.special",
                    r.r13 = r.sp,
                    r.r14 = r.lr,
                    r.r15 = r.pc,
                    t.push((function (e, t) {
                        if ("#" === e)
                            return t.eatWhile(/\w/),
                                "number"
                    }
                    ))),
            {
                name: "gas",
                startState: function () {
                    return {
                        tokenize: null
                    }
                },
                token: function (e, o) {
                    if (o.tokenize)
                        return o.tokenize(e, o);
                    if (e.eatSpace())
                        return null;
                    var O, s, l = e.next();
                    if ("/" === l && e.eat("*"))
                        return o.tokenize = a,
                            a(e, o);
                    if (l === n)
                        return e.skipToEnd(),
                            "comment";
                    if ('"' === l)
                        return function (e, t) {
                            for (var n, i = !1; null != (n = e.next());) {
                                if (n === t && !i)
                                    return !1;
                                i = !i && "\\" === n
                            }
                        }(e, '"'),
                            "string";
                    if ("." === l)
                        return e.eatWhile(/\w/),
                            s = e.current().toLowerCase(),
                            (O = i[s]) || null;
                    if ("=" === l)
                        return e.eatWhile(/\w/),
                            "tag";
                    if ("{" === l)
                        return "bracket";
                    if ("}" === l)
                        return "bracket";
                    if (/\d/.test(l))
                        return "0" === l && e.eat("x") ? (e.eatWhile(/[0-9a-fA-F]/),
                            "number") : (e.eatWhile(/\d/),
                                "number");
                    if (/\w/.test(l))
                        return e.eatWhile(/\w/),
                            e.eat(":") ? "tag" : (s = e.current().toLowerCase(),
                                (O = r[s]) || null);
                    for (var c = 0; c < t.length; c++)
                        if (O = t[c](l, e, o))
                            return O
                },
                languageData: {
                    commentTokens: {
                        line: n,
                        block: {
                            open: "/*",
                            close: "*/"
                        }
                    }
                }
            }
        }
        n.r(t),
            n.d(t, {
                gas: () => r,
                gasArm: () => a
            });
        const r = i("x86")
            , a = i("arm")
    }
    ,
    31197: (e, t, n) => {
        n.r(t),
            n.d(t, {
                gherkin: () => i
            });
        const i = {
            name: "gherkin",
            startState: function () {
                return {
                    lineNumber: 0,
                    tableHeaderLine: !1,
                    allowFeature: !0,
                    allowBackground: !1,
                    allowScenario: !1,
                    allowSteps: !1,
                    allowPlaceholders: !1,
                    allowMultilineArgument: !1,
                    inMultilineString: !1,
                    inMultilineTable: !1,
                    inKeywordLine: !1
                }
            },
            token: function (e, t) {
                if (e.sol() && (t.lineNumber++,
                    t.inKeywordLine = !1,
                    t.inMultilineTable && (t.tableHeaderLine = !1,
                        e.match(/\s*\|/, !1) || (t.allowMultilineArgument = !1,
                            t.inMultilineTable = !1))),
                    e.eatSpace(),
                    t.allowMultilineArgument) {
                    if (t.inMultilineString)
                        return e.match('"""') ? (t.inMultilineString = !1,
                            t.allowMultilineArgument = !1) : e.match(/.*/),
                            "string";
                    if (t.inMultilineTable)
                        return e.match(/\|\s*/) ? "bracket" : (e.match(/[^\|]*/),
                            t.tableHeaderLine ? "header" : "string");
                    if (e.match('"""'))
                        return t.inMultilineString = !0,
                            "string";
                    if (e.match("|"))
                        return t.inMultilineTable = !0,
                            t.tableHeaderLine = !0,
                            "bracket"
                }
                return e.match(/#.*/) ? "comment" : !t.inKeywordLine && e.match(/@\S+/) ? "tag" : !t.inKeywordLine && t.allowFeature && e.match(/(\u6a5f\u80fd|\u529f\u80fd|\u30d5\u30a3\u30fc\u30c1\u30e3|\uae30\ub2a5|\u0e42\u0e04\u0e23\u0e07\u0e2b\u0e25\u0e31\u0e01|\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16|\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e32\u0e07\u0e18\u0e38\u0e23\u0e01\u0e34\u0e08|\u0cb9\u0cc6\u0c9a\u0ccd\u0c9a\u0cb3|\u0c17\u0c41\u0c23\u0c2e\u0c41|\u0a2e\u0a41\u0a39\u0a3e\u0a02\u0a26\u0a30\u0a3e|\u0a28\u0a15\u0a36 \u0a28\u0a41\u0a39\u0a3e\u0a30|\u0a16\u0a3e\u0a38\u0a40\u0a05\u0a24|\u0930\u0942\u092a \u0932\u0947\u0916|\u0648\u0650\u06cc\u0698\u06af\u06cc|\u062e\u0627\u0635\u064a\u0629|\u05ea\u05db\u05d5\u05e0\u05d4|\u0424\u0443\u043d\u043a\u0446\u0456\u043e\u043d\u0430\u043b|\u0424\u0443\u043d\u043a\u0446\u0438\u044f|\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043d\u043e\u0441\u0442|\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b|\u04ae\u0437\u0435\u043d\u0447\u04d9\u043b\u0435\u043a\u043b\u0435\u043b\u0435\u043a|\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u043e|\u041e\u0441\u043e\u0431\u0438\u043d\u0430|\u041c\u04e9\u043c\u043a\u0438\u043d\u043b\u0435\u043a|\u041c\u043e\u0433\u0443\u045b\u043d\u043e\u0441\u0442|\u039b\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1|\u0394\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1|W\u0142a\u015bciwo\u015b\u0107|Vlastnos\u0165|Trajto|T\xednh n\u0103ng|Savyb\u0117|Pretty much|Po\u017eiadavka|Po\u017eadavek|Potrzeba biznesowa|\xd6zellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogu\u0107nost|Mogucnost|Jellemz\u0151|Hw\xe6t|Hwaet|Funzionalit\xe0|Funktionalit\xe9it|Funktionalit\xe4t|Funkcja|Funkcionalnost|Funkcionalit\u0101te|Funkcia|Fungsi|Functionaliteit|Func\u021bionalitate|Func\u0163ionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalit\xe9|Fitur|F\u012b\u010da|Feature|Eiginleiki|Egenskap|Egenskab|Caracter\xedstica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/) ? (t.allowScenario = !0,
                    t.allowBackground = !0,
                    t.allowPlaceholders = !1,
                    t.allowSteps = !1,
                    t.allowMultilineArgument = !1,
                    t.inKeywordLine = !0,
                    "keyword") : !t.inKeywordLine && t.allowBackground && e.match(/(\u80cc\u666f|\ubc30\uacbd|\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14|\u0cb9\u0cbf\u0ca8\u0ccd\u0ca8\u0cc6\u0cb2\u0cc6|\u0c28\u0c47\u0c2a\u0c25\u0c4d\u0c2f\u0c02|\u0a2a\u0a3f\u0a1b\u0a4b\u0a15\u0a5c|\u092a\u0943\u0937\u094d\u0920\u092d\u0942\u092e\u093f|\u0632\u0645\u06cc\u0646\u0647|\u0627\u0644\u062e\u0644\u0641\u064a\u0629|\u05e8\u05e7\u05e2|\u0422\u0430\u0440\u0438\u0445|\u041f\u0440\u0435\u0434\u044b\u0441\u0442\u043e\u0440\u0438\u044f|\u041f\u0440\u0435\u0434\u0438\u0441\u0442\u043e\u0440\u0438\u044f|\u041f\u043e\u0437\u0430\u0434\u0438\u043d\u0430|\u041f\u0435\u0440\u0435\u0434\u0443\u043c\u043e\u0432\u0430|\u041e\u0441\u043d\u043e\u0432\u0430|\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442|\u041a\u0435\u0440\u0435\u0448|\u03a5\u03c0\u03cc\u03b2\u03b1\u03b8\u03c1\u03bf|Za\u0142o\u017cenia|Yo\-ho\-ho|Tausta|Taust|Situ\u0101cija|Rerefons|Pozadina|Pozadie|Pozad\xed|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|H\xe1tt\xe9r|Hannergrond|Grundlage|Ge\xe7mi\u015f|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cen\xe1rio de Fundo|Cenario de Fundo|Cefndir|B\u1ed1i c\u1ea3nh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|\xc6r|Aer|Achtergrond):/) ? (t.allowPlaceholders = !1,
                        t.allowSteps = !0,
                        t.allowBackground = !1,
                        t.allowMultilineArgument = !1,
                        t.inKeywordLine = !0,
                        "keyword") : !t.inKeywordLine && t.allowScenario && e.match(/(\u5834\u666f\u5927\u7db1|\u573a\u666f\u5927\u7eb2|\u5287\u672c\u5927\u7db1|\u5267\u672c\u5927\u7eb2|\u30c6\u30f3\u30d7\u30ec|\u30b7\u30ca\u30ea\u30aa\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8|\u30b7\u30ca\u30ea\u30aa\u30c6\u30f3\u30d7\u30ec|\u30b7\u30ca\u30ea\u30aa\u30a2\u30a6\u30c8\u30e9\u30a4\u30f3|\uc2dc\ub098\ub9ac\uc624 \uac1c\uc694|\u0e2a\u0e23\u0e38\u0e1b\u0e40\u0e2b\u0e15\u0e38\u0e01\u0e32\u0e23\u0e13\u0e4c|\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e40\u0e2b\u0e15\u0e38\u0e01\u0e32\u0e23\u0e13\u0e4c|\u0cb5\u0cbf\u0cb5\u0cb0\u0ca3\u0cc6|\u0c15\u0c25\u0c28\u0c02|\u0a2a\u0a1f\u0a15\u0a25\u0a3e \u0a30\u0a42\u0a2a \u0a30\u0a47\u0a16\u0a3e|\u0a2a\u0a1f\u0a15\u0a25\u0a3e \u0a22\u0a3e\u0a02\u0a1a\u0a3e|\u092a\u0930\u093f\u0926\u0943\u0936\u094d\u092f \u0930\u0942\u092a\u0930\u0947\u0916\u093e|\u0633\u064a\u0646\u0627\u0631\u064a\u0648 \u0645\u062e\u0637\u0637|\u0627\u0644\u06af\u0648\u06cc \u0633\u0646\u0627\u0631\u06cc\u0648|\u05ea\u05d1\u05e0\u05d9\u05ea \u05ea\u05e8\u05d7\u05d9\u05e9|\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439\u043d\u044b\u04a3 \u0442\u04e9\u0437\u0435\u043b\u0435\u0448\u0435|\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u0441\u0438|\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0456\u044e|\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f|\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0458\u0430|\u0421\u043a\u0438\u0446\u0430|\u0420\u0430\u043c\u043a\u0430 \u043d\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439|\u041a\u043e\u043d\u0446\u0435\u043f\u0442|\u03a0\u03b5\u03c1\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03a3\u03b5\u03bd\u03b1\u03c1\u03af\u03bf\u03c5|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hw\xe6r swa|Swa hwaer swa|Struktura scenarija|Structur\u0103 scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo tasla\u011f\u0131|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scen\u0101rijs p\u0113c parauga|Scenarijaus \u0161ablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Sc\xe9nario|Plan du sc\xe9nario|Osnova sc\xe9n\xe1\u0159e|Osnova Scen\xe1ra|N\xe1\u010drt Scen\xe1ru|N\xe1\u010drt Sc\xe9n\xe1\u0159e|N\xe1\u010drt Scen\xe1ra|MISHUN SRSLY|Menggariskan Senario|L\xfdsing D\xe6ma|L\xfdsing Atbur\xf0ar\xe1sar|Konturo de la scenaro|Koncept|Khung t\xecnh hu\u1ed1ng|Khung k\u1ecbch b\u1ea3n|Forgat\xf3k\xf6nyv v\xe1zlat|Esquema do Cen\xe1rio|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delinea\xe7\xe3o do Cen\xe1rio|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/) ? (t.allowPlaceholders = !0,
                            t.allowSteps = !0,
                            t.allowMultilineArgument = !1,
                            t.inKeywordLine = !0,
                            "keyword") : t.allowScenario && e.match(/(\u4f8b\u5b50|\u4f8b|\u30b5\u30f3\u30d7\u30eb|\uc608|\u0e0a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e40\u0e2b\u0e15\u0e38\u0e01\u0e32\u0e23\u0e13\u0e4c|\u0e0a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07|\u0c89\u0ca6\u0cbe\u0cb9\u0cb0\u0ca3\u0cc6\u0c97\u0cb3\u0cc1|\u0c09\u0c26\u0c3e\u0c39\u0c30\u0c23\u0c32\u0c41|\u0a09\u0a26\u0a3e\u0a39\u0a30\u0a28\u0a3e\u0a02|\u0909\u0926\u093e\u0939\u0930\u0923|\u0646\u0645\u0648\u0646\u0647 \u0647\u0627|\u0627\u0645\u062b\u0644\u0629|\u05d3\u05d5\u05d2\u05de\u05d0\u05d5\u05ea|\u04ae\u0440\u043d\u04d9\u043a\u043b\u04d9\u0440|\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0458\u0438|\u041f\u0440\u0438\u043c\u0435\u0440\u044b|\u041f\u0440\u0438\u043c\u0435\u0440\u0438|\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0438|\u041c\u0438\u0441\u043e\u043b\u043b\u0430\u0440|\u041c\u0438\u0441\u0430\u043b\u043b\u0430\u0440|\u03a3\u03b5\u03bd\u03ac\u03c1\u03b9\u03b1|\u03a0\u03b1\u03c1\u03b1\u03b4\u03b5\u03af\u03b3\u03bc\u03b1\u03c4\u03b1|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se \xfee|Se the|Se \xf0e|Scenarios|Scenariji|Scenarijai|Przyk\u0142ady|Primjeri|Primeri|P\u0159\xedklady|Pr\xedklady|Piem\u0113ri|P\xe9ld\xe1k|Pavyzd\u017eiai|Paraugs|\xd6rnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|D\u1eef li\u1ec7u|Dead men tell no tales|D\xe6mi|Contoh|Cen\xe1rios|Cenarios|Beispiller|Beispiele|Atbur\xf0ar\xe1sir):/) ? (t.allowPlaceholders = !1,
                                t.allowSteps = !0,
                                t.allowBackground = !1,
                                t.allowMultilineArgument = !0,
                                "keyword") : !t.inKeywordLine && t.allowScenario && e.match(/(\u5834\u666f|\u573a\u666f|\u5287\u672c|\u5267\u672c|\u30b7\u30ca\u30ea\u30aa|\uc2dc\ub098\ub9ac\uc624|\u0e40\u0e2b\u0e15\u0e38\u0e01\u0e32\u0e23\u0e13\u0e4c|\u0c95\u0ca5\u0cbe\u0cb8\u0cbe\u0cb0\u0cbe\u0c82\u0cb6|\u0c38\u0c28\u0c4d\u0c28\u0c3f\u0c35\u0c47\u0c36\u0c02|\u0a2a\u0a1f\u0a15\u0a25\u0a3e|\u092a\u0930\u093f\u0926\u0943\u0936\u094d\u092f|\u0633\u064a\u0646\u0627\u0631\u064a\u0648|\u0633\u0646\u0627\u0631\u06cc\u0648|\u05ea\u05e8\u05d7\u05d9\u05e9|\u0421\u0446\u0435\u043d\u0430\u0440\u0456\u0439|\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u043e|\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439|\u041f\u0440\u0438\u043c\u0435\u0440|\u03a3\u03b5\u03bd\u03ac\u03c1\u03b9\u03bf|T\xecnh hu\u1ed1ng|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Sc\xe9nario|Scenario|Scenarijus|Scen\u0101rijs|Scenarij|Scenarie|Sc\xe9n\xe1\u0159|Scen\xe1r|Primer|MISHUN|K\u1ecbch b\u1ea3n|Keadaan|Heave to|Forgat\xf3k\xf6nyv|Escenario|Escenari|Cen\xe1rio|Cenario|Awww, look mate|Atbur\xf0ar\xe1s):/) ? (t.allowPlaceholders = !1,
                                    t.allowSteps = !0,
                                    t.allowBackground = !1,
                                    t.allowMultilineArgument = !1,
                                    t.inKeywordLine = !0,
                                    "keyword") : !t.inKeywordLine && t.allowSteps && e.match(/(\u90a3\u9ebc|\u90a3\u4e48|\u800c\u4e14|\u7576|\u5f53|\u5e76\u4e14|\u540c\u6642|\u540c\u65f6|\u524d\u63d0|\u5047\u8bbe|\u5047\u8a2d|\u5047\u5b9a|\u5047\u5982|\u4f46\u662f|\u4f46\u3057|\u4e26\u4e14|\u3082\u3057|\u306a\u3089\u3070|\u305f\u3060\u3057|\u3057\u304b\u3057|\u304b\u3064|\ud558\uc9c0\ub9cc|\uc870\uac74|\uba3c\uc800|\ub9cc\uc77c|\ub9cc\uc57d|\ub2e8|\uadf8\ub9ac\uace0|\uadf8\ub7ec\uba74|\u0e41\u0e25\u0e30 |\u0e40\u0e21\u0e37\u0e48\u0e2d |\u0e41\u0e15\u0e48 |\u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19 |\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e2b\u0e49 |\u0cb8\u0ccd\u0ca5\u0cbf\u0ca4\u0cbf\u0caf\u0ca8\u0ccd\u0ca8\u0cc1 |\u0cae\u0ca4\u0ccd\u0ca4\u0cc1 |\u0ca8\u0cbf\u0cd5\u0ca1\u0cbf\u0ca6 |\u0ca8\u0c82\u0ca4\u0cb0 |\u0c86\u0ca6\u0cb0\u0cc6 |\u0c2e\u0c30\u0c3f\u0c2f\u0c41 |\u0c1a\u0c46\u0c2a\u0c4d\u0c2a\u0c2c\u0c21\u0c3f\u0c28\u0c26\u0c3f |\u0c15\u0c3e\u0c28\u0c3f |\u0c08 \u0c2a\u0c30\u0c3f\u0c38\u0c4d\u0c25\u0c3f\u0c24\u0c3f\u0c32\u0c4b |\u0c05\u0c2a\u0c4d\u0c2a\u0c41\u0c21\u0c41 |\u0a2a\u0a30 |\u0a24\u0a26 |\u0a1c\u0a47\u0a15\u0a30 |\u0a1c\u0a3f\u0a35\u0a47\u0a02 \u0a15\u0a3f |\u0a1c\u0a26\u0a4b\u0a02 |\u0a05\u0a24\u0a47 |\u092f\u0926\u093f |\u092a\u0930\u0928\u094d\u0924\u0941 |\u092a\u0930 |\u0924\u092c |\u0924\u0926\u093e |\u0924\u0925\u093e |\u091c\u092c |\u091a\u0942\u0902\u0915\u093f |\u0915\u093f\u0928\u094d\u0924\u0941 |\u0915\u0926\u093e |\u0914\u0930 |\u0905\u0917\u0930 |\u0648 |\u0647\u0646\u06af\u0627\u0645\u06cc |\u0645\u062a\u0649 |\u0644\u0643\u0646 |\u0639\u0646\u062f\u0645\u0627 |\u062b\u0645 |\u0628\u0641\u0631\u0636 |\u0628\u0627 \u0641\u0631\u0636 |\u0627\u0645\u0627 |\u0627\u0630\u0627\u064b |\u0622\u0646\u06af\u0627\u0647 |\u05db\u05d0\u05e9\u05e8 |\u05d5\u05d2\u05dd |\u05d1\u05d4\u05d9\u05e0\u05ea\u05df |\u05d0\u05d6\u05d9 |\u05d0\u05d6 |\u05d0\u05d1\u05dc |\u042f\u043a\u0449\u043e |\u04ba\u04d9\u043c |\u0423\u043d\u0434\u0430 |\u0422\u043e\u0434\u0456 |\u0422\u043e\u0433\u0434\u0430 |\u0422\u043e |\u0422\u0430\u043a\u0436\u0435 |\u0422\u0430 |\u041f\u0443\u0441\u0442\u044c |\u041f\u0440\u0438\u043f\u0443\u0441\u0442\u0438\u043c\u043e, \u0449\u043e |\u041f\u0440\u0438\u043f\u0443\u0441\u0442\u0438\u043c\u043e |\u041e\u043d\u0434\u0430 |\u041d\u043e |\u041d\u0435\u0445\u0430\u0439 |\u041d\u04d9\u0442\u0438\u0497\u04d9\u0434\u04d9 |\u041b\u0435\u043a\u0438\u043d |\u041b\u04d9\u043a\u0438\u043d |\u041a\u043e\u043b\u0438 |\u041a\u043e\u0433\u0434\u0430 |\u041a\u043e\u0433\u0430\u0442\u043e |\u041a\u0430\u0434\u0430 |\u041a\u0430\u0434 |\u041a \u0442\u043e\u043c\u0443 \u0436\u0435 |\u0406 |\u0418 |\u0417\u0430\u0434\u0430\u0442\u043e |\u0417\u0430\u0434\u0430\u0442\u0438 |\u0417\u0430\u0434\u0430\u0442\u0435 |\u0415\u0441\u043b\u0438 |\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c |\u0414\u0430\u043d\u043e |\u0414\u0430\u0434\u0435\u043d\u043e |\u0412\u04d9 |\u0412\u0430 |\u0411\u0438\u0440\u043e\u043a |\u04d8\u043c\u043c\u0430 |\u04d8\u0439\u0442\u0438\u043a |\u04d8\u0433\u04d9\u0440 |\u0410\u043c\u043c\u043e |\u0410\u043b\u0438 |\u0410\u043b\u0435 |\u0410\u0433\u0430\u0440 |\u0410 \u0442\u0430\u043a\u043e\u0436 |\u0410 |\u03a4\u03cc\u03c4\u03b5 |\u038c\u03c4\u03b1\u03bd |\u039a\u03b1\u03b9 |\u0394\u03b5\u03b4\u03bf\u03bc\u03ad\u03bd\u03bf\u03c5 |\u0391\u03bb\u03bb\u03ac |\xdeurh |\xdeegar |\xdea \xfee |\xde\xe1 |\xdea |Zatati |Zak\u0142adaj\u0105c |Zadato |Zadate |Zadano |Zadani |Zadan |Za p\u0159edpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |V\xe0 |Und |Un |ugeholl |Too right |Thurh |Th\xec |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |\u0218i |\u015ei |Si |Sed |Se |S\xe5 |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokia\u013e |Per\xf2 |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nh\u01b0ng |N\xe4r |N\xe5r |Mutta |Men |Mas |Maka |Majd |Maj\u0105c |Mais |Maar |m\xe4 |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Ke\u010f |Kdy\u017e |Kaj |Kai |Kada |Kad |Je\u017celi |Je\u015bli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |\xc9tant donn\xe9s |Etant donn\xe9s |\xc9tant donn\xe9es |Etant donn\xe9es |\xc9tant donn\xe9e |Etant donn\xe9e |\xc9tant donn\xe9 |Etant donn\xe9 |Et |\xc9s |Entonces |Ent\xf3n |Ent\xe3o |Entao |En |E\u011fer ki |Ef |Eeldades |E |\xd0urh |Duota |Dun |Donita\u0135o |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Da\u021bi fiind |Da\u0163i fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |\xd0a \xf0e |\xd0a |Cuando |Cho |Cando |C\xe2nd |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Bi\u1ebft |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |At\xe8s |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A z\xe1rove\u0148 |A tie\u017e |A taktie\u017e |A tak\xe9 |A |a |7 |\* )/) ? (t.inStep = !0,
                                        t.allowPlaceholders = !0,
                                        t.allowMultilineArgument = !0,
                                        t.inKeywordLine = !0,
                                        "keyword") : e.match(/"[^"]*"?/) ? "string" : t.allowPlaceholders && e.match(/<[^>]*>?/) ? "variable" : (e.next(),
                                            e.eatWhile(/[^@"<#]/),
                                            null)
            }
        }
    }
    ,
    49673: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                groovy: () => Q
            });
        var r, a = i("abstract as assert boolean break byte case catch char class const continue def default do double else enum extends final finally float for goto if implements import in instanceof int interface long native new package private protected public return short static strictfp super switch synchronized threadsafe throw throws trait transient try void volatile while"), o = i("catch class def do else enum finally for if interface switch trait try while"), O = i("return break continue"), s = i("null true false this");
        function l(e, t) {
            var n = e.next();
            if ('"' == n || "'" == n)
                return c(n, e, t);
            if (/[\[\]{}\(\),;\:\.]/.test(n))
                return r = n,
                    null;
            if (/\d/.test(n))
                return e.eatWhile(/[\w\.]/),
                    e.eat(/eE/) && (e.eat(/\+\-/),
                        e.eatWhile(/\d/)),
                    "number";
            if ("/" == n) {
                if (e.eat("*"))
                    return t.tokenize.push(h),
                        h(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment";
                if (f(t.lastToken, !1))
                    return c(n, e, t)
            }
            if ("-" == n && e.eat(">"))
                return r = "->",
                    null;
            if (/[+\-*&%=<>!?|\/~]/.test(n))
                return e.eatWhile(/[+\-*&%=<>|~]/),
                    "operator";
            if (e.eatWhile(/[\w\$_]/),
                "@" == n)
                return e.eatWhile(/[\w\$_\.]/),
                    "meta";
            if ("." == t.lastToken)
                return "property";
            if (e.eat(":"))
                return r = "proplabel",
                    "property";
            var i = e.current();
            return s.propertyIsEnumerable(i) ? "atom" : a.propertyIsEnumerable(i) ? (o.propertyIsEnumerable(i) ? r = "newstatement" : O.propertyIsEnumerable(i) && (r = "standalone"),
                "keyword") : "variable"
        }
        function c(e, t, n) {
            var i = !1;
            if ("/" != e && t.eat(e)) {
                if (!t.eat(e))
                    return "string";
                i = !0
            }
            function r(t, n) {
                for (var r, a = !1, o = !i; null != (r = t.next());) {
                    if (r == e && !a) {
                        if (!i)
                            break;
                        if (t.match(e + e)) {
                            o = !0;
                            break
                        }
                    }
                    if ('"' == e && "$" == r && !a) {
                        if (t.eat("{"))
                            return n.tokenize.push(u()),
                                "string";
                        if (t.match(/^\w/, !1))
                            return n.tokenize.push(d),
                                "string"
                    }
                    a = !a && "\\" == r
                }
                return o && n.tokenize.pop(),
                    "string"
            }
            return n.tokenize.push(r),
                r(t, n)
        }
        function u() {
            var e = 1;
            function t(t, n) {
                if ("}" == t.peek()) {
                    if (0 == --e)
                        return n.tokenize.pop(),
                            n.tokenize[n.tokenize.length - 1](t, n)
                } else
                    "{" == t.peek() && e++;
                return l(t, n)
            }
            return t.isBase = !0,
                t
        }
        function d(e, t) {
            var n = e.match(/^(\.|[\w\$_]+)/);
            return n ? "." == n[0] ? null : "variable" : (t.tokenize.pop(),
                t.tokenize[t.tokenize.length - 1](e, t))
        }
        function h(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize.pop();
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function f(e, t) {
            return !e || "operator" == e || "->" == e || /[\.\[\{\(,;:]/.test(e) || "newstatement" == e || "keyword" == e || "proplabel" == e || "standalone" == e && !t
        }
        function p(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        function m(e, t, n) {
            return e.context = new p(e.indented, t, n, null, e.context)
        }
        function g(e) {
            var t = e.context.type;
            return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                e.context = e.context.prev
        }
        l.isBase = !0;
        const Q = {
            name: "groovy",
            startState: function (e) {
                return {
                    tokenize: [l],
                    context: new p(-e, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0,
                    lastToken: null
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0,
                    "statement" != n.type || f(t.lastToken, !0) || (g(t),
                        n = t.context)),
                    e.eatSpace())
                    return null;
                r = null;
                var i = t.tokenize[t.tokenize.length - 1](e, t);
                if ("comment" == i)
                    return i;
                if (null == n.align && (n.align = !0),
                    ";" != r && ":" != r || "statement" != n.type)
                    if ("->" == r && "statement" == n.type && "}" == n.prev.type)
                        g(t),
                            t.context.align = !1;
                    else if ("{" == r)
                        m(t, e.column(), "}");
                    else if ("[" == r)
                        m(t, e.column(), "]");
                    else if ("(" == r)
                        m(t, e.column(), ")");
                    else if ("}" == r) {
                        for (; "statement" == n.type;)
                            n = g(t);
                        for ("}" == n.type && (n = g(t)); "statement" == n.type;)
                            n = g(t)
                    } else
                        r == n.type ? g(t) : ("}" == n.type || "top" == n.type || "statement" == n.type && "newstatement" == r) && m(t, e.column(), "statement");
                else
                    g(t);
                return t.startOfLine = !1,
                    t.lastToken = r || i,
                    i
            },
            indent: function (e, t, n) {
                if (!e.tokenize[e.tokenize.length - 1].isBase)
                    return null;
                var i = t && t.charAt(0)
                    , r = e.context;
                "statement" != r.type || f(e.lastToken, !0) || (r = r.prev);
                var a = i == r.type;
                return "statement" == r.type ? r.indented + ("{" == i ? 0 : n.unit) : r.align ? r.column + (a ? 0 : 1) : r.indented + (a ? 0 : n.unit)
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "'''", '"""']
                }
            }
        }
    }
    ,
    18647: (e, t, n) => {
        function i(e, t, n) {
            return t(n),
                n(e, t)
        }
        n.r(t),
            n.d(t, {
                haskell: () => Q
            });
        var r = /[a-z_]/
            , a = /[A-Z]/
            , o = /\d/
            , O = /[0-9A-Fa-f]/
            , s = /[0-7]/
            , l = /[a-z_A-Z0-9'\xa1-\uffff]/
            , c = /[-!#$%&*+.\/<=>?@\\^|~:]/
            , u = /[(),;[\]`{}]/
            , d = /[ \t\v\f]/;
        function h(e, t) {
            if (e.eatWhile(d))
                return null;
            var n = e.next();
            if (u.test(n)) {
                if ("{" == n && e.eat("-")) {
                    var h = "comment";
                    return e.eat("#") && (h = "meta"),
                        i(e, t, f(h, 1))
                }
                return null
            }
            if ("'" == n)
                return e.eat("\\"),
                    e.next(),
                    e.eat("'") ? "string" : "error";
            if ('"' == n)
                return i(e, t, p);
            if (a.test(n))
                return e.eatWhile(l),
                    e.eat(".") ? "qualifier" : "type";
            if (r.test(n))
                return e.eatWhile(l),
                    "variable";
            if (o.test(n)) {
                if ("0" == n) {
                    if (e.eat(/[xX]/))
                        return e.eatWhile(O),
                            "integer";
                    if (e.eat(/[oO]/))
                        return e.eatWhile(s),
                            "number"
                }
                e.eatWhile(o);
                h = "number";
                return e.match(/^\.\d+/) && (h = "number"),
                    e.eat(/[eE]/) && (h = "number",
                        e.eat(/[-+]/),
                        e.eatWhile(o)),
                    h
            }
            return "." == n && e.eat(".") ? "keyword" : c.test(n) ? "-" == n && e.eat(/-/) && (e.eatWhile(/-/),
                !e.eat(c)) ? (e.skipToEnd(),
                    "comment") : (e.eatWhile(c),
                        "variable") : "error"
        }
        function f(e, t) {
            return 0 == t ? h : function (n, i) {
                for (var r = t; !n.eol();) {
                    var a = n.next();
                    if ("{" == a && n.eat("-"))
                        ++r;
                    else if ("-" == a && n.eat("}") && 0 == --r)
                        return i(h),
                            e
                }
                return i(f(e, r)),
                    e
            }
        }
        function p(e, t) {
            for (; !e.eol();) {
                var n = e.next();
                if ('"' == n)
                    return t(h),
                        "string";
                if ("\\" == n) {
                    if (e.eol() || e.eat(d))
                        return t(m),
                            "string";
                    e.eat("&") || e.next()
                }
            }
            return t(h),
                "error"
        }
        function m(e, t) {
            return e.eat("\\") ? i(e, t, p) : (e.next(),
                t(h),
                "error")
        }
        var g = function () {
            var e = {};
            function t(t) {
                return function () {
                    for (var n = 0; n < arguments.length; n++)
                        e[arguments[n]] = t
                }
            }
            return t("keyword")("case", "class", "data", "default", "deriving", "do", "else", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "type", "where", "_"),
                t("keyword")("..", ":", "::", "=", "\\", "<-", "->", "@", "~", "=>"),
                t("builtin")("!!", "$!", "$", "&&", "+", "++", "-", ".", "/", "/=", "<", "<*", "<=", "<$>", "<*>", "=<<", "==", ">", ">=", ">>", ">>=", "^", "^^", "||", "*", "*>", "**"),
                t("builtin")("Applicative", "Bool", "Bounded", "Char", "Double", "EQ", "Either", "Enum", "Eq", "False", "FilePath", "Float", "Floating", "Fractional", "Functor", "GT", "IO", "IOError", "Int", "Integer", "Integral", "Just", "LT", "Left", "Maybe", "Monad", "Nothing", "Num", "Ord", "Ordering", "Rational", "Read", "ReadS", "Real", "RealFloat", "RealFrac", "Right", "Show", "ShowS", "String", "True"),
                t("builtin")("abs", "acos", "acosh", "all", "and", "any", "appendFile", "asTypeOf", "asin", "asinh", "atan", "atan2", "atanh", "break", "catch", "ceiling", "compare", "concat", "concatMap", "const", "cos", "cosh", "curry", "cycle", "decodeFloat", "div", "divMod", "drop", "dropWhile", "either", "elem", "encodeFloat", "enumFrom", "enumFromThen", "enumFromThenTo", "enumFromTo", "error", "even", "exp", "exponent", "fail", "filter", "flip", "floatDigits", "floatRadix", "floatRange", "floor", "fmap", "foldl", "foldl1", "foldr", "foldr1", "fromEnum", "fromInteger", "fromIntegral", "fromRational", "fst", "gcd", "getChar", "getContents", "getLine", "head", "id", "init", "interact", "ioError", "isDenormalized", "isIEEE", "isInfinite", "isNaN", "isNegativeZero", "iterate", "last", "lcm", "length", "lex", "lines", "log", "logBase", "lookup", "map", "mapM", "mapM_", "max", "maxBound", "maximum", "maybe", "min", "minBound", "minimum", "mod", "negate", "not", "notElem", "null", "odd", "or", "otherwise", "pi", "pred", "print", "product", "properFraction", "pure", "putChar", "putStr", "putStrLn", "quot", "quotRem", "read", "readFile", "readIO", "readList", "readLn", "readParen", "reads", "readsPrec", "realToFrac", "recip", "rem", "repeat", "replicate", "return", "reverse", "round", "scaleFloat", "scanl", "scanl1", "scanr", "scanr1", "seq", "sequence", "sequence_", "show", "showChar", "showList", "showParen", "showString", "shows", "showsPrec", "significand", "signum", "sin", "sinh", "snd", "span", "splitAt", "sqrt", "subtract", "succ", "sum", "tail", "take", "takeWhile", "tan", "tanh", "toEnum", "toInteger", "toRational", "truncate", "uncurry", "undefined", "unlines", "until", "unwords", "unzip", "unzip3", "userError", "words", "writeFile", "zip", "zip3", "zipWith", "zipWith3"),
                e
        }();
        const Q = {
            name: "haskell",
            startState: function () {
                return {
                    f: h
                }
            },
            copyState: function (e) {
                return {
                    f: e.f
                }
            },
            token: function (e, t) {
                var n = t.f(e, (function (e) {
                    t.f = e
                }
                ))
                    , i = e.current();
                return g.hasOwnProperty(i) ? g[i] : n
            },
            languageData: {
                commentTokens: {
                    line: "--",
                    block: {
                        open: "{-",
                        close: "-}"
                    }
                }
            }
        }
    }
    ,
    99071: (e, t, n) => {
        function i(e) {
            return {
                type: e,
                style: "keyword"
            }
        }
        n.r(t),
            n.d(t, {
                haxe: () => re,
                hxml: () => ae
            });
        var r, a = i("keyword a"), o = i("keyword b"), O = i("keyword c"), s = i("operator"), l = {
            type: "atom",
            style: "atom"
        }, c = {
            type: "attribute",
            style: "attribute"
        }, u = i("typedef"), d = {
            if: a,
            while: a,
            else: o,
            do: o,
            try: o,
            return: O,
            break: O,
            continue: O,
            new: O,
            throw: O,
            var: i("var"),
            inline: c,
            static: c,
            using: i("import"),
            public: c,
            private: c,
            cast: i("cast"),
            import: i("import"),
            macro: i("macro"),
            function: i("function"),
            catch: i("catch"),
            untyped: i("untyped"),
            callback: i("cb"),
            for: i("for"),
            switch: i("switch"),
            case: i("case"),
            default: i("default"),
            in: s,
            never: i("property_access"),
            trace: i("trace"),
            class: u,
            abstract: u,
            enum: u,
            interface: u,
            typedef: u,
            extends: u,
            implements: u,
            dynamic: u,
            true: l,
            false: l,
            null: l
        }, h = /[+\-*&%=<>!?|]/;
        function f(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function p(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (n == t && !i)
                    return !0;
                i = !i && "\\" == n
            }
        }
        function m(e, t, n) {
            return u = e,
                r = n,
                t
        }
        function g(e, t) {
            var n = e.next();
            if ('"' == n || "'" == n)
                return f(e, t, (i = n,
                    function (e, t) {
                        return p(e, i) && (t.tokenize = g),
                            m("string", "string")
                    }
                ));
            if (/[\[\]{}\(\),;\:\.]/.test(n))
                return m(n);
            if ("0" == n && e.eat(/x/i))
                return e.eatWhile(/[\da-f]/i),
                    m("number", "number");
            if (/\d/.test(n) || "-" == n && e.eat(/\d/))
                return e.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/),
                    m("number", "number");
            if (t.reAllowed && "~" == n && e.eat(/\//))
                return p(e, "/"),
                    e.eatWhile(/[gimsu]/),
                    m("regexp", "string.special");
            if ("/" == n)
                return e.eat("*") ? f(e, t, Q) : e.eat("/") ? (e.skipToEnd(),
                    m("comment", "comment")) : (e.eatWhile(h),
                        m("operator", null, e.current()));
            if ("#" == n)
                return e.skipToEnd(),
                    m("conditional", "meta");
            if ("@" == n)
                return e.eat(/:/),
                    e.eatWhile(/[\w_]/),
                    m("metadata", "meta");
            if (h.test(n))
                return e.eatWhile(h),
                    m("operator", null, e.current());
            if (/[A-Z]/.test(n))
                return e.eatWhile(/[\w_<>]/),
                    m("type", "type", r = e.current());
            e.eatWhile(/[\w_]/);
            var i, r = e.current(), a = d.propertyIsEnumerable(r) && d[r];
            return a && t.kwAllowed ? m(a.type, a.style, r) : m("variable", "variable", r)
        }
        function Q(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = g;
                    break
                }
                i = "*" == n
            }
            return m("comment", "comment")
        }
        var $ = {
            atom: !0,
            number: !0,
            variable: !0,
            string: !0,
            regexp: !0
        };
        function b(e, t, n, i, r, a) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.prev = r,
                this.info = a,
                null != i && (this.align = i)
        }
        function y(e, t) {
            for (var n = e.localVars; n; n = n.next)
                if (n.name == t)
                    return !0
        }
        function S(e, t) {
            if (/[a-z]/.test(t.charAt(0)))
                return !1;
            for (var n = e.importedtypes.length, i = 0; i < n; i++)
                if (e.importedtypes[i] == t)
                    return !0
        }
        function P(e) {
            for (var t = v.state, n = t.importedtypes; n; n = n.next)
                if (n.name == e)
                    return;
            t.importedtypes = {
                name: e,
                next: t.importedtypes
            }
        }
        var v = {
            state: null,
            column: null,
            marked: null,
            cc: null
        };
        function x() {
            for (var e = arguments.length - 1; e >= 0; e--)
                v.cc.push(arguments[e])
        }
        function k() {
            return x.apply(null, arguments),
                !0
        }
        function w(e, t) {
            for (var n = t; n; n = n.next)
                if (n.name == e)
                    return !0;
            return !1
        }
        function X(e) {
            var t = v.state;
            if (t.context) {
                if (v.marked = "def",
                    w(e, t.localVars))
                    return;
                t.localVars = {
                    name: e,
                    next: t.localVars
                }
            } else if (t.globalVars) {
                if (w(e, t.globalVars))
                    return;
                t.globalVars = {
                    name: e,
                    next: t.globalVars
                }
            }
        }
        var _ = {
            name: "this",
            next: null
        };
        function T() {
            v.state.context || (v.state.localVars = _),
                v.state.context = {
                    prev: v.state.context,
                    vars: v.state.localVars
                }
        }
        function z() {
            v.state.localVars = v.state.context.vars,
                v.state.context = v.state.context.prev
        }
        function R(e, t) {
            var n = function () {
                var n = v.state;
                n.lexical = new b(n.indented, v.stream.column(), e, null, n.lexical, t)
            };
            return n.lex = !0,
                n
        }
        function W() {
            var e = v.state;
            e.lexical.prev && (")" == e.lexical.type && (e.indented = e.lexical.indented),
                e.lexical = e.lexical.prev)
        }
        function Z(e) {
            return function t(n) {
                return n == e ? k() : ";" == e ? x() : k(t)
            }
        }
        function q(e) {
            return "@" == e ? k(E) : "var" == e ? k(R("vardef"), F, Z(";"), W) : "keyword a" == e ? k(R("form"), U, q, W) : "keyword b" == e ? k(R("form"), q, W) : "{" == e ? k(R("}"), T, M, W, z) : ";" == e ? k() : "attribute" == e ? k(V) : "function" == e ? k(J) : "for" == e ? k(R("form"), Z("("), R(")"), H, Z(")"), W, q, W) : "variable" == e ? k(R("stat"), I) : "switch" == e ? k(R("form"), U, R("}", "switch"), Z("{"), M, W, W) : "case" == e ? k(U, Z(":")) : "default" == e ? k(Z(":")) : "catch" == e ? k(R("form"), T, Z("("), ie, Z(")"), q, W, z) : "import" == e ? k(C, Z(";")) : "typedef" == e ? k(G) : x(R("stat"), U, Z(";"), W)
        }
        function U(e) {
            return $.hasOwnProperty(e) || "type" == e ? k(A) : "function" == e ? k(J) : "keyword c" == e ? k(Y) : "(" == e ? k(R(")"), Y, Z(")"), W, A) : "operator" == e ? k(U) : "[" == e ? k(R("]"), L(Y, "]"), W, A) : "{" == e ? k(R("}"), L(N, "}"), W, A) : k()
        }
        function Y(e) {
            return e.match(/[;\}\)\],]/) ? x() : x(U)
        }
        function A(e, t) {
            return "operator" == e && /\+\+|--/.test(t) ? k(A) : "operator" == e || ":" == e ? k(U) : ";" != e ? "(" == e ? k(R(")"), L(U, ")"), W, A) : "." == e ? k(D, A) : "[" == e ? k(R("]"), U, Z("]"), W, A) : void 0 : void 0
        }
        function V(e) {
            return "attribute" == e ? k(V) : "function" == e ? k(J) : "var" == e ? k(F) : void 0
        }
        function E(e) {
            return ":" == e || "variable" == e ? k(E) : "(" == e ? k(R(")"), L(j, ")"), W, q) : void 0
        }
        function j(e) {
            if ("variable" == e)
                return k()
        }
        function C(e, t) {
            return "variable" == e && /[A-Z]/.test(t.charAt(0)) ? (P(t),
                k()) : "variable" == e || "property" == e || "." == e || "*" == t ? k(C) : void 0
        }
        function G(e, t) {
            return "variable" == e && /[A-Z]/.test(t.charAt(0)) ? (P(t),
                k()) : "type" == e && /[A-Z]/.test(t.charAt(0)) ? k() : void 0
        }
        function I(e) {
            return ":" == e ? k(W, q) : x(A, Z(";"), W)
        }
        function D(e) {
            if ("variable" == e)
                return v.marked = "property",
                    k()
        }
        function N(e) {
            if ("variable" == e && (v.marked = "property"),
                $.hasOwnProperty(e))
                return k(Z(":"), U)
        }
        function L(e, t) {
            function n(i) {
                return "," == i ? k(e, n) : i == t ? k() : k(Z(t))
            }
            return function (i) {
                return i == t ? k() : x(e, n)
            }
        }
        function M(e) {
            return "}" == e ? k() : x(q, M)
        }
        function F(e, t) {
            return "variable" == e ? (X(t),
                k(ee, B)) : k()
        }
        function B(e, t) {
            return "=" == t ? k(U, B) : "," == e ? k(F) : void 0
        }
        function H(e, t) {
            return "variable" == e ? (X(t),
                k(K, U)) : x()
        }
        function K(e, t) {
            if ("in" == t)
                return k()
        }
        function J(e, t) {
            return "variable" == e || "type" == e ? (X(t),
                k(J)) : "new" == t ? k(J) : "(" == e ? k(R(")"), T, L(ie, ")"), W, ee, q, z) : void 0
        }
        function ee(e) {
            if (":" == e)
                return k(te)
        }
        function te(e) {
            return "type" == e || "variable" == e ? k() : "{" == e ? k(R("}"), L(ne, "}"), W) : void 0
        }
        function ne(e) {
            if ("variable" == e)
                return k(ee)
        }
        function ie(e, t) {
            if ("variable" == e)
                return X(t),
                    k(ee)
        }
        z.lex = !0,
            W.lex = !0;
        const re = {
            name: "haxe",
            startState: function (e) {
                return {
                    tokenize: g,
                    reAllowed: !0,
                    kwAllowed: !0,
                    cc: [],
                    lexical: new b(-e, 0, "block", !1),
                    importedtypes: ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"],
                    context: null,
                    indented: 0
                }
            },
            token: function (e, t) {
                if (e.sol() && (t.lexical.hasOwnProperty("align") || (t.lexical.align = !1),
                    t.indented = e.indentation()),
                    e.eatSpace())
                    return null;
                var n = t.tokenize(e, t);
                return "comment" == u ? n : (t.reAllowed = !("operator" != u && "keyword c" != u && !u.match(/^[\[{}\(,;:]$/)),
                    t.kwAllowed = "." != u,
                    function (e, t, n, i, r) {
                        var a = e.cc;
                        for (v.state = e,
                            v.stream = r,
                            v.marked = null,
                            v.cc = a,
                            e.lexical.hasOwnProperty("align") || (e.lexical.align = !0); ;)
                            if ((a.length ? a.pop() : q)(n, i)) {
                                for (; a.length && a[a.length - 1].lex;)
                                    a.pop()();
                                return v.marked ? v.marked : "variable" == n && y(e, i) ? "variableName.local" : "variable" == n && S(e, i) ? "variableName.special" : t
                            }
                    }(t, n, u, r, e))
            },
            indent: function (e, t, n) {
                if (e.tokenize != g)
                    return 0;
                var i = t && t.charAt(0)
                    , r = e.lexical;
                "stat" == r.type && "}" == i && (r = r.prev);
                var a = r.type
                    , o = i == a;
                return "vardef" == a ? r.indented + 4 : "form" == a && "{" == i ? r.indented : "stat" == a || "form" == a ? r.indented + n.unit : "switch" != r.info || o ? r.align ? r.column + (o ? 0 : 1) : r.indented + (o ? 0 : n.unit) : r.indented + (/^(?:case|default)\b/.test(t) ? n.unit : 2 * n.unit)
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        }
            , ae = {
                name: "hxml",
                startState: function () {
                    return {
                        define: !1,
                        inString: !1
                    }
                },
                token: function (e, t) {
                    var n = e.peek()
                        , i = e.sol();
                    if ("#" == n)
                        return e.skipToEnd(),
                            "comment";
                    if (i && "-" == n) {
                        var r = "variable-2";
                        return e.eat(/-/),
                            "-" == e.peek() && (e.eat(/-/),
                                r = "keyword a"),
                            "D" == e.peek() && (e.eat(/[D]/),
                                r = "keyword c",
                                t.define = !0),
                            e.eatWhile(/[A-Z]/i),
                            r
                    }
                    n = e.peek();
                    return 0 == t.inString && "'" == n && (t.inString = !0,
                        e.next()),
                        1 == t.inString ? (e.skipTo("'") || e.skipToEnd(),
                            "'" == e.peek() && (e.next(),
                                t.inString = !1),
                            "string") : (e.next(),
                                null)
                },
                languageData: {
                    commentTokens: {
                        line: "#"
                    }
                }
            }
    }
    ,
    15747: (e, t, n) => {
        function i(e, t) {
            return e.skipToEnd(),
                t.cur = l,
                "error"
        }
        function r(e, t) {
            return e.match(/^HTTP\/\d\.\d/) ? (t.cur = a,
                "keyword") : e.match(/^[A-Z]+/) && /[ \t]/.test(e.peek()) ? (t.cur = O,
                    "keyword") : i(e, t)
        }
        function a(e, t) {
            var n = e.match(/^\d+/);
            if (!n)
                return i(e, t);
            t.cur = o;
            var r = Number(n[0]);
            return r >= 100 && r < 400 ? "atom" : "error"
        }
        function o(e, t) {
            return e.skipToEnd(),
                t.cur = l,
                null
        }
        function O(e, t) {
            return e.eatWhile(/\S/),
                t.cur = s,
                "string.special"
        }
        function s(e, t) {
            return e.match(/^HTTP\/\d\.\d$/) ? (t.cur = l,
                "keyword") : i(e, t)
        }
        function l(e) {
            return e.sol() && !e.eat(/[ \t]/) ? e.match(/^.*?:/) ? "atom" : (e.skipToEnd(),
                "error") : (e.skipToEnd(),
                    "string")
        }
        function c(e) {
            return e.skipToEnd(),
                null
        }
        n.r(t),
            n.d(t, {
                http: () => u
            });
        const u = {
            name: "http",
            token: function (e, t) {
                var n = t.cur;
                return n != l && n != c && e.eatSpace() ? null : n(e, t)
            },
            blankLine: function (e) {
                e.cur = c
            },
            startState: function () {
                return {
                    cur: r
                }
            }
        }
    }
    ,
    32332: (e, t, n) => {
        function i(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b", "i")
        }
        n.r(t),
            n.d(t, {
                idl: () => u
            });
        var r = ["a_correlate", "abs", "acos", "adapt_hist_equal", "alog", "alog2", "alog10", "amoeba", "annotate", "app_user_dir", "app_user_dir_query", "arg_present", "array_equal", "array_indices", "arrow", "ascii_template", "asin", "assoc", "atan", "axis", "axis", "bandpass_filter", "bandreject_filter", "barplot", "bar_plot", "beseli", "beselj", "beselk", "besely", "beta", "biginteger", "bilinear", "bin_date", "binary_template", "bindgen", "binomial", "bit_ffs", "bit_population", "blas_axpy", "blk_con", "boolarr", "boolean", "boxplot", "box_cursor", "breakpoint", "broyden", "bubbleplot", "butterworth", "bytarr", "byte", "byteorder", "bytscl", "c_correlate", "calendar", "caldat", "call_external", "call_function", "call_method", "call_procedure", "canny", "catch", "cd", "cdf", "ceil", "chebyshev", "check_math", "chisqr_cvf", "chisqr_pdf", "choldc", "cholsol", "cindgen", "cir_3pnt", "clipboard", "close", "clust_wts", "cluster", "cluster_tree", "cmyk_convert", "code_coverage", "color_convert", "color_exchange", "color_quan", "color_range_map", "colorbar", "colorize_sample", "colormap_applicable", "colormap_gradient", "colormap_rotation", "colortable", "comfit", "command_line_args", "common", "compile_opt", "complex", "complexarr", "complexround", "compute_mesh_normals", "cond", "congrid", "conj", "constrained_min", "contour", "contour", "convert_coord", "convol", "convol_fft", "coord2to3", "copy_lun", "correlate", "cos", "cosh", "cpu", "cramer", "createboxplotdata", "create_cursor", "create_struct", "create_view", "crossp", "crvlength", "ct_luminance", "cti_test", "cursor", "curvefit", "cv_coord", "cvttobm", "cw_animate", "cw_animate_getp", "cw_animate_load", "cw_animate_run", "cw_arcball", "cw_bgroup", "cw_clr_index", "cw_colorsel", "cw_defroi", "cw_field", "cw_filesel", "cw_form", "cw_fslider", "cw_light_editor", "cw_light_editor_get", "cw_light_editor_set", "cw_orient", "cw_palette_editor", "cw_palette_editor_get", "cw_palette_editor_set", "cw_pdmenu", "cw_rgbslider", "cw_tmpl", "cw_zoom", "db_exists", "dblarr", "dcindgen", "dcomplex", "dcomplexarr", "define_key", "define_msgblk", "define_msgblk_from_file", "defroi", "defsysv", "delvar", "dendro_plot", "dendrogram", "deriv", "derivsig", "determ", "device", "dfpmin", "diag_matrix", "dialog_dbconnect", "dialog_message", "dialog_pickfile", "dialog_printersetup", "dialog_printjob", "dialog_read_image", "dialog_write_image", "dictionary", "digital_filter", "dilate", "dindgen", "dissolve", "dist", "distance_measure", "dlm_load", "dlm_register", "doc_library", "double", "draw_roi", "edge_dog", "efont", "eigenql", "eigenvec", "ellipse", "elmhes", "emboss", "empty", "enable_sysrtn", "eof", "eos", "erase", "erf", "erfc", "erfcx", "erode", "errorplot", "errplot", "estimator_filter", "execute", "exit", "exp", "expand", "expand_path", "expint", "extract", "extract_slice", "f_cvf", "f_pdf", "factorial", "fft", "file_basename", "file_chmod", "file_copy", "file_delete", "file_dirname", "file_expand_path", "file_gunzip", "file_gzip", "file_info", "file_lines", "file_link", "file_mkdir", "file_move", "file_poll_input", "file_readlink", "file_same", "file_search", "file_tar", "file_test", "file_untar", "file_unzip", "file_which", "file_zip", "filepath", "findgen", "finite", "fix", "flick", "float", "floor", "flow3", "fltarr", "flush", "format_axis_values", "forward_function", "free_lun", "fstat", "fulstr", "funct", "function", "fv_test", "fx_root", "fz_roots", "gamma", "gamma_ct", "gauss_cvf", "gauss_pdf", "gauss_smooth", "gauss2dfit", "gaussfit", "gaussian_function", "gaussint", "get_drive_list", "get_dxf_objects", "get_kbrd", "get_login_info", "get_lun", "get_screen_size", "getenv", "getwindows", "greg2jul", "grib", "grid_input", "grid_tps", "grid3", "griddata", "gs_iter", "h_eq_ct", "h_eq_int", "hanning", "hash", "hdf", "hdf5", "heap_free", "heap_gc", "heap_nosave", "heap_refcount", "heap_save", "help", "hilbert", "hist_2d", "hist_equal", "histogram", "hls", "hough", "hqr", "hsv", "i18n_multibytetoutf8", "i18n_multibytetowidechar", "i18n_utf8tomultibyte", "i18n_widechartomultibyte", "ibeta", "icontour", "iconvertcoord", "idelete", "identity", "idl_base64", "idl_container", "idl_validname", "idlexbr_assistant", "idlitsys_createtool", "idlunit", "iellipse", "igamma", "igetcurrent", "igetdata", "igetid", "igetproperty", "iimage", "image", "image_cont", "image_statistics", "image_threshold", "imaginary", "imap", "indgen", "int_2d", "int_3d", "int_tabulated", "intarr", "interpol", "interpolate", "interval_volume", "invert", "ioctl", "iopen", "ir_filter", "iplot", "ipolygon", "ipolyline", "iputdata", "iregister", "ireset", "iresolve", "irotate", "isa", "isave", "iscale", "isetcurrent", "isetproperty", "ishft", "isocontour", "isosurface", "isurface", "itext", "itranslate", "ivector", "ivolume", "izoom", "journal", "json_parse", "json_serialize", "jul2greg", "julday", "keyword_set", "krig2d", "kurtosis", "kw_test", "l64indgen", "la_choldc", "la_cholmprove", "la_cholsol", "la_determ", "la_eigenproblem", "la_eigenql", "la_eigenvec", "la_elmhes", "la_gm_linear_model", "la_hqr", "la_invert", "la_least_square_equality", "la_least_squares", "la_linear_equation", "la_ludc", "la_lumprove", "la_lusol", "la_svd", "la_tridc", "la_trimprove", "la_triql", "la_trired", "la_trisol", "label_date", "label_region", "ladfit", "laguerre", "lambda", "lambdap", "lambertw", "laplacian", "least_squares_filter", "leefilt", "legend", "legendre", "linbcg", "lindgen", "linfit", "linkimage", "list", "ll_arc_distance", "lmfit", "lmgr", "lngamma", "lnp_test", "loadct", "locale_get", "logical_and", "logical_or", "logical_true", "lon64arr", "lonarr", "long", "long64", "lsode", "lu_complex", "ludc", "lumprove", "lusol", "m_correlate", "machar", "make_array", "make_dll", "make_rt", "map", "mapcontinents", "mapgrid", "map_2points", "map_continents", "map_grid", "map_image", "map_patch", "map_proj_forward", "map_proj_image", "map_proj_info", "map_proj_init", "map_proj_inverse", "map_set", "matrix_multiply", "matrix_power", "max", "md_test", "mean", "meanabsdev", "mean_filter", "median", "memory", "mesh_clip", "mesh_decimate", "mesh_issolid", "mesh_merge", "mesh_numtriangles", "mesh_obj", "mesh_smooth", "mesh_surfacearea", "mesh_validate", "mesh_volume", "message", "min", "min_curve_surf", "mk_html_help", "modifyct", "moment", "morph_close", "morph_distance", "morph_gradient", "morph_hitormiss", "morph_open", "morph_thin", "morph_tophat", "multi", "n_elements", "n_params", "n_tags", "ncdf", "newton", "noise_hurl", "noise_pick", "noise_scatter", "noise_slur", "norm", "obj_class", "obj_destroy", "obj_hasmethod", "obj_isa", "obj_new", "obj_valid", "objarr", "on_error", "on_ioerror", "online_help", "openr", "openu", "openw", "oplot", "oploterr", "orderedhash", "p_correlate", "parse_url", "particle_trace", "path_cache", "path_sep", "pcomp", "plot", "plot3d", "plot", "plot_3dbox", "plot_field", "ploterr", "plots", "polar_contour", "polar_surface", "polyfill", "polyshade", "pnt_line", "point_lun", "polarplot", "poly", "poly_2d", "poly_area", "poly_fit", "polyfillv", "polygon", "polyline", "polywarp", "popd", "powell", "pref_commit", "pref_get", "pref_set", "prewitt", "primes", "print", "printf", "printd", "pro", "product", "profile", "profiler", "profiles", "project_vol", "ps_show_fonts", "psafm", "pseudo", "ptr_free", "ptr_new", "ptr_valid", "ptrarr", "pushd", "qgrid3", "qhull", "qromb", "qromo", "qsimp", "query_*", "query_ascii", "query_bmp", "query_csv", "query_dicom", "query_gif", "query_image", "query_jpeg", "query_jpeg2000", "query_mrsid", "query_pict", "query_png", "query_ppm", "query_srf", "query_tiff", "query_video", "query_wav", "r_correlate", "r_test", "radon", "randomn", "randomu", "ranks", "rdpix", "read", "readf", "read_ascii", "read_binary", "read_bmp", "read_csv", "read_dicom", "read_gif", "read_image", "read_interfile", "read_jpeg", "read_jpeg2000", "read_mrsid", "read_pict", "read_png", "read_ppm", "read_spr", "read_srf", "read_sylk", "read_tiff", "read_video", "read_wav", "read_wave", "read_x11_bitmap", "read_xwd", "reads", "readu", "real_part", "rebin", "recall_commands", "recon3", "reduce_colors", "reform", "region_grow", "register_cursor", "regress", "replicate", "replicate_inplace", "resolve_all", "resolve_routine", "restore", "retall", "return", "reverse", "rk4", "roberts", "rot", "rotate", "round", "routine_filepath", "routine_info", "rs_test", "s_test", "save", "savgol", "scale3", "scale3d", "scatterplot", "scatterplot3d", "scope_level", "scope_traceback", "scope_varfetch", "scope_varname", "search2d", "search3d", "sem_create", "sem_delete", "sem_lock", "sem_release", "set_plot", "set_shading", "setenv", "sfit", "shade_surf", "shade_surf_irr", "shade_volume", "shift", "shift_diff", "shmdebug", "shmmap", "shmunmap", "shmvar", "show3", "showfont", "signum", "simplex", "sin", "sindgen", "sinh", "size", "skewness", "skip_lun", "slicer3", "slide_image", "smooth", "sobel", "socket", "sort", "spawn", "sph_4pnt", "sph_scat", "spher_harm", "spl_init", "spl_interp", "spline", "spline_p", "sprsab", "sprsax", "sprsin", "sprstp", "sqrt", "standardize", "stddev", "stop", "strarr", "strcmp", "strcompress", "streamline", "streamline", "stregex", "stretch", "string", "strjoin", "strlen", "strlowcase", "strmatch", "strmessage", "strmid", "strpos", "strput", "strsplit", "strtrim", "struct_assign", "struct_hide", "strupcase", "surface", "surface", "surfr", "svdc", "svdfit", "svsol", "swap_endian", "swap_endian_inplace", "symbol", "systime", "t_cvf", "t_pdf", "t3d", "tag_names", "tan", "tanh", "tek_color", "temporary", "terminal_size", "tetra_clip", "tetra_surface", "tetra_volume", "text", "thin", "thread", "threed", "tic", "time_test2", "timegen", "timer", "timestamp", "timestamptovalues", "tm_test", "toc", "total", "trace", "transpose", "tri_surf", "triangulate", "trigrid", "triql", "trired", "trisol", "truncate_lun", "ts_coef", "ts_diff", "ts_fcast", "ts_smooth", "tv", "tvcrs", "tvlct", "tvrd", "tvscl", "typename", "uindgen", "uint", "uintarr", "ul64indgen", "ulindgen", "ulon64arr", "ulonarr", "ulong", "ulong64", "uniq", "unsharp_mask", "usersym", "value_locate", "variance", "vector", "vector_field", "vel", "velovect", "vert_t3d", "voigt", "volume", "voronoi", "voxel_proj", "wait", "warp_tri", "watershed", "wdelete", "wf_draw", "where", "widget_base", "widget_button", "widget_combobox", "widget_control", "widget_displaycontextmenu", "widget_draw", "widget_droplist", "widget_event", "widget_info", "widget_label", "widget_list", "widget_propertysheet", "widget_slider", "widget_tab", "widget_table", "widget_text", "widget_tree", "widget_tree_move", "widget_window", "wiener_filter", "window", "window", "write_bmp", "write_csv", "write_gif", "write_image", "write_jpeg", "write_jpeg2000", "write_nrif", "write_pict", "write_png", "write_ppm", "write_spr", "write_srf", "write_sylk", "write_tiff", "write_video", "write_wav", "write_wave", "writeu", "wset", "wshow", "wtn", "wv_applet", "wv_cwt", "wv_cw_wavelet", "wv_denoise", "wv_dwt", "wv_fn_coiflet", "wv_fn_daubechies", "wv_fn_gaussian", "wv_fn_haar", "wv_fn_morlet", "wv_fn_paul", "wv_fn_symlet", "wv_import_data", "wv_import_wavelet", "wv_plot3d_wps", "wv_plot_multires", "wv_pwt", "wv_tool_denoise", "xbm_edit", "xdisplayfile", "xdxf", "xfont", "xinteranimate", "xloadct", "xmanager", "xmng_tmpl", "xmtool", "xobjview", "xobjview_rotate", "xobjview_write_image", "xpalette", "xpcolor", "xplot3d", "xregistered", "xroi", "xsq_test", "xsurface", "xvaredit", "xvolume", "xvolume_rotate", "xvolume_write_image", "xyouts", "zlib_compress", "zlib_uncompress", "zoom", "zoom_24"]
            , a = i(r)
            , o = ["begin", "end", "endcase", "endfor", "endwhile", "endif", "endrep", "endforeach", "break", "case", "continue", "for", "foreach", "goto", "if", "then", "else", "repeat", "until", "switch", "while", "do", "pro", "function"]
            , O = i(o)
            , s = new RegExp("^[_a-z\xa1-\uffff][_a-z0-9\xa1-\uffff]*", "i")
            , l = /[+\-*&=<>\/@#~$]/
            , c = new RegExp("(and|or|eq|lt|le|gt|ge|ne|not)", "i");
        const u = {
            name: "idl",
            token: function (e) {
                return function (e) {
                    if (e.eatSpace())
                        return null;
                    if (e.match(";"))
                        return e.skipToEnd(),
                            "comment";
                    if (e.match(/^[0-9\.+-]/, !1)) {
                        if (e.match(/^[+-]?0x[0-9a-fA-F]+/))
                            return "number";
                        if (e.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
                            return "number";
                        if (e.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
                            return "number"
                    }
                    return e.match(/^"([^"]|(""))*"/) || e.match(/^'([^']|(''))*'/) ? "string" : e.match(O) ? "keyword" : e.match(a) ? "builtin" : e.match(s) ? "variable" : e.match(l) || e.match(c) ? "operator" : (e.next(),
                        null)
                }(e)
            },
            languageData: {
                autocomplete: r.concat(o)
            }
        }
    }
    ,
    17269: (e, t, n) => {
        n.r(t),
            n.d(t, {
                jinja2: () => l
            });
        var i = ["and", "as", "block", "endblock", "by", "cycle", "debug", "else", "elif", "extends", "filter", "endfilter", "firstof", "do", "for", "endfor", "if", "endif", "ifchanged", "endifchanged", "ifequal", "endifequal", "ifnotequal", "set", "raw", "endraw", "endifnotequal", "in", "include", "load", "not", "now", "or", "parsed", "regroup", "reversed", "spaceless", "call", "endcall", "macro", "endmacro", "endspaceless", "ssi", "templatetag", "openblock", "closeblock", "openvariable", "closevariable", "without", "context", "openbrace", "closebrace", "opencomment", "closecomment", "widthratio", "url", "with", "endwith", "get_current_language", "trans", "endtrans", "noop", "blocktrans", "endblocktrans", "get_available_languages", "get_current_language_bidi", "pluralize", "autoescape", "endautoescape"]
            , r = /^[+\-*&%=<>!?|~^]/
            , a = /^[:\[\(\{]/
            , o = ["true", "false"]
            , O = /^(\d[+\-\*\/])?\d+(\.\d+)?/;
        function s(e, t) {
            var n = e.peek();
            if (t.incomment)
                return e.skipTo("#}") ? (e.eatWhile(/\#|}/),
                    t.incomment = !1) : e.skipToEnd(),
                    "comment";
            if (t.intag) {
                if (t.operator) {
                    if (t.operator = !1,
                        e.match(o))
                        return "atom";
                    if (e.match(O))
                        return "number"
                }
                if (t.sign) {
                    if (t.sign = !1,
                        e.match(o))
                        return "atom";
                    if (e.match(O))
                        return "number"
                }
                if (t.instring)
                    return n == t.instring && (t.instring = !1),
                        e.next(),
                        "string";
                if ("'" == n || '"' == n)
                    return t.instring = n,
                        e.next(),
                        "string";
                if (t.inbraces > 0 && ")" == n)
                    e.next(),
                        t.inbraces--;
                else if ("(" == n)
                    e.next(),
                        t.inbraces++;
                else if (t.inbrackets > 0 && "]" == n)
                    e.next(),
                        t.inbrackets--;
                else if ("[" == n)
                    e.next(),
                        t.inbrackets++;
                else {
                    if (!t.lineTag && (e.match(t.intag + "}") || e.eat("-") && e.match(t.intag + "}")))
                        return t.intag = !1,
                            "tag";
                    if (e.match(r))
                        return t.operator = !0,
                            "operator";
                    if (e.match(a))
                        t.sign = !0;
                    else {
                        if (1 == e.column() && t.lineTag && e.match(i))
                            return "keyword";
                        if (e.eat(" ") || e.sol()) {
                            if (e.match(i))
                                return "keyword";
                            if (e.match(o))
                                return "atom";
                            if (e.match(O))
                                return "number";
                            e.sol() && e.next()
                        } else
                            e.next()
                    }
                }
                return "variable"
            }
            if (e.eat("{")) {
                if (e.eat("#"))
                    return t.incomment = !0,
                        e.skipTo("#}") ? (e.eatWhile(/\#|}/),
                            t.incomment = !1) : e.skipToEnd(),
                        "comment";
                if (n = e.eat(/\{|%/))
                    return t.intag = n,
                        t.inbraces = 0,
                        t.inbrackets = 0,
                        "{" == n && (t.intag = "}"),
                        e.eat("-"),
                        "tag"
            } else if (e.eat("#")) {
                if ("#" == e.peek())
                    return e.skipToEnd(),
                        "comment";
                if (!e.eol())
                    return t.intag = !0,
                        t.lineTag = !0,
                        t.inbraces = 0,
                        t.inbrackets = 0,
                        "tag"
            }
            e.next()
        }
        i = new RegExp("((" + i.join(")|(") + "))\\b"),
            o = new RegExp("((" + o.join(")|(") + "))\\b");
        const l = {
            name: "jinja2",
            startState: function () {
                return {
                    tokenize: s,
                    inbrackets: 0,
                    inbraces: 0
                }
            },
            token: function (e, t) {
                var n = t.tokenize(e, t);
                return e.eol() && t.lineTag && !t.instring && 0 == t.inbraces && 0 == t.inbrackets && (t.intag = !1,
                    t.lineTag = !1),
                    n
            },
            languageData: {
                commentTokens: {
                    block: {
                        open: "{#",
                        close: "#}",
                        line: "##"
                    }
                }
            }
        }
    }
    ,
    76974: (e, t, n) => {
        function i(e, t, n) {
            return "undefined" === typeof n && (n = ""),
                "undefined" === typeof t && (t = "\\b"),
                new RegExp("^" + n + "((" + e.join(")|(") + "))" + t)
        }
        n.r(t),
            n.d(t, {
                julia: () => k
            });
        var r = ["[<>]:", "[<>=]=", "<<=?", ">>>?=?", "=>", "--?>", "<--[->]?", "\\/\\/", "\\.{2,3}", "[\\.\\\\%*+\\-<>!\\/^|&]=?", "\\?", "\\$", "~", ":"]
            , a = i(["[<>]:", "[<>=]=", "[!=]==", "<<=?", ">>>?=?", "=>?", "--?>", "<--[->]?", "\\/\\/", "[\\\\%*+\\-<>!\\/^|&\\u00F7\\u22BB]=?", "\\?", "\\$", "~", ":", "\\u00D7", "\\u2208", "\\u2209", "\\u220B", "\\u220C", "\\u2218", "\\u221A", "\\u221B", "\\u2229", "\\u222A", "\\u2260", "\\u2264", "\\u2265", "\\u2286", "\\u2288", "\\u228A", "\\u22C5", "\\b(in|isa)\\b(?!.?\\()"], "")
            , o = /^[;,()[\]{}]/
            , O = /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/
            , s = i(["\\\\[0-7]{1,3}", "\\\\x[A-Fa-f0-9]{1,2}", "\\\\[abefnrtv0%?'\"\\\\]", "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])"], "'")
            , l = ["if", "else", "elseif", "while", "for", "begin", "let", "end", "do", "try", "catch", "finally", "return", "break", "continue", "global", "local", "const", "export", "import", "importall", "using", "function", "where", "macro", "module", "baremodule", "struct", "type", "mutable", "immutable", "quote", "typealias", "abstract", "primitive", "bitstype"]
            , c = ["true", "false", "nothing", "NaN", "Inf"]
            , u = i(["begin", "function", "type", "struct", "immutable", "let", "macro", "for", "while", "quote", "if", "else", "elseif", "try", "finally", "catch", "do"])
            , d = i(["end", "else", "elseif", "catch", "finally"])
            , h = i(l)
            , f = i(c)
            , p = /^@[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/
            , m = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/
            , g = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/
            , Q = i(r, "", "@")
            , $ = i(r, "", ":");
        function b(e) {
            return e.nestedArrays > 0
        }
        function y(e, t) {
            return "undefined" === typeof t && (t = 0),
                e.scopes.length <= t ? null : e.scopes[e.scopes.length - (t + 1)]
        }
        function S(e, t) {
            if (e.match("#=", !1))
                return t.tokenize = v,
                    t.tokenize(e, t);
            var n = t.leavingExpr;
            if (e.sol() && (n = !1),
                t.leavingExpr = !1,
                n && e.match(/^'+/))
                return "operator";
            if (e.match(/\.{4,}/))
                return "error";
            if (e.match(/\.{1,3}/))
                return "operator";
            if (e.eatSpace())
                return null;
            var i, r = e.peek();
            if ("#" === r)
                return e.skipToEnd(),
                    "comment";
            if ("[" === r && (t.scopes.push("["),
                t.nestedArrays++),
                "(" === r && (t.scopes.push("("),
                    t.nestedGenerators++),
                b(t) && "]" === r) {
                for (; t.scopes.length && "[" !== y(t);)
                    t.scopes.pop();
                t.scopes.pop(),
                    t.nestedArrays--,
                    t.leavingExpr = !0
            }
            if (function (e) {
                return e.nestedGenerators > 0
            }(t) && ")" === r) {
                for (; t.scopes.length && "(" !== y(t);)
                    t.scopes.pop();
                t.scopes.pop(),
                    t.nestedGenerators--,
                    t.leavingExpr = !0
            }
            if (b(t)) {
                if ("end" == t.lastToken && e.match(":"))
                    return "operator";
                if (e.match("end"))
                    return "number"
            }
            if ((i = e.match(u, !1)) && t.scopes.push(i[0]),
                e.match(d, !1) && t.scopes.pop(),
                e.match(/^::(?![:\$])/))
                return t.tokenize = P,
                    t.tokenize(e, t);
            if (!n && (e.match(m) || e.match($)))
                return "builtin";
            if (e.match(a))
                return "operator";
            if (e.match(/^\.?\d/, !1)) {
                var s = RegExp(/^im\b/)
                    , l = !1;
                if (e.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i) && (l = !0),
                    e.match(/^0x[0-9a-f_]+/i) && (l = !0),
                    e.match(/^0b[01_]+/i) && (l = !0),
                    e.match(/^0o[0-7_]+/i) && (l = !0),
                    e.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i) && (l = !0),
                    e.match(/^\d[_\d]*(e[\+\-]?\d+)?/i) && (l = !0),
                    l)
                    return e.match(s),
                        t.leavingExpr = !0,
                        "number"
            }
            if (e.match("'"))
                return t.tokenize = x,
                    t.tokenize(e, t);
            if (e.match(g))
                return t.tokenize = function (e) {
                    '"""' === e.substr(-3) ? e = '"""' : '"' === e.substr(-1) && (e = '"');
                    function t(t, n) {
                        if (t.eat("\\"))
                            t.next();
                        else {
                            if (t.match(e))
                                return n.tokenize = S,
                                    n.leavingExpr = !0,
                                    "string";
                            t.eat(/[`"]/)
                        }
                        return t.eatWhile(/[^\\`"]/),
                            "string"
                    }
                    return t
                }(e.current()),
                    t.tokenize(e, t);
            if (e.match(p) || e.match(Q))
                return "meta";
            if (e.match(o))
                return null;
            if (e.match(h))
                return "keyword";
            if (e.match(f))
                return "builtin";
            var c = t.isDefinition || "function" == t.lastToken || "macro" == t.lastToken || "type" == t.lastToken || "struct" == t.lastToken || "immutable" == t.lastToken;
            return e.match(O) ? c ? "." === e.peek() ? (t.isDefinition = !0,
                "variable") : (t.isDefinition = !1,
                    "def") : (t.leavingExpr = !0,
                        "variable") : (e.next(),
                            "error")
        }
        function P(e, t) {
            return e.match(/.*?(?=[,;{}()=\s]|$)/),
                e.match("{") ? t.nestedParameters++ : e.match("}") && t.nestedParameters > 0 && t.nestedParameters--,
                t.nestedParameters > 0 ? e.match(/.*?(?={|})/) || e.next() : 0 == t.nestedParameters && (t.tokenize = S),
                "builtin"
        }
        function v(e, t) {
            return e.match("#=") && t.nestedComments++,
                e.match(/.*?(?=(#=|=#))/) || e.skipToEnd(),
                e.match("=#") && (t.nestedComments--,
                    0 == t.nestedComments && (t.tokenize = S)),
                "comment"
        }
        function x(e, t) {
            var n, i = !1;
            if (e.match(s))
                i = !0;
            else if (n = e.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
                ((r = parseInt(n[1], 16)) <= 55295 || r >= 57344) && (i = !0,
                    e.next())
            } else if (n = e.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
                var r;
                (r = parseInt(n[1], 16)) <= 1114111 && (i = !0,
                    e.next())
            }
            return i ? (t.leavingExpr = !0,
                t.tokenize = S,
                "string") : (e.match(/^[^']+(?=')/) || e.skipToEnd(),
                    e.match("'") && (t.tokenize = S),
                    "error")
        }
        const k = {
            name: "julia",
            startState: function () {
                return {
                    tokenize: S,
                    scopes: [],
                    lastToken: null,
                    leavingExpr: !1,
                    isDefinition: !1,
                    nestedArrays: 0,
                    nestedComments: 0,
                    nestedGenerators: 0,
                    nestedParameters: 0,
                    firstParenPos: -1
                }
            },
            token: function (e, t) {
                var n = t.tokenize(e, t)
                    , i = e.current();
                return i && n && (t.lastToken = i),
                    n
            },
            indent: function (e, t, n) {
                var i = 0;
                return ("]" === t || ")" === t || /^end\b/.test(t) || /^else/.test(t) || /^catch\b/.test(t) || /^elseif\b/.test(t) || /^finally/.test(t)) && (i = -1),
                    (e.scopes.length + i) * n.unit
            },
            languageData: {
                indentOnInput: /^\s*(end|else|catch|finally)\b$/,
                commentTokens: {
                    line: "#",
                    block: {
                        open: "#=",
                        close: "=#"
                    }
                },
                closeBrackets: {
                    brackets: ["(", "[", "{", '"']
                },
                autocomplete: l.concat(c)
            }
        }
    }
    ,
    59702: (e, t, n) => {
        n.r(t),
            n.d(t, {
                liveScript: () => f
            });
        var i = function (e, t) {
            var n = t.next || "start";
            if (n) {
                t.next = t.next;
                var i = s[n];
                if (i.splice) {
                    for (var r = 0; r < i.length; ++r) {
                        var a = i[r];
                        if (a.regex && e.match(a.regex))
                            return t.next = a.next || t.next,
                                a.token
                    }
                    return e.next(),
                        "error"
                }
                if (e.match(a = s[n]))
                    return a.regex && e.match(a.regex) ? (t.next = a.next,
                        a.token) : (e.next(),
                            "error")
            }
            return e.next(),
                "error"
        }
            , r = "(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*"
            , a = RegExp("(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*" + r + ")?))\\s*$")
            , o = "(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))"
            , O = {
                token: "string",
                regex: ".+"
            }
            , s = {
                start: [{
                    token: "docComment",
                    regex: "/\\*",
                    next: "comment"
                }, {
                    token: "comment",
                    regex: "#.*"
                }, {
                    token: "keyword",
                    regex: "(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)" + o
                }, {
                    token: "atom",
                    regex: "(?:true|false|yes|no|on|off|null|void|undefined)" + o
                }, {
                    token: "invalid",
                    regex: "(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)" + o
                }, {
                    token: "className.standard",
                    regex: "(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)" + o
                }, {
                    token: "variableName.function.standard",
                    regex: "(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)" + o
                }, {
                    token: "variableName.standard",
                    regex: "(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)" + o
                }, {
                    token: "variableName",
                    regex: r + "\\s*:(?![:=])"
                }, {
                    token: "variableName",
                    regex: r
                }, {
                    token: "operatorKeyword",
                    regex: "(?:\\.{3}|\\s+\\?)"
                }, {
                    token: "keyword",
                    regex: "(?:@+|::|\\.\\.)",
                    next: "key"
                }, {
                    token: "operatorKeyword",
                    regex: "\\.\\s*",
                    next: "key"
                }, {
                    token: "string",
                    regex: "\\\\\\S[^\\s,;)}\\]]*"
                }, {
                    token: "docString",
                    regex: "'''",
                    next: "qdoc"
                }, {
                    token: "docString",
                    regex: '"""',
                    next: "qqdoc"
                }, {
                    token: "string",
                    regex: "'",
                    next: "qstring"
                }, {
                    token: "string",
                    regex: '"',
                    next: "qqstring"
                }, {
                    token: "string",
                    regex: "`",
                    next: "js"
                }, {
                    token: "string",
                    regex: "<\\[",
                    next: "words"
                }, {
                    token: "regexp",
                    regex: "//",
                    next: "heregex"
                }, {
                    token: "regexp",
                    regex: "\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}",
                    next: "key"
                }, {
                    token: "number",
                    regex: "(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)"
                }, {
                    token: "paren",
                    regex: "[({[]"
                }, {
                    token: "paren",
                    regex: "[)}\\]]",
                    next: "key"
                }, {
                    token: "operatorKeyword",
                    regex: "\\S+"
                }, {
                    token: "content",
                    regex: "\\s+"
                }],
                heregex: [{
                    token: "regexp",
                    regex: ".*?//[gimy$?]{0,4}",
                    next: "start"
                }, {
                    token: "regexp",
                    regex: "\\s*#{"
                }, {
                    token: "comment",
                    regex: "\\s+(?:#.*)?"
                }, {
                    token: "regexp",
                    regex: "\\S+"
                }],
                key: [{
                    token: "operatorKeyword",
                    regex: "[.?@!]+"
                }, {
                    token: "variableName",
                    regex: r,
                    next: "start"
                }, {
                    token: "content",
                    regex: "",
                    next: "start"
                }],
                comment: [{
                    token: "docComment",
                    regex: ".*?\\*/",
                    next: "start"
                }, {
                    token: "docComment",
                    regex: ".+"
                }],
                qdoc: [{
                    token: "string",
                    regex: ".*?'''",
                    next: "key"
                }, O],
                qqdoc: [{
                    token: "string",
                    regex: '.*?"""',
                    next: "key"
                }, O],
                qstring: [{
                    token: "string",
                    regex: "[^\\\\']*(?:\\\\.[^\\\\']*)*'",
                    next: "key"
                }, O],
                qqstring: [{
                    token: "string",
                    regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
                    next: "key"
                }, O],
                js: [{
                    token: "string",
                    regex: "[^\\\\`]*(?:\\\\.[^\\\\`]*)*`",
                    next: "key"
                }, O],
                words: [{
                    token: "string",
                    regex: ".*?\\]>",
                    next: "key"
                }, O]
            };
        for (var l in s) {
            var c = s[l];
            if (c.splice)
                for (var u = 0, d = c.length; u < d; ++u) {
                    var h = c[u];
                    "string" === typeof h.regex && (s[l][u].regex = new RegExp("^" + h.regex))
                }
            else
                "string" === typeof h.regex && (s[l].regex = new RegExp("^" + c.regex))
        }
        const f = {
            name: "livescript",
            startState: function () {
                return {
                    next: "start",
                    lastToken: {
                        style: null,
                        indent: 0,
                        content: ""
                    }
                }
            },
            token: function (e, t) {
                for (; e.pos == e.start;)
                    var n = i(e, t);
                return t.lastToken = {
                    style: n,
                    indent: e.indentation(),
                    content: e.current()
                },
                    n.replace(/\./g, " ")
            },
            indent: function (e) {
                var t = e.lastToken.indent;
                return e.lastToken.content.match(a) && (t += 2),
                    t
            }
        }
    }
    ,
    43093: (e, t, n) => {
        function i(e) {
            return new RegExp("^(?:" + e.join("|") + ")$", "i")
        }
        n.r(t),
            n.d(t, {
                lua: () => d
            });
        var r = i(["_G", "_VERSION", "assert", "collectgarbage", "dofile", "error", "getfenv", "getmetatable", "ipairs", "load", "loadfile", "loadstring", "module", "next", "pairs", "pcall", "print", "rawequal", "rawget", "rawset", "require", "select", "setfenv", "setmetatable", "tonumber", "tostring", "type", "unpack", "xpcall", "coroutine.create", "coroutine.resume", "coroutine.running", "coroutine.status", "coroutine.wrap", "coroutine.yield", "debug.debug", "debug.getfenv", "debug.gethook", "debug.getinfo", "debug.getlocal", "debug.getmetatable", "debug.getregistry", "debug.getupvalue", "debug.setfenv", "debug.sethook", "debug.setlocal", "debug.setmetatable", "debug.setupvalue", "debug.traceback", "close", "flush", "lines", "read", "seek", "setvbuf", "write", "io.close", "io.flush", "io.input", "io.lines", "io.open", "io.output", "io.popen", "io.read", "io.stderr", "io.stdin", "io.stdout", "io.tmpfile", "io.type", "io.write", "math.abs", "math.acos", "math.asin", "math.atan", "math.atan2", "math.ceil", "math.cos", "math.cosh", "math.deg", "math.exp", "math.floor", "math.fmod", "math.frexp", "math.huge", "math.ldexp", "math.log", "math.log10", "math.max", "math.min", "math.modf", "math.pi", "math.pow", "math.rad", "math.random", "math.randomseed", "math.sin", "math.sinh", "math.sqrt", "math.tan", "math.tanh", "os.clock", "os.date", "os.difftime", "os.execute", "os.exit", "os.getenv", "os.remove", "os.rename", "os.setlocale", "os.time", "os.tmpname", "package.cpath", "package.loaded", "package.loaders", "package.loadlib", "package.path", "package.preload", "package.seeall", "string.byte", "string.char", "string.dump", "string.find", "string.format", "string.gmatch", "string.gsub", "string.len", "string.lower", "string.match", "string.rep", "string.reverse", "string.sub", "string.upper", "table.concat", "table.insert", "table.maxn", "table.remove", "table.sort"])
            , a = i(["and", "break", "elseif", "false", "nil", "not", "or", "return", "true", "function", "end", "if", "then", "else", "do", "while", "repeat", "until", "for", "in", "local"])
            , o = i(["function", "if", "repeat", "do", "\\(", "{"])
            , O = i(["end", "until", "\\)", "}"])
            , s = new RegExp("^(?:" + ["end", "until", "\\)", "}", "else", "elseif"].join("|") + ")", "i");
        function l(e) {
            for (var t = 0; e.eat("=");)
                ++t;
            return e.eat("["),
                t
        }
        function c(e, t) {
            var n, i = e.next();
            return "-" == i && e.eat("-") ? e.eat("[") && e.eat("[") ? (t.cur = u(l(e), "comment"))(e, t) : (e.skipToEnd(),
                "comment") : '"' == i || "'" == i ? (t.cur = (n = i,
                    function (e, t) {
                        for (var i, r = !1; null != (i = e.next()) && (i != n || r);)
                            r = !r && "\\" == i;
                        return r || (t.cur = c),
                            "string"
                    }
                ))(e, t) : "[" == i && /[\[=]/.test(e.peek()) ? (t.cur = u(l(e), "string"))(e, t) : /\d/.test(i) ? (e.eatWhile(/[\w.%]/),
                    "number") : /[\w_]/.test(i) ? (e.eatWhile(/[\w\\\-_.]/),
                        "variable") : null
        }
        function u(e, t) {
            return function (n, i) {
                for (var r, a = null; null != (r = n.next());)
                    if (null == a)
                        "]" == r && (a = 0);
                    else if ("=" == r)
                        ++a;
                    else {
                        if ("]" == r && a == e) {
                            i.cur = c;
                            break
                        }
                        a = null
                    }
                return t
            }
        }
        const d = {
            name: "lua",
            startState: function () {
                return {
                    basecol: 0,
                    indentDepth: 0,
                    cur: c
                }
            },
            token: function (e, t) {
                if (e.eatSpace())
                    return null;
                var n = t.cur(e, t)
                    , i = e.current();
                return "variable" == n && (a.test(i) ? n = "keyword" : r.test(i) && (n = "builtin")),
                    "comment" != n && "string" != n && (o.test(i) ? ++t.indentDepth : O.test(i) && --t.indentDepth),
                    n
            },
            indent: function (e, t, n) {
                var i = s.test(t);
                return e.basecol + n.unit * (e.indentDepth - (i ? 1 : 0))
            },
            languageData: {
                indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
                commentTokens: {
                    line: "--",
                    block: {
                        open: "--[[",
                        close: "]]--"
                    }
                }
            }
        }
    }
    ,
    8083: (e, t, n) => {
        n.r(t),
            n.d(t, {
                mathematica: () => d
            });
        var i = "[a-zA-Z\\$][a-zA-Z0-9\\$]*"
            , r = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)"
            , a = "(?:`(?:`?" + r + ")?)"
            , o = new RegExp("(?:(?:\\d+)(?:\\^\\^(?:\\.\\w+|\\w+\\.\\w*|\\w+)" + a + "?(?:\\*\\^[+-]?\\d+)?))")
            , O = new RegExp("(?:" + r + a + "?(?:\\*\\^[+-]?\\d+)?)")
            , s = new RegExp("(?:`?)(?:" + i + ")(?:`(?:" + i + "))*(?:`?)");
        function l(e, t) {
            var n;
            return '"' === (n = e.next()) ? (t.tokenize = c,
                t.tokenize(e, t)) : "(" === n && e.eat("*") ? (t.commentLevel++,
                    t.tokenize = u,
                    t.tokenize(e, t)) : (e.backUp(1),
                        e.match(o, !0, !1) || e.match(O, !0, !1) ? "number" : e.match(/(?:In|Out)\[[0-9]*\]/, !0, !1) ? "atom" : e.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, !0, !1) ? "meta" : e.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, !0, !1) ? "string.special" : e.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, !0, !1) || e.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, !0, !1) || e.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, !0, !1) || e.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, !0, !1) ? "variableName.special" : e.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, !0, !1) ? "character" : e.match(/(?:\[|\]|{|}|\(|\))/, !0, !1) ? "bracket" : e.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, !0, !1) ? "variableName.constant" : e.match(s, !0, !1) ? "keyword" : e.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, !0, !1) ? "operator" : (e.next(),
                            "error"))
        }
        function c(e, t) {
            for (var n, i = !1, r = !1; null != (n = e.next());) {
                if ('"' === n && !r) {
                    i = !0;
                    break
                }
                r = !r && "\\" === n
            }
            return i && !r && (t.tokenize = l),
                "string"
        }
        function u(e, t) {
            for (var n, i; t.commentLevel > 0 && null != (i = e.next());)
                "(" === n && "*" === i && t.commentLevel++,
                    "*" === n && ")" === i && t.commentLevel--,
                    n = i;
            return t.commentLevel <= 0 && (t.tokenize = l),
                "comment"
        }
        const d = {
            name: "mathematica",
            startState: function () {
                return {
                    tokenize: l,
                    commentLevel: 0
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            languageData: {
                commentTokens: {
                    block: {
                        open: "(*",
                        close: "*)"
                    }
                }
            }
        }
    }
    ,
    20235: (e, t, n) => {
        n.r(t),
            n.d(t, {
                mbox: () => f
            });
        var i = ["From", "Sender", "Reply-To", "To", "Cc", "Bcc", "Message-ID", "In-Reply-To", "References", "Resent-From", "Resent-Sender", "Resent-To", "Resent-Cc", "Resent-Bcc", "Resent-Message-ID", "Return-Path", "Received"]
            , r = ["Date", "Subject", "Comments", "Keywords", "Resent-Date"]
            , a = /^[ \t]/
            , o = /^From /
            , O = new RegExp("^(" + i.join("|") + "): ")
            , s = new RegExp("^(" + r.join("|") + "): ")
            , l = /^[^:]+:/
            , c = /^[^ ]+@[^ ]+/
            , u = /^.*?(?=[^ ]+?@[^ ]+)/
            , d = /^<.*?>/
            , h = /^.*?(?=<.*>)/;
        const f = {
            name: "mbox",
            startState: function () {
                return {
                    inSeparator: !1,
                    inHeader: !1,
                    emailPermitted: !1,
                    header: null,
                    inHeaders: !1
                }
            },
            token: function (e, t) {
                if (e.sol()) {
                    if (t.inSeparator = !1,
                        t.inHeader && e.match(a))
                        return null;
                    if (t.inHeader = !1,
                        t.header = null,
                        e.match(o))
                        return t.inHeaders = !0,
                            t.inSeparator = !0,
                            "atom";
                    var n, i = !1;
                    return (n = e.match(s)) || (i = !0) && (n = e.match(O)) ? (t.inHeaders = !0,
                        t.inHeader = !0,
                        t.emailPermitted = i,
                        t.header = n[1],
                        "atom") : t.inHeaders && (n = e.match(l)) ? (t.inHeader = !0,
                            t.emailPermitted = !0,
                            t.header = n[1],
                            "atom") : (t.inHeaders = !1,
                                e.skipToEnd(),
                                null)
                }
                if (t.inSeparator)
                    return e.match(c) ? "link" : (e.match(u) || e.skipToEnd(),
                        "atom");
                if (t.inHeader) {
                    var r = function (e) {
                        return "Subject" === e ? "header" : "string"
                    }(t.header);
                    if (t.emailPermitted) {
                        if (e.match(d))
                            return r + " link";
                        if (e.match(h))
                            return r
                    }
                    return e.skipToEnd(),
                        r
                }
                return e.skipToEnd(),
                    null
            },
            blankLine: function (e) {
                e.inHeaders = e.inSeparator = e.inHeader = !1
            },
            languageData: {
                autocomplete: i.concat(r)
            }
        }
    }
    ,
    2206: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                mirc: () => d
            });
        var r = i("$! $$ $& $? $+ $abook $abs $active $activecid $activewid $address $addtok $agent $agentname $agentstat $agentver $alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime $asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind $binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes $chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color $com $comcall $comchan $comerr $compact $compress $comval $cos $count $cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight $dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress $deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll $dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error $eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir $finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve $fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt $group $halted $hash $height $hfind $hget $highlight $hnick $hotline $hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil $inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect $insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile $isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive $lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock $lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer $maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext $menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode $modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile $nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly $opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree $pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo $readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex $reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline $sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin $site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname $sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped $syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp $timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel $ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver $version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor")
            , a = i("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice away background ban bcopy beep bread break breplace bset btrunc bunset bwrite channel clear clearall cline clipboard close cnick color comclose comopen comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver debug dec describe dialog did didtok disable disconnect dlevel dline dll dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable events exit fclose filter findtext finger firewall flash flist flood flush flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear ialmark identd if ignore iline inc invite iuser join kick linesep links list load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice qme qmsg query queryn quit raw reload remini remote remove rename renwin reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini say scid scon server set showmirc signam sline sockaccept sockclose socklist socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs elseif else goto menu nicklist status title icon size option text edit button check radio box scroll list combo link tab item")
            , o = i("if elseif else and not or eq ne in ni for foreach while switch")
            , O = /[+\-*&%=<>!?^\/\|]/;
        function s(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function l(e, t) {
            var n = t.beforeParams;
            t.beforeParams = !1;
            var i = e.next();
            if (/[\[\]{}\(\),\.]/.test(i))
                return "(" == i && n ? t.inParams = !0 : ")" == i && (t.inParams = !1),
                    null;
            if (/\d/.test(i))
                return e.eatWhile(/[\w\.]/),
                    "number";
            if ("\\" == i)
                return e.eat("\\"),
                    e.eat(/./),
                    "number";
            if ("/" == i && e.eat("*"))
                return s(e, t, c);
            if (";" == i && e.match(/ *\( *\(/))
                return s(e, t, u);
            if (";" != i || t.inParams) {
                if ('"' == i)
                    return e.eat(/"/),
                        "keyword";
                if ("$" == i)
                    return e.eatWhile(/[$_a-z0-9A-Z\.:]/),
                        r && r.propertyIsEnumerable(e.current().toLowerCase()) ? "keyword" : (t.beforeParams = !0,
                            "builtin");
                if ("%" == i)
                    return e.eatWhile(/[^,\s()]/),
                        t.beforeParams = !0,
                        "string";
                if (O.test(i))
                    return e.eatWhile(O),
                        "operator";
                e.eatWhile(/[\w\$_{}]/);
                var l = e.current().toLowerCase();
                return a && a.propertyIsEnumerable(l) ? "keyword" : o && o.propertyIsEnumerable(l) ? (t.beforeParams = !0,
                    "keyword") : null
            }
            return e.skipToEnd(),
                "comment"
        }
        function c(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = l;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function u(e, t) {
            for (var n, i = 0; n = e.next();) {
                if (";" == n && 2 == i) {
                    t.tokenize = l;
                    break
                }
                ")" == n ? i++ : " " != n && (i = 0)
            }
            return "meta"
        }
        const d = {
            name: "mirc",
            startState: function () {
                return {
                    tokenize: l,
                    beforeParams: !1,
                    inParams: !1
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            }
        }
    }
    ,
    1375: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                modelica: () => Q
            });
        var r = i("algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within")
            , a = i("abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh")
            , o = i("Real Boolean Integer String")
            , O = [].concat(Object.keys(r), Object.keys(a), Object.keys(o))
            , s = /[;=\(:\),{}.*<>+\-\/^\[\]]/
            , l = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/
            , c = /[0-9]/
            , u = /[_a-zA-Z]/;
        function d(e, t) {
            return e.skipToEnd(),
                t.tokenize = null,
                "comment"
        }
        function h(e, t) {
            for (var n, i = !1; n = e.next();) {
                if (i && "/" == n) {
                    t.tokenize = null;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function f(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if ('"' == n && !i) {
                    t.tokenize = null,
                        t.sol = !1;
                    break
                }
                i = !i && "\\" == n
            }
            return "string"
        }
        function p(e, t) {
            for (e.eatWhile(c); e.eat(c) || e.eat(u);)
                ;
            var n = e.current();
            return !t.sol || "package" != n && "model" != n && "when" != n && "connector" != n ? t.sol && "end" == n && t.level > 0 && t.level-- : t.level++,
                t.tokenize = null,
                t.sol = !1,
                r.propertyIsEnumerable(n) ? "keyword" : a.propertyIsEnumerable(n) ? "builtin" : o.propertyIsEnumerable(n) ? "atom" : "variable"
        }
        function m(e, t) {
            for (; e.eat(/[^']/);)
                ;
            return t.tokenize = null,
                t.sol = !1,
                e.eat("'") ? "variable" : "error"
        }
        function g(e, t) {
            return e.eatWhile(c),
                e.eat(".") && e.eatWhile(c),
                (e.eat("e") || e.eat("E")) && (e.eat("-") || e.eat("+"),
                    e.eatWhile(c)),
                t.tokenize = null,
                t.sol = !1,
                "number"
        }
        const Q = {
            name: "modelica",
            startState: function () {
                return {
                    tokenize: null,
                    level: 0,
                    sol: !0
                }
            },
            token: function (e, t) {
                if (null != t.tokenize)
                    return t.tokenize(e, t);
                if (e.sol() && (t.sol = !0),
                    e.eatSpace())
                    return t.tokenize = null,
                        null;
                var n = e.next();
                if ("/" == n && e.eat("/"))
                    t.tokenize = d;
                else if ("/" == n && e.eat("*"))
                    t.tokenize = h;
                else {
                    if (l.test(n + e.peek()))
                        return e.next(),
                            t.tokenize = null,
                            "operator";
                    if (s.test(n))
                        return t.tokenize = null,
                            "operator";
                    if (u.test(n))
                        t.tokenize = p;
                    else if ("'" == n && e.peek() && "'" != e.peek())
                        t.tokenize = m;
                    else if ('"' == n)
                        t.tokenize = f;
                    else {
                        if (!c.test(n))
                            return t.tokenize = null,
                                "error";
                        t.tokenize = g
                    }
                }
                return t.tokenize(e, t)
            },
            indent: function (e, t, n) {
                if (null != e.tokenize)
                    return null;
                var i = e.level;
                return /(algorithm)/.test(t) && i--,
                    /(equation)/.test(t) && i--,
                    /(initial algorithm)/.test(t) && i--,
                    /(initial equation)/.test(t) && i--,
                    /(end)/.test(t) && i--,
                    i > 0 ? n.unit * i : 0
            },
            languageData: {
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                autocomplete: O
            }
        }
    }
    ,
    32818: (e, t, n) => {
        function i(e) {
            return {
                name: "mscgen",
                startState: l,
                copyState: c,
                token: (t = e,
                    function (e, n) {
                        if (e.match(s(t.brackets), !0, !0))
                            return "bracket";
                        if (!n.inComment) {
                            if (e.match(/\/\*[^\*\/]*/, !0, !0))
                                return n.inComment = !0,
                                    "comment";
                            if (e.match(s(t.singlecomment), !0, !0))
                                return e.skipToEnd(),
                                    "comment"
                        }
                        if (n.inComment)
                            return e.match(/[^\*\/]*\*\//, !0, !0) ? n.inComment = !1 : e.skipToEnd(),
                                "comment";
                        if (!n.inString && e.match(/\"(\\\"|[^\"])*/, !0, !0))
                            return n.inString = !0,
                                "string";
                        if (n.inString)
                            return e.match(/[^\"]*\"/, !0, !0) ? n.inString = !1 : e.skipToEnd(),
                                "string";
                        if (t.keywords && e.match(O(t.keywords), !0, !0))
                            return "keyword";
                        if (e.match(O(t.options), !0, !0))
                            return "keyword";
                        if (e.match(O(t.arcsWords), !0, !0))
                            return "keyword";
                        if (e.match(s(t.arcsOthers), !0, !0))
                            return "keyword";
                        if (t.operators && e.match(s(t.operators), !0, !0))
                            return "operator";
                        if (t.constants && e.match(s(t.constants), !0, !0))
                            return "variable";
                        if (!t.inAttributeList && t.attributes && e.match("[", !0, !0))
                            return t.inAttributeList = !0,
                                "bracket";
                        if (t.inAttributeList) {
                            if (null !== t.attributes && e.match(O(t.attributes), !0, !0))
                                return "attribute";
                            if (e.match("]", !0, !0))
                                return t.inAttributeList = !1,
                                    "bracket"
                        }
                        return e.next(),
                            null
                    }
                ),
                languageData: {
                    commentTokens: {
                        line: "#",
                        block: {
                            open: "/*",
                            close: "*/"
                        }
                    }
                }
            };
            var t
        }
        n.r(t),
            n.d(t, {
                mscgen: () => r,
                msgenny: () => a,
                xu: () => o
            });
        const r = i({
            keywords: ["msc"],
            options: ["hscale", "width", "arcgradient", "wordwraparcs"],
            constants: ["true", "false", "on", "off"],
            attributes: ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
            brackets: ["\\{", "\\}"],
            arcsWords: ["note", "abox", "rbox", "box"],
            arcsOthers: ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
            singlecomment: ["//", "#"],
            operators: ["="]
        })
            , a = i({
                keywords: null,
                options: ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
                constants: ["true", "false", "on", "off", "auto"],
                attributes: null,
                brackets: ["\\{", "\\}"],
                arcsWords: ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
                arcsOthers: ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
                singlecomment: ["//", "#"],
                operators: ["="]
            })
            , o = i({
                keywords: ["msc", "xu"],
                options: ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
                constants: ["true", "false", "on", "off", "auto"],
                attributes: ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
                brackets: ["\\{", "\\}"],
                arcsWords: ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
                arcsOthers: ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
                singlecomment: ["//", "#"],
                operators: ["="]
            });
        function O(e) {
            return new RegExp("^\\b(" + e.join("|") + ")\\b", "i")
        }
        function s(e) {
            return new RegExp("^(?:" + e.join("|") + ")", "i")
        }
        function l() {
            return {
                inComment: !1,
                inString: !1,
                inAttributeList: !1,
                inScript: !1
            }
        }
        function c(e) {
            return {
                inComment: e.inComment,
                inString: e.inString,
                inAttributeList: e.inAttributeList,
                inScript: e.inScript
            }
        }
    }
    ,
    5091: (e, t, n) => {
        function i(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b", "i")
        }
        n.r(t),
            n.d(t, {
                mumps: () => u
            });
        var r = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]")
            , a = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))")
            , o = new RegExp("^[\\.,:]")
            , O = new RegExp("[()]")
            , s = new RegExp("^[%A-Za-z][A-Za-z0-9]*")
            , l = i(["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"])
            , c = i(["break", "close", "do", "else", "for", "goto", "halt", "hang", "if", "job", "kill", "lock", "merge", "new", "open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"]);
        const u = {
            name: "mumps",
            startState: function () {
                return {
                    label: !1,
                    commandMode: 0
                }
            },
            token: function (e, t) {
                var n = function (e, t) {
                    e.sol() && (t.label = !0,
                        t.commandMode = 0);
                    var n = e.peek();
                    return " " == n || "\t" == n ? (t.label = !1,
                        0 == t.commandMode ? t.commandMode = 1 : (t.commandMode < 0 || 2 == t.commandMode) && (t.commandMode = 0)) : "." != n && t.commandMode > 0 && (t.commandMode = ":" == n ? -1 : 2),
                        "(" !== n && "\t" !== n || (t.label = !1),
                        ";" === n ? (e.skipToEnd(),
                            "comment") : e.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/) ? "number" : '"' == n ? e.skipTo('"') ? (e.next(),
                                "string") : (e.skipToEnd(),
                                    "error") : e.match(a) || e.match(r) ? "operator" : e.match(o) ? null : O.test(n) ? (e.next(),
                                        "bracket") : t.commandMode > 0 && e.match(c) ? "controlKeyword" : e.match(l) ? "builtin" : e.match(s) ? "variable" : "$" === n || "^" === n ? (e.next(),
                                            "builtin") : "@" === n ? (e.next(),
                                                "string.special") : /[\w%]/.test(n) ? (e.eatWhile(/[\w%]/),
                                                    "variable") : (e.next(),
                                                        "error")
                }(e, t);
                return t.label ? "tag" : n
            }
        }
    }
    ,
    47239: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                nginx: () => d
            });
        var r, a = i("break return rewrite set accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"), o = i("http mail events server types location upstream charset_map limit_except if geo map"), O = i("include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files");
        function s(e, t) {
            return r = t,
                e
        }
        function l(e, t) {
            e.eatWhile(/[\w\$_]/);
            var n = e.current();
            if (a.propertyIsEnumerable(n))
                return "keyword";
            if (o.propertyIsEnumerable(n))
                return "controlKeyword";
            if (O.propertyIsEnumerable(n))
                return "controlKeyword";
            var i, r = e.next();
            return "@" == r ? (e.eatWhile(/[\w\\\-]/),
                s("meta", e.current())) : "/" == r && e.eat("*") ? (t.tokenize = c,
                    c(e, t)) : "<" == r && e.eat("!") ? (t.tokenize = u,
                        u(e, t)) : "=" != r ? "~" != r && "|" != r || !e.eat("=") ? '"' == r || "'" == r ? (t.tokenize = (i = r,
                            function (e, t) {
                                for (var n, r = !1; null != (n = e.next()) && (n != i || r);)
                                    r = !r && "\\" == n;
                                return r || (t.tokenize = l),
                                    s("string", "string")
                            }
                        ),
                            t.tokenize(e, t)) : "#" == r ? (e.skipToEnd(),
                                s("comment", "comment")) : "!" == r ? (e.match(/^\s*\w*/),
                                    s("keyword", "important")) : /\d/.test(r) ? (e.eatWhile(/[\w.%]/),
                                        s("number", "unit")) : /[,.+>*\/]/.test(r) ? s(null, "select-op") : /[;{}:\[\]]/.test(r) ? s(null, r) : (e.eatWhile(/[\w\\\-]/),
                                            s("variable", "variable")) : s(null, "compare") : void s(null, "compare")
        }
        function c(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (i && "/" == n) {
                    t.tokenize = l;
                    break
                }
                i = "*" == n
            }
            return s("comment", "comment")
        }
        function u(e, t) {
            for (var n, i = 0; null != (n = e.next());) {
                if (i >= 2 && ">" == n) {
                    t.tokenize = l;
                    break
                }
                i = "-" == n ? i + 1 : 0
            }
            return s("comment", "comment")
        }
        const d = {
            name: "nginx",
            startState: function () {
                return {
                    tokenize: l,
                    baseIndent: 0,
                    stack: []
                }
            },
            token: function (e, t) {
                if (e.eatSpace())
                    return null;
                r = null;
                var n = t.tokenize(e, t)
                    , i = t.stack[t.stack.length - 1];
                return "hash" == r && "rule" == i ? n = "atom" : "variable" == n && ("rule" == i ? n = "number" : i && "@media{" != i || (n = "tag")),
                    "rule" == i && /^[\{\};]$/.test(r) && t.stack.pop(),
                    "{" == r ? "@media" == i ? t.stack[t.stack.length - 1] = "@media{" : t.stack.push("{") : "}" == r ? t.stack.pop() : "@media" == r ? t.stack.push("@media") : "{" == i && "comment" != r && t.stack.push("rule"),
                    n
            },
            indent: function (e, t, n) {
                var i = e.stack.length;
                return /^\}/.test(t) && (i -= "rule" == e.stack[e.stack.length - 1] ? 2 : 1),
                    e.baseIndent + i * n.unit
            },
            languageData: {
                indentOnInput: /^\s*\}$/
            }
        }
    }
    ,
    1440: (e, t, n) => {
        n.r(t),
            n.d(t, {
                nsis: () => i
            });
        const i = (0,
            n(44649).I)({
                start: [{
                    regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/,
                    token: "number"
                }, {
                    regex: /"(?:[^\\"]|\\.)*"?/,
                    token: "string"
                }, {
                    regex: /'(?:[^\\']|\\.)*'?/,
                    token: "string"
                }, {
                    regex: /`(?:[^\\`]|\\.)*`?/,
                    token: "string"
                }, {
                    regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|assert|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i,
                    token: "keyword"
                }, {
                    regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i,
                    token: "keyword",
                    indent: !0
                }, {
                    regex: /^\s*(?:\!(else|endif|macroend))\b/i,
                    token: "keyword",
                    dedent: !0
                }, {
                    regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Target|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i,
                    token: "keyword"
                }, {
                    regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i,
                    token: "keyword",
                    indent: !0
                }, {
                    regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i,
                    token: "keyword",
                    dedent: !0
                }, {
                    regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i,
                    token: "atom"
                }, {
                    regex: /\b(?:admin|all|amd64-unicode|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|x-86-(ansi|unicode)|zlib)\b/i,
                    token: "builtin"
                }, {
                    regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:2|3|4|5|Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i,
                    token: "variable-2",
                    indent: !0
                }, {
                    regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i,
                    token: "variable-2",
                    dedent: !0
                }, {
                    regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i,
                    token: "variable-2",
                    dedent: !0
                }, {
                    regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i,
                    token: "variable-2",
                    dedent: !0
                }, {
                    regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i,
                    token: "variable",
                    dedent: !0
                }, {
                    regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i,
                    token: "keyword",
                    dedent: !0
                }, {
                    regex: /\$\{(?:RunningX64)\}/i,
                    token: "variable",
                    dedent: !0
                }, {
                    regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i,
                    token: "keyword",
                    dedent: !0
                }, {
                    regex: /(#|;).*/,
                    token: "comment"
                }, {
                    regex: /\/\*/,
                    token: "comment",
                    next: "comment"
                }, {
                    regex: /[-+\/*=<>!]+/,
                    token: "operator"
                }, {
                    regex: /\$\w[\w\.]*/,
                    token: "variable"
                }, {
                    regex: /\${[\!\w\.:-]+}/,
                    token: "variableName.constant"
                }, {
                    regex: /\$\([\!\w\.:-]+\)/,
                    token: "atom"
                }],
                comment: [{
                    regex: /.*?\*\//,
                    token: "comment",
                    next: "start"
                }, {
                    regex: /.*/,
                    token: "comment"
                }],
                languageData: {
                    name: "nsis",
                    indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
                    commentTokens: {
                        line: "#",
                        block: {
                            open: "/*",
                            close: "*/"
                        }
                    }
                }
            })
    }
    ,
    69144: (e, t, n) => {
        n.r(t),
            n.d(t, {
                ntriples: () => g
            });
        var i = 0
            , r = 1
            , a = 2
            , o = 3
            , O = 4
            , s = 5
            , l = 6
            , c = 7
            , u = 8
            , d = 9
            , h = 10
            , f = 11
            , p = 12;
        function m(e, t) {
            var n, m = e.location;
            n = m == i && "<" == t ? r : m == i && "_" == t ? a : m == o && "<" == t ? O : m == s && "<" == t ? l : m == s && "_" == t ? c : m == s && '"' == t ? u : m == r && ">" == t || m == a && " " == t ? o : m == O && ">" == t ? s : m == l && ">" == t || m == c && " " == t || m == u && '"' == t || m == d && " " == t || m == h && ">" == t ? f : m == u && "@" == t ? d : m == u && "^" == t ? h : " " != t || m != i && m != o && m != s && m != f ? m == f && "." == t ? i : p : m,
                e.location = n
        }
        const g = {
            name: "ntriples",
            startState: function () {
                return {
                    location: i,
                    uris: [],
                    anchors: [],
                    bnodes: [],
                    langs: [],
                    types: []
                }
            },
            token: function (e, t) {
                var n = e.next();
                if ("<" == n) {
                    m(t, n);
                    var i = "";
                    return e.eatWhile((function (e) {
                        return "#" != e && ">" != e && (i += e,
                            !0)
                    }
                    )),
                        t.uris.push(i),
                        e.match("#", !1) ? "variable" : (e.next(),
                            m(t, ">"),
                            "variable")
                }
                if ("#" == n) {
                    var r = "";
                    return e.eatWhile((function (e) {
                        return ">" != e && " " != e && (r += e,
                            !0)
                    }
                    )),
                        t.anchors.push(r),
                        "url"
                }
                if (">" == n)
                    return m(t, ">"),
                        "variable";
                if ("_" == n) {
                    m(t, n);
                    var a = "";
                    return e.eatWhile((function (e) {
                        return " " != e && (a += e,
                            !0)
                    }
                    )),
                        t.bnodes.push(a),
                        e.next(),
                        m(t, " "),
                        "builtin"
                }
                if ('"' == n)
                    return m(t, n),
                        e.eatWhile((function (e) {
                            return '"' != e
                        }
                        )),
                        e.next(),
                        "@" != e.peek() && "^" != e.peek() && m(t, '"'),
                        "string";
                if ("@" == n) {
                    m(t, "@");
                    var o = "";
                    return e.eatWhile((function (e) {
                        return " " != e && (o += e,
                            !0)
                    }
                    )),
                        t.langs.push(o),
                        e.next(),
                        m(t, " "),
                        "string.special"
                }
                if ("^" == n) {
                    e.next(),
                        m(t, "^");
                    var O = "";
                    return e.eatWhile((function (e) {
                        return ">" != e && (O += e,
                            !0)
                    }
                    )),
                        t.types.push(O),
                        e.next(),
                        m(t, ">"),
                        "variable"
                }
                " " == n && m(t, n),
                    "." == n && m(t, n)
            }
        }
    }
    ,
    91811: (e, t, n) => {
        function i(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b")
        }
        n.r(t),
            n.d(t, {
                octave: () => m
            });
        var r = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]")
            , a = new RegExp("^[\\(\\[\\{\\},:=;\\.]")
            , o = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))")
            , O = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))")
            , s = new RegExp("^((>>=)|(<<=))")
            , l = new RegExp("^[\\]\\)]")
            , c = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*")
            , u = i(["error", "eval", "function", "abs", "acos", "atan", "asin", "cos", "cosh", "exp", "log", "prod", "sum", "log10", "max", "min", "sign", "sin", "sinh", "sqrt", "tan", "reshape", "break", "zeros", "default", "margin", "round", "ones", "rand", "syn", "ceil", "floor", "size", "clear", "zeros", "eye", "mean", "std", "cov", "det", "eig", "inv", "norm", "rank", "trace", "expm", "logm", "sqrtm", "linspace", "plot", "title", "xlabel", "ylabel", "legend", "text", "grid", "meshgrid", "mesh", "num2str", "fft", "ifft", "arrayfun", "cellfun", "input", "fliplr", "flipud", "ismember"])
            , d = i(["return", "case", "switch", "else", "elseif", "end", "endif", "endfunction", "if", "otherwise", "do", "for", "while", "try", "catch", "classdef", "properties", "events", "methods", "global", "persistent", "endfor", "endwhile", "printf", "sprintf", "disp", "until", "continue", "pkg"]);
        function h(e, t) {
            return e.sol() || "'" !== e.peek() ? (t.tokenize = p,
                p(e, t)) : (e.next(),
                    t.tokenize = p,
                    "operator")
        }
        function f(e, t) {
            return e.match(/^.*%}/) ? (t.tokenize = p,
                "comment") : (e.skipToEnd(),
                    "comment")
        }
        function p(e, t) {
            if (e.eatSpace())
                return null;
            if (e.match("%{"))
                return t.tokenize = f,
                    e.skipToEnd(),
                    "comment";
            if (e.match(/^[%#]/))
                return e.skipToEnd(),
                    "comment";
            if (e.match(/^[0-9\.+-]/, !1)) {
                if (e.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/))
                    return e.tokenize = p,
                        "number";
                if (e.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/))
                    return "number";
                if (e.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/))
                    return "number"
            }
            if (e.match(i(["nan", "NaN", "inf", "Inf"])))
                return "number";
            var n = e.match(/^"(?:[^"]|"")*("|$)/) || e.match(/^'(?:[^']|'')*('|$)/);
            return n ? n[1] ? "string" : "error" : e.match(d) ? "keyword" : e.match(u) ? "builtin" : e.match(c) ? "variable" : e.match(r) || e.match(o) ? "operator" : e.match(a) || e.match(O) || e.match(s) ? null : e.match(l) ? (t.tokenize = h,
                null) : (e.next(),
                    "error")
        }
        const m = {
            name: "octave",
            startState: function () {
                return {
                    tokenize: p
                }
            },
            token: function (e, t) {
                var n = t.tokenize(e, t);
                return "number" !== n && "variable" !== n || (t.tokenize = h),
                    n
            },
            languageData: {
                commentTokens: {
                    line: "%"
                }
            }
        }
    }
    ,
    52138: (e, t, n) => {
        function i(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b")
        }
        n.r(t),
            n.d(t, {
                oz: () => $
            });
        var r = /[\^@!\|<>#~\.\*\-\+\\/,=]/
            , a = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/
            , o = /(:::)|(\.\.\.)|(=<:)|(>=:)/
            , O = ["in", "then", "else", "of", "elseof", "elsecase", "elseif", "catch", "finally", "with", "require", "prepare", "import", "export", "define", "do"]
            , s = ["end"]
            , l = i(["true", "false", "nil", "unit"])
            , c = i(["andthen", "at", "attr", "declare", "feat", "from", "lex", "mod", "div", "mode", "orelse", "parser", "prod", "prop", "scanner", "self", "syn", "token"])
            , u = i(["local", "proc", "fun", "case", "class", "if", "cond", "or", "dis", "choice", "not", "thread", "try", "raise", "lock", "for", "suchthat", "meth", "functor"])
            , d = i(O)
            , h = i(s);
        function f(e, t) {
            if (e.eatSpace())
                return null;
            if (e.match(/[{}]/))
                return "bracket";
            if (e.match("[]"))
                return "keyword";
            if (e.match(o) || e.match(a))
                return "operator";
            if (e.match(l))
                return "atom";
            var n = e.match(u);
            if (n)
                return t.doInCurrentLine ? t.doInCurrentLine = !1 : t.currentIndent++,
                    "proc" == n[0] || "fun" == n[0] ? t.tokenize = g : "class" == n[0] ? t.tokenize = p : "meth" == n[0] && (t.tokenize = m),
                    "keyword";
            if (e.match(d) || e.match(c))
                return "keyword";
            if (e.match(h))
                return t.currentIndent--,
                    "keyword";
            var i, O = e.next();
            if ('"' == O || "'" == O)
                return t.tokenize = (i = O,
                    function (e, t) {
                        for (var n, r = !1, a = !1; null != (n = e.next());) {
                            if (n == i && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "\\" == n
                        }
                        return !a && r || (t.tokenize = f),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[~\d]/.test(O)) {
                if ("~" == O) {
                    if (!/^[0-9]/.test(e.peek()))
                        return null;
                    if ("0" == e.next() && e.match(/^[xX][0-9a-fA-F]+/) || e.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
                        return "number"
                }
                return "0" == O && e.match(/^[xX][0-9a-fA-F]+/) || e.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/) ? "number" : null
            }
            return "%" == O ? (e.skipToEnd(),
                "comment") : "/" == O && e.eat("*") ? (t.tokenize = Q,
                    Q(e, t)) : r.test(O) ? "operator" : (e.eatWhile(/\w/),
                        "variable")
        }
        function p(e, t) {
            return e.eatSpace() ? null : (e.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/),
                t.tokenize = f,
                "type")
        }
        function m(e, t) {
            return e.eatSpace() ? null : (e.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/),
                t.tokenize = f,
                "def")
        }
        function g(e, t) {
            return e.eatSpace() ? null : !t.hasPassedFirstStage && e.eat("{") ? (t.hasPassedFirstStage = !0,
                "bracket") : t.hasPassedFirstStage ? (e.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/),
                    t.hasPassedFirstStage = !1,
                    t.tokenize = f,
                    "def") : (t.tokenize = f,
                        null)
        }
        function Q(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = f;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        const $ = {
            name: "oz",
            startState: function () {
                return {
                    tokenize: f,
                    currentIndent: 0,
                    doInCurrentLine: !1,
                    hasPassedFirstStage: !1
                }
            },
            token: function (e, t) {
                return e.sol() && (t.doInCurrentLine = 0),
                    t.tokenize(e, t)
            },
            indent: function (e, t, n) {
                var i = t.replace(/^\s+|\s+$/g, "");
                return i.match(h) || i.match(d) || i.match(/(\[])/) ? n.unit * (e.currentIndent - 1) : e.currentIndent < 0 ? 0 : e.currentIndent * n.unit
            },
            languageData: {
                indentOnInut: function () {
                    var e = O.concat(s);
                    return new RegExp("[\\[\\]]|(" + e.join("|") + ")$")
                }(),
                commentTokens: {
                    line: "%",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        }
    }
    ,
    95319: (e, t, n) => {
        n.r(t),
            n.d(t, {
                pascal: () => l
            });
        var i = function (e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }("absolute and array asm begin case const constructor destructor div do downto else end file for function goto if implementation in inherited inline interface label mod nil not object of operator or packed procedure program record reintroduce repeat self set shl shr string then to type unit until uses var while with xor as class dispinterface except exports finalization finally initialization inline is library on out packed property raise resourcestring threadvar try absolute abstract alias assembler bitpacked break cdecl continue cppdecl cvar default deprecated dynamic enumerator experimental export external far far16 forward generic helper implements index interrupt iocheck local message name near nodefault noreturn nostackframe oldfpccall otherwise overload override pascal platform private protected public published read register reintroduce result safecall saveregisters softfloat specialize static stdcall stored strict unaligned unimplemented varargs virtual write")
            , r = {
                null: !0
            }
            , a = /[+\-*&%=<>!?|\/]/;
        function o(e, t) {
            var n, o = e.next();
            if ("#" == o && t.startOfLine)
                return e.skipToEnd(),
                    "meta";
            if ('"' == o || "'" == o)
                return t.tokenize = (n = o,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "\\" == i
                        }
                        return !a && r || (t.tokenize = null),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if ("(" == o && e.eat("*"))
                return t.tokenize = O,
                    O(e, t);
            if ("{" == o)
                return t.tokenize = s,
                    s(e, t);
            if (/[\[\]\(\),;\:\.]/.test(o))
                return null;
            if (/\d/.test(o))
                return e.eatWhile(/[\w\.]/),
                    "number";
            if ("/" == o && e.eat("/"))
                return e.skipToEnd(),
                    "comment";
            if (a.test(o))
                return e.eatWhile(a),
                    "operator";
            e.eatWhile(/[\w\$_]/);
            var l = e.current();
            return i.propertyIsEnumerable(l) ? "keyword" : r.propertyIsEnumerable(l) ? "atom" : "variable"
        }
        function O(e, t) {
            for (var n, i = !1; n = e.next();) {
                if (")" == n && i) {
                    t.tokenize = null;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function s(e, t) {
            for (var n; n = e.next();)
                if ("}" == n) {
                    t.tokenize = null;
                    break
                }
            return "comment"
        }
        const l = {
            name: "pascal",
            startState: function () {
                return {
                    tokenize: null
                }
            },
            token: function (e, t) {
                if (e.eatSpace())
                    return null;
                var n = (t.tokenize || o)(e, t);
                return n
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    block: {
                        open: "(*",
                        close: "*)"
                    }
                }
            }
        }
    }
    ,
    89086: (e, t, n) => {
        function i(e, t) {
            return e.string.charAt(e.pos + (t || 0))
        }
        function r(e, t) {
            if (t) {
                var n = e.pos - t;
                return e.string.substr(n >= 0 ? n : 0, t)
            }
            return e.string.substr(0, e.pos - 1)
        }
        function a(e, t) {
            var n = e.string.length
                , i = n - e.pos + 1;
            return e.string.substr(e.pos, t && t < n ? t : i)
        }
        function o(e, t) {
            var n, i = e.pos + t;
            i <= 0 ? e.pos = 0 : i >= (n = e.string.length - 1) ? e.pos = n : e.pos = i
        }
        n.r(t),
            n.d(t, {
                perl: () => h
            });
        var O = {
            "->": 4,
            "++": 4,
            "--": 4,
            "**": 4,
            "=~": 4,
            "!~": 4,
            "*": 4,
            "/": 4,
            "%": 4,
            x: 4,
            "+": 4,
            "-": 4,
            ".": 4,
            "<<": 4,
            ">>": 4,
            "<": 4,
            ">": 4,
            "<=": 4,
            ">=": 4,
            lt: 4,
            gt: 4,
            le: 4,
            ge: 4,
            "==": 4,
            "!=": 4,
            "<=>": 4,
            eq: 4,
            ne: 4,
            cmp: 4,
            "~~": 4,
            "&": 4,
            "|": 4,
            "^": 4,
            "&&": 4,
            "||": 4,
            "//": 4,
            "..": 4,
            "...": 4,
            "?": 4,
            ":": 4,
            "=": 4,
            "+=": 4,
            "-=": 4,
            "*=": 4,
            ",": 4,
            "=>": 4,
            "::": 4,
            not: 4,
            and: 4,
            or: 4,
            xor: 4,
            BEGIN: [5, 1],
            END: [5, 1],
            PRINT: [5, 1],
            PRINTF: [5, 1],
            GETC: [5, 1],
            READ: [5, 1],
            READLINE: [5, 1],
            DESTROY: [5, 1],
            TIE: [5, 1],
            TIEHANDLE: [5, 1],
            UNTIE: [5, 1],
            STDIN: 5,
            STDIN_TOP: 5,
            STDOUT: 5,
            STDOUT_TOP: 5,
            STDERR: 5,
            STDERR_TOP: 5,
            $ARG: 5,
            $_: 5,
            "@ARG": 5,
            "@_": 5,
            $LIST_SEPARATOR: 5,
            '$"': 5,
            $PROCESS_ID: 5,
            $PID: 5,
            $$: 5,
            $REAL_GROUP_ID: 5,
            $GID: 5,
            "$(": 5,
            $EFFECTIVE_GROUP_ID: 5,
            $EGID: 5,
            "$)": 5,
            $PROGRAM_NAME: 5,
            $0: 5,
            $SUBSCRIPT_SEPARATOR: 5,
            $SUBSEP: 5,
            "$;": 5,
            $REAL_USER_ID: 5,
            $UID: 5,
            "$<": 5,
            $EFFECTIVE_USER_ID: 5,
            $EUID: 5,
            "$>": 5,
            $a: 5,
            $b: 5,
            $COMPILING: 5,
            "$^C": 5,
            $DEBUGGING: 5,
            "$^D": 5,
            "${^ENCODING}": 5,
            $ENV: 5,
            "%ENV": 5,
            $SYSTEM_FD_MAX: 5,
            "$^F": 5,
            "@F": 5,
            "${^GLOBAL_PHASE}": 5,
            "$^H": 5,
            "%^H": 5,
            "@INC": 5,
            "%INC": 5,
            $INPLACE_EDIT: 5,
            "$^I": 5,
            "$^M": 5,
            $OSNAME: 5,
            "$^O": 5,
            "${^OPEN}": 5,
            $PERLDB: 5,
            "$^P": 5,
            $SIG: 5,
            "%SIG": 5,
            $BASETIME: 5,
            "$^T": 5,
            "${^TAINT}": 5,
            "${^UNICODE}": 5,
            "${^UTF8CACHE}": 5,
            "${^UTF8LOCALE}": 5,
            $PERL_VERSION: 5,
            "$^V": 5,
            "${^WIN32_SLOPPY_STAT}": 5,
            $EXECUTABLE_NAME: 5,
            "$^X": 5,
            $1: 5,
            $MATCH: 5,
            "$&": 5,
            "${^MATCH}": 5,
            $PREMATCH: 5,
            "$`": 5,
            "${^PREMATCH}": 5,
            $POSTMATCH: 5,
            "$'": 5,
            "${^POSTMATCH}": 5,
            $LAST_PAREN_MATCH: 5,
            "$+": 5,
            $LAST_SUBMATCH_RESULT: 5,
            "$^N": 5,
            "@LAST_MATCH_END": 5,
            "@+": 5,
            "%LAST_PAREN_MATCH": 5,
            "%+": 5,
            "@LAST_MATCH_START": 5,
            "@-": 5,
            "%LAST_MATCH_START": 5,
            "%-": 5,
            $LAST_REGEXP_CODE_RESULT: 5,
            "$^R": 5,
            "${^RE_DEBUG_FLAGS}": 5,
            "${^RE_TRIE_MAXBUF}": 5,
            $ARGV: 5,
            "@ARGV": 5,
            ARGV: 5,
            ARGVOUT: 5,
            $OUTPUT_FIELD_SEPARATOR: 5,
            $OFS: 5,
            "$,": 5,
            $INPUT_LINE_NUMBER: 5,
            $NR: 5,
            "$.": 5,
            $INPUT_RECORD_SEPARATOR: 5,
            $RS: 5,
            "$/": 5,
            $OUTPUT_RECORD_SEPARATOR: 5,
            $ORS: 5,
            "$\\": 5,
            $OUTPUT_AUTOFLUSH: 5,
            "$|": 5,
            $ACCUMULATOR: 5,
            "$^A": 5,
            $FORMAT_FORMFEED: 5,
            "$^L": 5,
            $FORMAT_PAGE_NUMBER: 5,
            "$%": 5,
            $FORMAT_LINES_LEFT: 5,
            "$-": 5,
            $FORMAT_LINE_BREAK_CHARACTERS: 5,
            "$:": 5,
            $FORMAT_LINES_PER_PAGE: 5,
            "$=": 5,
            $FORMAT_TOP_NAME: 5,
            "$^": 5,
            $FORMAT_NAME: 5,
            "$~": 5,
            "${^CHILD_ERROR_NATIVE}": 5,
            $EXTENDED_OS_ERROR: 5,
            "$^E": 5,
            $EXCEPTIONS_BEING_CAUGHT: 5,
            "$^S": 5,
            $WARNING: 5,
            "$^W": 5,
            "${^WARNING_BITS}": 5,
            $OS_ERROR: 5,
            $ERRNO: 5,
            "$!": 5,
            "%OS_ERROR": 5,
            "%ERRNO": 5,
            "%!": 5,
            $CHILD_ERROR: 5,
            "$?": 5,
            $EVAL_ERROR: 5,
            "$@": 5,
            $OFMT: 5,
            "$#": 5,
            "$*": 5,
            $ARRAY_BASE: 5,
            "$[": 5,
            $OLD_PERL_VERSION: 5,
            "$]": 5,
            if: [1, 1],
            elsif: [1, 1],
            else: [1, 1],
            while: [1, 1],
            unless: [1, 1],
            for: [1, 1],
            foreach: [1, 1],
            abs: 1,
            accept: 1,
            alarm: 1,
            atan2: 1,
            bind: 1,
            binmode: 1,
            bless: 1,
            bootstrap: 1,
            break: 1,
            caller: 1,
            chdir: 1,
            chmod: 1,
            chomp: 1,
            chop: 1,
            chown: 1,
            chr: 1,
            chroot: 1,
            close: 1,
            closedir: 1,
            connect: 1,
            continue: [1, 1],
            cos: 1,
            crypt: 1,
            dbmclose: 1,
            dbmopen: 1,
            default: 1,
            defined: 1,
            delete: 1,
            die: 1,
            do: 1,
            dump: 1,
            each: 1,
            endgrent: 1,
            endhostent: 1,
            endnetent: 1,
            endprotoent: 1,
            endpwent: 1,
            endservent: 1,
            eof: 1,
            eval: 1,
            exec: 1,
            exists: 1,
            exit: 1,
            exp: 1,
            fcntl: 1,
            fileno: 1,
            flock: 1,
            fork: 1,
            format: 1,
            formline: 1,
            getc: 1,
            getgrent: 1,
            getgrgid: 1,
            getgrnam: 1,
            gethostbyaddr: 1,
            gethostbyname: 1,
            gethostent: 1,
            getlogin: 1,
            getnetbyaddr: 1,
            getnetbyname: 1,
            getnetent: 1,
            getpeername: 1,
            getpgrp: 1,
            getppid: 1,
            getpriority: 1,
            getprotobyname: 1,
            getprotobynumber: 1,
            getprotoent: 1,
            getpwent: 1,
            getpwnam: 1,
            getpwuid: 1,
            getservbyname: 1,
            getservbyport: 1,
            getservent: 1,
            getsockname: 1,
            getsockopt: 1,
            given: 1,
            glob: 1,
            gmtime: 1,
            goto: 1,
            grep: 1,
            hex: 1,
            import: 1,
            index: 1,
            int: 1,
            ioctl: 1,
            join: 1,
            keys: 1,
            kill: 1,
            last: 1,
            lc: 1,
            lcfirst: 1,
            length: 1,
            link: 1,
            listen: 1,
            local: 2,
            localtime: 1,
            lock: 1,
            log: 1,
            lstat: 1,
            m: null,
            map: 1,
            mkdir: 1,
            msgctl: 1,
            msgget: 1,
            msgrcv: 1,
            msgsnd: 1,
            my: 2,
            new: 1,
            next: 1,
            no: 1,
            oct: 1,
            open: 1,
            opendir: 1,
            ord: 1,
            our: 2,
            pack: 1,
            package: 1,
            pipe: 1,
            pop: 1,
            pos: 1,
            print: 1,
            printf: 1,
            prototype: 1,
            push: 1,
            q: null,
            qq: null,
            qr: null,
            quotemeta: null,
            qw: null,
            qx: null,
            rand: 1,
            read: 1,
            readdir: 1,
            readline: 1,
            readlink: 1,
            readpipe: 1,
            recv: 1,
            redo: 1,
            ref: 1,
            rename: 1,
            require: 1,
            reset: 1,
            return: 1,
            reverse: 1,
            rewinddir: 1,
            rindex: 1,
            rmdir: 1,
            s: null,
            say: 1,
            scalar: 1,
            seek: 1,
            seekdir: 1,
            select: 1,
            semctl: 1,
            semget: 1,
            semop: 1,
            send: 1,
            setgrent: 1,
            sethostent: 1,
            setnetent: 1,
            setpgrp: 1,
            setpriority: 1,
            setprotoent: 1,
            setpwent: 1,
            setservent: 1,
            setsockopt: 1,
            shift: 1,
            shmctl: 1,
            shmget: 1,
            shmread: 1,
            shmwrite: 1,
            shutdown: 1,
            sin: 1,
            sleep: 1,
            socket: 1,
            socketpair: 1,
            sort: 1,
            splice: 1,
            split: 1,
            sprintf: 1,
            sqrt: 1,
            srand: 1,
            stat: 1,
            state: 1,
            study: 1,
            sub: 1,
            substr: 1,
            symlink: 1,
            syscall: 1,
            sysopen: 1,
            sysread: 1,
            sysseek: 1,
            system: 1,
            syswrite: 1,
            tell: 1,
            telldir: 1,
            tie: 1,
            tied: 1,
            time: 1,
            times: 1,
            tr: null,
            truncate: 1,
            uc: 1,
            ucfirst: 1,
            umask: 1,
            undef: 1,
            unlink: 1,
            unpack: 1,
            unshift: 1,
            untie: 1,
            use: 1,
            utime: 1,
            values: 1,
            vec: 1,
            wait: 1,
            waitpid: 1,
            wantarray: 1,
            warn: 1,
            when: 1,
            write: 1,
            y: null
        }
            , s = "string.special"
            , l = /[goseximacplud]/;
        function c(e, t, n, i, r) {
            return t.chain = null,
                t.style = null,
                t.tail = null,
                t.tokenize = function (e, t) {
                    for (var a, o = !1, O = 0; a = e.next();) {
                        if (a === n[O] && !o)
                            return void 0 !== n[++O] ? (t.chain = n[O],
                                t.style = i,
                                t.tail = r) : r && e.eatWhile(r),
                                t.tokenize = d,
                                i;
                        o = !o && "\\" == a
                    }
                    return i
                }
                ,
                t.tokenize(e, t)
        }
        function u(e, t, n) {
            return t.tokenize = function (e, t) {
                return e.string == n && (t.tokenize = d),
                    e.skipToEnd(),
                    "string"
            }
                ,
                t.tokenize(e, t)
        }
        function d(e, t) {
            if (e.eatSpace())
                return null;
            if (t.chain)
                return c(e, t, t.chain, t.style, t.tail);
            if (e.match(/^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/))
                return "number";
            if (e.match(/^<<(?=[_a-zA-Z])/))
                return e.eatWhile(/\w/),
                    u(e, t, e.current().substr(2));
            if (e.sol() && e.match(/^\=item(?!\w)/))
                return u(e, t, "=cut");
            var n = e.next();
            if ('"' == n || "'" == n) {
                if (r(e, 3) == "<<" + n) {
                    var d = e.pos;
                    e.eatWhile(/\w/);
                    var h = e.current().substr(1);
                    if (h && e.eat(n))
                        return u(e, t, h);
                    e.pos = d
                }
                return c(e, t, [n], "string")
            }
            if ("q" == n && (!(f = i(e, -2)) || !/\w/.test(f)))
                if ("x" == (f = i(e, 0))) {
                    if ("(" == (f = i(e, 1)))
                        return o(e, 2),
                            c(e, t, [")"], s, l);
                    if ("[" == f)
                        return o(e, 2),
                            c(e, t, ["]"], s, l);
                    if ("{" == f)
                        return o(e, 2),
                            c(e, t, ["}"], s, l);
                    if ("<" == f)
                        return o(e, 2),
                            c(e, t, [">"], s, l);
                    if (/[\^'"!~\/]/.test(f))
                        return o(e, 1),
                            c(e, t, [e.eat(f)], s, l)
                } else if ("q" == f) {
                    if ("(" == (f = i(e, 1)))
                        return o(e, 2),
                            c(e, t, [")"], "string");
                    if ("[" == f)
                        return o(e, 2),
                            c(e, t, ["]"], "string");
                    if ("{" == f)
                        return o(e, 2),
                            c(e, t, ["}"], "string");
                    if ("<" == f)
                        return o(e, 2),
                            c(e, t, [">"], "string");
                    if (/[\^'"!~\/]/.test(f))
                        return o(e, 1),
                            c(e, t, [e.eat(f)], "string")
                } else if ("w" == f) {
                    if ("(" == (f = i(e, 1)))
                        return o(e, 2),
                            c(e, t, [")"], "bracket");
                    if ("[" == f)
                        return o(e, 2),
                            c(e, t, ["]"], "bracket");
                    if ("{" == f)
                        return o(e, 2),
                            c(e, t, ["}"], "bracket");
                    if ("<" == f)
                        return o(e, 2),
                            c(e, t, [">"], "bracket");
                    if (/[\^'"!~\/]/.test(f))
                        return o(e, 1),
                            c(e, t, [e.eat(f)], "bracket")
                } else if ("r" == f) {
                    if ("(" == (f = i(e, 1)))
                        return o(e, 2),
                            c(e, t, [")"], s, l);
                    if ("[" == f)
                        return o(e, 2),
                            c(e, t, ["]"], s, l);
                    if ("{" == f)
                        return o(e, 2),
                            c(e, t, ["}"], s, l);
                    if ("<" == f)
                        return o(e, 2),
                            c(e, t, [">"], s, l);
                    if (/[\^'"!~\/]/.test(f))
                        return o(e, 1),
                            c(e, t, [e.eat(f)], s, l)
                } else if (/[\^'"!~\/(\[{<]/.test(f)) {
                    if ("(" == f)
                        return o(e, 1),
                            c(e, t, [")"], "string");
                    if ("[" == f)
                        return o(e, 1),
                            c(e, t, ["]"], "string");
                    if ("{" == f)
                        return o(e, 1),
                            c(e, t, ["}"], "string");
                    if ("<" == f)
                        return o(e, 1),
                            c(e, t, [">"], "string");
                    if (/[\^'"!~\/]/.test(f))
                        return c(e, t, [e.eat(f)], "string")
                }
            if ("m" == n && ((!(f = i(e, -2)) || !/\w/.test(f)) && (f = e.eat(/[(\[{<\^'"!~\/]/)))) {
                if (/[\^'"!~\/]/.test(f))
                    return c(e, t, [f], s, l);
                if ("(" == f)
                    return c(e, t, [")"], s, l);
                if ("[" == f)
                    return c(e, t, ["]"], s, l);
                if ("{" == f)
                    return c(e, t, ["}"], s, l);
                if ("<" == f)
                    return c(e, t, [">"], s, l)
            }
            if ("s" == n && (!(f = /[\/>\]})\w]/.test(i(e, -2))) && (f = e.eat(/[(\[{<\^'"!~\/]/))))
                return c(e, t, "[" == f ? ["]", "]"] : "{" == f ? ["}", "}"] : "<" == f ? [">", ">"] : "(" == f ? [")", ")"] : [f, f], s, l);
            if ("y" == n && (!(f = /[\/>\]})\w]/.test(i(e, -2))) && (f = e.eat(/[(\[{<\^'"!~\/]/))))
                return c(e, t, "[" == f ? ["]", "]"] : "{" == f ? ["}", "}"] : "<" == f ? [">", ">"] : "(" == f ? [")", ")"] : [f, f], s, l);
            if ("t" == n && (!(f = /[\/>\]})\w]/.test(i(e, -2))) && (f = e.eat("r")) && (f = e.eat(/[(\[{<\^'"!~\/]/))))
                return c(e, t, "[" == f ? ["]", "]"] : "{" == f ? ["}", "}"] : "<" == f ? [">", ">"] : "(" == f ? [")", ")"] : [f, f], s, l);
            if ("`" == n)
                return c(e, t, [n], "builtin");
            if ("/" == n)
                return /~\s*$/.test(r(e)) ? c(e, t, [n], s, l) : "operator";
            if ("$" == n) {
                d = e.pos;
                if (e.eatWhile(/\d/) || e.eat("{") && e.eatWhile(/\d/) && e.eat("}"))
                    return "builtin";
                e.pos = d
            }
            if (/[$@%]/.test(n)) {
                d = e.pos;
                if (e.eat("^") && e.eat(/[A-Z]/) || !/[@$%&]/.test(i(e, -2)) && e.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)) {
                    var f = e.current();
                    if (O[f])
                        return "builtin"
                }
                e.pos = d
            }
            if (/[$@%&]/.test(n) && (e.eatWhile(/[\w$]/) || e.eat("{") && e.eatWhile(/[\w$]/) && e.eat("}"))) {
                f = e.current();
                return O[f] ? "builtin" : "variable"
            }
            if ("#" == n && "$" != i(e, -2))
                return e.skipToEnd(),
                    "comment";
            if (/[:+\-\^*$&%@=<>!?|\/~\.]/.test(n)) {
                d = e.pos;
                if (e.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/),
                    O[e.current()])
                    return "operator";
                e.pos = d
            }
            if ("_" == n && 1 == e.pos) {
                if ("_END__" == a(e, 6))
                    return c(e, t, ["\0"], "comment");
                if ("_DATA__" == a(e, 7))
                    return c(e, t, ["\0"], "builtin");
                if ("_C__" == a(e, 7))
                    return c(e, t, ["\0"], "string")
            }
            if (/\w/.test(n)) {
                d = e.pos;
                if ("{" == i(e, -2) && ("}" == i(e, 0) || e.eatWhile(/\w/) && "}" == i(e, 0)))
                    return "string";
                e.pos = d
            }
            if (/[A-Z]/.test(n)) {
                var p = i(e, -2);
                d = e.pos;
                if (e.eatWhile(/[A-Z_]/),
                    !/[\da-z]/.test(i(e, 0)))
                    return (f = O[e.current()]) ? (f[1] && (f = f[0]),
                        ":" != p ? 1 == f ? "keyword" : 2 == f ? "def" : 3 == f ? "atom" : 4 == f ? "operator" : 5 == f ? "builtin" : "meta" : "meta") : "meta";
                e.pos = d
            }
            if (/[a-zA-Z_]/.test(n)) {
                p = i(e, -2);
                return e.eatWhile(/\w/),
                    (f = O[e.current()]) ? (f[1] && (f = f[0]),
                        ":" != p ? 1 == f ? "keyword" : 2 == f ? "def" : 3 == f ? "atom" : 4 == f ? "operator" : 5 == f ? "builtin" : "meta" : "meta") : "meta"
            }
            return null
        }
        const h = {
            name: "perl",
            startState: function () {
                return {
                    tokenize: d,
                    chain: null,
                    style: null,
                    tail: null
                }
            },
            token: function (e, t) {
                return (t.tokenize || d)(e, t)
            },
            languageData: {
                commentTokens: {
                    line: "#"
                },
                wordChars: "$"
            }
        }
    }
    ,
    28799: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                pig: () => f
            });
        var r = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER "
            , a = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE NEQ MATCHES TRUE FALSE DUMP"
            , o = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP "
            , O = i(r)
            , s = i(a)
            , l = i(o)
            , c = /[*+\-%<>=&?:\/!|]/;
        function u(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function d(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = h;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function h(e, t) {
            var n, i = e.next();
            return '"' == i || "'" == i ? u(e, t, (n = i,
                function (e, t) {
                    for (var i, r = !1, a = !1; null != (i = e.next());) {
                        if (i == n && !r) {
                            a = !0;
                            break
                        }
                        r = !r && "\\" == i
                    }
                    return !a && r || (t.tokenize = h),
                        "error"
                }
            )) : /[\[\]{}\(\),;\.]/.test(i) ? null : /\d/.test(i) ? (e.eatWhile(/[\w\.]/),
                "number") : "/" == i ? e.eat("*") ? u(e, t, d) : (e.eatWhile(c),
                    "operator") : "-" == i ? e.eat("-") ? (e.skipToEnd(),
                        "comment") : (e.eatWhile(c),
                            "operator") : c.test(i) ? (e.eatWhile(c),
                                "operator") : (e.eatWhile(/[\w\$_]/),
                                    s && s.propertyIsEnumerable(e.current().toUpperCase()) && !e.eat(")") && !e.eat(".") ? "keyword" : O && O.propertyIsEnumerable(e.current().toUpperCase()) ? "builtin" : l && l.propertyIsEnumerable(e.current().toUpperCase()) ? "type" : "variable")
        }
        const f = {
            name: "pig",
            startState: function () {
                return {
                    tokenize: h,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            languageData: {
                autocomplete: (r + o + a).split(" ")
            }
        }
    }
    ,
    21706: (e, t, n) => {
        function i(e, t) {
            for (var n = void 0 !== (t = t || {}).prefix ? t.prefix : "^", i = void 0 !== t.suffix ? t.suffix : "\\b", r = 0; r < e.length; r++)
                e[r] instanceof RegExp ? e[r] = e[r].source : e[r] = e[r].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
            return new RegExp(n + "(" + e.join("|") + ")" + i, "i")
        }
        n.r(t),
            n.d(t, {
                powerShell: () => S
            });
        var r = "(?=[^A-Za-z\\d\\-_]|$)"
            , a = /[\w\-:]/
            , o = i([/begin|break|catch|continue|data|default|do|dynamicparam/, /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/, /param|process|return|switch|throw|trap|try|until|where|while/], {
                suffix: r
            })
            , O = i(["f", /b?not/, /[ic]?split/, "join", /is(not)?/, "as", /[ic]?(eq|ne|[gl][te])/, /[ic]?(not)?(like|match|contains)/, /[ic]?replace/, /b?(and|or|xor)/], {
                prefix: "-"
            })
            , s = i([O, /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/], {
                suffix: ""
            })
            , l = i([/Add-(Computer|Content|History|Member|PSSnapin|Type)/, /Checkpoint-Computer/, /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/, /Compare-Object/, /Complete-Transaction/, /Connect-PSSession/, /ConvertFrom-(Csv|Json|SecureString|StringData)/, /Convert-Path/, /ConvertTo-(Csv|Html|Json|SecureString|Xml)/, /Copy-Item(Property)?/, /Debug-Process/, /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/, /Disconnect-PSSession/, /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/, /(Enter|Exit)-PSSession/, /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/, /ForEach-Object/, /Format-(Custom|List|Table|Wide)/, new RegExp("Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)"), /Group-Object/, /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/, /ImportSystemModules/, /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/, /Join-Path/, /Limit-EventLog/, /Measure-(Command|Object)/, /Move-Item(Property)?/, new RegExp("New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)"), /Out-(Default|File|GridView|Host|Null|Printer|String)/, /Pause/, /(Pop|Push)-Location/, /Read-Host/, /Receive-(Job|PSSession)/, /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/, /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/, /Rename-(Computer|Item(Property)?)/, /Reset-ComputerMachinePassword/, /Resolve-Path/, /Restart-(Computer|Service)/, /Restore-Computer/, /Resume-(Job|Service)/, /Save-Help/, /Select-(Object|String|Xml)/, /Send-MailMessage/, new RegExp("Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)"), /Show-(Command|ControlPanelItem|EventLog)/, /Sort-Object/, /Split-Path/, /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/, /Stop-(Computer|Job|Process|Service|Transcript)/, /Suspend-(Job|Service)/, /TabExpansion2/, /Tee-Object/, /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/, /Trace-Command/, /Unblock-File/, /Undo-Transaction/, /Unregister-(Event|PSSessionConfiguration)/, /Update-(FormatData|Help|List|TypeData)/, /Use-Transaction/, /Wait-(Event|Job|Process)/, /Where-Object/, /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/, /cd|help|mkdir|more|oss|prompt/, /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/, /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/, /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/, /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/, /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/, /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/], {
                prefix: "",
                suffix: ""
            })
            , c = i([/[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/, /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/, /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/, /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/, /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/, /WarningPreference|WhatIfPreference/, /Event|EventArgs|EventSubscriber|Sender/, /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/, /true|false|null/], {
                prefix: "\\$",
                suffix: ""
            })
            , u = {
                keyword: o,
                number: /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i,
                operator: s,
                builtin: i([/[A-Z]:|%|\?/i, l, c], {
                    suffix: r
                }),
                punctuation: /[\[\]{},;`\\\.]|@[({]/,
                variable: /^[A-Za-z\_][A-Za-z\-\_\d]*\b/
            };
        function d(e, t) {
            var n = t.returnStack[t.returnStack.length - 1];
            if (n && n.shouldReturnFrom(t))
                return t.tokenize = n.tokenize,
                    t.returnStack.pop(),
                    t.tokenize(e, t);
            if (e.eatSpace())
                return null;
            if (e.eat("("))
                return t.bracketNesting += 1,
                    "punctuation";
            if (e.eat(")"))
                return t.bracketNesting -= 1,
                    "punctuation";
            for (var i in u)
                if (e.match(u[i]))
                    return i;
            var r = e.next();
            if ("'" === r)
                return function (e, t) {
                    var n;
                    for (; null != (n = e.peek());)
                        if (e.next(),
                            "'" === n && !e.eat("'"))
                            return t.tokenize = d,
                                "string";
                    return "error"
                }(e, t);
            if ("$" === r)
                return $(e, t);
            if ('"' === r)
                return h(e, t);
            if ("<" === r && e.eat("#"))
                return t.tokenize = Q,
                    Q(e, t);
            if ("#" === r)
                return e.skipToEnd(),
                    "comment";
            if ("@" === r) {
                var o = e.eat(/["']/);
                if (o && e.eol())
                    return t.tokenize = y,
                        t.startQuote = o[0],
                        y(e, t);
                if (e.eol())
                    return "error";
                if (e.peek().match(/[({]/))
                    return "punctuation";
                if (e.peek().match(a))
                    return $(e, t)
            }
            return "error"
        }
        function h(e, t) {
            for (var n; null != (n = e.peek());) {
                if ("$" === n)
                    return t.tokenize = f,
                        "string";
                if (e.next(),
                    "`" !== n) {
                    if ('"' === n && !e.eat('"'))
                        return t.tokenize = d,
                            "string"
                } else
                    e.next()
            }
            return "error"
        }
        function f(e, t) {
            return g(e, t, h)
        }
        function p(e, t) {
            return t.tokenize = y,
                t.startQuote = '"',
                y(e, t)
        }
        function m(e, t) {
            return g(e, t, p)
        }
        function g(e, t, n) {
            if (e.match("$(")) {
                var i = t.bracketNesting;
                return t.returnStack.push({
                    shouldReturnFrom: function (e) {
                        return e.bracketNesting === i
                    },
                    tokenize: n
                }),
                    t.tokenize = d,
                    t.bracketNesting += 1,
                    "punctuation"
            }
            return e.next(),
                t.returnStack.push({
                    shouldReturnFrom: function () {
                        return !0
                    },
                    tokenize: n
                }),
                t.tokenize = $,
                t.tokenize(e, t)
        }
        function Q(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (i && ">" == n) {
                    t.tokenize = d;
                    break
                }
                i = "#" === n
            }
            return "comment"
        }
        function $(e, t) {
            var n = e.peek();
            return e.eat("{") ? (t.tokenize = b,
                b(e, t)) : void 0 != n && n.match(a) ? (e.eatWhile(a),
                    t.tokenize = d,
                    "variable") : (t.tokenize = d,
                        "error")
        }
        function b(e, t) {
            for (var n; null != (n = e.next());)
                if ("}" === n) {
                    t.tokenize = d;
                    break
                }
            return "variable"
        }
        function y(e, t) {
            var n = t.startQuote;
            if (e.sol() && e.match(new RegExp(n + "@")))
                t.tokenize = d;
            else if ('"' === n)
                for (; !e.eol();) {
                    var i = e.peek();
                    if ("$" === i)
                        return t.tokenize = m,
                            "string";
                    e.next(),
                        "`" === i && e.next()
                }
            else
                e.skipToEnd();
            return "string"
        }
        const S = {
            name: "powershell",
            startState: function () {
                return {
                    returnStack: [],
                    bracketNesting: 0,
                    tokenize: d
                }
            },
            token: function (e, t) {
                return t.tokenize(e, t)
            },
            languageData: {
                commentTokens: {
                    line: "#",
                    block: {
                        open: "<#",
                        close: "#>"
                    }
                }
            }
        }
    }
    ,
    73802: (e, t, n) => {
        n.r(t),
            n.d(t, {
                properties: () => i
            });
        const i = {
            name: "properties",
            token: function (e, t) {
                var n = e.sol() || t.afterSection
                    , i = e.eol();
                if (t.afterSection = !1,
                    n && (t.nextMultiline ? (t.inMultiline = !0,
                        t.nextMultiline = !1) : t.position = "def"),
                    i && !t.nextMultiline && (t.inMultiline = !1,
                        t.position = "def"),
                    n)
                    for (; e.eatSpace();)
                        ;
                var r = e.next();
                return !n || "#" !== r && "!" !== r && ";" !== r ? n && "[" === r ? (t.afterSection = !0,
                    e.skipTo("]"),
                    e.eat("]"),
                    "header") : "=" === r || ":" === r ? (t.position = "quote",
                        null) : ("\\" === r && "quote" === t.position && e.eol() && (t.nextMultiline = !0),
                            t.position) : (t.position = "comment",
                                e.skipToEnd(),
                                "comment")
            },
            startState: function () {
                return {
                    position: "def",
                    nextMultiline: !1,
                    inMultiline: !1,
                    afterSection: !1
                }
            }
        }
    }
    ,
    21608: (e, t, n) => {
        n.r(t),
            n.d(t, {
                protobuf: () => o
            });
        var i = ["package", "message", "import", "syntax", "required", "optional", "repeated", "reserved", "default", "extensions", "packed", "bool", "bytes", "double", "enum", "float", "string", "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64", "option", "service", "rpc", "returns"]
            , r = new RegExp("^((" + i.join(")|(") + "))\\b", "i")
            , a = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");
        const o = {
            name: "protobuf",
            token: function (e) {
                if (e.eatSpace())
                    return null;
                if (e.match("//"))
                    return e.skipToEnd(),
                        "comment";
                if (e.match(/^[0-9\.+-]/, !1)) {
                    if (e.match(/^[+-]?0x[0-9a-fA-F]+/))
                        return "number";
                    if (e.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
                        return "number";
                    if (e.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
                        return "number"
                }
                return e.match(/^"([^"]|(""))*"/) || e.match(/^'([^']|(''))*'/) ? "string" : e.match(r) ? "keyword" : e.match(a) ? "variable" : (e.next(),
                    null)
            },
            languageData: {
                autocomplete: i
            }
        }
    }
    ,
    44853: (e, t, n) => {
        n.r(t),
            n.d(t, {
                puppet: () => O
            });
        var i = {}
            , r = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;
        function a(e, t) {
            for (var n = t.split(" "), r = 0; r < n.length; r++)
                i[n[r]] = e
        }
        function o(e, t) {
            for (var n, i, r = !1; !e.eol() && (n = e.next()) != t.pending;) {
                if ("$" === n && "\\" != i && '"' == t.pending) {
                    r = !0;
                    break
                }
                i = n
            }
            return r && e.backUp(1),
                n == t.pending ? t.continueString = !1 : t.continueString = !0,
                "string"
        }
        a("keyword", "class define site node include import inherits"),
            a("keyword", "case if else in and elsif default or"),
            a("atom", "false true running present absent file directory undef"),
            a("builtin", "action augeas burst chain computer cron destination dport exec file filebucket group host icmp iniface interface jump k5login limit log_level log_prefix macauthorization mailalias maillist mcx mount nagios_command nagios_contact nagios_contactgroup nagios_host nagios_hostdependency nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo nagios_servicegroup nagios_timeperiod name notify outiface package proto reject resources router schedule scheduled_task selboolean selmodule service source sport ssh_authorized_key sshkey stage state table tidy todest toports tosource user vlan yumrepo zfs zone zpool");
        const O = {
            name: "puppet",
            startState: function () {
                var e = {
                    inDefinition: !1,
                    inInclude: !1,
                    continueString: !1,
                    pending: !1
                };
                return e
            },
            token: function (e, t) {
                return e.eatSpace() ? null : function (e, t) {
                    var n = e.match(/[\w]+/, !1)
                        , a = e.match(/(\s+)?\w+\s+=>.*/, !1)
                        , O = e.match(/(\s+)?[\w:_]+(\s+)?{/, !1)
                        , s = e.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, !1)
                        , l = e.next();
                    if ("$" === l)
                        return e.match(r) ? t.continueString ? "variableName.special" : "variable" : "error";
                    if (t.continueString)
                        return e.backUp(1),
                            o(e, t);
                    if (t.inDefinition) {
                        if (e.match(/(\s+)?[\w:_]+(\s+)?/))
                            return "def";
                        e.match(/\s+{/),
                            t.inDefinition = !1
                    }
                    return t.inInclude ? (e.match(/(\s+)?\S+(\s+)?/),
                        t.inInclude = !1,
                        "def") : e.match(/(\s+)?\w+\(/) ? (e.backUp(1),
                            "def") : a ? (e.match(/(\s+)?\w+/),
                                "tag") : n && i.hasOwnProperty(n) ? (e.backUp(1),
                                    e.match(/[\w]+/),
                                    e.match(/\s+\S+\s+{/, !1) && (t.inDefinition = !0),
                                    "include" == n && (t.inInclude = !0),
                                    i[n]) : /(^|\s+)[A-Z][\w:_]+/.test(n) ? (e.backUp(1),
                                        e.match(/(^|\s+)[A-Z][\w:_]+/),
                                        "def") : O ? (e.match(/(\s+)?[\w:_]+/),
                                            "def") : s ? (e.match(/(\s+)?[@]{1,2}/),
                                                "atom") : "#" == l ? (e.skipToEnd(),
                                                    "comment") : "'" == l || '"' == l ? (t.pending = l,
                                                        o(e, t)) : "{" == l || "}" == l ? "bracket" : "/" == l ? (e.match(/^[^\/]*\//),
                                                            "string.special") : l.match(/[0-9]/) ? (e.eatWhile(/[0-9]+/),
                                                                "number") : "=" == l ? (">" == e.peek() && e.next(),
                                                                    "operator") : (e.eatWhile(/[\w-]/),
                                                                        null)
                }(e, t)
            }
        }
    }
    ,
    28780: (e, t, n) => {
        n.r(t),
            n.d(t, {
                q: () => h
            });
        var i, r = new RegExp("^(" + ["abs", "acos", "aj", "aj0", "all", "and", "any", "asc", "asin", "asof", "atan", "attr", "avg", "avgs", "bin", "by", "ceiling", "cols", "cor", "cos", "count", "cov", "cross", "csv", "cut", "delete", "deltas", "desc", "dev", "differ", "distinct", "div", "do", "each", "ej", "enlist", "eval", "except", "exec", "exit", "exp", "fby", "fills", "first", "fkeys", "flip", "floor", "from", "get", "getenv", "group", "gtime", "hclose", "hcount", "hdel", "hopen", "hsym", "iasc", "idesc", "if", "ij", "in", "insert", "inter", "inv", "key", "keys", "last", "like", "list", "lj", "load", "log", "lower", "lsq", "ltime", "ltrim", "mavg", "max", "maxs", "mcount", "md5", "mdev", "med", "meta", "min", "mins", "mmax", "mmin", "mmu", "mod", "msum", "neg", "next", "not", "null", "or", "over", "parse", "peach", "pj", "plist", "prd", "prds", "prev", "prior", "rand", "rank", "ratios", "raze", "read0", "read1", "reciprocal", "reverse", "rload", "rotate", "rsave", "rtrim", "save", "scan", "select", "set", "setenv", "show", "signum", "sin", "sqrt", "ss", "ssr", "string", "sublist", "sum", "sums", "sv", "system", "tables", "tan", "til", "trim", "txf", "type", "uj", "ungroup", "union", "update", "upper", "upsert", "value", "var", "view", "views", "vs", "wavg", "where", "where", "while", "within", "wj", "wj1", "wsum", "xasc", "xbar", "xcol", "xcols", "xdesc", "xexp", "xgroup", "xkey", "xlog", "xprev", "xrank"].join("|") + ")$"), a = /[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
        function o(e, t) {
            var n = e.sol()
                , s = e.next();
            if (i = null,
                n) {
                if ("/" == s)
                    return (t.tokenize = O)(e, t);
                if ("\\" == s)
                    return e.eol() || /\s/.test(e.peek()) ? (e.skipToEnd(),
                        /^\\\s*$/.test(e.current()) ? (t.tokenize = l)(e) : t.tokenize = o,
                        "comment") : (t.tokenize = o,
                            "builtin")
            }
            if (/\s/.test(s))
                return "/" == e.peek() ? (e.skipToEnd(),
                    "comment") : "null";
            if ('"' == s)
                return (t.tokenize = c)(e, t);
            if ("`" == s)
                return e.eatWhile(/[A-Za-z\d_:\/.]/),
                    "macroName";
            if ("." == s && /\d/.test(e.peek()) || /\d/.test(s)) {
                var u = null;
                return e.backUp(1),
                    e.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/) || e.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/) || e.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/) || e.match(/^\d+[ptuv]{1}/) ? u = "temporal" : (e.match(/^0[NwW]{1}/) || e.match(/^0x[\da-fA-F]*/) || e.match(/^[01]+[b]{1}/) || e.match(/^\d+[chijn]{1}/) || e.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/)) && (u = "number"),
                    !u || (s = e.peek()) && !a.test(s) ? (e.next(),
                        "error") : u
            }
            return /[A-Za-z]|\./.test(s) ? (e.eatWhile(/[A-Za-z._\d]/),
                r.test(e.current()) ? "keyword" : "variable") : /[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(s) || /[{}\(\[\]\)]/.test(s) ? null : "error"
        }
        function O(e, t) {
            return e.skipToEnd(),
                /\/\s*$/.test(e.current()) ? (t.tokenize = s)(e, t) : t.tokenize = o,
                "comment"
        }
        function s(e, t) {
            var n = e.sol() && "\\" == e.peek();
            return e.skipToEnd(),
                n && /^\\\s*$/.test(e.current()) && (t.tokenize = o),
                "comment"
        }
        function l(e) {
            return e.skipToEnd(),
                "comment"
        }
        function c(e, t) {
            for (var n, i = !1, r = !1; n = e.next();) {
                if ('"' == n && !i) {
                    r = !0;
                    break
                }
                i = !i && "\\" == n
            }
            return r && (t.tokenize = o),
                "string"
        }
        function u(e, t, n) {
            e.context = {
                prev: e.context,
                indent: e.indent,
                col: n,
                type: t
            }
        }
        function d(e) {
            e.indent = e.context.indent,
                e.context = e.context.prev
        }
        const h = {
            name: "q",
            startState: function () {
                return {
                    tokenize: o,
                    context: null,
                    indent: 0,
                    col: 0
                }
            },
            token: function (e, t) {
                e.sol() && (t.context && null == t.context.align && (t.context.align = !1),
                    t.indent = e.indentation());
                var n = t.tokenize(e, t);
                if ("comment" != n && t.context && null == t.context.align && "pattern" != t.context.type && (t.context.align = !0),
                    "(" == i)
                    u(t, ")", e.column());
                else if ("[" == i)
                    u(t, "]", e.column());
                else if ("{" == i)
                    u(t, "}", e.column());
                else if (/[\]\}\)]/.test(i)) {
                    for (; t.context && "pattern" == t.context.type;)
                        d(t);
                    t.context && i == t.context.type && d(t)
                } else
                    "." == i && t.context && "pattern" == t.context.type ? d(t) : /atom|string|variable/.test(n) && t.context && (/[\}\]]/.test(t.context.type) ? u(t, "pattern", e.column()) : "pattern" != t.context.type || t.context.align || (t.context.align = !0,
                        t.context.col = e.column()));
                return n
            },
            indent: function (e, t, n) {
                var i = t && t.charAt(0)
                    , r = e.context;
                if (/[\]\}]/.test(i))
                    for (; r && "pattern" == r.type;)
                        r = r.prev;
                var a = r && i == r.type;
                return r ? "pattern" == r.type ? r.col : r.align ? r.col + (a ? 0 : 1) : r.indent + (a ? 0 : n.unit) : 0
            }
        }
    }
    ,
    87061: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = 0; n < e.length; ++n)
                t[e[n]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                r: () => g
            });
        var r, a = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"], o = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"], O = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"], s = i(a), l = i(o), c = i(O), u = i(["if", "else", "repeat", "while", "function", "for"]), d = /[+\-*\/^<>=!&|~$:]/;
        function h(e, t) {
            r = null;
            var n, i = e.next();
            if ("#" == i)
                return e.skipToEnd(),
                    "comment";
            if ("0" == i && e.eat("x"))
                return e.eatWhile(/[\da-f]/i),
                    "number";
            if ("." == i && e.eat(/\d/))
                return e.match(/\d*(?:e[+\-]?\d+)?/),
                    "number";
            if (/\d/.test(i))
                return e.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/),
                    "number";
            if ("'" == i || '"' == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        if (e.eat("\\")) {
                            var i = e.next();
                            return "x" == i ? e.match(/^[a-f0-9]{2}/i) : ("u" == i || "U" == i) && e.eat("{") && e.skipTo("}") ? e.next() : "u" == i ? e.match(/^[a-f0-9]{4}/i) : "U" == i ? e.match(/^[a-f0-9]{8}/i) : /[0-7]/.test(i) && e.match(/^[0-7]{1,2}/),
                                "string.special"
                        }
                        for (var r; null != (r = e.next());) {
                            if (r == n) {
                                t.tokenize = h;
                                break
                            }
                            if ("\\" == r) {
                                e.backUp(1);
                                break
                            }
                        }
                        return "string"
                    }
                ),
                    "string";
            if ("`" == i)
                return e.match(/[^`]+`/),
                    "string.special";
            if ("." == i && e.match(/.(?:[.]|\d+)/))
                return "keyword";
            if (/[a-zA-Z\.]/.test(i)) {
                e.eatWhile(/[\w\.]/);
                var a = e.current();
                return s.propertyIsEnumerable(a) ? "atom" : c.propertyIsEnumerable(a) ? (u.propertyIsEnumerable(a) && !e.match(/\s*if(\s+|$)/, !1) && (r = "block"),
                    "keyword") : l.propertyIsEnumerable(a) ? "builtin" : "variable"
            }
            return "%" == i ? (e.skipTo("%") && e.next(),
                "variableName.special") : "<" == i && e.eat("-") || "<" == i && e.match("<-") || "-" == i && e.match(/>>?/) || "=" == i && t.ctx.argList ? "operator" : d.test(i) ? ("$" == i || e.eatWhile(d),
                    "operator") : /[\(\){}\[\];]/.test(i) ? (r = i,
                        ";" == i ? "punctuation" : null) : null
        }
        function f(e, t, n) {
            e.ctx = {
                type: t,
                indent: e.indent,
                flags: 0,
                column: n.column(),
                prev: e.ctx
            }
        }
        function p(e, t) {
            var n = e.ctx;
            e.ctx = {
                type: n.type,
                indent: n.indent,
                flags: n.flags | t,
                column: n.column,
                prev: n.prev
            }
        }
        function m(e) {
            e.indent = e.ctx.indent,
                e.ctx = e.ctx.prev
        }
        const g = {
            name: "r",
            startState: function (e) {
                return {
                    tokenize: h,
                    ctx: {
                        type: "top",
                        indent: -e,
                        flags: 2
                    },
                    indent: 0,
                    afterIdent: !1
                }
            },
            token: function (e, t) {
                if (e.sol() && (0 == (3 & t.ctx.flags) && (t.ctx.flags |= 2),
                    4 & t.ctx.flags && m(t),
                    t.indent = e.indentation()),
                    e.eatSpace())
                    return null;
                var n = t.tokenize(e, t);
                return "comment" != n && 0 == (2 & t.ctx.flags) && p(t, 1),
                    ";" != r && "{" != r && "}" != r || "block" != t.ctx.type || m(t),
                    "{" == r ? f(t, "}", e) : "(" == r ? (f(t, ")", e),
                        t.afterIdent && (t.ctx.argList = !0)) : "[" == r ? f(t, "]", e) : "block" == r ? f(t, "block", e) : r == t.ctx.type ? m(t) : "block" == t.ctx.type && "comment" != n && p(t, 4),
                    t.afterIdent = "variable" == n || "keyword" == n,
                    n
            },
            indent: function (e, t, n) {
                if (e.tokenize != h)
                    return 0;
                var i = t && t.charAt(0)
                    , r = e.ctx
                    , a = i == r.type;
                return 4 & r.flags && (r = r.prev),
                    "block" == r.type ? r.indent + ("{" == i ? 0 : n.unit) : 1 & r.flags ? r.column + (a ? 0 : 1) : r.indent + (a ? 0 : n.unit)
            },
            languageData: {
                wordChars: ".",
                commentTokens: {
                    line: "#"
                },
                autocomplete: a.concat(o, O)
            }
        }
    }
    ,
    87179: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = 0, i = e.length; n < i; ++n)
                t[e[n]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                ruby: () => g
            });
        var r, a = ["alias", "and", "BEGIN", "begin", "break", "case", "class", "def", "defined?", "do", "else", "elsif", "END", "end", "ensure", "false", "for", "if", "in", "module", "next", "not", "or", "redo", "rescue", "retry", "return", "self", "super", "then", "true", "undef", "unless", "until", "when", "while", "yield", "nil", "raise", "throw", "catch", "fail", "loop", "callcc", "caller", "lambda", "proc", "public", "protected", "private", "require", "load", "require_relative", "extend", "autoload", "__END__", "__FILE__", "__LINE__", "__dir__"], o = i(a), O = i(["def", "class", "case", "for", "while", "until", "module", "catch", "loop", "proc", "begin"]), s = i(["end", "until"]), l = {
            "[": "]",
            "{": "}",
            "(": ")"
        }, c = {
            "]": "[",
            "}": "{",
            ")": "("
        };
        function u(e, t, n) {
            return n.tokenize.push(e),
                e(t, n)
        }
        function d(e, t) {
            if (e.sol() && e.match("=begin") && e.eol())
                return t.tokenize.push(m),
                    "comment";
            if (e.eatSpace())
                return null;
            var n, i, a, o = e.next();
            if ("`" == o || "'" == o || '"' == o)
                return u(p(o, "string", '"' == o || "`" == o), e, t);
            if ("/" == o)
                return function (e) {
                    var t, n = e.pos, i = 0, r = !1, a = !1;
                    for (; null != (t = e.next());)
                        if (a)
                            a = !1;
                        else {
                            if ("[{(".indexOf(t) > -1)
                                i++;
                            else if ("]})".indexOf(t) > -1) {
                                if (--i < 0)
                                    break
                            } else if ("/" == t && 0 == i) {
                                r = !0;
                                break
                            }
                            a = "\\" == t
                        }
                    return e.backUp(e.pos - n),
                        r
                }(e) ? u(p(o, "string.special", !0), e, t) : "operator";
            if ("%" == o) {
                var O = "string"
                    , s = !0;
                e.eat("s") ? O = "atom" : e.eat(/[WQ]/) ? O = "string" : e.eat(/[r]/) ? O = "string.special" : e.eat(/[wxq]/) && (O = "string",
                    s = !1);
                var c = e.eat(/[^\w\s=]/);
                return c ? (l.propertyIsEnumerable(c) && (c = l[c]),
                    u(p(c, O, s, !0), e, t)) : "operator"
            }
            if ("#" == o)
                return e.skipToEnd(),
                    "comment";
            if ("<" == o && (n = e.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/)))
                return u((i = n[2],
                    a = n[1],
                    function (e, t) {
                        return a && e.eatSpace(),
                            e.match(i) ? t.tokenize.pop() : e.skipToEnd(),
                            "string"
                    }
                ), e, t);
            if ("0" == o)
                return e.eat("x") ? e.eatWhile(/[\da-fA-F]/) : e.eat("b") ? e.eatWhile(/[01]/) : e.eatWhile(/[0-7]/),
                    "number";
            if (/\d/.test(o))
                return e.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/),
                    "number";
            if ("?" == o) {
                for (; e.match(/^\\[CM]-/);)
                    ;
                return e.eat("\\") ? e.eatWhile(/\w/) : e.next(),
                    "string"
            }
            if (":" == o)
                return e.eat("'") ? u(p("'", "atom", !1), e, t) : e.eat('"') ? u(p('"', "atom", !0), e, t) : e.eat(/[\<\>]/) ? (e.eat(/[\<\>]/),
                    "atom") : e.eat(/[\+\-\*\/\&\|\:\!]/) ? "atom" : e.eat(/[a-zA-Z$@_\xa1-\uffff]/) ? (e.eatWhile(/[\w$\xa1-\uffff]/),
                        e.eat(/[\?\!\=]/),
                        "atom") : "operator";
            if ("@" == o && e.match(/^@?[a-zA-Z_\xa1-\uffff]/))
                return e.eat("@"),
                    e.eatWhile(/[\w\xa1-\uffff]/),
                    "propertyName";
            if ("$" == o)
                return e.eat(/[a-zA-Z_]/) ? e.eatWhile(/[\w]/) : e.eat(/\d/) ? e.eat(/\d/) : e.next(),
                    "variableName.special";
            if (/[a-zA-Z_\xa1-\uffff]/.test(o))
                return e.eatWhile(/[\w\xa1-\uffff]/),
                    e.eat(/[\?\!]/),
                    e.eat(":") ? "atom" : "variable";
            if ("|" != o || !t.varList && "{" != t.lastTok && "do" != t.lastTok) {
                if (/[\(\)\[\]{}\\;]/.test(o))
                    return r = o,
                        null;
                if ("-" == o && e.eat(">"))
                    return "operator";
                if (/[=+\-\/*:\.^%<>~|]/.test(o)) {
                    var d = e.eatWhile(/[=+\-\/*:\.^%<>~|]/);
                    return "." != o || d || (r = "."),
                        "operator"
                }
                return null
            }
            return r = "|",
                null
        }
        function h(e) {
            return e || (e = 1),
                function (t, n) {
                    if ("}" == t.peek()) {
                        if (1 == e)
                            return n.tokenize.pop(),
                                n.tokenize[n.tokenize.length - 1](t, n);
                        n.tokenize[n.tokenize.length - 1] = h(e - 1)
                    } else
                        "{" == t.peek() && (n.tokenize[n.tokenize.length - 1] = h(e + 1));
                    return d(t, n)
                }
        }
        function f() {
            var e = !1;
            return function (t, n) {
                return e ? (n.tokenize.pop(),
                    n.tokenize[n.tokenize.length - 1](t, n)) : (e = !0,
                        d(t, n))
            }
        }
        function p(e, t, n, i) {
            return function (r, a) {
                var o, O = !1;
                for ("read-quoted-paused" === a.context.type && (a.context = a.context.prev,
                    r.eat("}")); null != (o = r.next());) {
                    if (o == e && (i || !O)) {
                        a.tokenize.pop();
                        break
                    }
                    if (n && "#" == o && !O) {
                        if (r.eat("{")) {
                            "}" == e && (a.context = {
                                prev: a.context,
                                type: "read-quoted-paused"
                            }),
                                a.tokenize.push(h());
                            break
                        }
                        if (/[@\$]/.test(r.peek())) {
                            a.tokenize.push(f());
                            break
                        }
                    }
                    O = !O && "\\" == o
                }
                return t
            }
        }
        function m(e, t) {
            return e.sol() && e.match("=end") && e.eol() && t.tokenize.pop(),
                e.skipToEnd(),
                "comment"
        }
        const g = {
            name: "ruby",
            startState: function (e) {
                return {
                    tokenize: [d],
                    indented: 0,
                    context: {
                        type: "top",
                        indented: -e
                    },
                    continuedLine: !1,
                    lastTok: null,
                    varList: !1
                }
            },
            token: function (e, t) {
                r = null,
                    e.sol() && (t.indented = e.indentation());
                var n, i = t.tokenize[t.tokenize.length - 1](e, t), a = r;
                if ("variable" == i) {
                    var l = e.current();
                    "keyword" == (i = "." == t.lastTok ? "property" : o.propertyIsEnumerable(e.current()) ? "keyword" : /^[A-Z]/.test(l) ? "tag" : "def" == t.lastTok || "class" == t.lastTok || t.varList ? "def" : "variable") && (a = l,
                        O.propertyIsEnumerable(l) ? n = "indent" : s.propertyIsEnumerable(l) ? n = "dedent" : "if" != l && "unless" != l || e.column() != e.indentation() ? "do" == l && t.context.indented < t.indented && (n = "indent") : n = "indent")
                }
                return (r || i && "comment" != i) && (t.lastTok = a),
                    "|" == r && (t.varList = !t.varList),
                    "indent" == n || /[\(\[\{]/.test(r) ? t.context = {
                        prev: t.context,
                        type: r || i,
                        indented: t.indented
                    } : ("dedent" == n || /[\)\]\}]/.test(r)) && t.context.prev && (t.context = t.context.prev),
                    e.eol() && (t.continuedLine = "\\" == r || "operator" == i),
                    i
            },
            indent: function (e, t, n) {
                if (e.tokenize[e.tokenize.length - 1] != d)
                    return null;
                var i = t && t.charAt(0)
                    , r = e.context
                    , a = r.type == c[i] || "keyword" == r.type && /^(?:end|until|else|elsif|when|rescue)\b/.test(t);
                return r.indented + (a ? 0 : n.unit) + (e.continuedLine ? n.unit : 0)
            },
            languageData: {
                indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
                commentTokens: {
                    line: "#"
                },
                autocomplete: a
            }
        }
    }
    ,
    254: (e, t, n) => {
        n.r(t),
            n.d(t, {
                sas: () => s
            });
        var i = {}
            , r = {
                eq: "operator",
                lt: "operator",
                le: "operator",
                gt: "operator",
                ge: "operator",
                in: "operator",
                ne: "operator",
                or: "operator"
            }
            , a = /(<=|>=|!=|<>)/
            , o = /[=\(:\),{}.*<>+\-\/^\[\]]/;
        function O(e, t, n) {
            if (n)
                for (var r = t.split(" "), a = 0; a < r.length; a++)
                    i[r[a]] = {
                        style: e,
                        state: n
                    }
        }
        O("def", "stack pgm view source debug nesting nolist", ["inDataStep"]),
            O("def", "if while until for do do; end end; then else cancel", ["inDataStep"]),
            O("def", "label format _n_ _error_", ["inDataStep"]),
            O("def", "ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME", ["inDataStep"]),
            O("def", "filevar finfo finv fipname fipnamel fipstate first firstobs floor", ["inDataStep"]),
            O("def", "varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday", ["inDataStep"]),
            O("def", "zipfips zipname zipnamel zipstate", ["inDataStep"]),
            O("def", "put putc putn", ["inDataStep"]),
            O("builtin", "data run", ["inDataStep"]),
            O("def", "data", ["inProc"]),
            O("def", "%if %end %end; %else %else; %do %do; %then", ["inMacro"]),
            O("builtin", "proc run; quit; libname filename %macro %mend option options", ["ALL"]),
            O("def", "footnote title libname ods", ["ALL"]),
            O("def", "%let %put %global %sysfunc %eval ", ["ALL"]),
            O("variable", "&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext", ["ALL"]),
            O("def", "source2 nosource2 page pageno pagesize", ["ALL"]),
            O("def", "_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max", ["inDataStep", "inProc"]),
            O("operator", "and not ", ["inDataStep", "inProc"]);
        const s = {
            name: "sas",
            startState: function () {
                return {
                    inDataStep: !1,
                    inProc: !1,
                    inMacro: !1,
                    nextword: !1,
                    continueString: null,
                    continueComment: !1
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : function (e, t) {
                    var n = e.next();
                    if ("/" === n && e.eat("*"))
                        return t.continueComment = !0,
                            "comment";
                    if (!0 === t.continueComment)
                        return "*" === n && "/" === e.peek() ? (e.next(),
                            t.continueComment = !1) : e.skipTo("*") ? (e.skipTo("*"),
                                e.next(),
                                e.eat("/") && (t.continueComment = !1)) : e.skipToEnd(),
                            "comment";
                    if ("*" == n && e.column() == e.indentation())
                        return e.skipToEnd(),
                            "comment";
                    var O, s = n + e.peek();
                    if (!('"' !== n && "'" !== n || t.continueString))
                        return t.continueString = n,
                            "string";
                    if (t.continueString)
                        return t.continueString == n ? t.continueString = null : e.skipTo(t.continueString) ? (e.next(),
                            t.continueString = null) : e.skipToEnd(),
                            "string";
                    if (null !== t.continueString && e.eol())
                        return e.skipTo(t.continueString) || e.skipToEnd(),
                            "string";
                    if (/[\d\.]/.test(n))
                        return "." === n ? e.match(/^[0-9]+([eE][\-+]?[0-9]+)?/) : "0" === n ? e.match(/^[xX][0-9a-fA-F]+/) || e.match(/^0[0-7]+/) : e.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/),
                            "number";
                    if (a.test(n + e.peek()))
                        return e.next(),
                            "operator";
                    if (r.hasOwnProperty(s)) {
                        if (e.next(),
                            " " === e.peek())
                            return r[s.toLowerCase()]
                    } else if (o.test(n))
                        return "operator";
                    if (null != e.match(/[%&;\w]+/, !1)) {
                        if (O = n + e.match(/[%&;\w]+/, !0),
                            /&/.test(O))
                            return "variable"
                    } else
                        O = n;
                    if (t.nextword)
                        return e.match(/[\w]+/),
                            "." === e.peek() && e.skipTo(" "),
                            t.nextword = !1,
                            "variableName.special";
                    if (O = O.toLowerCase(),
                        t.inDataStep) {
                        if ("run;" === O || e.match(/run\s;/))
                            return t.inDataStep = !1,
                                "builtin";
                        if (O && "." === e.next())
                            return /\w/.test(e.peek()) ? "variableName.special" : "variable";
                        if (O && i.hasOwnProperty(O) && (-1 !== i[O].state.indexOf("inDataStep") || -1 !== i[O].state.indexOf("ALL"))) {
                            e.start < e.pos && e.backUp(e.pos - e.start);
                            for (var l = 0; l < O.length; ++l)
                                e.next();
                            return i[O].style
                        }
                    }
                    if (t.inProc) {
                        if ("run;" === O || "quit;" === O)
                            return t.inProc = !1,
                                "builtin";
                        if (O && i.hasOwnProperty(O) && (-1 !== i[O].state.indexOf("inProc") || -1 !== i[O].state.indexOf("ALL")))
                            return e.match(/[\w]+/),
                                i[O].style
                    }
                    return t.inMacro ? "%mend" === O ? (";" === e.peek() && e.next(),
                        t.inMacro = !1,
                        "builtin") : O && i.hasOwnProperty(O) && (-1 !== i[O].state.indexOf("inMacro") || -1 !== i[O].state.indexOf("ALL")) ? (e.match(/[\w]+/),
                            i[O].style) : "atom" : O && i.hasOwnProperty(O) ? (e.backUp(1),
                                e.match(/[\w]+/),
                                "data" === O && !1 === /=/.test(e.peek()) ? (t.inDataStep = !0,
                                    t.nextword = !0,
                                    "builtin") : "proc" === O ? (t.inProc = !0,
                                        t.nextword = !0,
                                        "builtin") : "%macro" === O ? (t.inMacro = !0,
                                            t.nextword = !0,
                                            "builtin") : /title[1-9]/.test(O) ? "def" : "footnote" === O ? (e.eat(/[1-9]/),
                                                "def") : !0 === t.inDataStep && -1 !== i[O].state.indexOf("inDataStep") || !0 === t.inProc && -1 !== i[O].state.indexOf("inProc") || !0 === t.inMacro && -1 !== i[O].state.indexOf("inMacro") || -1 !== i[O].state.indexOf("ALL") ? i[O].style : null) : null
                }(e, t)
            },
            languageData: {
                commentTokens: {
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        }
    }
    ,
    65736: (e, t, n) => {
        n.r(t),
            n.d(t, {
                scheme: () => P
            });
        var i = "comment"
            , r = "string"
            , a = "symbol"
            , o = "atom"
            , O = "number"
            , s = "bracket";
        function l(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        var c = l("\u03bb case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?")
            , u = l("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless");
        function d(e, t, n) {
            this.indent = e,
                this.type = t,
                this.prev = n
        }
        function h(e, t, n) {
            e.indentStack = new d(t, n, e.indentStack)
        }
        var f = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i)
            , p = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i)
            , m = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i)
            , g = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);
        function Q(e) {
            return e.match(f)
        }
        function $(e) {
            return e.match(p)
        }
        function b(e, t) {
            return !0 === t && e.backUp(1),
                e.match(g)
        }
        function y(e) {
            return e.match(m)
        }
        function S(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (n == t.token && !i) {
                    t.state.mode = !1;
                    break
                }
                i = !i && "\\" == n
            }
        }
        const P = {
            name: "scheme",
            startState: function () {
                return {
                    indentStack: null,
                    indentation: 0,
                    mode: !1,
                    sExprComment: !1,
                    sExprQuote: !1
                }
            },
            token: function (e, t) {
                if (null == t.indentStack && e.sol() && (t.indentation = e.indentation()),
                    e.eatSpace())
                    return null;
                var n = null;
                switch (t.mode) {
                    case "string":
                        S(e, {
                            token: '"',
                            state: t
                        }),
                            n = r;
                        break;
                    case "symbol":
                        S(e, {
                            token: "|",
                            state: t
                        }),
                            n = a;
                        break;
                    case "comment":
                        for (var l, d = !1; null != (l = e.next());) {
                            if ("#" == l && d) {
                                t.mode = !1;
                                break
                            }
                            d = "|" == l
                        }
                        n = i;
                        break;
                    case "s-expr-comment":
                        if (t.mode = !1,
                            "(" != e.peek() && "[" != e.peek()) {
                            e.eatWhile(/[^\s\(\)\[\]]/),
                                n = i;
                            break
                        }
                        t.sExprComment = 0;
                    default:
                        var f = e.next();
                        if ('"' == f)
                            t.mode = "string",
                                n = r;
                        else if ("'" == f)
                            "(" == e.peek() || "[" == e.peek() ? ("number" != typeof t.sExprQuote && (t.sExprQuote = 0),
                                n = o) : (e.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),
                                    n = o);
                        else if ("|" == f)
                            t.mode = "symbol",
                                n = a;
                        else if ("#" == f)
                            if (e.eat("|"))
                                t.mode = "comment",
                                    n = i;
                            else if (e.eat(/[tf]/i))
                                n = o;
                            else if (e.eat(";"))
                                t.mode = "s-expr-comment",
                                    n = i;
                            else {
                                var p = null
                                    , m = !1
                                    , g = !0;
                                e.eat(/[ei]/i) ? m = !0 : e.backUp(1),
                                    e.match(/^#b/i) ? p = Q : e.match(/^#o/i) ? p = $ : e.match(/^#x/i) ? p = y : e.match(/^#d/i) ? p = b : e.match(/^[-+0-9.]/, !1) ? (g = !1,
                                        p = b) : m || e.eat("#"),
                                    null != p && (g && !m && e.match(/^#[ei]/i),
                                        p(e) && (n = O))
                            }
                        else if (/^[-+0-9.]/.test(f) && b(e, !0))
                            n = O;
                        else if (";" == f)
                            e.skipToEnd(),
                                n = i;
                        else if ("(" == f || "[" == f) {
                            for (var P, v = "", x = e.column(); null != (P = e.eat(/[^\s\(\[\;\)\]]/));)
                                v += P;
                            v.length > 0 && u.propertyIsEnumerable(v) ? h(t, x + 2, f) : (e.eatSpace(),
                                e.eol() || ";" == e.peek() ? h(t, x + 1, f) : h(t, x + e.current().length, f)),
                                e.backUp(e.current().length - 1),
                                "number" == typeof t.sExprComment && t.sExprComment++,
                                "number" == typeof t.sExprQuote && t.sExprQuote++,
                                n = s
                        } else
                            ")" == f || "]" == f ? (n = s,
                                null != t.indentStack && t.indentStack.type == (")" == f ? "(" : "[") && (!function (e) {
                                    e.indentStack = e.indentStack.prev
                                }(t),
                                    "number" == typeof t.sExprComment && 0 == --t.sExprComment && (n = i,
                                        t.sExprComment = !1),
                                    "number" == typeof t.sExprQuote && 0 == --t.sExprQuote && (n = o,
                                        t.sExprQuote = !1))) : (e.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),
                                            n = c && c.propertyIsEnumerable(e.current()) ? "builtin" : "variable")
                }
                return "number" == typeof t.sExprComment ? i : "number" == typeof t.sExprQuote ? o : n
            },
            indent: function (e) {
                return null == e.indentStack ? e.indentation : e.indentStack.indent
            },
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", '"']
                },
                commentTokens: {
                    line: ";;"
                }
            }
        }
    }
    ,
    79257: (e, t, n) => {
        n.r(t),
            n.d(t, {
                shell: () => h
            });
        var i = {};
        function r(e, t) {
            for (var n = 0; n < t.length; n++)
                i[t[n]] = e
        }
        var a = ["true", "false"]
            , o = ["if", "then", "do", "else", "elif", "while", "until", "for", "in", "esac", "fi", "fin", "fil", "done", "exit", "set", "unset", "export", "function"]
            , O = ["ab", "awk", "bash", "beep", "cat", "cc", "cd", "chown", "chmod", "chroot", "clear", "cp", "curl", "cut", "diff", "echo", "find", "gawk", "gcc", "get", "git", "grep", "hg", "kill", "killall", "ln", "ls", "make", "mkdir", "openssl", "mv", "nc", "nl", "node", "npm", "ping", "ps", "restart", "rm", "rmdir", "sed", "service", "sh", "shopt", "shred", "source", "sort", "sleep", "ssh", "start", "stop", "su", "sudo", "svn", "tee", "telnet", "top", "touch", "vi", "vim", "wall", "wc", "wget", "who", "write", "yes", "zsh"];
        function s(e, t) {
            if (e.eatSpace())
                return null;
            var n, r = e.sol(), a = e.next();
            if ("\\" === a)
                return e.next(),
                    null;
            if ("'" === a || '"' === a || "`" === a)
                return t.tokens.unshift(l(a, "`" === a ? "quote" : "string")),
                    d(e, t);
            if ("#" === a)
                return r && e.eat("!") ? (e.skipToEnd(),
                    "meta") : (e.skipToEnd(),
                        "comment");
            if ("$" === a)
                return t.tokens.unshift(u),
                    d(e, t);
            if ("+" === a || "=" === a)
                return "operator";
            if ("-" === a)
                return e.eat("-"),
                    e.eatWhile(/\w/),
                    "attribute";
            if ("<" == a) {
                if (e.match("<<"))
                    return "operator";
                var o = e.match(/^<-?\s*(?:['"]([^'"]*)['"]|([^'"\s]*))/);
                if (o)
                    return t.tokens.unshift((n = o[1] || o[2],
                        function (e, t) {
                            return e.sol() && e.string == n && t.tokens.shift(),
                                e.skipToEnd(),
                                "string.special"
                        }
                    )),
                        "string.special"
            }
            if (/\d/.test(a) && (e.eatWhile(/\d/),
                e.eol() || !/\w/.test(e.peek())))
                return "number";
            e.eatWhile(/[\w-]/);
            var O = e.current();
            return "=" === e.peek() && /\w+/.test(O) ? "def" : i.hasOwnProperty(O) ? i[O] : null
        }
        function l(e, t) {
            var n = "(" == e ? ")" : "{" == e ? "}" : e;
            return function (i, r) {
                for (var a, o = !1; null != (a = i.next());) {
                    if (a === n && !o) {
                        r.tokens.shift();
                        break
                    }
                    if ("$" === a && !o && "'" !== e && i.peek() != n) {
                        o = !0,
                            i.backUp(1),
                            r.tokens.unshift(u);
                        break
                    }
                    if (!o && e !== n && a === e)
                        return r.tokens.unshift(l(e, t)),
                            d(i, r);
                    if (!o && /['"]/.test(a) && !/['"]/.test(e)) {
                        r.tokens.unshift(c(a, "string")),
                            i.backUp(1);
                        break
                    }
                    o = !o && "\\" === a
                }
                return t
            }
        }
        function c(e, t) {
            return function (n, i) {
                return i.tokens[0] = l(e, t),
                    n.next(),
                    d(n, i)
            }
        }
        r("atom", a),
            r("keyword", o),
            r("builtin", O);
        var u = function (e, t) {
            t.tokens.length > 1 && e.eat("$");
            var n = e.next();
            return /['"({]/.test(n) ? (t.tokens[0] = l(n, "(" == n ? "quote" : "{" == n ? "def" : "string"),
                d(e, t)) : (/\d/.test(n) || e.eatWhile(/\w/),
                    t.tokens.shift(),
                    "def")
        };
        function d(e, t) {
            return (t.tokens[0] || s)(e, t)
        }
        const h = {
            name: "shell",
            startState: function () {
                return {
                    tokens: []
                }
            },
            token: function (e, t) {
                return d(e, t)
            },
            languageData: {
                autocomplete: a.concat(o, O),
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "`"]
                },
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    36113: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                sieve: () => l
            });
        var r = i("if elsif else stop require")
            , a = i("true false not");
        function o(e, t) {
            var n, i = e.next();
            if ("/" == i && e.eat("*"))
                return t.tokenize = s,
                    s(e, t);
            if ("#" === i)
                return e.skipToEnd(),
                    "comment";
            if ('"' == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1; null != (i = e.next()) && (i != n || r);)
                            r = !r && "\\" == i;
                        return r || (t.tokenize = o),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if ("(" == i)
                return t._indent.push("("),
                    t._indent.push("{"),
                    null;
            if ("{" === i)
                return t._indent.push("{"),
                    null;
            if (")" == i && (t._indent.pop(),
                t._indent.pop()),
                "}" === i)
                return t._indent.pop(),
                    null;
            if ("," == i)
                return null;
            if (";" == i)
                return null;
            if (/[{}\(\),;]/.test(i))
                return null;
            if (/\d/.test(i))
                return e.eatWhile(/[\d]/),
                    e.eat(/[KkMmGg]/),
                    "number";
            if (":" == i)
                return e.eatWhile(/[a-zA-Z_]/),
                    e.eatWhile(/[a-zA-Z0-9_]/),
                    "operator";
            e.eatWhile(/\w/);
            var l = e.current();
            return "text" == l && e.eat(":") ? (t.tokenize = O,
                "string") : r.propertyIsEnumerable(l) ? "keyword" : a.propertyIsEnumerable(l) ? "atom" : null
        }
        function O(e, t) {
            return t._multiLineString = !0,
                e.sol() ? ("." == e.next() && e.eol() && (t._multiLineString = !1,
                    t.tokenize = o),
                    "string") : (e.eatSpace(),
                        "#" == e.peek() ? (e.skipToEnd(),
                            "comment") : (e.skipToEnd(),
                                "string"))
        }
        function s(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (i && "/" == n) {
                    t.tokenize = o;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        const l = {
            name: "sieve",
            startState: function (e) {
                return {
                    tokenize: o,
                    baseIndent: e || 0,
                    _indent: []
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : (t.tokenize || o)(e, t)
            },
            indent: function (e, t, n) {
                var i = e._indent.length;
                return t && "}" == t[0] && i--,
                    i < 0 && (i = 0),
                    i * n.unit
            },
            languageData: {
                indentOnInput: /^\s*\}$/
            }
        }
    }
    ,
    44649: (e, t, n) => {
        function i(e) {
            r(e, "start");
            var t = {}
                , n = e.languageData || {}
                , i = !1;
            for (var s in e)
                if (s != n && e.hasOwnProperty(s))
                    for (var l = t[s] = [], c = e[s], u = 0; u < c.length; u++) {
                        var d = c[u];
                        l.push(new a(d, e)),
                            (d.indent || d.dedent) && (i = !0)
                    }
            return {
                name: n.name,
                startState: function () {
                    return {
                        state: "start",
                        pending: null,
                        indent: i ? [] : null
                    }
                },
                copyState: function (e) {
                    var t = {
                        state: e.state,
                        pending: e.pending,
                        indent: e.indent && e.indent.slice(0)
                    };
                    return e.stack && (t.stack = e.stack.slice(0)),
                        t
                },
                token: o(t),
                indent: O(t, n),
                languageData: n
            }
        }
        function r(e, t) {
            if (!e.hasOwnProperty(t))
                throw new Error("Undefined state " + t + " in simple mode")
        }
        function a(e, t) {
            (e.next || e.push) && r(t, e.next || e.push),
                this.regex = function (e, t) {
                    if (!e)
                        return /(?:)/;
                    var n = "";
                    return e instanceof RegExp ? (e.ignoreCase && (n = "i"),
                        e = e.source) : e = String(e),
                        new RegExp((!1 === t ? "" : "^") + "(?:" + e + ")", n)
                }(e.regex),
                this.token = function (e) {
                    if (!e)
                        return null;
                    if (e.apply)
                        return e;
                    if ("string" == typeof e)
                        return e.replace(/\./g, " ");
                    for (var t = [], n = 0; n < e.length; n++)
                        t.push(e[n] && e[n].replace(/\./g, " "));
                    return t
                }(e.token),
                this.data = e
        }
        function o(e) {
            return function (t, n) {
                if (n.pending) {
                    var i = n.pending.shift();
                    return 0 == n.pending.length && (n.pending = null),
                        t.pos += i.text.length,
                        i.token
                }
                for (var r = e[n.state], a = 0; a < r.length; a++) {
                    var o = r[a]
                        , O = (!o.data.sol || t.sol()) && t.match(o.regex);
                    if (O) {
                        o.data.next ? n.state = o.data.next : o.data.push ? ((n.stack || (n.stack = [])).push(n.state),
                            n.state = o.data.push) : o.data.pop && n.stack && n.stack.length && (n.state = n.stack.pop()),
                            o.data.indent && n.indent.push(t.indentation() + t.indentUnit),
                            o.data.dedent && n.indent.pop();
                        var s = o.token;
                        if (s && s.apply && (s = s(O)),
                            O.length > 2 && o.token && "string" != typeof o.token) {
                            n.pending = [];
                            for (var l = 2; l < O.length; l++)
                                O[l] && n.pending.push({
                                    text: O[l],
                                    token: o.token[l - 1]
                                });
                            return t.backUp(O[0].length - (O[1] ? O[1].length : 0)),
                                s[0]
                        }
                        return s && s.join ? s[0] : s
                    }
                }
                return t.next(),
                    null
            }
        }
        function O(e, t) {
            return function (n, i) {
                if (null == n.indent || t.dontIndentStates && t.doneIndentState.indexOf(n.state) > -1)
                    return null;
                var r = n.indent.length - 1
                    , a = e[n.state];
                e: for (; ;) {
                    for (var o = 0; o < a.length; o++) {
                        var O = a[o];
                        if (O.data.dedent && !1 !== O.data.dedentIfLineStart) {
                            var s = O.regex.exec(i);
                            if (s && s[0]) {
                                r--,
                                    (O.next || O.push) && (a = e[O.next || O.push]),
                                    i = i.slice(s[0].length);
                                continue e
                            }
                        }
                    }
                    break
                }
                return r < 0 ? 0 : n.indent[r]
            }
        }
        n.d(t, {
            I: () => i
        })
    }
    ,
    52202: (e, t, n) => {
        n.r(t),
            n.d(t, {
                smalltalk: () => h
            });
        var i = /[+\-\/\\*~<>=@%|&?!.,:;^]/
            , r = /true|false|nil|self|super|thisContext/
            , a = function (e, t) {
                this.next = e,
                    this.parent = t
            }
            , o = function (e, t, n) {
                this.name = e,
                    this.context = t,
                    this.eos = n
            }
            , O = function () {
                this.context = new a(s, null),
                    this.expectVariable = !0,
                    this.indentation = 0,
                    this.userIndentationDelta = 0
            };
        O.prototype.userIndent = function (e, t) {
            this.userIndentationDelta = e > 0 ? e / t - this.indentation : 0
        }
            ;
        var s = function (e, t, n) {
            var O = new o(null, t, !1)
                , s = e.next();
            return '"' === s ? O = l(e, new a(l, t)) : "'" === s ? O = c(e, new a(c, t)) : "#" === s ? "'" === e.peek() ? (e.next(),
                O = u(e, new a(u, t))) : e.eatWhile(/[^\s.{}\[\]()]/) ? O.name = "string.special" : O.name = "meta" : "$" === s ? ("<" === e.next() && (e.eatWhile(/[^\s>]/),
                    e.next()),
                    O.name = "string.special") : "|" === s && n.expectVariable ? O.context = new a(d, t) : /[\[\]{}()]/.test(s) ? (O.name = "bracket",
                        O.eos = /[\[{(]/.test(s),
                        "[" === s ? n.indentation++ : "]" === s && (n.indentation = Math.max(0, n.indentation - 1))) : i.test(s) ? (e.eatWhile(i),
                            O.name = "operator",
                            O.eos = ";" !== s) : /\d/.test(s) ? (e.eatWhile(/[\w\d]/),
                                O.name = "number") : /[\w_]/.test(s) ? (e.eatWhile(/[\w\d_]/),
                                    O.name = n.expectVariable ? r.test(e.current()) ? "keyword" : "variable" : null) : O.eos = n.expectVariable,
                O
        }
            , l = function (e, t) {
                return e.eatWhile(/[^"]/),
                    new o("comment", e.eat('"') ? t.parent : t, !0)
            }
            , c = function (e, t) {
                return e.eatWhile(/[^']/),
                    new o("string", e.eat("'") ? t.parent : t, !1)
            }
            , u = function (e, t) {
                return e.eatWhile(/[^']/),
                    new o("string.special", e.eat("'") ? t.parent : t, !1)
            }
            , d = function (e, t) {
                var n = new o(null, t, !1);
                return "|" === e.next() ? (n.context = t.parent,
                    n.eos = !0) : (e.eatWhile(/[^|]/),
                        n.name = "variable"),
                    n
            };
        const h = {
            name: "smalltalk",
            startState: function () {
                return new O
            },
            token: function (e, t) {
                if (t.userIndent(e.indentation(), e.indentUnit),
                    e.eatSpace())
                    return null;
                var n = t.context.next(e, t.context, t);
                return t.context = n.context,
                    t.expectVariable = n.eos,
                    n.name
            },
            blankLine: function (e, t) {
                e.userIndent(0, t)
            },
            indent: function (e, t, n) {
                var i = e.context.next === s && t && "]" === t.charAt(0) ? -1 : e.userIndentationDelta;
                return (e.indentation + i) * n.unit
            },
            languageData: {
                indentOnInput: /^\s*\]$/
            }
        }
    }
    ,
    2827: (e, t, n) => {
        n.r(t),
            n.d(t, {
                solr: () => s
            });
        var i = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/
            , r = /[\|\!\+\-\*\?\~\^\&]/
            , a = /^(OR|AND|NOT|TO)$/;
        function o(e) {
            return function (t, n) {
                for (var r = e; (e = t.peek()) && null != e.match(i);)
                    r += t.next();
                return n.tokenize = O,
                    a.test(r) ? "operator" : function (e) {
                        return parseFloat(e).toString() === e
                    }(r) ? "number" : ":" == t.peek() ? "propertyName" : "string"
            }
        }
        function O(e, t) {
            var n, a, s = e.next();
            return '"' == s ? t.tokenize = (a = s,
                function (e, t) {
                    for (var n, i = !1; null != (n = e.next()) && (n != a || i);)
                        i = !i && "\\" == n;
                    return i || (t.tokenize = O),
                        "string"
                }
            ) : r.test(s) ? t.tokenize = (n = s,
                function (e, t) {
                    return "|" == n ? e.eat(/\|/) : "&" == n && e.eat(/\&/),
                        t.tokenize = O,
                        "operator"
                }
            ) : i.test(s) && (t.tokenize = o(s)),
                t.tokenize != O ? t.tokenize(e, t) : null
        }
        const s = {
            name: "solr",
            startState: function () {
                return {
                    tokenize: O
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            }
        }
    }
    ,
    36374: (e, t, n) => {
        var i;
        function r(e) {
            return new RegExp("^(?:" + e.join("|") + ")$", "i")
        }
        n.r(t),
            n.d(t, {
                sparql: () => p
            });
        var a = r(["str", "lang", "langmatches", "datatype", "bound", "sameterm", "isiri", "isuri", "iri", "uri", "bnode", "count", "sum", "min", "max", "avg", "sample", "group_concat", "rand", "abs", "ceil", "floor", "round", "concat", "substr", "strlen", "replace", "ucase", "lcase", "encode_for_uri", "contains", "strstarts", "strends", "strbefore", "strafter", "year", "month", "day", "hours", "minutes", "seconds", "timezone", "tz", "now", "uuid", "struuid", "md5", "sha1", "sha256", "sha384", "sha512", "coalesce", "if", "strlang", "strdt", "isnumeric", "regex", "exists", "isblank", "isliteral", "a", "bind"])
            , o = r(["base", "prefix", "select", "distinct", "reduced", "construct", "describe", "ask", "from", "named", "where", "order", "limit", "offset", "filter", "optional", "graph", "by", "asc", "desc", "as", "having", "undef", "values", "group", "minus", "in", "not", "service", "silent", "using", "insert", "delete", "union", "true", "false", "with", "data", "copy", "to", "move", "add", "create", "drop", "clear", "load", "into"])
            , O = /[*+\-<>=&|\^\/!\?]/
            , s = "[A-Za-z_\\-0-9]"
            , l = new RegExp("[A-Za-z]")
            , c = new RegExp("((" + s + "|\\.)*(" + s + "))?:");
        function u(e, t) {
            var n, r = e.next();
            if (i = null,
                "$" == r || "?" == r)
                return "?" == r && e.match(/\s/, !1) ? "operator" : (e.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/),
                    "variableName.local");
            if ("<" == r && !e.match(/^[\s\u00a0=]/, !1))
                return e.match(/^[^\s\u00a0>]*>?/),
                    "atom";
            if ('"' == r || "'" == r)
                return t.tokenize = (n = r,
                    function (e, t) {
                        for (var i, r = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                t.tokenize = u;
                                break
                            }
                            r = !r && "\\" == i
                        }
                        return "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[{}\(\),\.;\[\]]/.test(r))
                return i = r,
                    "bracket";
            if ("#" == r)
                return e.skipToEnd(),
                    "comment";
            if (O.test(r))
                return "operator";
            if (":" == r)
                return d(e),
                    "atom";
            if ("@" == r)
                return e.eatWhile(/[a-z\d\-]/i),
                    "meta";
            if (l.test(r) && e.match(c))
                return d(e),
                    "atom";
            e.eatWhile(/[_\w\d]/);
            var s = e.current();
            return a.test(s) ? "builtin" : o.test(s) ? "keyword" : "variable"
        }
        function d(e) {
            e.match(/(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i)
        }
        function h(e, t, n) {
            e.context = {
                prev: e.context,
                indent: e.indent,
                col: n,
                type: t
            }
        }
        function f(e) {
            e.indent = e.context.indent,
                e.context = e.context.prev
        }
        const p = {
            name: "sparql",
            startState: function () {
                return {
                    tokenize: u,
                    context: null,
                    indent: 0,
                    col: 0
                }
            },
            token: function (e, t) {
                if (e.sol() && (t.context && null == t.context.align && (t.context.align = !1),
                    t.indent = e.indentation()),
                    e.eatSpace())
                    return null;
                var n = t.tokenize(e, t);
                if ("comment" != n && t.context && null == t.context.align && "pattern" != t.context.type && (t.context.align = !0),
                    "(" == i)
                    h(t, ")", e.column());
                else if ("[" == i)
                    h(t, "]", e.column());
                else if ("{" == i)
                    h(t, "}", e.column());
                else if (/[\]\}\)]/.test(i)) {
                    for (; t.context && "pattern" == t.context.type;)
                        f(t);
                    t.context && i == t.context.type && (f(t),
                        "}" == i && t.context && "pattern" == t.context.type && f(t))
                } else
                    "." == i && t.context && "pattern" == t.context.type ? f(t) : /atom|string|variable/.test(n) && t.context && (/[\}\]]/.test(t.context.type) ? h(t, "pattern", e.column()) : "pattern" != t.context.type || t.context.align || (t.context.align = !0,
                        t.context.col = e.column()));
                return n
            },
            indent: function (e, t, n) {
                var i = t && t.charAt(0)
                    , r = e.context;
                if (/[\]\}]/.test(i))
                    for (; r && "pattern" == r.type;)
                        r = r.prev;
                var a = r && i == r.type;
                return r ? "pattern" == r.type ? r.col : r.align ? r.col + (a ? 0 : 1) : r.indent + (a ? 0 : n.unit) : 0
            },
            languageData: {
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    85273: (e, t, n) => {
        n.r(t),
            n.d(t, {
                spreadsheet: () => i
            });
        const i = {
            name: "spreadsheet",
            startState: function () {
                return {
                    stringType: null,
                    stack: []
                }
            },
            token: function (e, t) {
                if (e) {
                    switch (0 === t.stack.length && ('"' != e.peek() && "'" != e.peek() || (t.stringType = e.peek(),
                        e.next(),
                        t.stack.unshift("string"))),
                    t.stack[0]) {
                        case "string":
                            for (; "string" === t.stack[0] && !e.eol();)
                                e.peek() === t.stringType ? (e.next(),
                                    t.stack.shift()) : "\\" === e.peek() ? (e.next(),
                                        e.next()) : e.match(/^.[^\\\"\']*/);
                            return "string";
                        case "characterClass":
                            for (; "characterClass" === t.stack[0] && !e.eol();)
                                e.match(/^[^\]\\]+/) || e.match(/^\\./) || t.stack.shift();
                            return "operator"
                    }
                    var n = e.peek();
                    switch (n) {
                        case "[":
                            return e.next(),
                                t.stack.unshift("characterClass"),
                                "bracket";
                        case ":":
                            return e.next(),
                                "operator";
                        case "\\":
                            return e.match(/\\[a-z]+/) ? "string.special" : (e.next(),
                                "atom");
                        case ".":
                        case ",":
                        case ";":
                        case "*":
                        case "-":
                        case "+":
                        case "^":
                        case "<":
                        case "/":
                        case "=":
                            return e.next(),
                                "atom";
                        case "$":
                            return e.next(),
                                "builtin"
                    }
                    return e.match(/\d+/) ? e.match(/^\w+/) ? "error" : "number" : e.match(/^[a-zA-Z_]\w*/) ? e.match(/(?=[\(.])/, !1) ? "keyword" : "variable" : -1 != ["[", "]", "(", ")", "{", "}"].indexOf(n) ? (e.next(),
                        "bracket") : (e.eatSpace() || e.next(),
                            null)
                }
            }
        }
    }
    ,
    33201: (e, t, n) => {
        function i(e) {
            function t(e, t) {
                e.cmdState.push(t)
            }
            function n(e) {
                return e.cmdState.length > 0 ? e.cmdState[e.cmdState.length - 1] : null
            }
            function i(e, t, n) {
                return function () {
                    this.name = e,
                        this.bracketNo = 0,
                        this.style = t,
                        this.styles = n,
                        this.argument = null,
                        this.styleIdentifier = function () {
                            return this.styles[this.bracketNo - 1] || null
                        }
                        ,
                        this.openBracket = function () {
                            return this.bracketNo++,
                                "bracket"
                        }
                        ,
                        this.closeBracket = function () { }
                }
            }
            var r = {};
            function a(e, t) {
                e.f = t
            }
            function o(e, i) {
                var o;
                if (e.match(/^\\[a-zA-Z@\xc0-\u1fff\u2060-\uffff]+/)) {
                    var l = e.current().slice(1);
                    return t(i, o = new (o = r.hasOwnProperty(l) ? r[l] : r.DEFAULT)),
                        a(i, s),
                        o.style
                }
                if (e.match(/^\\[$&%#{}_]/))
                    return "tag";
                if (e.match(/^\\[,;!\/\\]/))
                    return "tag";
                if (e.match("\\["))
                    return a(i, (function (e, t) {
                        return O(e, t, "\\]")
                    }
                    )),
                        "keyword";
                if (e.match("\\("))
                    return a(i, (function (e, t) {
                        return O(e, t, "\\)")
                    }
                    )),
                        "keyword";
                if (e.match("$$"))
                    return a(i, (function (e, t) {
                        return O(e, t, "$$")
                    }
                    )),
                        "keyword";
                if (e.match("$"))
                    return a(i, (function (e, t) {
                        return O(e, t, "$")
                    }
                    )),
                        "keyword";
                var c = e.next();
                return "%" == c ? (e.skipToEnd(),
                    "comment") : "}" == c || "]" == c ? (o = n(i)) ? (o.closeBracket(c),
                        a(i, s),
                        "bracket") : "error" : "{" == c || "[" == c ? (t(i, o = new (o = r.DEFAULT)),
                            "bracket") : /\d/.test(c) ? (e.eatWhile(/[\w.%]/),
                                "atom") : (e.eatWhile(/[\w\-_]/),
                                    o = function (e) {
                                        for (var t = e.cmdState, n = t.length - 1; n >= 0; n--) {
                                            var i = t[n];
                                            if ("DEFAULT" != i.name)
                                                return i
                                        }
                                        return {
                                            styleIdentifier: function () {
                                                return null
                                            }
                                        }
                                    }(i),
                                    "begin" == o.name && (o.argument = e.current()),
                                    o.styleIdentifier())
            }
            function O(e, t, n) {
                if (e.eatSpace())
                    return null;
                if (n && e.match(n))
                    return a(t, o),
                        "keyword";
                if (e.match(/^\\[a-zA-Z@]+/))
                    return "tag";
                if (e.match(/^[a-zA-Z]+/))
                    return "variableName.special";
                if (e.match(/^\\[$&%#{}_]/))
                    return "tag";
                if (e.match(/^\\[,;!\/]/))
                    return "tag";
                if (e.match(/^[\^_&]/))
                    return "tag";
                if (e.match(/^[+\-<>|=,\/@!*:;'"`~#?]/))
                    return null;
                if (e.match(/^(\d+\.\d*|\d*\.\d+|\d+)/))
                    return "number";
                var i = e.next();
                return "{" == i || "}" == i || "[" == i || "]" == i || "(" == i || ")" == i ? "bracket" : "%" == i ? (e.skipToEnd(),
                    "comment") : "error"
            }
            function s(e, t) {
                var i = e.peek();
                return "{" == i || "[" == i ? (n(t).openBracket(i),
                    e.eat(i),
                    a(t, o),
                    "bracket") : /[ \t\r]/.test(i) ? (e.eat(i),
                        null) : (a(t, o),
                            function (e) {
                                var t = e.cmdState.pop();
                                t && t.closeBracket()
                            }(t),
                            o(e, t))
            }
            return r.importmodule = i("importmodule", "tag", ["string", "builtin"]),
                r.documentclass = i("documentclass", "tag", ["", "atom"]),
                r.usepackage = i("usepackage", "tag", ["atom"]),
                r.begin = i("begin", "tag", ["atom"]),
                r.end = i("end", "tag", ["atom"]),
                r.label = i("label", "tag", ["atom"]),
                r.ref = i("ref", "tag", ["atom"]),
                r.eqref = i("eqref", "tag", ["atom"]),
                r.cite = i("cite", "tag", ["atom"]),
                r.bibitem = i("bibitem", "tag", ["atom"]),
                r.Bibitem = i("Bibitem", "tag", ["atom"]),
                r.RBibitem = i("RBibitem", "tag", ["atom"]),
                r.DEFAULT = function () {
                    this.name = "DEFAULT",
                        this.style = "tag",
                        this.styleIdentifier = this.openBracket = this.closeBracket = function () { }
                }
                ,
            {
                name: "stex",
                startState: function () {
                    return {
                        cmdState: [],
                        f: e ? function (e, t) {
                            return O(e, t)
                        }
                            : o
                    }
                },
                copyState: function (e) {
                    return {
                        cmdState: e.cmdState.slice(),
                        f: e.f
                    }
                },
                token: function (e, t) {
                    return t.f(e, t)
                },
                blankLine: function (e) {
                    e.f = o,
                        e.cmdState.length = 0
                },
                languageData: {
                    commentTokens: {
                        line: "%"
                    }
                }
            }
        }
        n.r(t),
            n.d(t, {
                stex: () => r,
                stexMath: () => a
            });
        const r = i(!1)
            , a = i(!0)
    }
    ,
    31353: (e, t, n) => {
        n.r(t),
            n.d(t, {
                stylus: () => ae
            });
        var i = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "bgsound", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "nobr", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video"]
            , r = ["domain", "regexp", "url-prefix", "url"]
            , a = ["all", "aural", "braille", "handheld", "print", "projection", "screen", "tty", "tv", "embossed"]
            , o = ["width", "min-width", "max-width", "height", "min-height", "max-height", "device-width", "min-device-width", "max-device-width", "device-height", "min-device-height", "max-device-height", "aspect-ratio", "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio", "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color", "max-color", "color-index", "min-color-index", "max-color-index", "monochrome", "min-monochrome", "max-monochrome", "resolution", "min-resolution", "max-resolution", "scan", "grid", "dynamic-range", "video-dynamic-range"]
            , O = ["align-content", "align-items", "align-self", "alignment-adjust", "alignment-baseline", "anchor-point", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timing-function", "appearance", "azimuth", "backface-visibility", "background", "background-attachment", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-repeat", "background-size", "baseline-shift", "binding", "bleed", "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target", "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "clear", "clip", "color", "color-profile", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after", "cue-before", "cursor", "direction", "display", "dominant-baseline", "drop-initial-after-adjust", "drop-initial-after-align", "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size", "drop-initial-value", "elevation", "empty-cells", "fit", "fit-position", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into", "font", "font-feature-settings", "font-family", "font-kerning", "font-language-override", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-weight", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-position", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-start", "grid-row", "grid-row-end", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon", "image-orientation", "image-rendering", "image-resolution", "inline-box-align", "justify-content", "left", "letter-spacing", "line-break", "line-height", "line-stacking", "line-stacking-ruby", "line-stacking-shift", "line-stacking-strategy", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "marker-offset", "marks", "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed", "marquee-style", "max-height", "max-width", "min-height", "min-width", "move-to", "nav-down", "nav-index", "nav-left", "nav-right", "nav-up", "object-fit", "object-position", "opacity", "order", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-style", "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "page", "page-break-after", "page-break-before", "page-break-inside", "page-policy", "pause", "pause-after", "pause-before", "perspective", "perspective-origin", "pitch", "pitch-range", "play-during", "position", "presentation-level", "punctuation-trim", "quotes", "region-break-after", "region-break-before", "region-break-inside", "region-fragment", "rendering-intent", "resize", "rest", "rest-after", "rest-before", "richness", "right", "rotation", "rotation-point", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span", "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside", "size", "speak", "speak-as", "speak-header", "speak-numeral", "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size", "table-layout", "target", "target-name", "target-new", "target-position", "text-align", "text-align-last", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-style", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-height", "text-indent", "text-justify", "text-outline", "text-overflow", "text-shadow", "text-size-adjust", "text-space-collapse", "text-transform", "text-underline-position", "text-wrap", "top", "transform", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "unicode-bidi", "vertical-align", "visibility", "voice-balance", "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate", "voice-stress", "voice-volume", "volume", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "z-index", "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color", "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events", "color-interpolation", "color-interpolation-filters", "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering", "marker", "marker-end", "marker-mid", "marker-start", "shape-rendering", "stroke", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering", "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal", "glyph-orientation-vertical", "text-anchor", "writing-mode", "font-smoothing", "osx-font-smoothing"]
            , s = ["scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color", "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color", "scrollbar-3d-light-color", "scrollbar-track-color", "shape-inside", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "zoom"]
            , l = ["font-family", "src", "unicode-range", "font-variant", "font-feature-settings", "font-stretch", "font-weight", "font-style"]
            , c = ["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"]
            , u = ["above", "absolute", "activeborder", "additive", "activecaption", "afar", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "amharic", "amharic-abegede", "antialiased", "appworkspace", "arabic-indic", "armenian", "asterisks", "attr", "auto", "avoid", "avoid-column", "avoid-page", "avoid-region", "background", "backwards", "baseline", "below", "bidi-override", "binary", "bengali", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch", "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote", "col-resize", "collapse", "column", "compact", "condensed", "conic-gradient", "contain", "content", "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "destination-atop", "destination-in", "destination-out", "destination-over", "devanagari", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede", "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er", "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er", "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et", "ethiopic-halehame-gez", "ethiopic-halehame-om-et", "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et", "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig", "ethiopic-numeric", "ew-resize", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fixed", "flat", "flex", "footnotes", "forwards", "from", "geometricPrecision", "georgian", "graytext", "groove", "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hebrew", "help", "hidden", "hide", "high", "higher", "highlight", "highlighttext", "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "japanese-formal", "japanese-informal", "justify", "kannada", "katakana", "katakana-iroha", "keep-all", "khmer", "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal", "landscape", "lao", "large", "larger", "left", "level", "lighter", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian", "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lower-roman", "lowercase", "ltr", "malayalam", "match", "matrix", "matrix3d", "media-play-button", "media-slider", "media-sliderthumb", "media-volume-slider", "media-volume-sliderthumb", "medium", "menu", "menulist", "menulist-button", "menutext", "message-box", "middle", "min-intrinsic", "mix", "mongolian", "monospace", "move", "multiple", "myanmar", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "open-quote", "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "persian", "perspective", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeating-conic-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row-resize", "rtl", "run-in", "running", "s-resize", "sans-serif", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "semi-condensed", "semi-expanded", "separate", "serif", "show", "sidama", "simp-chinese-formal", "simp-chinese-informal", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "solid", "somali", "source-atop", "source-in", "source-out", "source-over", "space", "spell-out", "square", "square-button", "standard", "start", "static", "status-bar", "stretch", "stroke", "sub", "subpixel-antialiased", "super", "sw-resize", "symbolic", "symbols", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "tamil", "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er", "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top", "trad-chinese-formal", "trad-chinese-informal", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "up", "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal", "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url", "var", "vertical", "vertical-text", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "x-large", "x-small", "xor", "xx-large", "xx-small", "bicubic", "optimizespeed", "grayscale", "row", "row-reverse", "wrap", "wrap-reverse", "column-reverse", "flex-start", "flex-end", "space-between", "space-around", "unset"]
            , d = ["in", "and", "or", "not", "is not", "is a", "is", "isnt", "defined", "if unless"]
            , h = ["for", "if", "else", "unless", "from", "to"]
            , f = ["null", "true", "false", "href", "title", "type", "not-allowed", "readonly", "disabled"]
            , p = i.concat(r, a, o, O, s, c, u, l, d, h, f, ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"]);
        function m(e) {
            return e = e.sort((function (e, t) {
                return t > e
            }
            )),
                new RegExp("^((" + e.join(")|(") + "))\\b")
        }
        function g(e) {
            for (var t = {}, n = 0; n < e.length; ++n)
                t[e[n]] = !0;
            return t
        }
        var Q, $, b, y, S = g(i), P = /^(a|b|i|s|col|em)$/i, v = g(O), x = g(s), k = g(u), w = g(c), X = g(r), _ = m(r), T = g(o), z = g(a), R = g(l), W = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/, Z = m(d), q = g(h), U = new RegExp(/^\-(moz|ms|o|webkit)-/i), Y = g(f), A = "", V = {};
        function E(e, t) {
            if (A = e.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/),
                t.context.line.firstWord = A ? A[0].replace(/^\s*/, "") : "",
                t.context.line.indent = e.indentation(),
                Q = e.peek(),
                e.match("//"))
                return e.skipToEnd(),
                    ["comment", "comment"];
            if (e.match("/*"))
                return t.tokenize = j,
                    j(e, t);
            if ('"' == Q || "'" == Q)
                return e.next(),
                    t.tokenize = C(Q),
                    t.tokenize(e, t);
            if ("@" == Q)
                return e.next(),
                    e.eatWhile(/[\w\\-]/),
                    ["def", e.current()];
            if ("#" == Q) {
                if (e.next(),
                    e.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i))
                    return ["atom", "atom"];
                if (e.match(/^[a-z][\w-]*/i))
                    return ["builtin", "hash"]
            }
            return e.match(U) ? ["meta", "vendor-prefixes"] : e.match(/^-?[0-9]?\.?[0-9]/) ? (e.eatWhile(/[a-z%]/i),
                ["number", "unit"]) : "!" == Q ? (e.next(),
                    [e.match(/^(important|optional)/i) ? "keyword" : "operator", "important"]) : "." == Q && e.match(/^\.[a-z][\w-]*/i) ? ["qualifier", "qualifier"] : e.match(_) ? ("(" == e.peek() && (t.tokenize = G),
                        ["property", "word"]) : e.match(/^[a-z][\w-]*\(/i) ? (e.backUp(1),
                            ["keyword", "mixin"]) : e.match(/^(\+|-)[a-z][\w-]*\(/i) ? (e.backUp(1),
                                ["keyword", "block-mixin"]) : e.string.match(/^\s*&/) && e.match(/^[-_]+[a-z][\w-]*/) ? ["qualifier", "qualifier"] : e.match(/^(\/|&)(-|_|:|\.|#|[a-z])/) ? (e.backUp(1),
                                    ["variableName.special", "reference"]) : e.match(/^&{1}\s*$/) ? ["variableName.special", "reference"] : e.match(Z) ? ["operator", "operator"] : e.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i) ? e.match(/^(\.|\[)[\w-\'\"\]]+/i, !1) && !M(e.current()) ? (e.match("."),
                                        ["variable", "variable-name"]) : ["variable", "word"] : e.match(W) ? ["operator", e.current()] : /[:;,{}\[\]\(\)]/.test(Q) ? (e.next(),
                                            [null, Q]) : (e.next(),
                                                [null, null])
        }
        function j(e, t) {
            for (var n, i = !1; null != (n = e.next());) {
                if (i && "/" == n) {
                    t.tokenize = null;
                    break
                }
                i = "*" == n
            }
            return ["comment", "comment"]
        }
        function C(e) {
            return function (t, n) {
                for (var i, r = !1; null != (i = t.next());) {
                    if (i == e && !r) {
                        ")" == e && t.backUp(1);
                        break
                    }
                    r = !r && "\\" == i
                }
                return (i == e || !r && ")" != e) && (n.tokenize = null),
                    ["string", "string"]
            }
        }
        function G(e, t) {
            return e.next(),
                e.match(/\s*[\"\')]/, !1) ? t.tokenize = null : t.tokenize = C(")"),
                [null, "("]
        }
        function I(e, t, n, i) {
            this.type = e,
                this.indent = t,
                this.prev = n,
                this.line = i || {
                    firstWord: "",
                    indent: 0
                }
        }
        function D(e, t, n, i) {
            return i = i >= 0 ? i : t.indentUnit,
                e.context = new I(n, t.indentation() + i, e.context),
                n
        }
        function N(e, t, n) {
            var i = e.context.indent - t.indentUnit;
            return n = n || !1,
                e.context = e.context.prev,
                n && (e.context.indent = i),
                e.context.type
        }
        function L(e, t, n, i) {
            for (var r = i || 1; r > 0; r--)
                n.context = n.context.prev;
            return function (e, t, n) {
                return V[n.context.type](e, t, n)
            }(e, t, n)
        }
        function M(e) {
            return e.toLowerCase() in S
        }
        function F(e) {
            return (e = e.toLowerCase()) in v || e in R
        }
        function B(e) {
            return e.toLowerCase() in q
        }
        function H(e) {
            return e.toLowerCase().match(U)
        }
        function K(e) {
            var t = e.toLowerCase()
                , n = "variable";
            return M(e) ? n = "tag" : B(e) ? n = "block-keyword" : F(e) ? n = "property" : t in k || t in Y ? n = "atom" : "return" == t || t in w ? n = "keyword" : e.match(/^[A-Z]/) && (n = "string"),
                n
        }
        function J(e, t) {
            return ie(t) && ("{" == e || "]" == e || "hash" == e || "qualifier" == e) || "block-mixin" == e
        }
        function ee(e, t) {
            return "{" == e && t.match(/^\s*\$?[\w-]+/i, !1)
        }
        function te(e, t) {
            return ":" == e && t.match(/^[a-z-]+/, !1)
        }
        function ne(e) {
            return e.sol() || e.string.match(new RegExp("^\\s*" + e.current().replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")))
        }
        function ie(e) {
            return e.eol() || e.match(/^\s*$/, !1)
        }
        function re(e) {
            var t = /^\s*[-_]*[a-z0-9]+[\w-]*/i
                , n = "string" == typeof e ? e.match(t) : e.string.match(t);
            return n ? n[0].replace(/^\s*/, "") : ""
        }
        V.block = function (e, t, n) {
            if ("comment" == e && ne(t) || "," == e && ie(t) || "mixin" == e)
                return D(n, t, "block", 0);
            if (ee(e, t))
                return D(n, t, "interpolation");
            if (ie(t) && "]" == e && !/^\s*(\.|#|:|\[|\*|&)/.test(t.string) && !M(re(t)))
                return D(n, t, "block", 0);
            if (J(e, t))
                return D(n, t, "block");
            if ("}" == e && ie(t))
                return D(n, t, "block", 0);
            if ("variable-name" == e)
                return t.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || B(re(t)) ? D(n, t, "variableName") : D(n, t, "variableName", 0);
            if ("=" == e)
                return ie(t) || B(re(t)) ? D(n, t, "block") : D(n, t, "block", 0);
            if ("*" == e && (ie(t) || t.match(/\s*(,|\.|#|\[|:|{)/, !1)))
                return y = "tag",
                    D(n, t, "block");
            if (te(e, t))
                return D(n, t, "pseudo");
            if (/@(font-face|media|supports|(-moz-)?document)/.test(e))
                return D(n, t, ie(t) ? "block" : "atBlock");
            if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(e))
                return D(n, t, "keyframes");
            if (/@extends?/.test(e))
                return D(n, t, "extend", 0);
            if (e && "@" == e.charAt(0))
                return t.indentation() > 0 && F(t.current().slice(1)) ? (y = "variable",
                    "block") : /(@import|@require|@charset)/.test(e) ? D(n, t, "block", 0) : D(n, t, "block");
            if ("reference" == e && ie(t))
                return D(n, t, "block");
            if ("(" == e)
                return D(n, t, "parens");
            if ("vendor-prefixes" == e)
                return D(n, t, "vendorPrefixes");
            if ("word" == e) {
                var i = t.current();
                if ("property" == (y = K(i)))
                    return ne(t) ? D(n, t, "block", 0) : (y = "atom",
                        "block");
                if ("tag" == y) {
                    if (/embed|menu|pre|progress|sub|table/.test(i) && F(re(t)))
                        return y = "atom",
                            "block";
                    if (t.string.match(new RegExp("\\[\\s*" + i + "|" + i + "\\s*\\]")))
                        return y = "atom",
                            "block";
                    if (P.test(i) && (ne(t) && t.string.match(/=/) || !ne(t) && !t.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) && !M(re(t))))
                        return y = "variable",
                            B(re(t)) ? "block" : D(n, t, "block", 0);
                    if (ie(t))
                        return D(n, t, "block")
                }
                if ("block-keyword" == y)
                    return y = "keyword",
                        t.current(/(if|unless)/) && !ne(t) ? "block" : D(n, t, "block");
                if ("return" == i)
                    return D(n, t, "block", 0);
                if ("variable" == y && t.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/))
                    return D(n, t, "block")
            }
            return n.context.type
        }
            ,
            V.parens = function (e, t, n) {
                if ("(" == e)
                    return D(n, t, "parens");
                if (")" == e)
                    return "parens" == n.context.prev.type ? N(n, t) : t.string.match(/^[a-z][\w-]*\(/i) && ie(t) || B(re(t)) || /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(re(t)) || !t.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) && M(re(t)) ? D(n, t, "block") : t.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) || t.string.match(/^\s*(\(|\)|[0-9])/) || t.string.match(/^\s+[a-z][\w-]*\(/i) || t.string.match(/^\s+[\$-]?[a-z]/i) ? D(n, t, "block", 0) : ie(t) ? D(n, t, "block") : D(n, t, "block", 0);
                if (e && "@" == e.charAt(0) && F(t.current().slice(1)) && (y = "variable"),
                    "word" == e) {
                    var i = t.current();
                    "tag" == (y = K(i)) && P.test(i) && (y = "variable"),
                        "property" != y && "to" != i || (y = "atom")
                }
                return "variable-name" == e ? D(n, t, "variableName") : te(e, t) ? D(n, t, "pseudo") : n.context.type
            }
            ,
            V.vendorPrefixes = function (e, t, n) {
                return "word" == e ? (y = "property",
                    D(n, t, "block", 0)) : N(n, t)
            }
            ,
            V.pseudo = function (e, t, n) {
                return F(re(t.string)) ? L(e, t, n) : (t.match(/^[a-z-]+/),
                    y = "variableName.special",
                    ie(t) ? D(n, t, "block") : N(n, t))
            }
            ,
            V.atBlock = function (e, t, n) {
                if ("(" == e)
                    return D(n, t, "atBlock_parens");
                if (J(e, t))
                    return D(n, t, "block");
                if (ee(e, t))
                    return D(n, t, "interpolation");
                if ("word" == e) {
                    var i = t.current().toLowerCase();
                    if ("tag" == (y = /^(only|not|and|or)$/.test(i) ? "keyword" : X.hasOwnProperty(i) ? "tag" : z.hasOwnProperty(i) ? "attribute" : T.hasOwnProperty(i) ? "property" : x.hasOwnProperty(i) ? "string.special" : K(t.current())) && ie(t))
                        return D(n, t, "block")
                }
                return "operator" == e && /^(not|and|or)$/.test(t.current()) && (y = "keyword"),
                    n.context.type
            }
            ,
            V.atBlock_parens = function (e, t, n) {
                if ("{" == e || "}" == e)
                    return n.context.type;
                if (")" == e)
                    return ie(t) ? D(n, t, "block") : D(n, t, "atBlock");
                if ("word" == e) {
                    var i = t.current().toLowerCase();
                    return y = K(i),
                        /^(max|min)/.test(i) && (y = "property"),
                        "tag" == y && (y = P.test(i) ? "variable" : "atom"),
                        n.context.type
                }
                return V.atBlock(e, t, n)
            }
            ,
            V.keyframes = function (e, t, n) {
                return "0" == t.indentation() && ("}" == e && ne(t) || "]" == e || "hash" == e || "qualifier" == e || M(t.current())) ? L(e, t, n) : "{" == e ? D(n, t, "keyframes") : "}" == e ? ne(t) ? N(n, t, !0) : D(n, t, "keyframes") : "unit" == e && /^[0-9]+\%$/.test(t.current()) ? D(n, t, "keyframes") : "word" == e && "block-keyword" == (y = K(t.current())) ? (y = "keyword",
                    D(n, t, "keyframes")) : /@(font-face|media|supports|(-moz-)?document)/.test(e) ? D(n, t, ie(t) ? "block" : "atBlock") : "mixin" == e ? D(n, t, "block", 0) : n.context.type
            }
            ,
            V.interpolation = function (e, t, n) {
                return "{" == e && N(n, t) && D(n, t, "block"),
                    "}" == e ? t.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) || t.string.match(/^\s*[a-z]/i) && M(re(t)) ? D(n, t, "block") : !t.string.match(/^(\{|\s*\&)/) || t.match(/\s*[\w-]/, !1) ? D(n, t, "block", 0) : D(n, t, "block") : "variable-name" == e ? D(n, t, "variableName", 0) : ("word" == e && "tag" == (y = K(t.current())) && (y = "atom"),
                        n.context.type)
            }
            ,
            V.extend = function (e, t, n) {
                return "[" == e || "=" == e ? "extend" : "]" == e ? N(n, t) : "word" == e ? (y = K(t.current()),
                    "extend") : N(n, t)
            }
            ,
            V.variableName = function (e, t, n) {
                return "string" == e || "[" == e || "]" == e || t.current().match(/^(\.|\$)/) ? (t.current().match(/^\.[\w-]+/i) && (y = "variable"),
                    "variableName") : L(e, t, n)
            }
            ;
        const ae = {
            name: "stylus",
            startState: function () {
                return {
                    tokenize: null,
                    state: "block",
                    context: new I("block", 0, null)
                }
            },
            token: function (e, t) {
                return !t.tokenize && e.eatSpace() ? null : (($ = (t.tokenize || E)(e, t)) && "object" == typeof $ && (b = $[1],
                    $ = $[0]),
                    y = $,
                    t.state = V[t.state](b, e, t),
                    y)
            },
            indent: function (e, t, n) {
                var i = e.context
                    , r = t && t.charAt(0)
                    , a = i.indent
                    , o = re(t)
                    , O = i.line.indent
                    , s = e.context.prev ? e.context.prev.line.firstWord : ""
                    , l = e.context.prev ? e.context.prev.line.indent : O;
                return i.prev && ("}" == r && ("block" == i.type || "atBlock" == i.type || "keyframes" == i.type) || ")" == r && ("parens" == i.type || "atBlock_parens" == i.type) || "{" == r && "at" == i.type) ? a = i.indent - n.unit : /(\})/.test(r) || (/@|\$|\d/.test(r) || /^\{/.test(t) || /^\s*\/(\/|\*)/.test(t) || /^\s*\/\*/.test(s) || /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(t) || /^(\+|-)?[a-z][\w-]*\(/i.test(t) || /^return/.test(t) || B(o) ? a = O : /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(r) || M(o) ? a = /\,\s*$/.test(s) ? l : e.sol() || !/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(s) && !M(s) ? O : O <= l ? l : l + n.unit : /,\s*$/.test(t) || !H(o) && !F(o) || (a = B(s) ? O <= l ? l : l + n.unit : /^\{/.test(s) ? O <= l ? O : l + n.unit : H(s) || F(s) ? O >= l ? l : O : /^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(s) || /=\s*$/.test(s) || M(s) || /^\$[\w-\.\[\]\'\"]/.test(s) ? l + n.unit : O)),
                    a
            },
            languageData: {
                indentOnInput: /^\s*\}$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                autocomplete: p
            }
        }
    }
    ,
    16868: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = 0; n < e.length; n++)
                t[e[n]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                swift: () => x
            });
        var r = i(["_", "var", "let", "actor", "class", "enum", "extension", "import", "protocol", "struct", "func", "typealias", "associatedtype", "open", "public", "internal", "fileprivate", "private", "deinit", "init", "new", "override", "self", "subscript", "super", "convenience", "dynamic", "final", "indirect", "lazy", "required", "static", "unowned", "unowned(safe)", "unowned(unsafe)", "weak", "as", "is", "break", "case", "continue", "default", "else", "fallthrough", "for", "guard", "if", "in", "repeat", "switch", "where", "while", "defer", "return", "inout", "mutating", "nonmutating", "isolated", "nonisolated", "catch", "do", "rethrows", "throw", "throws", "async", "await", "try", "didSet", "get", "set", "willSet", "assignment", "associativity", "infix", "left", "none", "operator", "postfix", "precedence", "precedencegroup", "prefix", "right", "Any", "AnyObject", "Type", "dynamicType", "Self", "Protocol", "__COLUMN__", "__FILE__", "__FUNCTION__", "__LINE__"])
            , a = i(["var", "let", "actor", "class", "enum", "extension", "import", "protocol", "struct", "func", "typealias", "associatedtype", "for"])
            , o = i(["true", "false", "nil", "self", "super", "_"])
            , O = i(["Array", "Bool", "Character", "Dictionary", "Double", "Float", "Int", "Int8", "Int16", "Int32", "Int64", "Never", "Optional", "Set", "String", "UInt8", "UInt16", "UInt32", "UInt64", "Void"])
            , s = "+-/*%=|&<>~^?!"
            , l = ":;,.(){}[]"
            , c = /^\-?0b[01][01_]*/
            , u = /^\-?0o[0-7][0-7_]*/
            , d = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/
            , h = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/
            , f = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/
            , p = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/
            , m = /^\#[A-Za-z]+/
            , g = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
        function Q(e, t, n) {
            if (e.sol() && (t.indented = e.indentation()),
                e.eatSpace())
                return null;
            var i, Q = e.peek();
            if ("/" == Q) {
                if (e.match("//"))
                    return e.skipToEnd(),
                        "comment";
                if (e.match("/*"))
                    return t.tokenize.push(y),
                        y(e, t)
            }
            if (e.match(m))
                return "builtin";
            if (e.match(g))
                return "attribute";
            if (e.match(c))
                return "number";
            if (e.match(u))
                return "number";
            if (e.match(d))
                return "number";
            if (e.match(h))
                return "number";
            if (e.match(p))
                return "property";
            if (s.indexOf(Q) > -1)
                return e.next(),
                    "operator";
            if (l.indexOf(Q) > -1)
                return e.next(),
                    e.match(".."),
                    "punctuation";
            if (i = e.match(/("""|"|')/)) {
                var $ = b.bind(null, i[0]);
                return t.tokenize.push($),
                    $(e, t)
            }
            if (e.match(f)) {
                var S = e.current();
                return O.hasOwnProperty(S) ? "type" : o.hasOwnProperty(S) ? "atom" : r.hasOwnProperty(S) ? (a.hasOwnProperty(S) && (t.prev = "define"),
                    "keyword") : "define" == n ? "def" : "variable"
            }
            return e.next(),
                null
        }
        function $() {
            var e = 0;
            return function (t, n, i) {
                var r = Q(t, n, i);
                if ("punctuation" == r)
                    if ("(" == t.current())
                        ++e;
                    else if (")" == t.current()) {
                        if (0 == e)
                            return t.backUp(1),
                                n.tokenize.pop(),
                                n.tokenize[n.tokenize.length - 1](t, n);
                        --e
                    }
                return r
            }
        }
        function b(e, t, n) {
            for (var i, r = 1 == e.length, a = !1; i = t.peek();)
                if (a) {
                    if (t.next(),
                        "(" == i)
                        return n.tokenize.push($()),
                            "string";
                    a = !1
                } else {
                    if (t.match(e))
                        return n.tokenize.pop(),
                            "string";
                    t.next(),
                        a = "\\" == i
                }
            return r && n.tokenize.pop(),
                "string"
        }
        function y(e, t) {
            for (var n; n = e.next();)
                if ("/" === n && e.eat("*"))
                    t.tokenize.push(y);
                else if ("*" === n && e.eat("/")) {
                    t.tokenize.pop();
                    break
                }
            return "comment"
        }
        function S(e, t, n) {
            this.prev = e,
                this.align = t,
                this.indented = n
        }
        function P(e, t) {
            var n = t.match(/^\s*($|\/[\/\*]|[)}\]])/, !1) ? null : t.column() + 1;
            e.context = new S(e.context, n, e.indented)
        }
        function v(e) {
            e.context && (e.indented = e.context.indented,
                e.context = e.context.prev)
        }
        const x = {
            name: "swift",
            startState: function () {
                return {
                    prev: null,
                    context: null,
                    indented: 0,
                    tokenize: []
                }
            },
            token: function (e, t) {
                var n = t.prev;
                t.prev = null;
                var i = (t.tokenize[t.tokenize.length - 1] || Q)(e, t, n);
                if (i && "comment" != i ? t.prev || (t.prev = i) : t.prev = n,
                    "punctuation" == i) {
                    var r = /[\(\[\{]|([\]\)\}])/.exec(e.current());
                    r && (r[1] ? v : P)(t, e)
                }
                return i
            },
            indent: function (e, t, n) {
                var i = e.context;
                if (!i)
                    return 0;
                var r = /^[\]\}\)]/.test(t);
                return null != i.align ? i.align - (r ? 1 : 0) : i.indented + (r ? 0 : n.unit)
            },
            languageData: {
                indentOnInput: /^\s*[\)\}\]]$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "`"]
                }
            }
        }
    }
    ,
    86668: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                tcl: () => u
            });
        var r = i("Tcl safe after append array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd close concat continue dde eof encoding error eval exec exit expr fblocked fconfigure fcopy file fileevent filename filename flush for foreach format gets glob global history http if incr info interp join lappend lindex linsert list llength load lrange lreplace lsearch lset lsort memory msgcat namespace open package parray pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp registry regsub rename resource return scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest tclvars tell time trace unknown unset update uplevel upvar variable vwait")
            , a = i("if elseif else and not or eq ne in ni for foreach while switch")
            , o = /[+\-*&%=<>!?^\/\|]/;
        function O(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function s(e, t) {
            var n = t.beforeParams;
            t.beforeParams = !1;
            var i, u = e.next();
            if ('"' != u && "'" != u || !t.inParams) {
                if (/[\[\]{}\(\),;\.]/.test(u))
                    return "(" == u && n ? t.inParams = !0 : ")" == u && (t.inParams = !1),
                        null;
                if (/\d/.test(u))
                    return e.eatWhile(/[\w\.]/),
                        "number";
                if ("#" == u)
                    return e.eat("*") ? O(e, t, l) : "#" == u && e.match(/ *\[ *\[/) ? O(e, t, c) : (e.skipToEnd(),
                        "comment");
                if ('"' == u)
                    return e.skipTo(/"/),
                        "comment";
                if ("$" == u)
                    return e.eatWhile(/[$_a-z0-9A-Z\.{:]/),
                        e.eatWhile(/}/),
                        t.beforeParams = !0,
                        "builtin";
                if (o.test(u))
                    return e.eatWhile(o),
                        "comment";
                e.eatWhile(/[\w\$_{}\xa1-\uffff]/);
                var d = e.current().toLowerCase();
                return r && r.propertyIsEnumerable(d) ? "keyword" : a && a.propertyIsEnumerable(d) ? (t.beforeParams = !0,
                    "keyword") : null
            }
            return O(e, t, (i = u,
                function (e, t) {
                    for (var n, r = !1, a = !1; null != (n = e.next());) {
                        if (n == i && !r) {
                            a = !0;
                            break
                        }
                        r = !r && "\\" == n
                    }
                    return a && (t.tokenize = s),
                        "string"
                }
            ))
        }
        function l(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("#" == n && i) {
                    t.tokenize = s;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function c(e, t) {
            for (var n, i = 0; n = e.next();) {
                if ("#" == n && 2 == i) {
                    t.tokenize = s;
                    break
                }
                "]" == n ? i++ : " " != n && (i = 0)
            }
            return "meta"
        }
        const u = {
            name: "tcl",
            startState: function () {
                return {
                    tokenize: s,
                    beforeParams: !1,
                    inParams: !1
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            languageData: {
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    97834: (e, t, n) => {
        n.r(t),
            n.d(t, {
                textile: () => u
            });
        var i = {
            addition: "inserted",
            attributes: "propertyName",
            bold: "strong",
            cite: "keyword",
            code: "monospace",
            definitionList: "list",
            deletion: "deleted",
            div: "punctuation",
            em: "emphasis",
            footnote: "variable",
            footCite: "qualifier",
            header: "heading",
            html: "comment",
            image: "atom",
            italic: "emphasis",
            link: "link",
            linkDefinition: "link",
            list1: "list",
            list2: "list.special",
            list3: "list",
            notextile: "string.special",
            pre: "operator",
            p: "content",
            quote: "bracket",
            span: "quote",
            specialChar: "character",
            strong: "strong",
            sub: "content.special",
            sup: "content.special",
            table: "variableName.special",
            tableHeading: "operator"
        };
        function r(e, t, n) {
            if ("_" === n)
                return e.eat("_") ? a(e, t, "italic", /__/, 2) : a(e, t, "em", /_/, 1);
            if ("*" === n)
                return e.eat("*") ? a(e, t, "bold", /\*\*/, 2) : a(e, t, "strong", /\*/, 1);
            if ("[" === n)
                return e.match(/\d+\]/) && (t.footCite = !0),
                    o(t);
            if ("(" === n && e.match(/^(r|tm|c)\)/))
                return i.specialChar;
            if ("<" === n && e.match(/(\w+)[^>]+>[^<]+<\/\1>/))
                return i.html;
            if ("?" === n && e.eat("?"))
                return a(e, t, "cite", /\?\?/, 2);
            if ("=" === n && e.eat("="))
                return a(e, t, "notextile", /==/, 2);
            if ("-" === n && !e.eat("-"))
                return a(e, t, "deletion", /-/, 1);
            if ("+" === n)
                return a(e, t, "addition", /\+/, 1);
            if ("~" === n)
                return a(e, t, "sub", /~/, 1);
            if ("^" === n)
                return a(e, t, "sup", /\^/, 1);
            if ("%" === n)
                return a(e, t, "span", /%/, 1);
            if ("@" === n)
                return a(e, t, "code", /@/, 1);
            if ("!" === n) {
                var r = a(e, t, "image", /(?:\([^\)]+\))?!/, 1);
                return e.match(/^:\S+/),
                    r
            }
            return o(t)
        }
        function a(e, t, n, i, r) {
            var a = e.pos > r ? e.string.charAt(e.pos - r - 1) : null
                , O = e.peek();
            if (t[n]) {
                if ((!O || /\W/.test(O)) && a && /\S/.test(a)) {
                    var s = o(t);
                    return t[n] = !1,
                        s
                }
            } else
                (!a || /\W/.test(a)) && O && /\S/.test(O) && e.match(new RegExp("^.*\\S" + i.source + "(?:\\W|$)"), !1) && (t[n] = !0,
                    t.mode = c.attributes);
            return o(t)
        }
        function o(e) {
            var t = O(e);
            if (t)
                return t;
            var n = [];
            return e.layoutType && n.push(i[e.layoutType]),
                n = n.concat(function (e) {
                    for (var t = [], n = 1; n < arguments.length; ++n)
                        e[arguments[n]] && t.push(i[arguments[n]]);
                    return t
                }(e, "addition", "bold", "cite", "code", "deletion", "em", "footCite", "image", "italic", "link", "span", "strong", "sub", "sup", "table", "tableHeading")),
                "header" === e.layoutType && n.push(i.header + "-" + e.header),
                n.length ? n.join(" ") : null
        }
        function O(e) {
            var t = e.layoutType;
            switch (t) {
                case "notextile":
                case "code":
                case "pre":
                    return i[t];
                default:
                    return e.notextile ? i.notextile + (t ? " " + i[t] : "") : null
            }
        }
        var s = {
            cache: {},
            single: {
                bc: "bc",
                bq: "bq",
                definitionList: /- .*?:=+/,
                definitionListEnd: /.*=:\s*$/,
                div: "div",
                drawTable: /\|.*\|/,
                foot: /fn\d+/,
                header: /h[1-6]/,
                html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
                link: /[^"]+":\S/,
                linkDefinition: /\[[^\s\]]+\]\S+/,
                list: /(?:#+|\*+)/,
                notextile: "notextile",
                para: "p",
                pre: "pre",
                table: "table",
                tableCellAttributes: /[\/\\]\d+/,
                tableHeading: /\|_\./,
                tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
                text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
            },
            attributes: {
                align: /(?:<>|<|>|=)/,
                selector: /\([^\(][^\)]+\)/,
                lang: /\[[^\[\]]+\]/,
                pad: /(?:\(+|\)+){1,2}/,
                css: /\{[^\}]+\}/
            },
            createRe: function (e) {
                switch (e) {
                    case "drawTable":
                        return s.makeRe("^", s.single.drawTable, "$");
                    case "html":
                        return s.makeRe("^", s.single.html, "(?:", s.single.html, ")*", "$");
                    case "linkDefinition":
                        return s.makeRe("^", s.single.linkDefinition, "$");
                    case "listLayout":
                        return s.makeRe("^", s.single.list, l("allAttributes"), "*\\s+");
                    case "tableCellAttributes":
                        return s.makeRe("^", s.choiceRe(s.single.tableCellAttributes, l("allAttributes")), "+\\.");
                    case "type":
                        return s.makeRe("^", l("allTypes"));
                    case "typeLayout":
                        return s.makeRe("^", l("allTypes"), l("allAttributes"), "*\\.\\.?", "(\\s+|$)");
                    case "attributes":
                        return s.makeRe("^", l("allAttributes"), "+");
                    case "allTypes":
                        return s.choiceRe(s.single.div, s.single.foot, s.single.header, s.single.bc, s.single.bq, s.single.notextile, s.single.pre, s.single.table, s.single.para);
                    case "allAttributes":
                        return s.choiceRe(s.attributes.selector, s.attributes.css, s.attributes.lang, s.attributes.align, s.attributes.pad);
                    default:
                        return s.makeRe("^", s.single[e])
                }
            },
            makeRe: function () {
                for (var e = "", t = 0; t < arguments.length; ++t) {
                    var n = arguments[t];
                    e += "string" === typeof n ? n : n.source
                }
                return new RegExp(e)
            },
            choiceRe: function () {
                for (var e = [arguments[0]], t = 1; t < arguments.length; ++t)
                    e[2 * t - 1] = "|",
                        e[2 * t] = arguments[t];
                return e.unshift("(?:"),
                    e.push(")"),
                    s.makeRe.apply(null, e)
            }
        };
        function l(e) {
            return s.cache[e] || (s.cache[e] = s.createRe(e))
        }
        var c = {
            newLayout: function (e, t) {
                return e.match(l("typeLayout"), !1) ? (t.spanningLayout = !1,
                    (t.mode = c.blockType)(e, t)) : (O(t) || (e.match(l("listLayout"), !1) ? n = c.list : e.match(l("drawTable"), !1) ? n = c.table : e.match(l("linkDefinition"), !1) ? n = c.linkDefinition : e.match(l("definitionList")) ? n = c.definitionList : e.match(l("html"), !1) && (n = c.html)),
                        (t.mode = n || c.text)(e, t));
                var n
            },
            blockType: function (e, t) {
                var n, i;
                return t.layoutType = null,
                    (n = e.match(l("type"))) ? ((n = (i = n[0]).match(l("header"))) ? (t.layoutType = "header",
                        t.header = parseInt(n[0][1])) : i.match(l("bq")) ? t.layoutType = "quote" : i.match(l("bc")) ? t.layoutType = "code" : i.match(l("foot")) ? t.layoutType = "footnote" : i.match(l("notextile")) ? t.layoutType = "notextile" : i.match(l("pre")) ? t.layoutType = "pre" : i.match(l("div")) ? t.layoutType = "div" : i.match(l("table")) && (t.layoutType = "table"),
                        t.mode = c.attributes,
                        o(t)) : (t.mode = c.text)(e, t)
            },
            text: function (e, t) {
                if (e.match(l("text")))
                    return o(t);
                var n = e.next();
                return '"' === n ? (t.mode = c.link)(e, t) : r(e, t, n)
            },
            attributes: function (e, t) {
                return t.mode = c.layoutLength,
                    e.match(l("attributes")) ? i.attributes : o(t)
            },
            layoutLength: function (e, t) {
                return e.eat(".") && e.eat(".") && (t.spanningLayout = !0),
                    t.mode = c.text,
                    o(t)
            },
            list: function (e, t) {
                var n = e.match(l("list"));
                t.listDepth = n[0].length;
                var i = (t.listDepth - 1) % 3;
                return t.layoutType = i ? 1 === i ? "list2" : "list3" : "list1",
                    t.mode = c.attributes,
                    o(t)
            },
            link: function (e, t) {
                return t.mode = c.text,
                    e.match(l("link")) ? (e.match(/\S+/),
                        i.link) : o(t)
            },
            linkDefinition: function (e) {
                return e.skipToEnd(),
                    i.linkDefinition
            },
            definitionList: function (e, t) {
                return e.match(l("definitionList")),
                    t.layoutType = "definitionList",
                    e.match(/\s*$/) ? t.spanningLayout = !0 : t.mode = c.attributes,
                    o(t)
            },
            html: function (e) {
                return e.skipToEnd(),
                    i.html
            },
            table: function (e, t) {
                return t.layoutType = "table",
                    (t.mode = c.tableCell)(e, t)
            },
            tableCell: function (e, t) {
                return e.match(l("tableHeading")) ? t.tableHeading = !0 : e.eat("|"),
                    t.mode = c.tableCellAttributes,
                    o(t)
            },
            tableCellAttributes: function (e, t) {
                return t.mode = c.tableText,
                    e.match(l("tableCellAttributes")) ? i.attributes : o(t)
            },
            tableText: function (e, t) {
                return e.match(l("tableText")) ? o(t) : "|" === e.peek() ? (t.mode = c.tableCell,
                    o(t)) : r(e, t, e.next())
            }
        };
        const u = {
            name: "textile",
            startState: function () {
                return {
                    mode: c.newLayout
                }
            },
            token: function (e, t) {
                return e.sol() && function (e, t) {
                    t.mode = c.newLayout,
                        t.tableHeading = !1,
                        "definitionList" === t.layoutType && t.spanningLayout && e.match(l("definitionListEnd"), !1) && (t.spanningLayout = !1)
                }(e, t),
                    t.mode(e, t)
            },
            blankLine: function (e) {
                var t = e.spanningLayout
                    , n = e.layoutType;
                for (var i in e)
                    e.hasOwnProperty(i) && delete e[i];
                e.mode = c.newLayout,
                    t && (e.layoutType = n,
                        e.spanningLayout = !0)
            }
        }
    }
    ,
    31991: (e, t, n) => {
        n.r(t),
            n.d(t, {
                tiddlyWiki: () => k
            });
        var i = {}
            , r = {
                allTags: !0,
                closeAll: !0,
                list: !0,
                newJournal: !0,
                newTiddler: !0,
                permaview: !0,
                saveChanges: !0,
                search: !0,
                slider: !0,
                tabs: !0,
                tag: !0,
                tagging: !0,
                tags: !0,
                tiddler: !0,
                timeline: !0,
                today: !0,
                version: !0,
                option: !0,
                with: !0,
                filter: !0
            }
            , a = /[\w_\-]/i
            , o = /^\-\-\-\-+$/
            , O = /^\/\*\*\*$/
            , s = /^\*\*\*\/$/
            , l = /^<<<$/
            , c = /^\/\/\{\{\{$/
            , u = /^\/\/\}\}\}$/
            , d = /^<!--\{\{\{-->$/
            , h = /^<!--\}\}\}-->$/
            , f = /^\{\{\{$/
            , p = /^\}\}\}$/
            , m = /.*?\}\}\}/;
        function g(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function Q(e, t) {
            var n = e.sol()
                , r = e.peek();
            if (t.block = !1,
                n && /[<\/\*{}\-]/.test(r)) {
                if (e.match(f))
                    return t.block = !0,
                        g(e, t, y);
                if (e.match(l))
                    return "quote";
                if (e.match(O) || e.match(s))
                    return "comment";
                if (e.match(c) || e.match(u) || e.match(d) || e.match(h))
                    return "comment";
                if (e.match(o))
                    return "contentSeparator"
            }
            if (e.next(),
                n && /[\/\*!#;:>|]/.test(r)) {
                if ("!" == r)
                    return e.skipToEnd(),
                        "header";
                if ("*" == r)
                    return e.eatWhile("*"),
                        "comment";
                if ("#" == r)
                    return e.eatWhile("#"),
                        "comment";
                if (";" == r)
                    return e.eatWhile(";"),
                        "comment";
                if (":" == r)
                    return e.eatWhile(":"),
                        "comment";
                if (">" == r)
                    return e.eatWhile(">"),
                        "quote";
                if ("|" == r)
                    return "header"
            }
            if ("{" == r && e.match("{{"))
                return g(e, t, y);
            if (/[hf]/i.test(r) && /[ti]/i.test(e.peek()) && e.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
                return "link";
            if ('"' == r)
                return "string";
            if ("~" == r)
                return "brace";
            if (/[\[\]]/.test(r) && e.match(r))
                return "brace";
            if ("@" == r)
                return e.eatWhile(a),
                    "link";
            if (/\d/.test(r))
                return e.eatWhile(/\d/),
                    "number";
            if ("/" == r) {
                if (e.eat("%"))
                    return g(e, t, $);
                if (e.eat("/"))
                    return g(e, t, S)
            }
            if ("_" == r && e.eat("_"))
                return g(e, t, P);
            if ("-" == r && e.eat("-")) {
                if (" " != e.peek())
                    return g(e, t, v);
                if (" " == e.peek())
                    return "brace"
            }
            return "'" == r && e.eat("'") ? g(e, t, b) : "<" == r && e.eat("<") ? g(e, t, x) : (e.eatWhile(/[\w\$_]/),
                i.propertyIsEnumerable(e.current()) ? "keyword" : null)
        }
        function $(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = Q;
                    break
                }
                i = "%" == n
            }
            return "comment"
        }
        function b(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("'" == n && i) {
                    t.tokenize = Q;
                    break
                }
                i = "'" == n
            }
            return "strong"
        }
        function y(e, t) {
            var n = t.block;
            return n && e.current() ? "comment" : !n && e.match(m) || n && e.sol() && e.match(p) ? (t.tokenize = Q,
                "comment") : (e.next(),
                    "comment")
        }
        function S(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = Q;
                    break
                }
                i = "/" == n
            }
            return "emphasis"
        }
        function P(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("_" == n && i) {
                    t.tokenize = Q;
                    break
                }
                i = "_" == n
            }
            return "link"
        }
        function v(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("-" == n && i) {
                    t.tokenize = Q;
                    break
                }
                i = "-" == n
            }
            return "deleted"
        }
        function x(e, t) {
            if ("<<" == e.current())
                return "meta";
            var n = e.next();
            return n ? ">" == n && ">" == e.peek() ? (e.next(),
                t.tokenize = Q,
                "meta") : (e.eatWhile(/[\w\$_]/),
                    r.propertyIsEnumerable(e.current()) ? "keyword" : null) : (t.tokenize = Q,
                        null)
        }
        const k = {
            name: "tiddlywiki",
            startState: function () {
                return {
                    tokenize: Q
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            }
        }
    }
    ,
    31984: (e, t, n) => {
        function i(e, t, n) {
            return function (i, r) {
                for (; !i.eol();) {
                    if (i.match(t)) {
                        r.tokenize = a;
                        break
                    }
                    i.next()
                }
                return n && (r.tokenize = n),
                    e
            }
        }
        function r(e) {
            return function (t, n) {
                for (; !t.eol();)
                    t.next();
                return n.tokenize = a,
                    e
            }
        }
        function a(e, t) {
            function n(n) {
                return t.tokenize = n,
                    n(e, t)
            }
            var o = e.sol()
                , O = e.next();
            switch (O) {
                case "{":
                    return e.eat("/"),
                        e.eatSpace(),
                        e.eatWhile(/[^\s\u00a0=\"\'\/?(}]/),
                        t.tokenize = c,
                        "tag";
                case "_":
                    if (e.eat("_"))
                        return n(i("strong", "__", a));
                    break;
                case "'":
                    if (e.eat("'"))
                        return n(i("em", "''", a));
                    break;
                case "(":
                    if (e.eat("("))
                        return n(i("link", "))", a));
                    break;
                case "[":
                    return n(i("url", "]", a));
                case "|":
                    if (e.eat("|"))
                        return n(i("comment", "||"));
                    break;
                case "-":
                    if (e.eat("="))
                        return n(i("header string", "=-", a));
                    if (e.eat("-"))
                        return n(i("error tw-deleted", "--", a));
                    break;
                case "=":
                    if (e.match("=="))
                        return n(i("tw-underline", "===", a));
                    break;
                case ":":
                    if (e.eat(":"))
                        return n(i("comment", "::"));
                    break;
                case "^":
                    return n(i("tw-box", "^"));
                case "~":
                    if (e.match("np~"))
                        return n(i("meta", "~/np~"))
            }
            if (o)
                switch (O) {
                    case "!":
                        return e.match("!!!!!") || e.match("!!!!") || e.match("!!!") || e.match("!!"),
                            n(r("header string"));
                    case "*":
                    case "#":
                    case "+":
                        return n(r("tw-listitem bracket"))
                }
            return null
        }
        var o, O, s, l;
        function c(e, t) {
            var n, i = e.next(), r = e.peek();
            return "}" == i ? (t.tokenize = a,
                "tag") : "(" == i || ")" == i ? "bracket" : "=" == i ? (O = "equals",
                    ">" == r && (e.next(),
                        r = e.peek()),
                    /[\'\"]/.test(r) || (t.tokenize = function (e, t) {
                        for (; !e.eol();) {
                            var n = e.next()
                                , i = e.peek();
                            if (" " == n || "," == n || /[ )}]/.test(i)) {
                                t.tokenize = c;
                                break
                            }
                        }
                        return "string"
                    }
                    ),
                    "operator") : /[\'\"]/.test(i) ? (t.tokenize = (n = i,
                        function (e, t) {
                            for (; !e.eol();)
                                if (e.next() == n) {
                                    t.tokenize = c;
                                    break
                                }
                            return "string"
                        }
                    ),
                        t.tokenize(e, t)) : (e.eatWhile(/[^\s\u00a0=\"\'\/?]/),
                            "keyword")
        }
        function u() {
            for (var e = arguments.length - 1; e >= 0; e--)
                s.cc.push(arguments[e])
        }
        function d() {
            return u.apply(null, arguments),
                !0
        }
        function h(e, t) {
            var n = s.context && s.context.noIndent;
            s.context = {
                prev: s.context,
                pluginName: e,
                indent: s.indented,
                startOfLine: t,
                noIndent: n
            }
        }
        function f() {
            s.context && (s.context = s.context.prev)
        }
        function p(e) {
            if ("openPlugin" == e)
                return s.pluginName = o,
                    d(m, (n = s.startOfLine,
                        function (e) {
                            return "selfclosePlugin" == e || "endPlugin" == e ? d() : "endPlugin" == e ? (h(s.pluginName, n),
                                d()) : d()
                        }
                    ));
            if ("closePlugin" == e) {
                var t = !1;
                return s.context ? (t = s.context.pluginName != o,
                    f()) : t = !0,
                    t && (l = "error"),
                    d(function (e) {
                        return function (t) {
                            return e && (l = "error"),
                                "endPlugin" == t ? d() : u()
                        }
                    }(t))
            }
            return "string" == e ? (s.context && "!cdata" == s.context.name || h("!cdata"),
                s.tokenize == a && f(),
                d()) : d();
            var n
        }
        function m(e) {
            return "keyword" == e ? (l = "attribute",
                d(m)) : "equals" == e ? d(g, m) : u()
        }
        function g(e) {
            return "keyword" == e ? (l = "string",
                d()) : "string" == e ? d(Q) : u()
        }
        function Q(e) {
            return "string" == e ? d(Q) : u()
        }
        n.r(t),
            n.d(t, {
                tiki: () => $
            });
        const $ = {
            name: "tiki",
            startState: function () {
                return {
                    tokenize: a,
                    cc: [],
                    indented: 0,
                    startOfLine: !0,
                    pluginName: null,
                    context: null
                }
            },
            token: function (e, t) {
                if (e.sol() && (t.startOfLine = !0,
                    t.indented = e.indentation()),
                    e.eatSpace())
                    return null;
                l = O = o = null;
                var n = t.tokenize(e, t);
                if ((n || O) && "comment" != n)
                    for (s = t; ;) {
                        if ((t.cc.pop() || p)(O || n))
                            break
                    }
                return t.startOfLine = !1,
                    l || n
            },
            indent: function (e, t, n) {
                var i = e.context;
                if (i && i.noIndent)
                    return 0;
                for (i && /^{\//.test(t) && (i = i.prev); i && !i.startOfLine;)
                    i = i.prev;
                return i ? i.indent + n.unit : 0
            }
        }
    }
    ,
    53187: (e, t, n) => {
        n.r(t),
            n.d(t, {
                toml: () => i
            });
        const i = {
            name: "toml",
            startState: function () {
                return {
                    inString: !1,
                    stringType: "",
                    lhs: !0,
                    inArray: 0
                }
            },
            token: function (e, t) {
                if (t.inString || '"' != e.peek() && "'" != e.peek() || (t.stringType = e.peek(),
                    e.next(),
                    t.inString = !0),
                    e.sol() && 0 === t.inArray && (t.lhs = !0),
                    t.inString) {
                    for (; t.inString && !e.eol();)
                        e.peek() === t.stringType ? (e.next(),
                            t.inString = !1) : "\\" === e.peek() ? (e.next(),
                                e.next()) : e.match(/^.[^\\\"\']*/);
                    return t.lhs ? "property" : "string"
                }
                return t.inArray && "]" === e.peek() ? (e.next(),
                    t.inArray--,
                    "bracket") : t.lhs && "[" === e.peek() && e.skipTo("]") ? (e.next(),
                        "]" === e.peek() && e.next(),
                        "atom") : "#" === e.peek() ? (e.skipToEnd(),
                            "comment") : e.eatSpace() ? null : t.lhs && e.eatWhile((function (e) {
                                return "=" != e && " " != e
                            }
                            )) ? "property" : t.lhs && "=" === e.peek() ? (e.next(),
                                t.lhs = !1,
                                null) : !t.lhs && e.match(/^\d\d\d\d[\d\-\:\.T]*Z/) ? "atom" : t.lhs || !e.match("true") && !e.match("false") ? t.lhs || "[" !== e.peek() ? !t.lhs && e.match(/^\-?\d+(?:\.\d+)?/) ? "number" : (e.eatSpace() || e.next(),
                                    null) : (t.inArray++,
                                        e.next(),
                                        "bracket") : "atom"
            },
            languageData: {
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    92904: (e, t, n) => {
        n.r(t),
            n.d(t, {
                troff: () => o
            });
        var i = {};
        function r(e) {
            if (e.eatSpace())
                return null;
            var t = e.sol()
                , n = e.next();
            if ("\\" === n)
                return e.match("fB") || e.match("fR") || e.match("fI") || e.match("u") || e.match("d") || e.match("%") || e.match("&") ? "string" : e.match("m[") ? (e.skipTo("]"),
                    e.next(),
                    "string") : e.match("s+") || e.match("s-") ? (e.eatWhile(/[\d-]/),
                        "string") : e.match("(") || e.match("*(") ? (e.eatWhile(/[\w-]/),
                            "string") : "string";
            if (t && ("." === n || "'" === n) && e.eat("\\") && e.eat('"'))
                return e.skipToEnd(),
                    "comment";
            if (t && "." === n) {
                if (e.match("B ") || e.match("I ") || e.match("R "))
                    return "attribute";
                if (e.match("TH ") || e.match("SH ") || e.match("SS ") || e.match("HP "))
                    return e.skipToEnd(),
                        "quote";
                if (e.match(/[A-Z]/) && e.match(/[A-Z]/) || e.match(/[a-z]/) && e.match(/[a-z]/))
                    return "attribute"
            }
            e.eatWhile(/[\w-]/);
            var r = e.current();
            return i.hasOwnProperty(r) ? i[r] : null
        }
        function a(e, t) {
            return (t.tokens[0] || r)(e, t)
        }
        const o = {
            name: "troff",
            startState: function () {
                return {
                    tokens: []
                }
            },
            token: function (e, t) {
                return a(e, t)
            }
        }
    }
    ,
    50: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                ttcn: () => T
            });
        const r = {
            name: "ttcn",
            keywords: i("activate address alive all alt altstep and and4b any break case component const continue control deactivate display do else encode enumerated except exception execute extends extension external for from function goto group if import in infinity inout interleave label language length log match message mixed mod modifies module modulepar mtc noblock not not4b nowait of on optional or or4b out override param pattern port procedure record recursive rem repeat return runs select self sender set signature system template testcase to type union value valueof var variant while with xor xor4b"),
            builtin: i("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue decomp decvalue float2int float2str hex2bit hex2int hex2oct hex2str int2bit int2char int2float int2hex int2oct int2str int2unichar isbound ischosen ispresent isvalue lengthof log2str oct2bit oct2char oct2hex oct2int oct2str regexp replace rnd sizeof str2bit str2float str2hex str2int str2oct substr unichar2int unichar2char enum2int"),
            types: i("anytype bitstring boolean char charstring default float hexstring integer objid octetstring universal verdicttype timer"),
            timerOps: i("read running start stop timeout"),
            portOps: i("call catch check clear getcall getreply halt raise receive reply send trigger"),
            configOps: i("create connect disconnect done kill killed map unmap"),
            verdictOps: i("getverdict setverdict"),
            sutOps: i("action"),
            functionOps: i("apply derefers refers"),
            verdictConsts: i("error fail inconc none pass"),
            booleanConsts: i("true false"),
            otherConsts: i("null NULL omit"),
            visibilityModifiers: i("private public friend"),
            templateMatch: i("complement ifpresent subset superset permutation"),
            multiLineStrings: !0
        };
        var a = [];
        function o(e) {
            if (e)
                for (var t in e)
                    e.hasOwnProperty(t) && a.push(t)
        }
        o(r.keywords),
            o(r.builtin),
            o(r.timerOps),
            o(r.portOps);
        var O, s = r.keywords || {}, l = r.builtin || {}, c = r.timerOps || {}, u = r.portOps || {}, d = r.configOps || {}, h = r.verdictOps || {}, f = r.sutOps || {}, p = r.functionOps || {}, m = r.verdictConsts || {}, g = r.booleanConsts || {}, Q = r.otherConsts || {}, $ = r.types || {}, b = r.visibilityModifiers || {}, y = r.templateMatch || {}, S = r.multiLineStrings, P = !1 !== r.indentStatements, v = /[+\-*&@=<>!\/]/;
        function x(e, t) {
            var n, i = e.next();
            if ('"' == i || "'" == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                var o = e.peek();
                                o && ("b" != (o = o.toLowerCase()) && "h" != o && "o" != o || e.next()),
                                    a = !0;
                                break
                            }
                            r = !r && "\\" == i
                        }
                        return (a || !r && !S) && (t.tokenize = null),
                            "string"
                    }
                ),
                    t.tokenize(e, t);
            if (/[\[\]{}\(\),;\\:\?\.]/.test(i))
                return O = i,
                    "punctuation";
            if ("#" == i)
                return e.skipToEnd(),
                    "atom";
            if ("%" == i)
                return e.eatWhile(/\b/),
                    "atom";
            if (/\d/.test(i))
                return e.eatWhile(/[\w\.]/),
                    "number";
            if ("/" == i) {
                if (e.eat("*"))
                    return t.tokenize = k,
                        k(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment"
            }
            if (v.test(i))
                return "@" == i && (e.match("try") || e.match("catch") || e.match("lazy")) ? "keyword" : (e.eatWhile(v),
                    "operator");
            e.eatWhile(/[\w\$_\xa1-\uffff]/);
            var r = e.current();
            return s.propertyIsEnumerable(r) ? "keyword" : l.propertyIsEnumerable(r) ? "builtin" : c.propertyIsEnumerable(r) || d.propertyIsEnumerable(r) || h.propertyIsEnumerable(r) || u.propertyIsEnumerable(r) || f.propertyIsEnumerable(r) || p.propertyIsEnumerable(r) ? "def" : m.propertyIsEnumerable(r) || g.propertyIsEnumerable(r) || Q.propertyIsEnumerable(r) ? "string" : $.propertyIsEnumerable(r) ? "typeName.standard" : b.propertyIsEnumerable(r) ? "modifier" : y.propertyIsEnumerable(r) ? "atom" : "variable"
        }
        function k(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("/" == n && i) {
                    t.tokenize = null;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function w(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        function X(e, t, n) {
            var i = e.indented;
            return e.context && "statement" == e.context.type && (i = e.context.indented),
                e.context = new w(i, t, n, null, e.context)
        }
        function _(e) {
            var t = e.context.type;
            return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                e.context = e.context.prev
        }
        const T = {
            name: "ttcn",
            startState: function () {
                return {
                    tokenize: null,
                    context: new w(0, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0),
                    e.eatSpace())
                    return null;
                O = null;
                var i = (t.tokenize || x)(e, t);
                if ("comment" == i)
                    return i;
                if (null == n.align && (n.align = !0),
                    ";" != O && ":" != O && "," != O || "statement" != n.type)
                    if ("{" == O)
                        X(t, e.column(), "}");
                    else if ("[" == O)
                        X(t, e.column(), "]");
                    else if ("(" == O)
                        X(t, e.column(), ")");
                    else if ("}" == O) {
                        for (; "statement" == n.type;)
                            n = _(t);
                        for ("}" == n.type && (n = _(t)); "statement" == n.type;)
                            n = _(t)
                    } else
                        O == n.type ? _(t) : P && (("}" == n.type || "top" == n.type) && ";" != O || "statement" == n.type && "newstatement" == O) && X(t, e.column(), "statement");
                else
                    _(t);
                return t.startOfLine = !1,
                    i
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                },
                autocomplete: a
            }
        }
    }
    ,
    83465: (e, t, n) => {
        var i;
        function r(e) {
            return new RegExp("^(?:" + e.join("|") + ")$", "i")
        }
        n.r(t),
            n.d(t, {
                turtle: () => c
            });
        r([]);
        var a = r(["@prefix", "@base", "a"])
            , o = /[*+\-<>=&|]/;
        function O(e, t) {
            var n, r = e.next();
            if (i = null,
                "<" != r || e.match(/^[\s\u00a0=]/, !1)) {
                if ('"' == r || "'" == r)
                    return t.tokenize = (n = r,
                        function (e, t) {
                            for (var i, r = !1; null != (i = e.next());) {
                                if (i == n && !r) {
                                    t.tokenize = O;
                                    break
                                }
                                r = !r && "\\" == i
                            }
                            return "string"
                        }
                    ),
                        t.tokenize(e, t);
                if (/[{}\(\),\.;\[\]]/.test(r))
                    return i = r,
                        null;
                if ("#" == r)
                    return e.skipToEnd(),
                        "comment";
                if (o.test(r))
                    return e.eatWhile(o),
                        null;
                if (":" == r)
                    return "operator";
                if (e.eatWhile(/[_\w\d]/),
                    ":" == e.peek())
                    return "variableName.special";
                var s = e.current();
                return a.test(s) ? "meta" : r >= "A" && r <= "Z" ? "comment" : "keyword"
            }
            return e.match(/^[^\s\u00a0>]*>?/),
                "atom"
        }
        function s(e, t, n) {
            e.context = {
                prev: e.context,
                indent: e.indent,
                col: n,
                type: t
            }
        }
        function l(e) {
            e.indent = e.context.indent,
                e.context = e.context.prev
        }
        const c = {
            name: "turtle",
            startState: function () {
                return {
                    tokenize: O,
                    context: null,
                    indent: 0,
                    col: 0
                }
            },
            token: function (e, t) {
                if (e.sol() && (t.context && null == t.context.align && (t.context.align = !1),
                    t.indent = e.indentation()),
                    e.eatSpace())
                    return null;
                var n = t.tokenize(e, t);
                if ("comment" != n && t.context && null == t.context.align && "pattern" != t.context.type && (t.context.align = !0),
                    "(" == i)
                    s(t, ")", e.column());
                else if ("[" == i)
                    s(t, "]", e.column());
                else if ("{" == i)
                    s(t, "}", e.column());
                else if (/[\]\}\)]/.test(i)) {
                    for (; t.context && "pattern" == t.context.type;)
                        l(t);
                    t.context && i == t.context.type && l(t)
                } else
                    "." == i && t.context && "pattern" == t.context.type ? l(t) : /atom|string|variable/.test(n) && t.context && (/[\}\]]/.test(t.context.type) ? s(t, "pattern", e.column()) : "pattern" != t.context.type || t.context.align || (t.context.align = !0,
                        t.context.col = e.column()));
                return n
            },
            indent: function (e, t, n) {
                var i = t && t.charAt(0)
                    , r = e.context;
                if (/[\]\}]/.test(i))
                    for (; r && "pattern" == r.type;)
                        r = r.prev;
                var a = r && i == r.type;
                return r ? "pattern" == r.type ? r.col : r.align ? r.col + (a ? 0 : 1) : r.indent + (a ? 0 : n.unit) : 0
            },
            languageData: {
                commentTokens: {
                    line: "#"
                }
            }
        }
    }
    ,
    90099: (e, t, n) => {
        n.r(t),
            n.d(t, {
                vb: () => _
            });
        var i = "error";
        function r(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b", "i")
        }
        var a = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]")
            , o = new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]")
            , O = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))")
            , s = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))")
            , l = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))")
            , c = new RegExp("^[_A-Za-z][_A-Za-z0-9]*")
            , u = ["class", "module", "sub", "enum", "select", "while", "if", "function", "get", "set", "property", "try", "structure", "synclock", "using", "with"]
            , d = ["else", "elseif", "case", "catch", "finally"]
            , h = ["next", "loop"]
            , f = ["and", "andalso", "or", "orelse", "xor", "in", "not", "is", "isnot", "like"]
            , p = r(f)
            , m = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"]
            , g = ["object", "boolean", "char", "string", "byte", "sbyte", "short", "ushort", "int16", "uint16", "integer", "uinteger", "int32", "uint32", "long", "ulong", "int64", "uint64", "decimal", "single", "double", "float", "date", "datetime", "intptr", "uintptr"]
            , Q = r(m)
            , $ = r(g)
            , b = '"'
            , y = r(u)
            , S = r(d)
            , P = r(h)
            , v = r(["end"])
            , x = r(["do"]);
        function k(e, t) {
            t.currentIndent++
        }
        function w(e, t) {
            t.currentIndent--
        }
        function X(e, t) {
            if (e.eatSpace())
                return null;
            if ("'" === e.peek())
                return e.skipToEnd(),
                    "comment";
            if (e.match(/^((&H)|(&O))?[0-9\.a-f]/i, !1)) {
                var n = !1;
                if ((e.match(/^\d*\.\d+F?/i) || e.match(/^\d+\.\d*F?/) || e.match(/^\.\d+F?/)) && (n = !0),
                    n)
                    return e.eat(/J/i),
                        "number";
                var r = !1;
                if (e.match(/^&H[0-9a-f]+/i) || e.match(/^&O[0-7]+/i) ? r = !0 : e.match(/^[1-9]\d*F?/) ? (e.eat(/J/i),
                    r = !0) : e.match(/^0(?![\dx])/i) && (r = !0),
                    r)
                    return e.eat(/L/i),
                        "number"
            }
            return e.match(b) ? (t.tokenize = function (e) {
                var t = 1 == e.length
                    , n = "string";
                return function (i, r) {
                    for (; !i.eol();) {
                        if (i.eatWhile(/[^'"]/),
                            i.match(e))
                            return r.tokenize = X,
                                n;
                        i.eat(/['"]/)
                    }
                    return t && (r.tokenize = X),
                        n
                }
            }(e.current()),
                t.tokenize(e, t)) : e.match(l) || e.match(s) ? null : e.match(O) || e.match(a) || e.match(p) ? "operator" : e.match(o) ? null : e.match(x) ? (k(0, t),
                    t.doInCurrentLine = !0,
                    "keyword") : e.match(y) ? (t.doInCurrentLine ? t.doInCurrentLine = !1 : k(0, t),
                        "keyword") : e.match(S) ? "keyword" : e.match(v) ? (w(0, t),
                            w(0, t),
                            "keyword") : e.match(P) ? (w(0, t),
                                "keyword") : e.match($) || e.match(Q) ? "keyword" : e.match(c) ? "variable" : (e.next(),
                                    i)
        }
        const _ = {
            name: "vb",
            startState: function () {
                return {
                    tokenize: X,
                    lastToken: null,
                    currentIndent: 0,
                    nextLineIndent: 0,
                    doInCurrentLine: !1
                }
            },
            token: function (e, t) {
                e.sol() && (t.currentIndent += t.nextLineIndent,
                    t.nextLineIndent = 0,
                    t.doInCurrentLine = 0);
                var n = function (e, t) {
                    var n = t.tokenize(e, t)
                        , r = e.current();
                    if ("." === r)
                        return "variable" === (n = t.tokenize(e, t)) ? "variable" : i;
                    var a = "[({".indexOf(r);
                    return -1 !== a && k(0, t),
                        -1 !== (a = "])}".indexOf(r)) && w(0, t) ? i : n
                }(e, t);
                return t.lastToken = {
                    style: n,
                    content: e.current()
                },
                    n
            },
            indent: function (e, t, n) {
                var i = t.replace(/^\s+|\s+$/g, "");
                return i.match(P) || i.match(v) || i.match(S) ? n.unit * (e.currentIndent - 1) : e.currentIndent < 0 ? 0 : e.currentIndent * n.unit
            },
            languageData: {
                closeBrackets: {
                    brackets: ["(", "[", "{", '"']
                },
                commentTokens: {
                    line: "'"
                },
                autocomplete: u.concat(d).concat(h).concat(f).concat(m).concat(g)
            }
        }
    }
    ,
    69996: (e, t, n) => {
        function i(e) {
            var t = "error";
            function n(e) {
                return new RegExp("^((" + e.join(")|(") + "))\\b", "i")
            }
            var i = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]")
                , r = new RegExp("^((<>)|(<=)|(>=))")
                , a = new RegExp("^[\\.,]")
                , o = new RegExp("^[\\(\\)]")
                , O = new RegExp("^[A-Za-z][_A-Za-z0-9]*")
                , s = n(["and", "or", "not", "xor", "is", "mod", "eqv", "imp"])
                , l = ["WScript", "err", "debug", "RegExp"]
                , c = ["clear", "execute", "raise", "replace", "test", "write", "writeline", "close", "open", "state", "eof", "update", "addnew", "end", "createobject", "quit"].concat(["description", "firstindex", "global", "helpcontext", "helpfile", "ignorecase", "length", "number", "pattern", "source", "value", "count"]);
            l = l.concat(["vbBlack", "vbRed", "vbGreen", "vbYellow", "vbBlue", "vbMagenta", "vbCyan", "vbWhite", "vbBinaryCompare", "vbTextCompare", "vbSunday", "vbMonday", "vbTuesday", "vbWednesday", "vbThursday", "vbFriday", "vbSaturday", "vbUseSystemDayOfWeek", "vbFirstJan1", "vbFirstFourDays", "vbFirstFullWeek", "vbGeneralDate", "vbLongDate", "vbShortDate", "vbLongTime", "vbShortTime", "vbObjectError", "vbOKOnly", "vbOKCancel", "vbAbortRetryIgnore", "vbYesNoCancel", "vbYesNo", "vbRetryCancel", "vbCritical", "vbQuestion", "vbExclamation", "vbInformation", "vbDefaultButton1", "vbDefaultButton2", "vbDefaultButton3", "vbDefaultButton4", "vbApplicationModal", "vbSystemModal", "vbOK", "vbCancel", "vbAbort", "vbRetry", "vbIgnore", "vbYes", "vbNo", "vbCr", "VbCrLf", "vbFormFeed", "vbLf", "vbNewLine", "vbNullChar", "vbNullString", "vbTab", "vbVerticalTab", "vbUseDefault", "vbTrue", "vbFalse", "vbEmpty", "vbNull", "vbInteger", "vbLong", "vbSingle", "vbDouble", "vbCurrency", "vbDate", "vbString", "vbObject", "vbError", "vbBoolean", "vbVariant", "vbDataObject", "vbDecimal", "vbByte", "vbArray"]),
                e.isASP && (l = l.concat(["server", "response", "request", "session", "application"]),
                    c = c.concat(["addheader", "appendtolog", "binarywrite", "end", "flush", "redirect", "binaryread", "remove", "removeall", "lock", "unlock", "abandon", "getlasterror", "htmlencode", "mappath", "transfer", "urlencode"], ["buffer", "cachecontrol", "charset", "contenttype", "expires", "expiresabsolute", "isclientconnected", "pics", "status", "clientcertificate", "cookies", "form", "querystring", "servervariables", "totalbytes", "contents", "staticobjects", "codepage", "lcid", "sessionid", "timeout", "scripttimeout"]));
            var u = n(["dim", "redim", "then", "until", "randomize", "byval", "byref", "new", "property", "exit", "in", "const", "private", "public", "get", "set", "let", "stop", "on error resume next", "on error goto 0", "option explicit", "call", "me"])
                , d = n(["true", "false", "nothing", "empty", "null"])
                , h = n(["abs", "array", "asc", "atn", "cbool", "cbyte", "ccur", "cdate", "cdbl", "chr", "cint", "clng", "cos", "csng", "cstr", "date", "dateadd", "datediff", "datepart", "dateserial", "datevalue", "day", "escape", "eval", "execute", "exp", "filter", "formatcurrency", "formatdatetime", "formatnumber", "formatpercent", "getlocale", "getobject", "getref", "hex", "hour", "inputbox", "instr", "instrrev", "int", "fix", "isarray", "isdate", "isempty", "isnull", "isnumeric", "isobject", "join", "lbound", "lcase", "left", "len", "loadpicture", "log", "ltrim", "rtrim", "trim", "maths", "mid", "minute", "month", "monthname", "msgbox", "now", "oct", "replace", "rgb", "right", "rnd", "round", "scriptengine", "scriptenginebuildversion", "scriptenginemajorversion", "scriptengineminorversion", "second", "setlocale", "sgn", "sin", "space", "split", "sqr", "strcomp", "string", "strreverse", "tan", "time", "timer", "timeserial", "timevalue", "typename", "ubound", "ucase", "unescape", "vartype", "weekday", "weekdayname", "year"])
                , f = n(l)
                , p = n(c)
                , m = '"'
                , g = n(["class", "sub", "select", "while", "if", "function", "property", "with", "for"])
                , Q = n(["else", "elseif", "case"])
                , $ = n(["next", "loop", "wend"])
                , b = n(["end"])
                , y = n(["do"])
                , S = n(["on error resume next", "exit"])
                , P = n(["rem"]);
            function v(e, t) {
                t.currentIndent++
            }
            function x(e, t) {
                t.currentIndent--
            }
            function k(e, n) {
                if (e.eatSpace())
                    return null;
                if ("'" === e.peek())
                    return e.skipToEnd(),
                        "comment";
                if (e.match(P))
                    return e.skipToEnd(),
                        "comment";
                if (e.match(/^((&H)|(&O))?[0-9\.]/i, !1) && !e.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, !1)) {
                    var l = !1;
                    if ((e.match(/^\d*\.\d+/i) || e.match(/^\d+\.\d*/) || e.match(/^\.\d+/)) && (l = !0),
                        l)
                        return e.eat(/J/i),
                            "number";
                    var c = !1;
                    if (e.match(/^&H[0-9a-f]+/i) || e.match(/^&O[0-7]+/i) ? c = !0 : e.match(/^[1-9]\d*F?/) ? (e.eat(/J/i),
                        c = !0) : e.match(/^0(?![\dx])/i) && (c = !0),
                        c)
                        return e.eat(/L/i),
                            "number"
                }
                return e.match(m) ? (n.tokenize = function (e) {
                    var t = 1 == e.length
                        , n = "string";
                    return function (i, r) {
                        for (; !i.eol();) {
                            if (i.eatWhile(/[^'"]/),
                                i.match(e))
                                return r.tokenize = k,
                                    n;
                            i.eat(/['"]/)
                        }
                        return t && (r.tokenize = k),
                            n
                    }
                }(e.current()),
                    n.tokenize(e, n)) : e.match(r) || e.match(i) || e.match(s) ? "operator" : e.match(a) ? null : e.match(o) ? "bracket" : e.match(S) ? (n.doInCurrentLine = !0,
                        "keyword") : e.match(y) ? (v(0, n),
                            n.doInCurrentLine = !0,
                            "keyword") : e.match(g) ? (n.doInCurrentLine ? n.doInCurrentLine = !1 : v(0, n),
                                "keyword") : e.match(Q) ? "keyword" : e.match(b) ? (x(0, n),
                                    x(0, n),
                                    "keyword") : e.match($) ? (n.doInCurrentLine ? n.doInCurrentLine = !1 : x(0, n),
                                        "keyword") : e.match(u) ? "keyword" : e.match(d) ? "atom" : e.match(p) ? "variableName.special" : e.match(h) || e.match(f) ? "builtin" : e.match(O) ? "variable" : (e.next(),
                                            t)
            }
            return {
                name: "vbscript",
                startState: function () {
                    return {
                        tokenize: k,
                        lastToken: null,
                        currentIndent: 0,
                        nextLineIndent: 0,
                        doInCurrentLine: !1,
                        ignoreKeyword: !1
                    }
                },
                token: function (e, n) {
                    e.sol() && (n.currentIndent += n.nextLineIndent,
                        n.nextLineIndent = 0,
                        n.doInCurrentLine = 0);
                    var i = function (e, n) {
                        var i = n.tokenize(e, n)
                            , r = e.current();
                        return "." === r ? (i = n.tokenize(e, n),
                            r = e.current(),
                            !i || "variable" !== i.substr(0, 8) && "builtin" !== i && "keyword" !== i ? t : ("builtin" !== i && "keyword" !== i || (i = "variable"),
                                c.indexOf(r.substr(1)) > -1 && (i = "keyword"),
                                i)) : i
                    }(e, n);
                    return n.lastToken = {
                        style: i,
                        content: e.current()
                    },
                        null === i && (i = null),
                        i
                },
                indent: function (e, t, n) {
                    var i = t.replace(/^\s+|\s+$/g, "");
                    return i.match($) || i.match(b) || i.match(Q) ? n.unit * (e.currentIndent - 1) : e.currentIndent < 0 ? 0 : e.currentIndent * n.unit
                }
            }
        }
        n.r(t),
            n.d(t, {
                vbScript: () => r,
                vbScriptASP: () => a
            });
        const r = i({})
            , a = i({
                isASP: !0
            })
    }
    ,
    46316: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }
        n.r(t),
            n.d(t, {
                velocity: () => h
            });
        var r = i("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}")
            , a = i("#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}")
            , o = i("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent")
            , O = /[+\-*&%=<>!?:\/|]/;
        function s(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function l(e, t) {
            var n = t.beforeParams;
            t.beforeParams = !1;
            var i = e.next();
            if ("'" == i && !t.inString && t.inParams)
                return t.lastTokenWasBuiltin = !1,
                    s(e, t, c(i));
            if ('"' != i) {
                if (/[\[\]{}\(\),;\.]/.test(i))
                    return "(" == i && n ? t.inParams = !0 : ")" == i && (t.inParams = !1,
                        t.lastTokenWasBuiltin = !0),
                        null;
                if (/\d/.test(i))
                    return t.lastTokenWasBuiltin = !1,
                        e.eatWhile(/[\w\.]/),
                        "number";
                if ("#" == i && e.eat("*"))
                    return t.lastTokenWasBuiltin = !1,
                        s(e, t, u);
                if ("#" == i && e.match(/ *\[ *\[/))
                    return t.lastTokenWasBuiltin = !1,
                        s(e, t, d);
                if ("#" == i && e.eat("#"))
                    return t.lastTokenWasBuiltin = !1,
                        e.skipToEnd(),
                        "comment";
                if ("$" == i)
                    return e.eat("!"),
                        e.eatWhile(/[\w\d\$_\.{}-]/),
                        o && o.propertyIsEnumerable(e.current()) ? "keyword" : (t.lastTokenWasBuiltin = !0,
                            t.beforeParams = !0,
                            "builtin");
                if (O.test(i))
                    return t.lastTokenWasBuiltin = !1,
                        e.eatWhile(O),
                        "operator";
                e.eatWhile(/[\w\$_{}@]/);
                var l = e.current();
                return r && r.propertyIsEnumerable(l) ? "keyword" : a && a.propertyIsEnumerable(l) || e.current().match(/^#@?[a-z0-9_]+ *$/i) && "(" == e.peek() && (!a || !a.propertyIsEnumerable(l.toLowerCase())) ? (t.beforeParams = !0,
                    t.lastTokenWasBuiltin = !1,
                    "keyword") : t.inString ? (t.lastTokenWasBuiltin = !1,
                        "string") : e.pos > l.length && "." == e.string.charAt(e.pos - l.length - 1) && t.lastTokenWasBuiltin ? "builtin" : (t.lastTokenWasBuiltin = !1,
                            null)
            }
            return t.lastTokenWasBuiltin = !1,
                t.inString ? (t.inString = !1,
                    "string") : t.inParams ? s(e, t, c(i)) : void 0
        }
        function c(e) {
            return function (t, n) {
                for (var i, r = !1, a = !1; null != (i = t.next());) {
                    if (i == e && !r) {
                        a = !0;
                        break
                    }
                    if ('"' == e && "$" == t.peek() && !r) {
                        n.inString = !0,
                            a = !0;
                        break
                    }
                    r = !r && "\\" == i
                }
                return a && (n.tokenize = l),
                    "string"
            }
        }
        function u(e, t) {
            for (var n, i = !1; n = e.next();) {
                if ("#" == n && i) {
                    t.tokenize = l;
                    break
                }
                i = "*" == n
            }
            return "comment"
        }
        function d(e, t) {
            for (var n, i = 0; n = e.next();) {
                if ("#" == n && 2 == i) {
                    t.tokenize = l;
                    break
                }
                "]" == n ? i++ : " " != n && (i = 0)
            }
            return "meta"
        }
        const h = {
            name: "velocity",
            startState: function () {
                return {
                    tokenize: l,
                    beforeParams: !1,
                    inParams: !1,
                    inString: !1,
                    lastTokenWasBuiltin: !1
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            languageData: {
                commentTokens: {
                    line: "##",
                    block: {
                        open: "#*",
                        close: "*#"
                    }
                }
            }
        }
    }
    ,
    23157: (e, t, n) => {
        function i(e) {
            var t = e.statementIndentUnit
                , n = e.dontAlignCalls
                , i = e.noIndentKeywords || []
                , r = e.multiLineStrings
                , a = e.hooks || {};
            function o(e) {
                for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                    t[n[i]] = !0;
                return t
            }
            var O, s, l = o("accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor"), c = /[\+\-\*\/!~&|^%=?:]/, u = /[\[\]{}()]/, d = /\d[0-9_]*/, h = /\d*\s*'s?d\s*\d[0-9_]*/i, f = /\d*\s*'s?b\s*[xz01][xz01_]*/i, p = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i, m = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i, g = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i, Q = /^((\w+)|[)}\]])/, $ = /[)}\]]/, b = o("case checker class clocking config function generate interface module package primitive program property specify sequence table task"), y = {};
            for (var S in b)
                y[S] = "end" + S;
            for (var P in y.begin = "end",
                y.casex = "endcase",
                y.casez = "endcase",
                y.do = "while",
                y.fork = "join;join_any;join_none",
                y.covergroup = "endgroup",
                i) {
                S = i[P];
                y[S] && (y[S] = void 0)
            }
            var v = o("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");
            function x(e, t) {
                var n, i, o = e.peek();
                if (a[o] && 0 != (n = a[o](e, t)))
                    return n;
                if (a.tokenBase && 0 != (n = a.tokenBase(e, t)))
                    return n;
                if (/[,;:\.]/.test(o))
                    return O = e.next(),
                        null;
                if (u.test(o))
                    return O = e.next(),
                        "bracket";
                if ("`" == o)
                    return e.next(),
                        e.eatWhile(/[\w\$_]/) ? "def" : null;
                if ("$" == o)
                    return e.next(),
                        e.eatWhile(/[\w\$_]/) ? "meta" : null;
                if ("#" == o)
                    return e.next(),
                        e.eatWhile(/[\d_.]/),
                        "def";
                if ('"' == o)
                    return e.next(),
                        t.tokenize = (i = o,
                            function (e, t) {
                                for (var n, a = !1, o = !1; null != (n = e.next());) {
                                    if (n == i && !a) {
                                        o = !0;
                                        break
                                    }
                                    a = !a && "\\" == n
                                }
                                return (o || !a && !r) && (t.tokenize = x),
                                    "string"
                            }
                        ),
                        t.tokenize(e, t);
                if ("/" == o) {
                    if (e.next(),
                        e.eat("*"))
                        return t.tokenize = k,
                            k(e, t);
                    if (e.eat("/"))
                        return e.skipToEnd(),
                            "comment";
                    e.backUp(1)
                }
                if (e.match(g) || e.match(h) || e.match(f) || e.match(p) || e.match(m) || e.match(d) || e.match(g))
                    return "number";
                if (e.eatWhile(c))
                    return "meta";
                if (e.eatWhile(/[\w\$_]/)) {
                    var Q = e.current();
                    return l[Q] ? (y[Q] && (O = "newblock"),
                        v[Q] && (O = "newstatement"),
                        s = Q,
                        "keyword") : "variable"
                }
                return e.next(),
                    null
            }
            function k(e, t) {
                for (var n, i = !1; n = e.next();) {
                    if ("/" == n && i) {
                        t.tokenize = x;
                        break
                    }
                    i = "*" == n
                }
                return "comment"
            }
            function w(e, t, n, i, r) {
                this.indented = e,
                    this.column = t,
                    this.type = n,
                    this.align = i,
                    this.prev = r
            }
            function X(e, t, n) {
                var i = new w(e.indented, t, n, null, e.context);
                return e.context = i
            }
            function _(e) {
                var t = e.context.type;
                return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                    e.context = e.context.prev
            }
            function T(e, t) {
                if (e == t)
                    return !0;
                var n = t.split(";");
                for (var i in n)
                    if (e == n[i])
                        return !0;
                return !1
            }
            return {
                name: "verilog",
                startState: function (e) {
                    var t = {
                        tokenize: null,
                        context: new w(-e, 0, "top", !1),
                        indented: 0,
                        startOfLine: !0
                    };
                    return a.startState && a.startState(t),
                        t
                },
                token: function (e, t) {
                    var n, i = t.context;
                    if ((e.sol() && (null == i.align && (i.align = !1),
                        t.indented = e.indentation(),
                        t.startOfLine = !0),
                        a.token) && void 0 !== (n = a.token(e, t)))
                        return n;
                    if (e.eatSpace())
                        return null;
                    if (O = null,
                        s = null,
                        "comment" == (n = (t.tokenize || x)(e, t)) || "meta" == n || "variable" == n)
                        return n;
                    if (null == i.align && (i.align = !0),
                        O == i.type)
                        _(t);
                    else if (";" == O && "statement" == i.type || i.type && T(s, i.type))
                        for (i = _(t); i && "statement" == i.type;)
                            i = _(t);
                    else if ("{" == O)
                        X(t, e.column(), "}");
                    else if ("[" == O)
                        X(t, e.column(), "]");
                    else if ("(" == O)
                        X(t, e.column(), ")");
                    else if (i && "endcase" == i.type && ":" == O)
                        X(t, e.column(), "statement");
                    else if ("newstatement" == O)
                        X(t, e.column(), "statement");
                    else if ("newblock" == O)
                        if ("function" != s || !i || "statement" != i.type && "endgroup" != i.type)
                            if ("task" == s && i && "statement" == i.type)
                                ;
                            else {
                                var r = y[s];
                                X(t, e.column(), r)
                            }
                        else
                            ; return t.startOfLine = !1,
                                n
                },
                indent: function (e, i, r) {
                    if (e.tokenize != x && null != e.tokenize)
                        return null;
                    if (a.indent) {
                        var o = a.indent(e);
                        if (o >= 0)
                            return o
                    }
                    var O = e.context
                        , s = i && i.charAt(0);
                    "statement" == O.type && "}" == s && (O = O.prev);
                    var l = !1
                        , c = i.match(Q);
                    return c && (l = T(c[0], O.type)),
                        "statement" == O.type ? O.indented + ("{" == s ? 0 : t || r.unit) : $.test(O.type) && O.align && !n ? O.column + (l ? 0 : 1) : ")" != O.type || l ? O.indented + (l ? 0 : r.unit) : O.indented + (t || r.unit)
                },
                languageData: {
                    indentOnInput: function () {
                        var e = [];
                        for (var t in y)
                            if (y[t]) {
                                var n = y[t].split(";");
                                for (var i in n)
                                    e.push(n[i])
                            }
                        return new RegExp("[{}()\\[\\]]|(" + e.join("|") + ")$")
                    }(),
                    commentTokens: {
                        line: "//",
                        block: {
                            open: "/*",
                            close: "*/"
                        }
                    }
                }
            }
        }
        n.r(t),
            n.d(t, {
                tlv: () => c,
                verilog: () => r
            });
        const r = i({});
        var a = {
            "|": "link",
            ">": "property",
            $: "variable",
            $$: "variable",
            "?$": "qualifier",
            "?*": "qualifier",
            "-": "contentSeparator",
            "/": "property",
            "/-": "property",
            "@": "variableName.special",
            "@-": "variableName.special",
            "@++": "variableName.special",
            "@+=": "variableName.special",
            "@+=-": "variableName.special",
            "@--": "variableName.special",
            "@-=": "variableName.special",
            "%+": "tag",
            "%-": "tag",
            "%": "tag",
            ">>": "tag",
            "<<": "tag",
            "<>": "tag",
            "#": "tag",
            "^": "attribute",
            "^^": "attribute",
            "^!": "attribute",
            "*": "variable",
            "**": "variable",
            "\\": "keyword",
            '"': "comment"
        }
            , o = {
                "/": "beh-hier",
                ">": "beh-hier",
                "-": "phys-hier",
                "|": "pipe",
                "?": "when",
                "@": "stage",
                "\\": "keyword"
            }
            , O = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/
            , s = /^[! ] */
            , l = /^\/[\/\*]/;
        const c = i({
            hooks: {
                electricInput: !1,
                token: function (e, t) {
                    var n = void 0;
                    if (e.sol() && !t.tlvInBlockComment) {
                        "\\" == e.peek() && (n = "def",
                            e.skipToEnd(),
                            e.string.match(/\\SV/) ? t.tlvCodeActive = !1 : e.string.match(/\\TLV/) && (t.tlvCodeActive = !0)),
                            t.tlvCodeActive && 0 == e.pos && 0 == t.indented && (f = e.match(s, !1)) && (t.indented = f[0].length);
                        var i = t.indented
                            , r = i / 3;
                        if (r <= t.tlvIndentationStyle.length) {
                            var c = e.string.length == i
                                , u = 3 * r;
                            if (u < e.string.length) {
                                var d = e.string.slice(u)
                                    , h = d[0];
                                o[h] && (f = d.match(O)) && a[f[1]] && (i += 3,
                                    "\\" == h && u > 0 || (t.tlvIndentationStyle[r] = o[h],
                                        r++))
                            }
                            if (!c)
                                for (; t.tlvIndentationStyle.length > r;)
                                    t.tlvIndentationStyle.pop()
                        }
                        t.tlvNextIndent = i
                    }
                    if (t.tlvCodeActive) {
                        var f;
                        if (void 0 !== n)
                            ;
                        else if (t.tlvInBlockComment)
                            e.match(/^.*?\*\//) ? t.tlvInBlockComment = !1 : e.skipToEnd(),
                                n = "comment";
                        else if ((f = e.match(l)) && !t.tlvInBlockComment)
                            "//" == f[0] ? e.skipToEnd() : t.tlvInBlockComment = !0,
                                n = "comment";
                        else if (f = e.match(O)) {
                            var p = f[1]
                                , m = f[2];
                            a.hasOwnProperty(p) && (m.length > 0 || e.eol()) ? n = a[p] : e.backUp(e.current().length - 1)
                        } else
                            e.match(/^\t+/) ? n = "invalid" : e.match(/^[\[\]{}\(\);\:]+/) ? n = "meta" : (f = e.match(/^[mM]4([\+_])?[\w\d_]*/)) ? n = "+" == f[1] ? "keyword.special" : "keyword" : e.match(/^ +/) ? e.eol() && (n = "error") : e.match(/^[\w\d_]+/) ? n = "number" : e.next()
                    } else
                        e.match(/^[mM]4([\w\d_]*)/) && (n = "keyword");
                    return n
                },
                indent: function (e) {
                    return 1 == e.tlvCodeActive ? e.tlvNextIndent : -1
                },
                startState: function (e) {
                    e.tlvIndentationStyle = [],
                        e.tlvCodeActive = !0,
                        e.tlvNextIndent = -1,
                        e.tlvInBlockComment = !1
                }
            }
        })
    }
    ,
    77653: (e, t, n) => {
        function i(e) {
            for (var t = {}, n = e.split(","), i = 0; i < n.length; ++i) {
                var r = n[i].toUpperCase()
                    , a = n[i].charAt(0).toUpperCase() + n[i].slice(1);
                t[n[i]] = !0,
                    t[r] = !0,
                    t[a] = !0
            }
            return t
        }
        function r(e) {
            return e.eatWhile(/[\w\$_]/),
                "meta"
        }
        n.r(t),
            n.d(t, {
                vhdl: () => m
            });
        var a, o = i("null"), O = {
            "`": r,
            $: r
        }, s = !1, l = i("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor"), c = i("architecture,entity,begin,case,port,else,elsif,end,for,function,if"), u = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
        function d(e, t) {
            var n, i = e.next();
            if (O[i]) {
                var r = O[i](e, t);
                if (!1 !== r)
                    return r
            }
            if ('"' == i)
                return t.tokenize = (n = i,
                    function (e, t) {
                        for (var i, r = !1, a = !1; null != (i = e.next());) {
                            if (i == n && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "--" == i
                        }
                        return (a || !r && !s) && (t.tokenize = d),
                            "string.special"
                    }
                ),
                    t.tokenize(e, t);
            if ("'" == i)
                return t.tokenize = function (e) {
                    return function (t, n) {
                        for (var i, r = !1, a = !1; null != (i = t.next());) {
                            if (i == e && !r) {
                                a = !0;
                                break
                            }
                            r = !r && "--" == i
                        }
                        return (a || !r && !s) && (n.tokenize = d),
                            "string"
                    }
                }(i),
                    t.tokenize(e, t);
            if (/[\[\]{}\(\),;\:\.]/.test(i))
                return a = i,
                    null;
            if (/[\d']/.test(i))
                return e.eatWhile(/[\w\.']/),
                    "number";
            if ("-" == i && e.eat("-"))
                return e.skipToEnd(),
                    "comment";
            if (u.test(i))
                return e.eatWhile(u),
                    "operator";
            e.eatWhile(/[\w\$_]/);
            var h = e.current();
            return l.propertyIsEnumerable(h.toLowerCase()) ? (c.propertyIsEnumerable(h) && (a = "newstatement"),
                "keyword") : o.propertyIsEnumerable(h) ? "atom" : "variable"
        }
        function h(e, t, n, i, r) {
            this.indented = e,
                this.column = t,
                this.type = n,
                this.align = i,
                this.prev = r
        }
        function f(e, t, n) {
            return e.context = new h(e.indented, t, n, null, e.context)
        }
        function p(e) {
            var t = e.context.type;
            return ")" != t && "]" != t && "}" != t || (e.indented = e.context.indented),
                e.context = e.context.prev
        }
        const m = {
            name: "vhdl",
            startState: function (e) {
                return {
                    tokenize: null,
                    context: new h(-e, 0, "top", !1),
                    indented: 0,
                    startOfLine: !0
                }
            },
            token: function (e, t) {
                var n = t.context;
                if (e.sol() && (null == n.align && (n.align = !1),
                    t.indented = e.indentation(),
                    t.startOfLine = !0),
                    e.eatSpace())
                    return null;
                a = null;
                var i = (t.tokenize || d)(e, t);
                if ("comment" == i || "meta" == i)
                    return i;
                if (null == n.align && (n.align = !0),
                    ";" != a && ":" != a || "statement" != n.type)
                    if ("{" == a)
                        f(t, e.column(), "}");
                    else if ("[" == a)
                        f(t, e.column(), "]");
                    else if ("(" == a)
                        f(t, e.column(), ")");
                    else if ("}" == a) {
                        for (; "statement" == n.type;)
                            n = p(t);
                        for ("}" == n.type && (n = p(t)); "statement" == n.type;)
                            n = p(t)
                    } else
                        a == n.type ? p(t) : ("}" == n.type || "top" == n.type || "statement" == n.type && "newstatement" == a) && f(t, e.column(), "statement");
                else
                    p(t);
                return t.startOfLine = !1,
                    i
            },
            indent: function (e, t, n) {
                if (e.tokenize != d && null != e.tokenize)
                    return 0;
                var i = t && t.charAt(0)
                    , r = e.context
                    , a = i == r.type;
                return "statement" == r.type ? r.indented + ("{" == i ? 0 : n.unit) : r.align ? r.column + (a ? 0 : 1) : r.indented + (a ? 0 : n.unit)
            },
            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "--"
                }
            }
        }
    }
    ,
    68010: (e, t, n) => {
        function i(e) {
            return new RegExp("^((" + e.join(")|(") + "))\\b")
        }
        n.r(t),
            n.d(t, {
                webIDL: () => P
            });
        var r = ["Clamp", "Constructor", "EnforceRange", "Exposed", "ImplicitThis", "Global", "PrimaryGlobal", "LegacyArrayClass", "LegacyUnenumerableNamedProperties", "LenientThis", "NamedConstructor", "NewObject", "NoInterfaceObject", "OverrideBuiltins", "PutForwards", "Replaceable", "SameObject", "TreatNonObjectAsNull", "TreatNullAs", "EmptyString", "Unforgeable", "Unscopeable"]
            , a = i(r)
            , o = ["unsigned", "short", "long", "unrestricted", "float", "double", "boolean", "byte", "octet", "Promise", "ArrayBuffer", "DataView", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Float32Array", "Float64Array", "ByteString", "DOMString", "USVString", "sequence", "object", "RegExp", "Error", "DOMException", "FrozenArray", "any", "void"]
            , O = i(o)
            , s = ["attribute", "callback", "const", "deleter", "dictionary", "enum", "getter", "implements", "inherit", "interface", "iterable", "legacycaller", "maplike", "partial", "required", "serializer", "setlike", "setter", "static", "stringifier", "typedef", "optional", "readonly", "or"]
            , l = i(s)
            , c = ["true", "false", "Infinity", "NaN", "null"]
            , u = i(c)
            , d = i(["callback", "dictionary", "enum", "interface"])
            , h = i(["typedef"])
            , f = /^[:<=>?]/
            , p = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/
            , m = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/
            , g = /^_?[A-Za-z][0-9A-Z_a-z-]*/
            , Q = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/
            , $ = /^"[^"]*"/
            , b = /^\/\*.*?\*\//
            , y = /^\/\*.*/
            , S = /^.*?\*\//;
        const P = {
            name: "webidl",
            startState: function () {
                return {
                    inComment: !1,
                    lastToken: "",
                    startDef: !1,
                    endDef: !1
                }
            },
            token: function (e, t) {
                var n = function (e, t) {
                    if (e.eatSpace())
                        return null;
                    if (t.inComment)
                        return e.match(S) ? (t.inComment = !1,
                            "comment") : (e.skipToEnd(),
                                "comment");
                    if (e.match("//"))
                        return e.skipToEnd(),
                            "comment";
                    if (e.match(b))
                        return "comment";
                    if (e.match(y))
                        return t.inComment = !0,
                            "comment";
                    if (e.match(/^-?[0-9\.]/, !1) && (e.match(p) || e.match(m)))
                        return "number";
                    if (e.match($))
                        return "string";
                    if (t.startDef && e.match(g))
                        return "def";
                    if (t.endDef && e.match(Q))
                        return t.endDef = !1,
                            "def";
                    if (e.match(l))
                        return "keyword";
                    if (e.match(O)) {
                        var n = t.lastToken
                            , i = (e.match(/^\s*(.+?)\b/, !1) || [])[1];
                        return ":" === n || "implements" === n || "implements" === i || "=" === i ? "builtin" : "type"
                    }
                    return e.match(a) ? "builtin" : e.match(u) ? "atom" : e.match(g) ? "variable" : e.match(f) ? "operator" : (e.next(),
                        null)
                }(e, t);
                if (n) {
                    var i = e.current();
                    t.lastToken = i,
                        "keyword" === n ? (t.startDef = d.test(i),
                            t.endDef = t.endDef || h.test(i)) : t.startDef = !1
                }
                return n
            },
            languageData: {
                autocomplete: r.concat(o).concat(s).concat(c)
            }
        }
    }
    ,
    41655: (e, t, n) => {
        n.r(t),
            n.d(t, {
                xQuery: () => Q
            });
        var i = function () {
            function e(e) {
                return {
                    type: e,
                    style: "keyword"
                }
            }
            for (var t = e("operator"), n = {
                type: "atom",
                style: "atom"
            }, i = {
                type: "axis_specifier",
                style: "qualifier"
            }, r = {
                ",": {
                    type: "punctuation",
                    style: null
                }
            }, a = ["after", "all", "allowing", "ancestor", "ancestor-or-self", "any", "array", "as", "ascending", "at", "attribute", "base-uri", "before", "boundary-space", "by", "case", "cast", "castable", "catch", "child", "collation", "comment", "construction", "contains", "content", "context", "copy", "copy-namespaces", "count", "decimal-format", "declare", "default", "delete", "descendant", "descendant-or-self", "descending", "diacritics", "different", "distance", "document", "document-node", "element", "else", "empty", "empty-sequence", "encoding", "end", "entire", "every", "exactly", "except", "external", "first", "following", "following-sibling", "for", "from", "ftand", "ftnot", "ft-option", "ftor", "function", "fuzzy", "greatest", "group", "if", "import", "in", "inherit", "insensitive", "insert", "instance", "intersect", "into", "invoke", "is", "item", "language", "last", "lax", "least", "let", "levels", "lowercase", "map", "modify", "module", "most", "namespace", "next", "no", "node", "nodes", "no-inherit", "no-preserve", "not", "occurs", "of", "only", "option", "order", "ordered", "ordering", "paragraph", "paragraphs", "parent", "phrase", "preceding", "preceding-sibling", "preserve", "previous", "processing-instruction", "relationship", "rename", "replace", "return", "revalidation", "same", "satisfies", "schema", "schema-attribute", "schema-element", "score", "self", "sensitive", "sentence", "sentences", "sequence", "skip", "sliding", "some", "stable", "start", "stemming", "stop", "strict", "strip", "switch", "text", "then", "thesaurus", "times", "to", "transform", "treat", "try", "tumbling", "type", "typeswitch", "union", "unordered", "update", "updating", "uppercase", "using", "validate", "value", "variable", "version", "weight", "when", "where", "wildcards", "window", "with", "without", "word", "words", "xquery"], o = 0, O = a.length; o < O; o++)
                r[a[o]] = e(a[o]);
            var s = ["xs:anyAtomicType", "xs:anySimpleType", "xs:anyType", "xs:anyURI", "xs:base64Binary", "xs:boolean", "xs:byte", "xs:date", "xs:dateTime", "xs:dateTimeStamp", "xs:dayTimeDuration", "xs:decimal", "xs:double", "xs:duration", "xs:ENTITIES", "xs:ENTITY", "xs:float", "xs:gDay", "xs:gMonth", "xs:gMonthDay", "xs:gYear", "xs:gYearMonth", "xs:hexBinary", "xs:ID", "xs:IDREF", "xs:IDREFS", "xs:int", "xs:integer", "xs:item", "xs:java", "xs:language", "xs:long", "xs:Name", "xs:NCName", "xs:negativeInteger", "xs:NMTOKEN", "xs:NMTOKENS", "xs:nonNegativeInteger", "xs:nonPositiveInteger", "xs:normalizedString", "xs:NOTATION", "xs:numeric", "xs:positiveInteger", "xs:precisionDecimal", "xs:QName", "xs:short", "xs:string", "xs:time", "xs:token", "xs:unsignedByte", "xs:unsignedInt", "xs:unsignedLong", "xs:unsignedShort", "xs:untyped", "xs:untypedAtomic", "xs:yearMonthDuration"];
            for (o = 0,
                O = s.length; o < O; o++)
                r[s[o]] = n;
            var l = ["eq", "ne", "lt", "le", "gt", "ge", ":=", "=", ">", ">=", "<", "<=", ".", "|", "?", "and", "or", "div", "idiv", "mod", "*", "/", "+", "-"];
            for (o = 0,
                O = l.length; o < O; o++)
                r[l[o]] = t;
            var c = ["self::", "attribute::", "child::", "descendant::", "descendant-or-self::", "parent::", "ancestor::", "ancestor-or-self::", "following::", "preceding::", "following-sibling::", "preceding-sibling::"];
            for (o = 0,
                O = c.length; o < O; o++)
                r[c[o]] = i;
            return r
        }();
        function r(e, t, n) {
            return t.tokenize = n,
                n(e, t)
        }
        function a(e, t) {
            var n = e.next()
                , f = !1
                , Q = function (e) {
                    return '"' === e.current() ? e.match(/^[^\"]+\"\:/, !1) : "'" === e.current() && e.match(/^[^\"]+\'\:/, !1)
                }(e);
            if ("<" == n) {
                if (e.match("!--", !0))
                    return r(e, t, c);
                if (e.match("![CDATA", !1))
                    return t.tokenize = u,
                        "tag";
                if (e.match("?", !1))
                    return r(e, t, d);
                var $ = e.eat("/");
                e.eatSpace();
                for (var b, y = ""; b = e.eat(/[^\s\u00a0=<>\"\'\/?]/);)
                    y += b;
                return r(e, t, function (e, t) {
                    return function (n, i) {
                        return n.eatSpace(),
                            t && n.eat(">") ? (g(i),
                                i.tokenize = a,
                                "tag") : (n.eat("/") || m(i, {
                                    type: "tag",
                                    name: e,
                                    tokenize: a
                                }),
                                    n.eat(">") ? (i.tokenize = a,
                                        "tag") : (i.tokenize = l,
                                            "tag"))
                    }
                }(y, $))
            }
            if ("{" == n)
                return m(t, {
                    type: "codeblock"
                }),
                    null;
            if ("}" == n)
                return g(t),
                    null;
            if (h(t))
                return ">" == n ? "tag" : "/" == n && e.eat(">") ? (g(t),
                    "tag") : "variable";
            if (/\d/.test(n))
                return e.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/),
                    "atom";
            if ("(" === n && e.eat(":"))
                return m(t, {
                    type: "comment"
                }),
                    r(e, t, o);
            if (Q || '"' !== n && "'" !== n) {
                if ("$" === n)
                    return r(e, t, s);
                if (":" === n && e.eat("="))
                    return "keyword";
                if ("(" === n)
                    return m(t, {
                        type: "paren"
                    }),
                        null;
                if (")" === n)
                    return g(t),
                        null;
                if ("[" === n)
                    return m(t, {
                        type: "bracket"
                    }),
                        null;
                if ("]" === n)
                    return g(t),
                        null;
                var S = i.propertyIsEnumerable(n) && i[n];
                if (Q && '"' === n)
                    for (; '"' !== e.next();)
                        ;
                if (Q && "'" === n)
                    for (; "'" !== e.next();)
                        ;
                S || e.eatWhile(/[\w\$_-]/);
                var P = e.eat(":");
                !e.eat(":") && P && e.eatWhile(/[\w\$_-]/),
                    e.match(/^[ \t]*\(/, !1) && (f = !0);
                var v = e.current();
                return S = i.propertyIsEnumerable(v) && i[v],
                    f && !S && (S = {
                        type: "function_call",
                        style: "def"
                    }),
                    function (e) {
                        return p(e, "xmlconstructor")
                    }(t) ? (g(t),
                        "variable") : ("element" != v && "attribute" != v && "axis_specifier" != S.type || m(t, {
                            type: "xmlconstructor"
                        }),
                            S ? S.style : "variable")
            }
            return r(e, t, O(n))
        }
        function o(e, t) {
            for (var n, i = !1, r = !1, a = 0; n = e.next();) {
                if (")" == n && i) {
                    if (!(a > 0)) {
                        g(t);
                        break
                    }
                    a--
                } else
                    ":" == n && r && a++;
                i = ":" == n,
                    r = "(" == n
            }
            return "comment"
        }
        function O(e, t) {
            return function (n, i) {
                var r;
                if (function (e) {
                    return p(e, "string")
                }(i) && n.current() == e)
                    return g(i),
                        t && (i.tokenize = t),
                        "string";
                if (m(i, {
                    type: "string",
                    name: e,
                    tokenize: O(e, t)
                }),
                    n.match("{", !1) && f(i))
                    return i.tokenize = a,
                        "string";
                for (; r = n.next();) {
                    if (r == e) {
                        g(i),
                            t && (i.tokenize = t);
                        break
                    }
                    if (n.match("{", !1) && f(i))
                        return i.tokenize = a,
                            "string"
                }
                return "string"
            }
        }
        function s(e, t) {
            var n = /[\w\$_-]/;
            if (e.eat('"')) {
                for (; '"' !== e.next();)
                    ;
                e.eat(":")
            } else
                e.eatWhile(n),
                    e.match(":=", !1) || e.eat(":");
            return e.eatWhile(n),
                t.tokenize = a,
                "variable"
        }
        function l(e, t) {
            var n = e.next();
            return "/" == n && e.eat(">") ? (f(t) && g(t),
                h(t) && g(t),
                "tag") : ">" == n ? (f(t) && g(t),
                    "tag") : "=" == n ? null : '"' == n || "'" == n ? r(e, t, O(n, l)) : (f(t) || m(t, {
                        type: "attribute",
                        tokenize: l
                    }),
                        e.eat(/[a-zA-Z_:]/),
                        e.eatWhile(/[-a-zA-Z0-9_:.]/),
                        e.eatSpace(),
                        (e.match(">", !1) || e.match("/", !1)) && (g(t),
                            t.tokenize = a),
                        "attribute")
        }
        function c(e, t) {
            for (var n; n = e.next();)
                if ("-" == n && e.match("->", !0))
                    return t.tokenize = a,
                        "comment"
        }
        function u(e, t) {
            for (var n; n = e.next();)
                if ("]" == n && e.match("]", !0))
                    return t.tokenize = a,
                        "comment"
        }
        function d(e, t) {
            for (var n; n = e.next();)
                if ("?" == n && e.match(">", !0))
                    return t.tokenize = a,
                        "processingInstruction"
        }
        function h(e) {
            return p(e, "tag")
        }
        function f(e) {
            return p(e, "attribute")
        }
        function p(e, t) {
            return e.stack.length && e.stack[e.stack.length - 1].type == t
        }
        function m(e, t) {
            e.stack.push(t)
        }
        function g(e) {
            e.stack.pop();
            var t = e.stack.length && e.stack[e.stack.length - 1].tokenize;
            e.tokenize = t || a
        }
        const Q = {
            name: "xquery",
            startState: function () {
                return {
                    tokenize: a,
                    cc: [],
                    stack: []
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            languageData: {
                commentTokens: {
                    block: {
                        open: "(:",
                        close: ":)"
                    }
                }
            }
        }
    }
    ,
    74012: (e, t, n) => {
        n.r(t),
            n.d(t, {
                yacas: () => h
            });
        var i = function (e) {
            for (var t = {}, n = e.split(" "), i = 0; i < n.length; ++i)
                t[n[i]] = !0;
            return t
        }("Assert BackQuote D Defun Deriv For ForEach FromFile FromString Function Integrate InverseTaylor Limit LocalSymbols Macro MacroRule MacroRulePattern NIntegrate Rule RulePattern Subst TD TExplicitSum TSum Taylor Taylor1 Taylor2 Taylor3 ToFile ToStdout ToString TraceRule Until While")
            , r = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)"
            , a = new RegExp("(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)")
            , o = new RegExp(r)
            , O = new RegExp(r + "?_" + r)
            , s = new RegExp(r + "\\s*\\(");
        function l(e, t) {
            var n;
            if ('"' === (n = e.next()))
                return t.tokenize = c,
                    t.tokenize(e, t);
            if ("/" === n) {
                if (e.eat("*"))
                    return t.tokenize = u,
                        t.tokenize(e, t);
                if (e.eat("/"))
                    return e.skipToEnd(),
                        "comment"
            }
            e.backUp(1);
            var r = e.match(/^(\w+)\s*\(/, !1);
            null !== r && i.hasOwnProperty(r[1]) && t.scopes.push("bodied");
            var l = d(t);
            if ("bodied" === l && "[" === n && t.scopes.pop(),
                "[" !== n && "{" !== n && "(" !== n || t.scopes.push(n),
                ("[" === (l = d(t)) && "]" === n || "{" === l && "}" === n || "(" === l && ")" === n) && t.scopes.pop(),
                ";" === n)
                for (; "bodied" === l;)
                    t.scopes.pop(),
                        l = d(t);
            return e.match(/\d+ *#/, !0, !1) ? "qualifier" : e.match(a, !0, !1) ? "number" : e.match(O, !0, !1) ? "variableName.special" : e.match(/(?:\[|\]|{|}|\(|\))/, !0, !1) ? "bracket" : e.match(s, !0, !1) ? (e.backUp(1),
                "variableName.function") : e.match(o, !0, !1) ? "variable" : e.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, !0, !1) ? "operator" : "error"
        }
        function c(e, t) {
            for (var n, i = !1, r = !1; null != (n = e.next());) {
                if ('"' === n && !r) {
                    i = !0;
                    break
                }
                r = !r && "\\" === n
            }
            return i && !r && (t.tokenize = l),
                "string"
        }
        function u(e, t) {
            for (var n, i; null != (i = e.next());) {
                if ("*" === n && "/" === i) {
                    t.tokenize = l;
                    break
                }
                n = i
            }
            return "comment"
        }
        function d(e) {
            var t = null;
            return e.scopes.length > 0 && (t = e.scopes[e.scopes.length - 1]),
                t
        }
        const h = {
            name: "yacas",
            startState: function () {
                return {
                    tokenize: l,
                    scopes: []
                }
            },
            token: function (e, t) {
                return e.eatSpace() ? null : t.tokenize(e, t)
            },
            indent: function (e, t, n) {
                if (e.tokenize !== l && null !== e.tokenize)
                    return null;
                var i = 0;
                return "]" !== t && "];" !== t && "}" !== t && "};" !== t && ");" !== t || (i = -1),
                    (e.scopes.length + i) * n.unit
            },
            languageData: {
                electricInput: /[{}\[\]()\;]/,
                commentTokens: {
                    line: "//",
                    block: {
                        open: "/*",
                        close: "*/"
                    }
                }
            }
        }
    }
    ,
    52341: (e, t, n) => {
        function i(e) {
            var t, n;
            e ? (t = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i,
                n = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i) : (t = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i,
                    n = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i);
            var i = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i
                , r = /^(n?[zc]|p[oe]?|m)\b/i
                , a = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i
                , o = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;
            return {
                name: "z80",
                startState: function () {
                    return {
                        context: 0
                    }
                },
                token: function (O, s) {
                    if (O.column() || (s.context = 0),
                        O.eatSpace())
                        return null;
                    var l;
                    if (O.eatWhile(/\w/)) {
                        if (e && O.eat(".") && O.eatWhile(/\w/),
                            l = O.current(),
                            !O.indentation())
                            return O.match(o) ? "number" : null;
                        if ((1 == s.context || 4 == s.context) && i.test(l))
                            return s.context = 4,
                                "variable";
                        if (2 == s.context && r.test(l))
                            return s.context = 4,
                                "variableName.special";
                        if (t.test(l))
                            return s.context = 1,
                                "keyword";
                        if (n.test(l))
                            return s.context = 2,
                                "keyword";
                        if (4 == s.context && o.test(l))
                            return "number";
                        if (a.test(l))
                            return "error"
                    } else {
                        if (O.eat(";"))
                            return O.skipToEnd(),
                                "comment";
                        if (O.eat('"')) {
                            for (; (l = O.next()) && '"' != l;)
                                "\\" == l && O.next();
                            return "string"
                        }
                        if (O.eat("'")) {
                            if (O.match(/\\?.'/))
                                return "number"
                        } else if (O.eat(".") || O.sol() && O.eat("#")) {
                            if (s.context = 5,
                                O.eatWhile(/\w/))
                                return "def"
                        } else if (O.eat("$")) {
                            if (O.eatWhile(/[\da-f]/i))
                                return "number"
                        } else if (O.eat("%")) {
                            if (O.eatWhile(/[01]/))
                                return "number"
                        } else
                            O.next()
                    }
                    return null
                }
            }
        }
        n.r(t),
            n.d(t, {
                ez80: () => a,
                z80: () => r
            });
        const r = i(!1)
            , a = i(!0)
    }
    ,
    17471: (e, t, n) => {
        n.d(t, {
            $t: () => we,
            EY: () => i,
            FB: () => _e,
            Fh: () => v,
            Gu: () => w,
            Je: () => Pe,
            MK: () => P,
            Nb: () => K,
            OF: () => U,
            Pe: () => pe,
            QR: () => Xe,
            VR: () => X,
            YH: () => de,
            ZX: () => me,
            iR: () => k,
            kn: () => Ne,
            om: () => We,
            sU: () => N,
            sj: () => V,
            vB: () => Ze,
            vS: () => S,
            y$: () => De,
            zK: () => g
        });
        class i {
            lineAt(e) {
                if (e < 0 || e > this.length)
                    throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
                return this.lineInner(e, !1, 1, 0)
            }
            line(e) {
                if (e < 1 || e > this.lines)
                    throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
                return this.lineInner(e, !0, 1, 0)
            }
            replace(e, t, n) {
                [e, t] = d(this, e, t);
                let i = [];
                return this.decompose(0, e, i, 2),
                    n.length && n.decompose(0, n.length, i, 3),
                    this.decompose(t, this.length, i, 1),
                    a.from(i, this.length - (t - e) + n.length)
            }
            append(e) {
                return this.replace(this.length, this.length, e)
            }
            slice(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.length;
                [e, t] = d(this, e, t);
                let n = [];
                return this.decompose(e, t, n, 0),
                    a.from(n, t - e)
            }
            eq(e) {
                if (e == this)
                    return !0;
                if (e.length != this.length || e.lines != this.lines)
                    return !1;
                let t = this.scanIdentical(e, 1)
                    , n = this.length - this.scanIdentical(e, -1)
                    , i = new s(this)
                    , r = new s(e);
                for (let a = t, o = t; ;) {
                    if (i.next(a),
                        r.next(a),
                        a = 0,
                        i.lineBreak != r.lineBreak || i.done != r.done || i.value != r.value)
                        return !1;
                    if (o += i.value.length,
                        i.done || o >= n)
                        return !0
                }
            }
            iter() {
                return new s(this, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1)
            }
            iterRange(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.length;
                return new l(this, e, t)
            }
            iterLines(e, t) {
                let n;
                if (null == e)
                    n = this.iter();
                else {
                    null == t && (t = this.lines + 1);
                    let i = this.line(e).from;
                    n = this.iterRange(i, Math.max(i, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to))
                }
                return new c(n)
            }
            toString() {
                return this.sliceString(0)
            }
            toJSON() {
                let e = [];
                return this.flatten(e),
                    e
            }
            constructor() { }
            static of(e) {
                if (0 == e.length)
                    throw new RangeError("A document must have at least one line");
                return 1 != e.length || e[0] ? e.length <= 32 ? new r(e) : a.from(r.split(e, [])) : i.empty
            }
        }
        class r extends i {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function (e) {
                    let t = -1;
                    for (let n of e)
                        t += n.length + 1;
                    return t
                }(e);
                super(),
                    this.text = e,
                    this.length = t
            }
            get lines() {
                return this.text.length
            }
            get children() {
                return null
            }
            lineInner(e, t, n, i) {
                for (let r = 0; ; r++) {
                    let a = this.text[r]
                        , o = i + a.length;
                    if ((t ? n : o) >= e)
                        return new u(i, o, n, a);
                    i = o + 1,
                        n++
                }
            }
            decompose(e, t, n, i) {
                let a = e <= 0 && t >= this.length ? this : new r(O(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
                if (1 & i) {
                    let e = n.pop()
                        , t = o(a.text, e.text.slice(), 0, a.length);
                    if (t.length <= 32)
                        n.push(new r(t, e.length + a.length));
                    else {
                        let e = t.length >> 1;
                        n.push(new r(t.slice(0, e)), new r(t.slice(e)))
                    }
                } else
                    n.push(a)
            }
            replace(e, t, n) {
                if (!(n instanceof r))
                    return super.replace(e, t, n);
                [e, t] = d(this, e, t);
                let i = o(this.text, o(n.text, O(this.text, 0, e)), t)
                    , s = this.length + n.length - (t - e);
                return i.length <= 32 ? new r(i, s) : a.from(r.split(i, []), s)
            }
            sliceString(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.length
                    , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "\n";
                [e, t] = d(this, e, t);
                let i = "";
                for (let r = 0, a = 0; r <= t && a < this.text.length; a++) {
                    let o = this.text[a]
                        , O = r + o.length;
                    r > e && a && (i += n),
                        e < O && t > r && (i += o.slice(Math.max(0, e - r), t - r)),
                        r = O + 1
                }
                return i
            }
            flatten(e) {
                for (let t of this.text)
                    e.push(t)
            }
            scanIdentical() {
                return 0
            }
            static split(e, t) {
                let n = []
                    , i = -1;
                for (let a of e)
                    n.push(a),
                        i += a.length + 1,
                        32 == n.length && (t.push(new r(n, i)),
                            n = [],
                            i = -1);
                return i > -1 && t.push(new r(n, i)),
                    t
            }
        }
        class a extends i {
            constructor(e, t) {
                super(),
                    this.children = e,
                    this.length = t,
                    this.lines = 0;
                for (let n of e)
                    this.lines += n.lines
            }
            lineInner(e, t, n, i) {
                for (let r = 0; ; r++) {
                    let a = this.children[r]
                        , o = i + a.length
                        , O = n + a.lines - 1;
                    if ((t ? O : o) >= e)
                        return a.lineInner(e, t, n, i);
                    i = o + 1,
                        n = O + 1
                }
            }
            decompose(e, t, n, i) {
                for (let r = 0, a = 0; a <= t && r < this.children.length; r++) {
                    let o = this.children[r]
                        , O = a + o.length;
                    if (e <= O && t >= a) {
                        let r = i & ((a <= e ? 1 : 0) | (O >= t ? 2 : 0));
                        a >= e && O <= t && !r ? n.push(o) : o.decompose(e - a, t - a, n, r)
                    }
                    a = O + 1
                }
            }
            replace(e, t, n) {
                if ([e, t] = d(this, e, t),
                    n.lines < this.lines)
                    for (let i = 0, r = 0; i < this.children.length; i++) {
                        let o = this.children[i]
                            , O = r + o.length;
                        if (e >= r && t <= O) {
                            let s = o.replace(e - r, t - r, n)
                                , l = this.lines - o.lines + s.lines;
                            if (s.lines < l >> 4 && s.lines > l >> 6) {
                                let r = this.children.slice();
                                return r[i] = s,
                                    new a(r, this.length - (t - e) + n.length)
                            }
                            return super.replace(r, O, s)
                        }
                        r = O + 1
                    }
                return super.replace(e, t, n)
            }
            sliceString(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.length
                    , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "\n";
                [e, t] = d(this, e, t);
                let i = "";
                for (let r = 0, a = 0; r < this.children.length && a <= t; r++) {
                    let o = this.children[r]
                        , O = a + o.length;
                    a > e && r && (i += n),
                        e < O && t > a && (i += o.sliceString(e - a, t - a, n)),
                        a = O + 1
                }
                return i
            }
            flatten(e) {
                for (let t of this.children)
                    t.flatten(e)
            }
            scanIdentical(e, t) {
                if (!(e instanceof a))
                    return 0;
                let n = 0
                    , [i, r, o, O] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
                for (; ; i += t,
                    r += t) {
                    if (i == o || r == O)
                        return n;
                    let a = this.children[i]
                        , s = e.children[r];
                    if (a != s)
                        return n + a.scanIdentical(s, t);
                    n += a.length + 1
                }
            }
            static from(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.reduce(((e, t) => e + t.length + 1), -1)
                    , n = 0;
                for (let r of e)
                    n += r.lines;
                if (n < 32) {
                    let n = [];
                    for (let t of e)
                        t.flatten(n);
                    return new r(n, t)
                }
                let i = Math.max(32, n >> 5)
                    , o = i << 1
                    , O = i >> 1
                    , s = []
                    , l = 0
                    , c = -1
                    , u = [];
                function d(e) {
                    let t;
                    if (e.lines > o && e instanceof a)
                        for (let n of e.children)
                            d(n);
                    else
                        e.lines > O && (l > O || !l) ? (h(),
                            s.push(e)) : e instanceof r && l && (t = u[u.length - 1]) instanceof r && e.lines + t.lines <= 32 ? (l += e.lines,
                                c += e.length + 1,
                                u[u.length - 1] = new r(t.text.concat(e.text), t.length + 1 + e.length)) : (l + e.lines > i && h(),
                                    l += e.lines,
                                    c += e.length + 1,
                                    u.push(e))
                }
                function h() {
                    0 != l && (s.push(1 == u.length ? u[0] : a.from(u, c)),
                        c = -1,
                        l = u.length = 0)
                }
                for (let r of e)
                    d(r);
                return h(),
                    1 == s.length ? s[0] : new a(s, t)
            }
        }
        function o(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1e9;
            for (let r = 0, a = 0, o = !0; a < e.length && r <= i; a++) {
                let O = e[a]
                    , s = r + O.length;
                s >= n && (s > i && (O = O.slice(0, i - r)),
                    r < n && (O = O.slice(n - r)),
                    o ? (t[t.length - 1] += O,
                        o = !1) : t.push(O)),
                    r = s + 1
            }
            return t
        }
        function O(e, t, n) {
            return o(e, [""], t, n)
        }
        i.empty = new r([""], 0);
        class s {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                this.dir = t,
                    this.done = !1,
                    this.lineBreak = !1,
                    this.value = "",
                    this.nodes = [e],
                    this.offsets = [t > 0 ? 1 : (e instanceof r ? e.text.length : e.children.length) << 1]
            }
            nextInner(e, t) {
                for (this.done = this.lineBreak = !1; ;) {
                    let n = this.nodes.length - 1
                        , i = this.nodes[n]
                        , a = this.offsets[n]
                        , o = a >> 1
                        , O = i instanceof r ? i.text.length : i.children.length;
                    if (o == (t > 0 ? O : 0)) {
                        if (0 == n)
                            return this.done = !0,
                                this.value = "",
                                this;
                        t > 0 && this.offsets[n - 1]++,
                            this.nodes.pop(),
                            this.offsets.pop()
                    } else if ((1 & a) == (t > 0 ? 0 : 1)) {
                        if (this.offsets[n] += t,
                            0 == e)
                            return this.lineBreak = !0,
                                this.value = "\n",
                                this;
                        e--
                    } else if (i instanceof r) {
                        let r = i.text[o + (t < 0 ? -1 : 0)];
                        if (this.offsets[n] += t,
                            r.length > Math.max(0, e))
                            return this.value = 0 == e ? r : t > 0 ? r.slice(e) : r.slice(0, r.length - e),
                                this;
                        e -= r.length
                    } else {
                        let a = i.children[o + (t < 0 ? -1 : 0)];
                        e > a.length ? (e -= a.length,
                            this.offsets[n] += t) : (t < 0 && this.offsets[n]--,
                                this.nodes.push(a),
                                this.offsets.push(t > 0 ? 1 : (a instanceof r ? a.text.length : a.children.length) << 1))
                    }
                }
            }
            next() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                return e < 0 && (this.nextInner(-e, -this.dir),
                    e = this.value.length),
                    this.nextInner(e, this.dir)
            }
        }
        class l {
            constructor(e, t, n) {
                this.value = "",
                    this.done = !1,
                    this.cursor = new s(e, t > n ? -1 : 1),
                    this.pos = t > n ? e.length : 0,
                    this.from = Math.min(t, n),
                    this.to = Math.max(t, n)
            }
            nextInner(e, t) {
                if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
                    return this.value = "",
                        this.done = !0,
                        this;
                e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
                let n = t < 0 ? this.pos - this.from : this.to - this.pos;
                e > n && (e = n),
                    n -= e;
                let { value: i } = this.cursor.next(e);
                return this.pos += (i.length + e) * t,
                    this.value = i.length <= n ? i : t < 0 ? i.slice(i.length - n) : i.slice(0, n),
                    this.done = !this.value,
                    this
            }
            next() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)),
                    this.nextInner(e, this.cursor.dir)
            }
            get lineBreak() {
                return this.cursor.lineBreak && "" != this.value
            }
        }
        class c {
            constructor(e) {
                this.inner = e,
                    this.afterBreak = !0,
                    this.value = "",
                    this.done = !1
            }
            next() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0
                    , { done: t, lineBreak: n, value: i } = this.inner.next(e);
                return t && this.afterBreak ? (this.value = "",
                    this.afterBreak = !1) : t ? (this.done = !0,
                        this.value = "") : n ? this.afterBreak ? this.value = "" : (this.afterBreak = !0,
                            this.next()) : (this.value = i,
                                this.afterBreak = !1),
                    this
            }
            get lineBreak() {
                return !1
            }
        }
        "undefined" != typeof Symbol && (i.prototype[Symbol.iterator] = function () {
            return this.iter()
        }
            ,
            s.prototype[Symbol.iterator] = l.prototype[Symbol.iterator] = c.prototype[Symbol.iterator] = function () {
                return this
            }
        );
        class u {
            constructor(e, t, n, i) {
                this.from = e,
                    this.to = t,
                    this.number = n,
                    this.text = i
            }
            get length() {
                return this.to - this.from
            }
        }
        function d(e, t, n) {
            return [t = Math.max(0, Math.min(e.length, t)), Math.max(t, Math.min(e.length, n))]
        }
        let h = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e => e ? parseInt(e, 36) : 1));
        for (let Me = 1; Me < h.length; Me++)
            h[Me] += h[Me - 1];
        function f(e) {
            for (let t = 1; t < h.length; t += 2)
                if (h[t] > e)
                    return h[t - 1] <= e;
            return !1
        }
        function p(e) {
            return e >= 127462 && e <= 127487
        }
        const m = 8205;
        function g(e, t) {
            return (!(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? Q : $)(e, t, !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3])
        }
        function Q(e, t, n) {
            if (t == e.length)
                return t;
            t && b(e.charCodeAt(t)) && y(e.charCodeAt(t - 1)) && t--;
            let i = S(e, t);
            for (t += v(i); t < e.length;) {
                let r = S(e, t);
                if (i == m || r == m || n && f(r))
                    t += v(r),
                        i = r;
                else {
                    if (!p(r))
                        break;
                    {
                        let n = 0
                            , i = t - 2;
                        for (; i >= 0 && p(S(e, i));)
                            n++,
                                i -= 2;
                        if (n % 2 == 0)
                            break;
                        t += 2
                    }
                }
            }
            return t
        }
        function $(e, t, n) {
            for (; t > 0;) {
                let i = Q(e, t - 2, n);
                if (i < t)
                    return i;
                t--
            }
            return 0
        }
        function b(e) {
            return e >= 56320 && e < 57344
        }
        function y(e) {
            return e >= 55296 && e < 56320
        }
        function S(e, t) {
            let n = e.charCodeAt(t);
            if (!y(n) || t + 1 == e.length)
                return n;
            let i = e.charCodeAt(t + 1);
            return b(i) ? i - 56320 + (n - 55296 << 10) + 65536 : n
        }
        function P(e) {
            return e <= 65535 ? String.fromCharCode(e) : (e -= 65536,
                String.fromCharCode(55296 + (e >> 10), 56320 + (1023 & e)))
        }
        function v(e) {
            return e < 65536 ? 1 : 2
        }
        const x = /\r\n?|\n/;
        var k = function (e) {
            return e[e.Simple = 0] = "Simple",
                e[e.TrackDel = 1] = "TrackDel",
                e[e.TrackBefore = 2] = "TrackBefore",
                e[e.TrackAfter = 3] = "TrackAfter",
                e
        }(k || (k = {}));
        class w {
            constructor(e) {
                this.sections = e
            }
            get length() {
                let e = 0;
                for (let t = 0; t < this.sections.length; t += 2)
                    e += this.sections[t];
                return e
            }
            get newLength() {
                let e = 0;
                for (let t = 0; t < this.sections.length; t += 2) {
                    let n = this.sections[t + 1];
                    e += n < 0 ? this.sections[t] : n
                }
                return e
            }
            get empty() {
                return 0 == this.sections.length || 2 == this.sections.length && this.sections[1] < 0
            }
            iterGaps(e) {
                for (let t = 0, n = 0, i = 0; t < this.sections.length;) {
                    let r = this.sections[t++]
                        , a = this.sections[t++];
                    a < 0 ? (e(n, i, r),
                        i += r) : i += a,
                        n += r
                }
            }
            iterChangedRanges(e) {
                z(this, e, arguments.length > 1 && void 0 !== arguments[1] && arguments[1])
            }
            get invertedDesc() {
                let e = [];
                for (let t = 0; t < this.sections.length;) {
                    let n = this.sections[t++]
                        , i = this.sections[t++];
                    i < 0 ? e.push(n, i) : e.push(i, n)
                }
                return new w(e)
            }
            composeDesc(e) {
                return this.empty ? e : e.empty ? this : W(this, e)
            }
            mapDesc(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                return e.empty ? this : R(this, e, t)
            }
            mapPos(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1
                    , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : k.Simple
                    , i = 0
                    , r = 0;
                for (let a = 0; a < this.sections.length;) {
                    let o = this.sections[a++]
                        , O = this.sections[a++]
                        , s = i + o;
                    if (O < 0) {
                        if (s > e)
                            return r + (e - i);
                        r += o
                    } else {
                        if (n != k.Simple && s >= e && (n == k.TrackDel && i < e && s > e || n == k.TrackBefore && i < e || n == k.TrackAfter && s > e))
                            return null;
                        if (s > e || s == e && t < 0 && !o)
                            return e == i || t < 0 ? r : r + O;
                        r += O
                    }
                    i = s
                }
                if (e > i)
                    throw new RangeError(`Position ${e} is out of range for changeset of length ${i}`);
                return r
            }
            touchesRange(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                for (let n = 0, i = 0; n < this.sections.length && i <= t;) {
                    let r = i + this.sections[n++];
                    if (this.sections[n++] >= 0 && i <= t && r >= e)
                        return !(i < e && r > t) || "cover";
                    i = r
                }
                return !1
            }
            toString() {
                let e = "";
                for (let t = 0; t < this.sections.length;) {
                    let n = this.sections[t++]
                        , i = this.sections[t++];
                    e += (e ? " " : "") + n + (i >= 0 ? ":" + i : "")
                }
                return e
            }
            toJSON() {
                return this.sections
            }
            static fromJSON(e) {
                if (!Array.isArray(e) || e.length % 2 || e.some((e => "number" != typeof e)))
                    throw new RangeError("Invalid JSON representation of ChangeDesc");
                return new w(e)
            }
            static create(e) {
                return new w(e)
            }
        }
        class X extends w {
            constructor(e, t) {
                super(e),
                    this.inserted = t
            }
            apply(e) {
                if (this.length != e.length)
                    throw new RangeError("Applying change set to a document with the wrong length");
                return z(this, ((t, n, i, r, a) => e = e.replace(i, i + (n - t), a)), !1),
                    e
            }
            mapDesc(e) {
                return R(this, e, arguments.length > 1 && void 0 !== arguments[1] && arguments[1], !0)
            }
            invert(e) {
                let t = this.sections.slice()
                    , n = [];
                for (let r = 0, a = 0; r < t.length; r += 2) {
                    let o = t[r]
                        , O = t[r + 1];
                    if (O >= 0) {
                        t[r] = O,
                            t[r + 1] = o;
                        let s = r >> 1;
                        for (; n.length < s;)
                            n.push(i.empty);
                        n.push(o ? e.slice(a, a + o) : i.empty)
                    }
                    a += o
                }
                return new X(t, n)
            }
            compose(e) {
                return this.empty ? e : e.empty ? this : W(this, e, !0)
            }
            map(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                return e.empty ? this : R(this, e, t, !0)
            }
            iterChanges(e) {
                z(this, e, arguments.length > 1 && void 0 !== arguments[1] && arguments[1])
            }
            get desc() {
                return w.create(this.sections)
            }
            filter(e) {
                let t = []
                    , n = []
                    , i = []
                    , r = new Z(this);
                e: for (let a = 0, o = 0; ;) {
                    let O = a == e.length ? 1e9 : e[a++];
                    for (; o < O || o == O && 0 == r.len;) {
                        if (r.done)
                            break e;
                        let e = Math.min(r.len, O - o);
                        _(i, e, -1);
                        let a = -1 == r.ins ? -1 : 0 == r.off ? r.ins : 0;
                        _(t, e, a),
                            a > 0 && T(n, t, r.text),
                            r.forward(e),
                            o += e
                    }
                    let s = e[a++];
                    for (; o < s;) {
                        if (r.done)
                            break e;
                        let e = Math.min(r.len, s - o);
                        _(t, e, -1),
                            _(i, e, -1 == r.ins ? -1 : 0 == r.off ? r.ins : 0),
                            r.forward(e),
                            o += e
                    }
                }
                return {
                    changes: new X(t, n),
                    filtered: w.create(i)
                }
            }
            toJSON() {
                let e = [];
                for (let t = 0; t < this.sections.length; t += 2) {
                    let n = this.sections[t]
                        , i = this.sections[t + 1];
                    i < 0 ? e.push(n) : 0 == i ? e.push([n]) : e.push([n].concat(this.inserted[t >> 1].toJSON()))
                }
                return e
            }
            static of(e, t, n) {
                let r = []
                    , a = []
                    , o = 0
                    , O = null;
                function s() {
                    if (!(arguments.length > 0 && void 0 !== arguments[0] && arguments[0]) && !r.length)
                        return;
                    o < t && _(r, t - o, -1);
                    let e = new X(r, a);
                    O = O ? O.compose(e.map(O)) : e,
                        r = [],
                        a = [],
                        o = 0
                }
                return function e(l) {
                    if (Array.isArray(l))
                        for (let t of l)
                            e(t);
                    else if (l instanceof X) {
                        if (l.length != t)
                            throw new RangeError(`Mismatched change set length (got ${l.length}, expected ${t})`);
                        s(),
                            O = O ? O.compose(l.map(O)) : l
                    } else {
                        let { from: e, to: O = e, insert: c } = l;
                        if (e > O || e < 0 || O > t)
                            throw new RangeError(`Invalid change range ${e} to ${O} (in doc of length ${t})`);
                        let u = c ? "string" == typeof c ? i.of(c.split(n || x)) : c : i.empty
                            , d = u.length;
                        if (e == O && 0 == d)
                            return;
                        e < o && s(),
                            e > o && _(r, e - o, -1),
                            _(r, O - e, d),
                            T(a, r, u),
                            o = O
                    }
                }(e),
                    s(!O),
                    O
            }
            static empty(e) {
                return new X(e ? [e, -1] : [], [])
            }
            static fromJSON(e) {
                if (!Array.isArray(e))
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                let t = []
                    , n = [];
                for (let r = 0; r < e.length; r++) {
                    let a = e[r];
                    if ("number" == typeof a)
                        t.push(a, -1);
                    else {
                        if (!Array.isArray(a) || "number" != typeof a[0] || a.some(((e, t) => t && "string" != typeof e)))
                            throw new RangeError("Invalid JSON representation of ChangeSet");
                        if (1 == a.length)
                            t.push(a[0], 0);
                        else {
                            for (; n.length < r;)
                                n.push(i.empty);
                            n[r] = i.of(a.slice(1)),
                                t.push(a[0], n[r].length)
                        }
                    }
                }
                return new X(t, n)
            }
            static createSet(e, t) {
                return new X(e, t)
            }
        }
        function _(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (0 == t && n <= 0)
                return;
            let r = e.length - 2;
            r >= 0 && n <= 0 && n == e[r + 1] ? e[r] += t : 0 == t && 0 == e[r] ? e[r + 1] += n : i ? (e[r] += t,
                e[r + 1] += n) : e.push(t, n)
        }
        function T(e, t, n) {
            if (0 == n.length)
                return;
            let r = t.length - 2 >> 1;
            if (r < e.length)
                e[e.length - 1] = e[e.length - 1].append(n);
            else {
                for (; e.length < r;)
                    e.push(i.empty);
                e.push(n)
            }
        }
        function z(e, t, n) {
            let r = e.inserted;
            for (let a = 0, o = 0, O = 0; O < e.sections.length;) {
                let s = e.sections[O++]
                    , l = e.sections[O++];
                if (l < 0)
                    a += s,
                        o += s;
                else {
                    let c = a
                        , u = o
                        , d = i.empty;
                    for (; c += s,
                        u += l,
                        l && r && (d = d.append(r[O - 2 >> 1])),
                        !(n || O == e.sections.length || e.sections[O + 1] < 0);)
                        s = e.sections[O++],
                            l = e.sections[O++];
                    t(a, c, o, u, d),
                        a = c,
                        o = u
                }
            }
        }
        function R(e, t, n) {
            let i = []
                , r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? [] : null
                , a = new Z(e)
                , o = new Z(t);
            for (let O = -1; ;)
                if (-1 == a.ins && -1 == o.ins) {
                    let e = Math.min(a.len, o.len);
                    _(i, e, -1),
                        a.forward(e),
                        o.forward(e)
                } else if (o.ins >= 0 && (a.ins < 0 || O == a.i || 0 == a.off && (o.len < a.len || o.len == a.len && !n))) {
                    let e = o.len;
                    for (_(i, o.ins, -1); e;) {
                        let t = Math.min(a.len, e);
                        a.ins >= 0 && O < a.i && a.len <= t && (_(i, 0, a.ins),
                            r && T(r, i, a.text),
                            O = a.i),
                            a.forward(t),
                            e -= t
                    }
                    o.next()
                } else {
                    if (!(a.ins >= 0)) {
                        if (a.done && o.done)
                            return r ? X.createSet(i, r) : w.create(i);
                        throw new Error("Mismatched change set lengths")
                    }
                    {
                        let e = 0
                            , t = a.len;
                        for (; t;)
                            if (-1 == o.ins) {
                                let n = Math.min(t, o.len);
                                e += n,
                                    t -= n,
                                    o.forward(n)
                            } else {
                                if (!(0 == o.ins && o.len < t))
                                    break;
                                t -= o.len,
                                    o.next()
                            }
                        _(i, e, O < a.i ? a.ins : 0),
                            r && O < a.i && T(r, i, a.text),
                            O = a.i,
                            a.forward(a.len - t)
                    }
                }
        }
        function W(e, t) {
            let n = []
                , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2] ? [] : null
                , r = new Z(e)
                , a = new Z(t);
            for (let o = !1; ;) {
                if (r.done && a.done)
                    return i ? X.createSet(n, i) : w.create(n);
                if (0 == r.ins)
                    _(n, r.len, 0, o),
                        r.next();
                else if (0 != a.len || a.done) {
                    if (r.done || a.done)
                        throw new Error("Mismatched change set lengths");
                    {
                        let e = Math.min(r.len2, a.len)
                            , t = n.length;
                        if (-1 == r.ins) {
                            let t = -1 == a.ins ? -1 : a.off ? 0 : a.ins;
                            _(n, e, t, o),
                                i && t && T(i, n, a.text)
                        } else
                            -1 == a.ins ? (_(n, r.off ? 0 : r.len, e, o),
                                i && T(i, n, r.textBit(e))) : (_(n, r.off ? 0 : r.len, a.off ? 0 : a.ins, o),
                                    i && !a.off && T(i, n, a.text));
                        o = (r.ins > e || a.ins >= 0 && a.len > e) && (o || n.length > t),
                            r.forward2(e),
                            a.forward(e)
                    }
                } else
                    _(n, 0, a.ins, o),
                        i && T(i, n, a.text),
                        a.next()
            }
        }
        class Z {
            constructor(e) {
                this.set = e,
                    this.i = 0,
                    this.next()
            }
            next() {
                let { sections: e } = this.set;
                this.i < e.length ? (this.len = e[this.i++],
                    this.ins = e[this.i++]) : (this.len = 0,
                        this.ins = -2),
                    this.off = 0
            }
            get done() {
                return -2 == this.ins
            }
            get len2() {
                return this.ins < 0 ? this.len : this.ins
            }
            get text() {
                let { inserted: e } = this.set
                    , t = this.i - 2 >> 1;
                return t >= e.length ? i.empty : e[t]
            }
            textBit(e) {
                let { inserted: t } = this.set
                    , n = this.i - 2 >> 1;
                return n >= t.length && !e ? i.empty : t[n].slice(this.off, null == e ? void 0 : this.off + e)
            }
            forward(e) {
                e == this.len ? this.next() : (this.len -= e,
                    this.off += e)
            }
            forward2(e) {
                -1 == this.ins ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e,
                    this.off += e)
            }
        }
        class q {
            constructor(e, t, n) {
                this.from = e,
                    this.to = t,
                    this.flags = n
            }
            get anchor() {
                return 32 & this.flags ? this.to : this.from
            }
            get head() {
                return 32 & this.flags ? this.from : this.to
            }
            get empty() {
                return this.from == this.to
            }
            get assoc() {
                return 8 & this.flags ? -1 : 16 & this.flags ? 1 : 0
            }
            get bidiLevel() {
                let e = 7 & this.flags;
                return 7 == e ? null : e
            }
            get goalColumn() {
                let e = this.flags >> 6;
                return 16777215 == e ? void 0 : e
            }
            map(e) {
                let t, n, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
                return this.empty ? t = n = e.mapPos(this.from, i) : (t = e.mapPos(this.from, 1),
                    n = e.mapPos(this.to, -1)),
                    t == this.from && n == this.to ? this : new q(t, n, this.flags)
            }
            extend(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                if (e <= this.anchor && t >= this.anchor)
                    return U.range(e, t);
                let n = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
                return U.range(this.anchor, n)
            }
            eq(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                return this.anchor == e.anchor && this.head == e.head && (!t || !this.empty || this.assoc == e.assoc)
            }
            toJSON() {
                return {
                    anchor: this.anchor,
                    head: this.head
                }
            }
            static fromJSON(e) {
                if (!e || "number" != typeof e.anchor || "number" != typeof e.head)
                    throw new RangeError("Invalid JSON representation for SelectionRange");
                return U.range(e.anchor, e.head)
            }
            static create(e, t, n) {
                return new q(e, t, n)
            }
        }
        class U {
            constructor(e, t) {
                this.ranges = e,
                    this.mainIndex = t
            }
            map(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
                return e.empty ? this : U.create(this.ranges.map((n => n.map(e, t))), this.mainIndex)
            }
            eq(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
                    return !1;
                for (let n = 0; n < this.ranges.length; n++)
                    if (!this.ranges[n].eq(e.ranges[n], t))
                        return !1;
                return !0
            }
            get main() {
                return this.ranges[this.mainIndex]
            }
            asSingle() {
                return 1 == this.ranges.length ? this : new U([this.main], 0)
            }
            addRange(e) {
                let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                return U.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1)
            }
            replaceRange(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.mainIndex
                    , n = this.ranges.slice();
                return n[t] = e,
                    U.create(n, this.mainIndex)
            }
            toJSON() {
                return {
                    ranges: this.ranges.map((e => e.toJSON())),
                    main: this.mainIndex
                }
            }
            static fromJSON(e) {
                if (!e || !Array.isArray(e.ranges) || "number" != typeof e.main || e.main >= e.ranges.length)
                    throw new RangeError("Invalid JSON representation for EditorSelection");
                return new U(e.ranges.map((e => q.fromJSON(e))), e.main)
            }
            static single(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                return new U([U.range(e, t)], 0)
            }
            static create(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (0 == e.length)
                    throw new RangeError("A selection needs at least one range");
                for (let n = 0, i = 0; i < e.length; i++) {
                    let r = e[i];
                    if (r.empty ? r.from <= n : r.from < n)
                        return U.normalized(e.slice(), t);
                    n = r.to
                }
                return new U(e, t)
            }
            static cursor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = arguments.length > 2 ? arguments[2] : void 0
                    , i = arguments.length > 3 ? arguments[3] : void 0;
                return q.create(e, e, (0 == t ? 0 : t < 0 ? 8 : 16) | (null == n ? 7 : Math.min(6, n)) | (null !== i && void 0 !== i ? i : 16777215) << 6)
            }
            static range(e, t, n, i) {
                let r = (null !== n && void 0 !== n ? n : 16777215) << 6 | (null == i ? 7 : Math.min(6, i));
                return t < e ? q.create(t, e, 48 | r) : q.create(e, t, (t > e ? 8 : 0) | r)
            }
            static normalized(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = e[t];
                e.sort(((e, t) => e.from - t.from)),
                    t = e.indexOf(n);
                for (let i = 1; i < e.length; i++) {
                    let n = e[i]
                        , r = e[i - 1];
                    if (n.empty ? n.from <= r.to : n.from < r.to) {
                        let a = r.from
                            , o = Math.max(n.to, r.to);
                        i <= t && t--,
                            e.splice(--i, 2, n.anchor > n.head ? U.range(o, a) : U.range(a, o))
                    }
                }
                return new U(e, t)
            }
        }
        function Y(e, t) {
            for (let n of e.ranges)
                if (n.to > t)
                    throw new RangeError("Selection points outside of document")
        }
        let A = 0;
        class V {
            constructor(e, t, n, i, r) {
                this.combine = e,
                    this.compareInput = t,
                    this.compare = n,
                    this.isStatic = i,
                    this.id = A++,
                    this.default = e([]),
                    this.extensions = "function" == typeof r ? r(this) : r
            }
            get reader() {
                return this
            }
            static define() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return new V(e.combine || (e => e), e.compareInput || ((e, t) => e === t), e.compare || (e.combine ? (e, t) => e === t : E), !!e.static, e.enables)
            }
            of(e) {
                return new j([], this, 0, e)
            }
            compute(e, t) {
                if (this.isStatic)
                    throw new Error("Can't compute a static facet");
                return new j(e, this, 1, t)
            }
            computeN(e, t) {
                if (this.isStatic)
                    throw new Error("Can't compute a static facet");
                return new j(e, this, 2, t)
            }
            from(e, t) {
                return t || (t = e => e),
                    this.compute([e], (n => t(n.field(e))))
            }
        }
        function E(e, t) {
            return e == t || e.length == t.length && e.every(((e, n) => e === t[n]))
        }
        class j {
            constructor(e, t, n, i) {
                this.dependencies = e,
                    this.facet = t,
                    this.type = n,
                    this.value = i,
                    this.id = A++
            }
            dynamicSlot(e) {
                var t;
                let n = this.value
                    , i = this.facet.compareInput
                    , r = this.id
                    , a = e[r] >> 1
                    , o = 2 == this.type
                    , O = !1
                    , s = !1
                    , l = [];
                for (let c of this.dependencies)
                    "doc" == c ? O = !0 : "selection" == c ? s = !0 : 0 == (1 & (null !== (t = e[c.id]) && void 0 !== t ? t : 1)) && l.push(e[c.id]);
                return {
                    create: e => (e.values[a] = n(e),
                        1),
                    update(e, t) {
                        if (O && t.docChanged || s && (t.docChanged || t.selection) || G(e, l)) {
                            let t = n(e);
                            if (o ? !C(t, e.values[a], i) : !i(t, e.values[a]))
                                return e.values[a] = t,
                                    1
                        }
                        return 0
                    },
                    reconfigure: (e, t) => {
                        let O, s = t.config.address[r];
                        if (null != s) {
                            let r = re(t, s);
                            if (this.dependencies.every((n => n instanceof V ? t.facet(n) === e.facet(n) : !(n instanceof N) || t.field(n, !1) == e.field(n, !1))) || (o ? C(O = n(e), r, i) : i(O = n(e), r)))
                                return e.values[a] = r,
                                    0
                        } else
                            O = n(e);
                        return e.values[a] = O,
                            1
                    }
                }
            }
        }
        function C(e, t, n) {
            if (e.length != t.length)
                return !1;
            for (let i = 0; i < e.length; i++)
                if (!n(e[i], t[i]))
                    return !1;
            return !0
        }
        function G(e, t) {
            let n = !1;
            for (let i of t)
                1 & ie(e, i) && (n = !0);
            return n
        }
        function I(e, t, n) {
            let i = n.map((t => e[t.id]))
                , r = n.map((e => e.type))
                , a = i.filter((e => !(1 & e)))
                , o = e[t.id] >> 1;
            function O(e) {
                let n = [];
                for (let t = 0; t < i.length; t++) {
                    let a = re(e, i[t]);
                    if (2 == r[t])
                        for (let e of a)
                            n.push(e);
                    else
                        n.push(a)
                }
                return t.combine(n)
            }
            return {
                create(e) {
                    for (let t of i)
                        ie(e, t);
                    return e.values[o] = O(e),
                        1
                },
                update(e, n) {
                    if (!G(e, a))
                        return 0;
                    let i = O(e);
                    return t.compare(i, e.values[o]) ? 0 : (e.values[o] = i,
                        1)
                },
                reconfigure(e, r) {
                    let a = G(e, i)
                        , s = r.config.facets[t.id]
                        , l = r.facet(t);
                    if (s && !a && E(n, s))
                        return e.values[o] = l,
                            0;
                    let c = O(e);
                    return t.compare(c, l) ? (e.values[o] = l,
                        0) : (e.values[o] = c,
                            1)
                }
            }
        }
        const D = V.define({
            static: !0
        });
        class N {
            constructor(e, t, n, i, r) {
                this.id = e,
                    this.createF = t,
                    this.updateF = n,
                    this.compareF = i,
                    this.spec = r,
                    this.provides = void 0
            }
            static define(e) {
                let t = new N(A++, e.create, e.update, e.compare || ((e, t) => e === t), e);
                return e.provide && (t.provides = e.provide(t)),
                    t
            }
            create(e) {
                let t = e.facet(D).find((e => e.field == this));
                return ((null === t || void 0 === t ? void 0 : t.create) || this.createF)(e)
            }
            slot(e) {
                let t = e[this.id] >> 1;
                return {
                    create: e => (e.values[t] = this.create(e),
                        1),
                    update: (e, n) => {
                        let i = e.values[t]
                            , r = this.updateF(i, n);
                        return this.compareF(i, r) ? 0 : (e.values[t] = r,
                            1)
                    }
                    ,
                    reconfigure: (e, n) => null != n.config.address[this.id] ? (e.values[t] = n.field(this),
                        0) : (e.values[t] = this.create(e),
                            1)
                }
            }
            init(e) {
                return [this, D.of({
                    field: this,
                    create: e
                })]
            }
            get extension() {
                return this
            }
        }
        const L = 4
            , M = 3
            , F = 2
            , B = 1;
        function H(e) {
            return t => new J(t, e)
        }
        const K = {
            highest: H(0),
            high: H(B),
            default: H(F),
            low: H(M),
            lowest: H(L)
        };
        class J {
            constructor(e, t) {
                this.inner = e,
                    this.prec = t
            }
        }
        class ee {
            of(e) {
                return new te(this, e)
            }
            reconfigure(e) {
                return ee.reconfigure.of({
                    compartment: this,
                    extension: e
                })
            }
            get(e) {
                return e.config.compartments.get(this)
            }
        }
        class te {
            constructor(e, t) {
                this.compartment = e,
                    this.inner = t
            }
        }
        class ne {
            constructor(e, t, n, i, r, a) {
                for (this.base = e,
                    this.compartments = t,
                    this.dynamicSlots = n,
                    this.address = i,
                    this.staticValues = r,
                    this.facets = a,
                    this.statusTemplate = []; this.statusTemplate.length < n.length;)
                    this.statusTemplate.push(0)
            }
            staticFacet(e) {
                let t = this.address[e.id];
                return null == t ? e.default : this.staticValues[t >> 1]
            }
            static resolve(e, t, n) {
                let i = []
                    , r = Object.create(null)
                    , a = new Map;
                for (let u of function (e, t, n) {
                    let i = [[], [], [], [], []]
                        , r = new Map;
                    function a(e, o) {
                        let O = r.get(e);
                        if (null != O) {
                            if (O <= o)
                                return;
                            let t = i[O].indexOf(e);
                            t > -1 && i[O].splice(t, 1),
                                e instanceof te && n.delete(e.compartment)
                        }
                        if (r.set(e, o),
                            Array.isArray(e))
                            for (let t of e)
                                a(t, o);
                        else if (e instanceof te) {
                            if (n.has(e.compartment))
                                throw new RangeError("Duplicate use of compartment in extensions");
                            let i = t.get(e.compartment) || e.inner;
                            n.set(e.compartment, i),
                                a(i, o)
                        } else if (e instanceof J)
                            a(e.inner, e.prec);
                        else if (e instanceof N)
                            i[o].push(e),
                                e.provides && a(e.provides, o);
                        else if (e instanceof j)
                            i[o].push(e),
                                e.facet.extensions && a(e.facet.extensions, F);
                        else {
                            let t = e.extension;
                            if (!t)
                                throw new Error(`Unrecognized extension value in extension set (${e}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                            a(t, o)
                        }
                    }
                    return a(e, F),
                        i.reduce(((e, t) => e.concat(t)))
                }(e, t, a))
                    u instanceof N ? i.push(u) : (r[u.facet.id] || (r[u.facet.id] = [])).push(u);
                let o = Object.create(null)
                    , O = []
                    , s = [];
                for (let u of i)
                    o[u.id] = s.length << 1,
                        s.push((e => u.slot(e)));
                let l = null === n || void 0 === n ? void 0 : n.config.facets;
                for (let u in r) {
                    let e = r[u]
                        , t = e[0].facet
                        , i = l && l[u] || [];
                    if (e.every((e => 0 == e.type)))
                        if (o[t.id] = O.length << 1 | 1,
                            E(i, e))
                            O.push(n.facet(t));
                        else {
                            let i = t.combine(e.map((e => e.value)));
                            O.push(n && t.compare(i, n.facet(t)) ? n.facet(t) : i)
                        }
                    else {
                        for (let t of e)
                            0 == t.type ? (o[t.id] = O.length << 1 | 1,
                                O.push(t.value)) : (o[t.id] = s.length << 1,
                                    s.push((e => t.dynamicSlot(e))));
                        o[t.id] = s.length << 1,
                            s.push((n => I(n, t, e)))
                    }
                }
                let c = s.map((e => e(o)));
                return new ne(e, a, c, o, O, r)
            }
        }
        function ie(e, t) {
            if (1 & t)
                return 2;
            let n = t >> 1
                , i = e.status[n];
            if (4 == i)
                throw new Error("Cyclic dependency between fields and/or facets");
            if (2 & i)
                return i;
            e.status[n] = 4;
            let r = e.computeSlot(e, e.config.dynamicSlots[n]);
            return e.status[n] = 2 | r
        }
        function re(e, t) {
            return 1 & t ? e.config.staticValues[t >> 1] : e.values[t >> 1]
        }
        const ae = V.define()
            , oe = V.define({
                combine: e => e.some((e => e)),
                static: !0
            })
            , Oe = V.define({
                combine: e => e.length ? e[0] : void 0,
                static: !0
            })
            , se = V.define()
            , le = V.define()
            , ce = V.define()
            , ue = V.define({
                combine: e => !!e.length && e[0]
            });
        class de {
            constructor(e, t) {
                this.type = e,
                    this.value = t
            }
            static define() {
                return new he
            }
        }
        class he {
            of(e) {
                return new de(this, e)
            }
        }
        class fe {
            constructor(e) {
                this.map = e
            }
            of(e) {
                return new pe(this, e)
            }
        }
        class pe {
            constructor(e, t) {
                this.type = e,
                    this.value = t
            }
            map(e) {
                let t = this.type.map(this.value, e);
                return void 0 === t ? void 0 : t == this.value ? this : new pe(this.type, t)
            }
            is(e) {
                return this.type == e
            }
            static define() {
                return new fe((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).map || (e => e))
            }
            static mapEffects(e, t) {
                if (!e.length)
                    return e;
                let n = [];
                for (let i of e) {
                    let e = i.map(t);
                    e && n.push(e)
                }
                return n
            }
        }
        pe.reconfigure = pe.define(),
            pe.appendConfig = pe.define();
        class me {
            constructor(e, t, n, i, r, a) {
                this.startState = e,
                    this.changes = t,
                    this.selection = n,
                    this.effects = i,
                    this.annotations = r,
                    this.scrollIntoView = a,
                    this._doc = null,
                    this._state = null,
                    n && Y(n, t.newLength),
                    r.some((e => e.type == me.time)) || (this.annotations = r.concat(me.time.of(Date.now())))
            }
            static create(e, t, n, i, r, a) {
                return new me(e, t, n, i, r, a)
            }
            get newDoc() {
                return this._doc || (this._doc = this.changes.apply(this.startState.doc))
            }
            get newSelection() {
                return this.selection || this.startState.selection.map(this.changes)
            }
            get state() {
                return this._state || this.startState.applyTransaction(this),
                    this._state
            }
            annotation(e) {
                for (let t of this.annotations)
                    if (t.type == e)
                        return t.value
            }
            get docChanged() {
                return !this.changes.empty
            }
            get reconfigured() {
                return this.startState.config != this.state.config
            }
            isUserEvent(e) {
                let t = this.annotation(me.userEvent);
                return !(!t || !(t == e || t.length > e.length && t.slice(0, e.length) == e && "." == t[e.length]))
            }
        }
        function ge(e, t) {
            let n = [];
            for (let i = 0, r = 0; ;) {
                let a, o;
                if (i < e.length && (r == t.length || t[r] >= e[i]))
                    a = e[i++],
                        o = e[i++];
                else {
                    if (!(r < t.length))
                        return n;
                    a = t[r++],
                        o = t[r++]
                }
                !n.length || n[n.length - 1] < a ? n.push(a, o) : n[n.length - 1] < o && (n[n.length - 1] = o)
            }
        }
        function Qe(e, t, n) {
            var i;
            let r, a, o;
            return n ? (r = t.changes,
                a = X.empty(t.changes.length),
                o = e.changes.compose(t.changes)) : (r = t.changes.map(e.changes),
                    a = e.changes.mapDesc(t.changes, !0),
                    o = e.changes.compose(r)),
            {
                changes: o,
                selection: t.selection ? t.selection.map(a) : null === (i = e.selection) || void 0 === i ? void 0 : i.map(r),
                effects: pe.mapEffects(e.effects, r).concat(pe.mapEffects(t.effects, a)),
                annotations: e.annotations.length ? e.annotations.concat(t.annotations) : t.annotations,
                scrollIntoView: e.scrollIntoView || t.scrollIntoView
            }
        }
        function $e(e, t, n) {
            let i = t.selection
                , r = Se(t.annotations);
            return t.userEvent && (r = r.concat(me.userEvent.of(t.userEvent))),
            {
                changes: t.changes instanceof X ? t.changes : X.of(t.changes || [], n, e.facet(Oe)),
                selection: i && (i instanceof U ? i : U.single(i.anchor, i.head)),
                effects: Se(t.effects),
                annotations: r,
                scrollIntoView: !!t.scrollIntoView
            }
        }
        function be(e, t, n) {
            let i = $e(e, t.length ? t[0] : {}, e.doc.length);
            t.length && !1 === t[0].filter && (n = !1);
            for (let a = 1; a < t.length; a++) {
                !1 === t[a].filter && (n = !1);
                let r = !!t[a].sequential;
                i = Qe(i, $e(e, t[a], r ? i.changes.newLength : e.doc.length), r)
            }
            let r = me.create(e, i.changes, i.selection, i.effects, i.annotations, i.scrollIntoView);
            return function (e) {
                let t = e.startState
                    , n = t.facet(ce)
                    , i = e;
                for (let r = n.length - 1; r >= 0; r--) {
                    let a = n[r](e);
                    a && Object.keys(a).length && (i = Qe(i, $e(t, a, e.changes.newLength), !0))
                }
                return i == e ? e : me.create(t, e.changes, e.selection, i.effects, i.annotations, i.scrollIntoView)
            }(n ? function (e) {
                let t = e.startState
                    , n = !0;
                for (let r of t.facet(se)) {
                    let t = r(e);
                    if (!1 === t) {
                        n = !1;
                        break
                    }
                    Array.isArray(t) && (n = !0 === n ? t : ge(n, t))
                }
                if (!0 !== n) {
                    let i, r;
                    if (!1 === n)
                        r = e.changes.invertedDesc,
                            i = X.empty(t.doc.length);
                    else {
                        let t = e.changes.filter(n);
                        i = t.changes,
                            r = t.filtered.mapDesc(t.changes).invertedDesc
                    }
                    e = me.create(t, i, e.selection && e.selection.map(r), pe.mapEffects(e.effects, r), e.annotations, e.scrollIntoView)
                }
                let i = t.facet(le);
                for (let r = i.length - 1; r >= 0; r--) {
                    let n = i[r](e);
                    e = n instanceof me ? n : Array.isArray(n) && 1 == n.length && n[0] instanceof me ? n[0] : be(t, Se(n), !1)
                }
                return e
            }(r) : r)
        }
        me.time = de.define(),
            me.userEvent = de.define(),
            me.addToHistory = de.define(),
            me.remote = de.define();
        const ye = [];
        function Se(e) {
            return null == e ? ye : Array.isArray(e) ? e : [e]
        }
        var Pe = function (e) {
            return e[e.Word = 0] = "Word",
                e[e.Space = 1] = "Space",
                e[e.Other = 2] = "Other",
                e
        }(Pe || (Pe = {}));
        const ve = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
        let xe;
        try {
            xe = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u")
        } catch (Le) { }
        function ke(e) {
            return t => {
                if (!/\S/.test(t))
                    return Pe.Space;
                if (function (e) {
                    if (xe)
                        return xe.test(e);
                    for (let t = 0; t < e.length; t++) {
                        let n = e[t];
                        if (/\w/.test(n) || n > "\x80" && (n.toUpperCase() != n.toLowerCase() || ve.test(n)))
                            return !0
                    }
                    return !1
                }(t))
                    return Pe.Word;
                for (let n = 0; n < e.length; n++)
                    if (t.indexOf(e[n]) > -1)
                        return Pe.Word;
                return Pe.Other
            }
        }
        class we {
            constructor(e, t, n, i, r, a) {
                this.config = e,
                    this.doc = t,
                    this.selection = n,
                    this.values = i,
                    this.status = e.statusTemplate.slice(),
                    this.computeSlot = r,
                    a && (a._state = this);
                for (let o = 0; o < this.config.dynamicSlots.length; o++)
                    ie(this, o << 1);
                this.computeSlot = null
            }
            field(e) {
                let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                    , n = this.config.address[e.id];
                if (null != n)
                    return ie(this, n),
                        re(this, n);
                if (t)
                    throw new RangeError("Field is not present in this state")
            }
            update() {
                for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
                    t[n] = arguments[n];
                return be(this, t, !0)
            }
            applyTransaction(e) {
                let t, n = this.config, { base: i, compartments: r } = n;
                for (let o of e.effects)
                    o.is(ee.reconfigure) ? (n && (r = new Map,
                        n.compartments.forEach(((e, t) => r.set(t, e))),
                        n = null),
                        r.set(o.value.compartment, o.value.extension)) : o.is(pe.reconfigure) ? (n = null,
                            i = o.value) : o.is(pe.appendConfig) && (n = null,
                                i = Se(i).concat(o.value));
                if (n)
                    t = e.startState.values.slice();
                else {
                    n = ne.resolve(i, r, this),
                        t = new we(n, this.doc, this.selection, n.dynamicSlots.map((() => null)), ((e, t) => t.reconfigure(e, this)), null).values
                }
                let a = e.startState.facet(oe) ? e.newSelection : e.newSelection.asSingle();
                new we(n, e.newDoc, a, t, ((t, n) => n.update(t, e)), e)
            }
            replaceSelection(e) {
                return "string" == typeof e && (e = this.toText(e)),
                    this.changeByRange((t => ({
                        changes: {
                            from: t.from,
                            to: t.to,
                            insert: e
                        },
                        range: U.cursor(t.from + e.length)
                    })))
            }
            changeByRange(e) {
                let t = this.selection
                    , n = e(t.ranges[0])
                    , i = this.changes(n.changes)
                    , r = [n.range]
                    , a = Se(n.effects);
                for (let o = 1; o < t.ranges.length; o++) {
                    let n = e(t.ranges[o])
                        , O = this.changes(n.changes)
                        , s = O.map(i);
                    for (let e = 0; e < o; e++)
                        r[e] = r[e].map(s);
                    let l = i.mapDesc(O, !0);
                    r.push(n.range.map(l)),
                        i = i.compose(s),
                        a = pe.mapEffects(a, s).concat(pe.mapEffects(Se(n.effects), l))
                }
                return {
                    changes: i,
                    selection: U.create(r, t.mainIndex),
                    effects: a
                }
            }
            changes() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                return e instanceof X ? e : X.of(e, this.doc.length, this.facet(we.lineSeparator))
            }
            toText(e) {
                return i.of(e.split(this.facet(we.lineSeparator) || x))
            }
            sliceDoc() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0
                    , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.doc.length;
                return this.doc.sliceString(e, t, this.lineBreak)
            }
            facet(e) {
                let t = this.config.address[e.id];
                return null == t ? e.default : (ie(this, t),
                    re(this, t))
            }
            toJSON(e) {
                let t = {
                    doc: this.sliceDoc(),
                    selection: this.selection.toJSON()
                };
                if (e)
                    for (let n in e) {
                        let i = e[n];
                        i instanceof N && null != this.config.address[i.id] && (t[n] = i.spec.toJSON(this.field(e[n]), this))
                    }
                return t
            }
            static fromJSON(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
                    , n = arguments.length > 2 ? arguments[2] : void 0;
                if (!e || "string" != typeof e.doc)
                    throw new RangeError("Invalid JSON representation for EditorState");
                let i = [];
                if (n)
                    for (let r in n)
                        if (Object.prototype.hasOwnProperty.call(e, r)) {
                            let t = n[r]
                                , a = e[r];
                            i.push(t.init((e => t.spec.fromJSON(a, e))))
                        }
                return we.create({
                    doc: e.doc,
                    selection: U.fromJSON(e.selection),
                    extensions: t.extensions ? i.concat([t.extensions]) : i
                })
            }
            static create() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                    , t = ne.resolve(e.extensions || [], new Map)
                    , n = e.doc instanceof i ? e.doc : i.of((e.doc || "").split(t.staticFacet(we.lineSeparator) || x))
                    , r = e.selection ? e.selection instanceof U ? e.selection : U.single(e.selection.anchor, e.selection.head) : U.single(0);
                return Y(r, n.length),
                    t.staticFacet(oe) || (r = r.asSingle()),
                    new we(t, n, r, t.dynamicSlots.map((() => null)), ((e, t) => t.create(e)), null)
            }
            get tabSize() {
                return this.facet(we.tabSize)
            }
            get lineBreak() {
                return this.facet(we.lineSeparator) || "\n"
            }
            get readOnly() {
                return this.facet(ue)
            }
            phrase(e) {
                for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                    n[i - 1] = arguments[i];
                for (let r of this.facet(we.phrases))
                    if (Object.prototype.hasOwnProperty.call(r, e)) {
                        e = r[e];
                        break
                    }
                return n.length && (e = e.replace(/\$(\$|\d*)/g, ((e, t) => {
                    if ("$" == t)
                        return "$";
                    let i = +(t || 1);
                    return !i || i > n.length ? e : n[i - 1]
                }
                ))),
                    e
            }
            languageDataAt(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                    , i = [];
                for (let r of this.facet(ae))
                    for (let a of r(this, t, n))
                        Object.prototype.hasOwnProperty.call(a, e) && i.push(a[e]);
                return i
            }
            charCategorizer(e) {
                return ke(this.languageDataAt("wordChars", e).join(""))
            }
            wordAt(e) {
                let { text: t, from: n, length: i } = this.doc.lineAt(e)
                    , r = this.charCategorizer(e)
                    , a = e - n
                    , o = e - n;
                for (; a > 0;) {
                    let e = g(t, a, !1);
                    if (r(t.slice(e, a)) != Pe.Word)
                        break;
                    a = e
                }
                for (; o < i;) {
                    let e = g(t, o);
                    if (r(t.slice(o, e)) != Pe.Word)
                        break;
                    o = e
                }
                return a == o ? null : U.range(a + n, o + n)
            }
        }
        function Xe(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
                , i = {};
            for (let r of e)
                for (let e of Object.keys(r)) {
                    let t = r[e]
                        , a = i[e];
                    if (void 0 === a)
                        i[e] = t;
                    else if (a === t || void 0 === t)
                        ;
                    else {
                        if (!Object.hasOwnProperty.call(n, e))
                            throw new Error("Config merge conflict for field " + e);
                        i[e] = n[e](a, t)
                    }
                }
            for (let r in t)
                void 0 === i[r] && (i[r] = t[r]);
            return i
        }
        we.allowMultipleSelections = oe,
            we.tabSize = V.define({
                combine: e => e.length ? e[0] : 4
            }),
            we.lineSeparator = Oe,
            we.readOnly = ue,
            we.phrases = V.define({
                compare(e, t) {
                    let n = Object.keys(e)
                        , i = Object.keys(t);
                    return n.length == i.length && n.every((n => e[n] == t[n]))
                }
            }),
            we.languageData = ae,
            we.changeFilter = se,
            we.transactionFilter = le,
            we.transactionExtender = ce,
            ee.reconfigure = pe.define();
        class _e {
            eq(e) {
                return this == e
            }
            range(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                return Te.create(e, t, this)
            }
        }
        _e.prototype.startSide = _e.prototype.endSide = 0,
            _e.prototype.point = !1,
            _e.prototype.mapMode = k.TrackDel;
        class Te {
            constructor(e, t, n) {
                this.from = e,
                    this.to = t,
                    this.value = n
            }
            static create(e, t, n) {
                return new Te(e, t, n)
            }
        }
        function ze(e, t) {
            return e.from - t.from || e.value.startSide - t.value.startSide
        }
        class Re {
            constructor(e, t, n, i) {
                this.from = e,
                    this.to = t,
                    this.value = n,
                    this.maxPoint = i
            }
            get length() {
                return this.to[this.to.length - 1]
            }
            findIndex(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
                    , r = n ? this.to : this.from;
                for (let a = i, o = r.length; ;) {
                    if (a == o)
                        return a;
                    let i = a + o >> 1
                        , O = r[i] - e || (n ? this.value[i].endSide : this.value[i].startSide) - t;
                    if (i == a)
                        return O >= 0 ? a : o;
                    O >= 0 ? o = i : a = i + 1
                }
            }
            between(e, t, n, i) {
                for (let r = this.findIndex(t, -1e9, !0), a = this.findIndex(n, 1e9, !1, r); r < a; r++)
                    if (!1 === i(this.from[r] + e, this.to[r] + e, this.value[r]))
                        return !1
            }
            map(e, t) {
                let n = []
                    , i = []
                    , r = []
                    , a = -1
                    , o = -1;
                for (let O = 0; O < this.value.length; O++) {
                    let s, l, c = this.value[O], u = this.from[O] + e, d = this.to[O] + e;
                    if (u == d) {
                        let e = t.mapPos(u, c.startSide, c.mapMode);
                        if (null == e)
                            continue;
                        if (s = l = e,
                            c.startSide != c.endSide && (l = t.mapPos(u, c.endSide),
                                l < s))
                            continue
                    } else if (s = t.mapPos(u, c.startSide),
                        l = t.mapPos(d, c.endSide),
                        s > l || s == l && c.startSide > 0 && c.endSide <= 0)
                        continue;
                    (l - s || c.endSide - c.startSide) < 0 || (a < 0 && (a = s),
                        c.point && (o = Math.max(o, l - s)),
                        n.push(c),
                        i.push(s - a),
                        r.push(l - a))
                }
                return {
                    mapped: n.length ? new Re(i, r, n, o) : null,
                    pos: a
                }
            }
        }
        class We {
            constructor(e, t, n, i) {
                this.chunkPos = e,
                    this.chunk = t,
                    this.nextLayer = n,
                    this.maxPoint = i
            }
            static create(e, t, n, i) {
                return new We(e, t, n, i)
            }
            get length() {
                let e = this.chunk.length - 1;
                return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length)
            }
            get size() {
                if (this.isEmpty)
                    return 0;
                let e = this.nextLayer.size;
                for (let t of this.chunk)
                    e += t.value.length;
                return e
            }
            chunkEnd(e) {
                return this.chunkPos[e] + this.chunk[e].length
            }
            update(e) {
                let { add: t = [], sort: n = !1, filterFrom: i = 0, filterTo: r = this.length } = e
                    , a = e.filter;
                if (0 == t.length && !a)
                    return this;
                if (n && (t = t.slice().sort(ze)),
                    this.isEmpty)
                    return t.length ? We.of(t) : this;
                let o = new Ue(this, null, -1).goto(0)
                    , O = 0
                    , s = []
                    , l = new Ze;
                for (; o.value || O < t.length;)
                    if (O < t.length && (o.from - t[O].from || o.startSide - t[O].value.startSide) >= 0) {
                        let e = t[O++];
                        l.addInner(e.from, e.to, e.value) || s.push(e)
                    } else
                        1 == o.rangeIndex && o.chunkIndex < this.chunk.length && (O == t.length || this.chunkEnd(o.chunkIndex) < t[O].from) && (!a || i > this.chunkEnd(o.chunkIndex) || r < this.chunkPos[o.chunkIndex]) && l.addChunk(this.chunkPos[o.chunkIndex], this.chunk[o.chunkIndex]) ? o.nextChunk() : ((!a || i > o.to || r < o.from || a(o.from, o.to, o.value)) && (l.addInner(o.from, o.to, o.value) || s.push(Te.create(o.from, o.to, o.value))),
                            o.next());
                return l.finishInner(this.nextLayer.isEmpty && !s.length ? We.empty : this.nextLayer.update({
                    add: s,
                    filter: a,
                    filterFrom: i,
                    filterTo: r
                }))
            }
            map(e) {
                if (e.empty || this.isEmpty)
                    return this;
                let t = []
                    , n = []
                    , i = -1;
                for (let a = 0; a < this.chunk.length; a++) {
                    let r = this.chunkPos[a]
                        , o = this.chunk[a]
                        , O = e.touchesRange(r, r + o.length);
                    if (!1 === O)
                        i = Math.max(i, o.maxPoint),
                            t.push(o),
                            n.push(e.mapPos(r));
                    else if (!0 === O) {
                        let { mapped: a, pos: O } = o.map(r, e);
                        a && (i = Math.max(i, a.maxPoint),
                            t.push(a),
                            n.push(O))
                    }
                }
                let r = this.nextLayer.map(e);
                return 0 == t.length ? r : new We(n, t, r || We.empty, i)
            }
            between(e, t, n) {
                if (!this.isEmpty) {
                    for (let i = 0; i < this.chunk.length; i++) {
                        let r = this.chunkPos[i]
                            , a = this.chunk[i];
                        if (t >= r && e <= r + a.length && !1 === a.between(r, e - r, t - r, n))
                            return
                    }
                    this.nextLayer.between(e, t, n)
                }
            }
            iter() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                return Ye.from([this]).goto(e)
            }
            get isEmpty() {
                return this.nextLayer == this
            }
            static iter(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                return Ye.from(e).goto(t)
            }
            static compare(e, t, n, i) {
                let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : -1
                    , a = e.filter((e => e.maxPoint > 0 || !e.isEmpty && e.maxPoint >= r))
                    , o = t.filter((e => e.maxPoint > 0 || !e.isEmpty && e.maxPoint >= r))
                    , O = qe(a, o, n)
                    , s = new Ve(a, O, r)
                    , l = new Ve(o, O, r);
                n.iterGaps(((e, t, n) => Ee(s, e, l, t, n, i))),
                    n.empty && 0 == n.length && Ee(s, 0, l, 0, 0, i)
            }
            static eq(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , i = arguments.length > 3 ? arguments[3] : void 0;
                null == i && (i = 999999999);
                let r = e.filter((e => !e.isEmpty && t.indexOf(e) < 0))
                    , a = t.filter((t => !t.isEmpty && e.indexOf(t) < 0));
                if (r.length != a.length)
                    return !1;
                if (!r.length)
                    return !0;
                let o = qe(r, a)
                    , O = new Ve(r, o, 0).goto(n)
                    , s = new Ve(a, o, 0).goto(n);
                for (; ;) {
                    if (O.to != s.to || !je(O.active, s.active) || O.point && (!s.point || !O.point.eq(s.point)))
                        return !1;
                    if (O.to > i)
                        return !0;
                    O.next(),
                        s.next()
                }
            }
            static spans(e, t, n, i) {
                let r = new Ve(e, null, arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : -1).goto(t)
                    , a = t
                    , o = r.openStart;
                for (; ;) {
                    let e = Math.min(r.to, n);
                    if (r.point) {
                        let n = r.activeForPoint(r.to)
                            , O = r.pointFrom < t ? n.length + 1 : r.point.startSide < 0 ? n.length : Math.min(n.length, o);
                        i.point(a, e, r.point, n, O, r.pointRank),
                            o = Math.min(r.openEnd(e), n.length)
                    } else
                        e > a && (i.span(a, e, r.active, o),
                            o = r.openEnd(e));
                    if (r.to > n)
                        return o + (r.point && r.to > n ? 1 : 0);
                    a = r.to,
                        r.next()
                }
            }
            static of(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                    , n = new Ze;
                for (let i of e instanceof Te ? [e] : t ? function (e) {
                    if (e.length > 1)
                        for (let t = e[0], n = 1; n < e.length; n++) {
                            let i = e[n];
                            if (ze(t, i) > 0)
                                return e.slice().sort(ze);
                            t = i
                        }
                    return e
                }(e) : e)
                    n.add(i.from, i.to, i.value);
                return n.finish()
            }
            static join(e) {
                if (!e.length)
                    return We.empty;
                let t = e[e.length - 1];
                for (let n = e.length - 2; n >= 0; n--)
                    for (let i = e[n]; i != We.empty; i = i.nextLayer)
                        t = new We(i.chunkPos, i.chunk, t, Math.max(i.maxPoint, t.maxPoint));
                return t
            }
        }
        We.empty = new We([], [], null, -1),
            We.empty.nextLayer = We.empty;
        class Ze {
            finishChunk(e) {
                this.chunks.push(new Re(this.from, this.to, this.value, this.maxPoint)),
                    this.chunkPos.push(this.chunkStart),
                    this.chunkStart = -1,
                    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint),
                    this.maxPoint = -1,
                    e && (this.from = [],
                        this.to = [],
                        this.value = [])
            }
            constructor() {
                this.chunks = [],
                    this.chunkPos = [],
                    this.chunkStart = -1,
                    this.last = null,
                    this.lastFrom = -1e9,
                    this.lastTo = -1e9,
                    this.from = [],
                    this.to = [],
                    this.value = [],
                    this.maxPoint = -1,
                    this.setMaxPoint = -1,
                    this.nextLayer = null
            }
            add(e, t, n) {
                this.addInner(e, t, n) || (this.nextLayer || (this.nextLayer = new Ze)).add(e, t, n)
            }
            addInner(e, t, n) {
                let i = e - this.lastTo || n.startSide - this.last.endSide;
                if (i <= 0 && (e - this.lastFrom || n.startSide - this.last.startSide) < 0)
                    throw new Error("Ranges must be added sorted by `from` position and `startSide`");
                return !(i < 0) && (250 == this.from.length && this.finishChunk(!0),
                    this.chunkStart < 0 && (this.chunkStart = e),
                    this.from.push(e - this.chunkStart),
                    this.to.push(t - this.chunkStart),
                    this.last = n,
                    this.lastFrom = e,
                    this.lastTo = t,
                    this.value.push(n),
                    n.point && (this.maxPoint = Math.max(this.maxPoint, t - e)),
                    !0)
            }
            addChunk(e, t) {
                if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
                    return !1;
                this.from.length && this.finishChunk(!0),
                    this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint),
                    this.chunks.push(t),
                    this.chunkPos.push(e);
                let n = t.value.length - 1;
                return this.last = t.value[n],
                    this.lastFrom = t.from[n] + e,
                    this.lastTo = t.to[n] + e,
                    !0
            }
            finish() {
                return this.finishInner(We.empty)
            }
            finishInner(e) {
                if (this.from.length && this.finishChunk(!1),
                    0 == this.chunks.length)
                    return e;
                let t = We.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
                return this.from = null,
                    t
            }
        }
        function qe(e, t, n) {
            let i = new Map;
            for (let a of e)
                for (let e = 0; e < a.chunk.length; e++)
                    a.chunk[e].maxPoint <= 0 && i.set(a.chunk[e], a.chunkPos[e]);
            let r = new Set;
            for (let a of t)
                for (let e = 0; e < a.chunk.length; e++) {
                    let t = i.get(a.chunk[e]);
                    null == t || (n ? n.mapPos(t) : t) != a.chunkPos[e] || (null === n || void 0 === n ? void 0 : n.touchesRange(t, t + a.chunk[e].length)) || r.add(a.chunk[e])
                }
            return r
        }
        class Ue {
            constructor(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                this.layer = e,
                    this.skip = t,
                    this.minPoint = n,
                    this.rank = i
            }
            get startSide() {
                return this.value ? this.value.startSide : 0
            }
            get endSide() {
                return this.value ? this.value.endSide : 0
            }
            goto(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1e9;
                return this.chunkIndex = this.rangeIndex = 0,
                    this.gotoInner(e, t, !1),
                    this
            }
            gotoInner(e, t, n) {
                for (; this.chunkIndex < this.layer.chunk.length;) {
                    let t = this.layer.chunk[this.chunkIndex];
                    if (!(this.skip && this.skip.has(t) || this.layer.chunkEnd(this.chunkIndex) < e || t.maxPoint < this.minPoint))
                        break;
                    this.chunkIndex++,
                        n = !1
                }
                if (this.chunkIndex < this.layer.chunk.length) {
                    let i = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
                    (!n || this.rangeIndex < i) && this.setRangeIndex(i)
                }
                this.next()
            }
            forward(e, t) {
                (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0)
            }
            next() {
                for (; ;) {
                    if (this.chunkIndex == this.layer.chunk.length) {
                        this.from = this.to = 1e9,
                            this.value = null;
                        break
                    }
                    {
                        let e = this.layer.chunkPos[this.chunkIndex]
                            , t = this.layer.chunk[this.chunkIndex]
                            , n = e + t.from[this.rangeIndex];
                        if (this.from = n,
                            this.to = e + t.to[this.rangeIndex],
                            this.value = t.value[this.rangeIndex],
                            this.setRangeIndex(this.rangeIndex + 1),
                            this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                            break
                    }
                }
            }
            setRangeIndex(e) {
                if (e == this.layer.chunk[this.chunkIndex].value.length) {
                    if (this.chunkIndex++,
                        this.skip)
                        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]);)
                            this.chunkIndex++;
                    this.rangeIndex = 0
                } else
                    this.rangeIndex = e
            }
            nextChunk() {
                this.chunkIndex++,
                    this.rangeIndex = 0,
                    this.next()
            }
            compare(e) {
                return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide
            }
        }
        class Ye {
            constructor(e) {
                this.heap = e
            }
            static from(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null
                    , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                    , i = [];
                for (let r = 0; r < e.length; r++)
                    for (let a = e[r]; !a.isEmpty; a = a.nextLayer)
                        a.maxPoint >= n && i.push(new Ue(a, t, n, r));
                return 1 == i.length ? i[0] : new Ye(i)
            }
            get startSide() {
                return this.value ? this.value.startSide : 0
            }
            goto(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1e9;
                for (let n of this.heap)
                    n.goto(e, t);
                for (let n = this.heap.length >> 1; n >= 0; n--)
                    Ae(this.heap, n);
                return this.next(),
                    this
            }
            forward(e, t) {
                for (let n of this.heap)
                    n.forward(e, t);
                for (let n = this.heap.length >> 1; n >= 0; n--)
                    Ae(this.heap, n);
                (this.to - e || this.value.endSide - t) < 0 && this.next()
            }
            next() {
                if (0 == this.heap.length)
                    this.from = this.to = 1e9,
                        this.value = null,
                        this.rank = -1;
                else {
                    let e = this.heap[0];
                    this.from = e.from,
                        this.to = e.to,
                        this.value = e.value,
                        this.rank = e.rank,
                        e.value && e.next(),
                        Ae(this.heap, 0)
                }
            }
        }
        function Ae(e, t) {
            for (let n = e[t]; ;) {
                let i = 1 + (t << 1);
                if (i >= e.length)
                    break;
                let r = e[i];
                if (i + 1 < e.length && r.compare(e[i + 1]) >= 0 && (r = e[i + 1],
                    i++),
                    n.compare(r) < 0)
                    break;
                e[i] = n,
                    e[t] = r,
                    t = i
            }
        }
        class Ve {
            constructor(e, t, n) {
                this.minPoint = n,
                    this.active = [],
                    this.activeTo = [],
                    this.activeRank = [],
                    this.minActive = -1,
                    this.point = null,
                    this.pointFrom = 0,
                    this.pointRank = 0,
                    this.to = -1e9,
                    this.endSide = 0,
                    this.openStart = -1,
                    this.cursor = Ye.from(e, t, n)
            }
            goto(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1e9;
                return this.cursor.goto(e, t),
                    this.active.length = this.activeTo.length = this.activeRank.length = 0,
                    this.minActive = -1,
                    this.to = e,
                    this.endSide = t,
                    this.openStart = -1,
                    this.next(),
                    this
            }
            forward(e, t) {
                for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0;)
                    this.removeActive(this.minActive);
                this.cursor.forward(e, t)
            }
            removeActive(e) {
                Ce(this.active, e),
                    Ce(this.activeTo, e),
                    Ce(this.activeRank, e),
                    this.minActive = Ie(this.active, this.activeTo)
            }
            addActive(e) {
                let t = 0
                    , { value: n, to: i, rank: r } = this.cursor;
                for (; t < this.activeRank.length && (r - this.activeRank[t] || i - this.activeTo[t]) > 0;)
                    t++;
                Ge(this.active, t, n),
                    Ge(this.activeTo, t, i),
                    Ge(this.activeRank, t, r),
                    e && Ge(e, t, this.cursor.from),
                    this.minActive = Ie(this.active, this.activeTo)
            }
            next() {
                let e = this.to
                    , t = this.point;
                this.point = null;
                let n = this.openStart < 0 ? [] : null;
                for (; ;) {
                    let i = this.minActive;
                    if (i > -1 && (this.activeTo[i] - this.cursor.from || this.active[i].endSide - this.cursor.startSide) < 0) {
                        if (this.activeTo[i] > e) {
                            this.to = this.activeTo[i],
                                this.endSide = this.active[i].endSide;
                            break
                        }
                        this.removeActive(i),
                            n && Ce(n, i)
                    } else {
                        if (!this.cursor.value) {
                            this.to = this.endSide = 1e9;
                            break
                        }
                        if (this.cursor.from > e) {
                            this.to = this.cursor.from,
                                this.endSide = this.cursor.startSide;
                            break
                        }
                        {
                            let e = this.cursor.value;
                            if (e.point) {
                                if (!(t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)) {
                                    this.point = e,
                                        this.pointFrom = this.cursor.from,
                                        this.pointRank = this.cursor.rank,
                                        this.to = this.cursor.to,
                                        this.endSide = e.endSide,
                                        this.cursor.next(),
                                        this.forward(this.to, this.endSide);
                                    break
                                }
                                this.cursor.next()
                            } else
                                this.addActive(n),
                                    this.cursor.next()
                        }
                    }
                }
                if (n) {
                    this.openStart = 0;
                    for (let t = n.length - 1; t >= 0 && n[t] < e; t--)
                        this.openStart++
                }
            }
            activeForPoint(e) {
                if (!this.active.length)
                    return this.active;
                let t = [];
                for (let n = this.active.length - 1; n >= 0 && !(this.activeRank[n] < this.pointRank); n--)
                    (this.activeTo[n] > e || this.activeTo[n] == e && this.active[n].endSide >= this.point.endSide) && t.push(this.active[n]);
                return t.reverse()
            }
            openEnd(e) {
                let t = 0;
                for (let n = this.activeTo.length - 1; n >= 0 && this.activeTo[n] > e; n--)
                    t++;
                return t
            }
        }
        function Ee(e, t, n, i, r, a) {
            e.goto(t),
                n.goto(i);
            let o = i + r
                , O = i
                , s = i - t;
            for (; ;) {
                let t = e.to + s - n.to || e.endSide - n.endSide
                    , i = t < 0 ? e.to + s : n.to
                    , r = Math.min(i, o);
                if (e.point || n.point ? e.point && n.point && (e.point == n.point || e.point.eq(n.point)) && je(e.activeForPoint(e.to), n.activeForPoint(n.to)) || a.comparePoint(O, r, e.point, n.point) : r > O && !je(e.active, n.active) && a.compareRange(O, r, e.active, n.active),
                    i > o)
                    break;
                O = i,
                    t <= 0 && e.next(),
                    t >= 0 && n.next()
            }
        }
        function je(e, t) {
            if (e.length != t.length)
                return !1;
            for (let n = 0; n < e.length; n++)
                if (e[n] != t[n] && !e[n].eq(t[n]))
                    return !1;
            return !0
        }
        function Ce(e, t) {
            for (let n = t, i = e.length - 1; n < i; n++)
                e[n] = e[n + 1];
            e.pop()
        }
        function Ge(e, t, n) {
            for (let i = e.length - 1; i >= t; i--)
                e[i + 1] = e[i];
            e[t] = n
        }
        function Ie(e, t) {
            let n = -1
                , i = 1e9;
            for (let r = 0; r < t.length; r++)
                (t[r] - i || e[r].endSide - e[n].endSide) < 0 && (n = r,
                    i = t[r]);
            return n
        }
        function De(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.length
                , i = 0;
            for (let r = 0; r < n;)
                9 == e.charCodeAt(r) ? (i += t - i % t,
                    r++) : (i++,
                        r = g(e, r));
            return i
        }
        function Ne(e, t, n, i) {
            for (let r = 0, a = 0; ;) {
                if (a >= t)
                    return r;
                if (r == e.length)
                    break;
                a += 9 == e.charCodeAt(r) ? n - a % n : 1,
                    r = g(e, r)
            }
            return !0 === i ? -1 : e.length
        }
    }
    ,
    32043: (e, t, n) => {
        n.d(t, {
            NZ: () => de,
            OP: () => ve,
            Lz: () => li,
            wJ: () => Yr,
            Z9: () => lt,
            xO: () => ce,
            HJ: () => dr,
            VH: () => Wi,
            A: () => Gi,
            ld: () => Rr,
            Eg: () => _r,
            cU: () => Cr,
            dz: () => tr,
            Wu: () => Oa,
            N$: () => Hi,
            Ux: () => Xr,
            w4: () => gi,
            $K: () => ia,
            c_: () => at,
            qf: () => ar,
            D4: () => lr,
            TS: () => bi,
            S7: () => Ur,
            DK: () => Sr,
            vX: () => pr
        });
        for (var i = n(17471), r = n(63079), a = {
            8: "Backspace",
            9: "Tab",
            10: "Enter",
            12: "NumLock",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            44: "PrintScreen",
            45: "Insert",
            46: "Delete",
            59: ";",
            61: "=",
            91: "Meta",
            92: "Meta",
            106: "*",
            107: "+",
            108: ",",
            109: "-",
            110: ".",
            111: "/",
            144: "NumLock",
            145: "ScrollLock",
            160: "Shift",
            161: "Shift",
            162: "Control",
            163: "Control",
            164: "Alt",
            165: "Alt",
            173: "-",
            186: ";",
            187: "=",
            188: ",",
            189: "-",
            190: ".",
            191: "/",
            192: "`",
            219: "[",
            220: "\\",
            221: "]",
            222: "'"
        }, o = {
            48: ")",
            49: "!",
            50: "@",
            51: "#",
            52: "$",
            53: "%",
            54: "^",
            55: "&",
            56: "*",
            57: "(",
            59: ":",
            61: "+",
            173: "_",
            186: ":",
            187: "+",
            188: "<",
            189: "_",
            190: ">",
            191: "?",
            192: "~",
            219: "{",
            220: "|",
            221: "}",
            222: '"'
        }, O = "undefined" != typeof navigator && /Mac/.test(navigator.platform), s = "undefined" != typeof navigator && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent), l = 0; l < 10; l++)
            a[48 + l] = a[96 + l] = String(l);
        for (l = 1; l <= 24; l++)
            a[l + 111] = "F" + l;
        for (l = 65; l <= 90; l++)
            a[l] = String.fromCharCode(l + 32),
                o[l] = String.fromCharCode(l);
        for (var c in a)
            o.hasOwnProperty(c) || (o[c] = a[c]);
        function u(e) {
            let t;
            return t = 11 == e.nodeType ? e.getSelection ? e : e.ownerDocument : e,
                t.getSelection()
        }
        function d(e, t) {
            return !!t && (e == t || e.contains(1 != t.nodeType ? t.parentNode : t))
        }
        function h(e, t) {
            if (!t.anchorNode)
                return !1;
            try {
                return d(e, t.anchorNode)
            } catch (n) {
                return !1
            }
        }
        function f(e) {
            return 3 == e.nodeType ? w(e, 0, e.nodeValue.length).getClientRects() : 1 == e.nodeType ? e.getClientRects() : []
        }
        function p(e, t, n, i) {
            return !!n && (Q(e, t, n, i, -1) || Q(e, t, n, i, 1))
        }
        function m(e) {
            for (var t = 0; ; t++)
                if (!(e = e.previousSibling))
                    return t
        }
        function g(e) {
            return 1 == e.nodeType && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(e.nodeName)
        }
        function Q(e, t, n, i, r) {
            for (; ;) {
                if (e == n && t == i)
                    return !0;
                if (t == (r < 0 ? 0 : $(e))) {
                    if ("DIV" == e.nodeName)
                        return !1;
                    let n = e.parentNode;
                    if (!n || 1 != n.nodeType)
                        return !1;
                    t = m(e) + (r < 0 ? 0 : 1),
                        e = n
                } else {
                    if (1 != e.nodeType)
                        return !1;
                    if (1 == (e = e.childNodes[t + (r < 0 ? -1 : 0)]).nodeType && "false" == e.contentEditable)
                        return !1;
                    t = r < 0 ? $(e) : 0
                }
            }
        }
        function $(e) {
            return 3 == e.nodeType ? e.nodeValue.length : e.childNodes.length
        }
        function b(e, t) {
            let n = t ? e.left : e.right;
            return {
                left: n,
                right: n,
                top: e.top,
                bottom: e.bottom
            }
        }
        function y(e) {
            let t = e.visualViewport;
            return t ? {
                left: 0,
                right: t.width,
                top: 0,
                bottom: t.height
            } : {
                left: 0,
                right: e.innerWidth,
                top: 0,
                bottom: e.innerHeight
            }
        }
        function S(e, t) {
            let n = t.width / e.offsetWidth
                , i = t.height / e.offsetHeight;
            return (n > .995 && n < 1.005 || !isFinite(n) || Math.abs(t.width - e.offsetWidth) < 1) && (n = 1),
                (i > .995 && i < 1.005 || !isFinite(i) || Math.abs(t.height - e.offsetHeight) < 1) && (i = 1),
            {
                scaleX: n,
                scaleY: i
            }
        }
        class P {
            constructor() {
                this.anchorNode = null,
                    this.anchorOffset = 0,
                    this.focusNode = null,
                    this.focusOffset = 0
            }
            eq(e) {
                return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset
            }
            setRange(e) {
                let { anchorNode: t, focusNode: n } = e;
                this.set(t, Math.min(e.anchorOffset, t ? $(t) : 0), n, Math.min(e.focusOffset, n ? $(n) : 0))
            }
            set(e, t, n, i) {
                this.anchorNode = e,
                    this.anchorOffset = t,
                    this.focusNode = n,
                    this.focusOffset = i
            }
        }
        let v, x = null;
        function k(e) {
            if (e.setActive)
                return e.setActive();
            if (x)
                return e.focus(x);
            let t = [];
            for (let n = e; n && (t.push(n, n.scrollTop, n.scrollLeft),
                n != n.ownerDocument); n = n.parentNode)
                ;
            if (e.focus(null == x ? {
                get preventScroll() {
                    return x = {
                        preventScroll: !0
                    },
                        !0
                }
            } : void 0),
                !x) {
                x = !1;
                for (let e = 0; e < t.length;) {
                    let n = t[e++]
                        , i = t[e++]
                        , r = t[e++];
                    n.scrollTop != i && (n.scrollTop = i),
                        n.scrollLeft != r && (n.scrollLeft = r)
                }
            }
        }
        function w(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t
                , i = v || (v = document.createRange());
            return i.setEnd(e, n),
                i.setStart(e, t),
                i
        }
        function X(e, t, n, i) {
            let r = {
                key: t,
                code: t,
                keyCode: n,
                which: n,
                cancelable: !0
            };
            i && ({ altKey: r.altKey, ctrlKey: r.ctrlKey, shiftKey: r.shiftKey, metaKey: r.metaKey } = i);
            let a = new KeyboardEvent("keydown", r);
            a.synthetic = !0,
                e.dispatchEvent(a);
            let o = new KeyboardEvent("keyup", r);
            return o.synthetic = !0,
                e.dispatchEvent(o),
                a.defaultPrevented || o.defaultPrevented
        }
        function _(e) {
            for (; e.attributes.length;)
                e.removeAttributeNode(e.attributes[0])
        }
        function T(e) {
            return e.scrollTop > Math.max(1, e.scrollHeight - e.clientHeight - 4)
        }
        function z(e, t) {
            for (let n = e, i = t; ;) {
                if (3 == n.nodeType && i > 0)
                    return {
                        node: n,
                        offset: i
                    };
                if (1 == n.nodeType && i > 0) {
                    if ("false" == n.contentEditable)
                        return null;
                    n = n.childNodes[i - 1],
                        i = $(n)
                } else {
                    if (!n.parentNode || g(n))
                        return null;
                    i = m(n),
                        n = n.parentNode
                }
            }
        }
        function R(e, t) {
            for (let n = e, i = t; ;) {
                if (3 == n.nodeType && i < n.nodeValue.length)
                    return {
                        node: n,
                        offset: i
                    };
                if (1 == n.nodeType && i < n.childNodes.length) {
                    if ("false" == n.contentEditable)
                        return null;
                    n = n.childNodes[i],
                        i = 0
                } else {
                    if (!n.parentNode || g(n))
                        return null;
                    i = m(n) + 1,
                        n = n.parentNode
                }
            }
        }
        class W {
            constructor(e, t) {
                let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                this.node = e,
                    this.offset = t,
                    this.precise = n
            }
            static before(e, t) {
                return new W(e.parentNode, m(e), t)
            }
            static after(e, t) {
                return new W(e.parentNode, m(e) + 1, t)
            }
        }
        const Z = [];
        class q {
            constructor() {
                this.parent = null,
                    this.dom = null,
                    this.flags = 2
            }
            get overrideDOMText() {
                return null
            }
            get posAtStart() {
                return this.parent ? this.parent.posBefore(this) : 0
            }
            get posAtEnd() {
                return this.posAtStart + this.length
            }
            posBefore(e) {
                let t = this.posAtStart;
                for (let n of this.children) {
                    if (n == e)
                        return t;
                    t += n.length + n.breakAfter
                }
                throw new RangeError("Invalid child in posBefore")
            }
            posAfter(e) {
                return this.posBefore(e) + e.length
            }
            sync(e, t) {
                if (2 & this.flags) {
                    let n, i = this.dom, r = null;
                    for (let a of this.children) {
                        if (7 & a.flags) {
                            if (!a.dom && (n = r ? r.nextSibling : i.firstChild)) {
                                let e = q.get(n);
                                (!e || !e.parent && e.canReuseDOM(a)) && a.reuseDOM(n)
                            }
                            a.sync(e, t),
                                a.flags &= -8
                        }
                        if (n = r ? r.nextSibling : i.firstChild,
                            t && !t.written && t.node == i && n != a.dom && (t.written = !0),
                            a.dom.parentNode == i)
                            for (; n && n != a.dom;)
                                n = U(n);
                        else
                            i.insertBefore(a.dom, n);
                        r = a.dom
                    }
                    for (n = r ? r.nextSibling : i.firstChild,
                        n && t && t.node == i && (t.written = !0); n;)
                        n = U(n)
                } else if (1 & this.flags)
                    for (let n of this.children)
                        7 & n.flags && (n.sync(e, t),
                            n.flags &= -8)
            }
            reuseDOM(e) { }
            localPosFromDOM(e, t) {
                let n;
                if (e == this.dom)
                    n = this.dom.childNodes[t];
                else {
                    let i = 0 == $(e) ? 0 : 0 == t ? -1 : 1;
                    for (; ;) {
                        let t = e.parentNode;
                        if (t == this.dom)
                            break;
                        0 == i && t.firstChild != t.lastChild && (i = e == t.firstChild ? -1 : 1),
                            e = t
                    }
                    n = i < 0 ? e : e.nextSibling
                }
                if (n == this.dom.firstChild)
                    return 0;
                for (; n && !q.get(n);)
                    n = n.nextSibling;
                if (!n)
                    return this.length;
                for (let i = 0, r = 0; ; i++) {
                    let e = this.children[i];
                    if (e.dom == n)
                        return r;
                    r += e.length + e.breakAfter
                }
            }
            domBoundsAround(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , i = -1
                    , r = -1
                    , a = -1
                    , o = -1;
                for (let O = 0, s = n, l = n; O < this.children.length; O++) {
                    let n = this.children[O]
                        , c = s + n.length;
                    if (s < e && c > t)
                        return n.domBoundsAround(e, t, s);
                    if (c >= e && -1 == i && (i = O,
                        r = s),
                        s > t && n.dom.parentNode == this.dom) {
                        a = O,
                            o = l;
                        break
                    }
                    l = c,
                        s = c + n.breakAfter
                }
                return {
                    from: r,
                    to: o < 0 ? n + this.length : o,
                    startDOM: (i ? this.children[i - 1].dom.nextSibling : null) || this.dom.firstChild,
                    endDOM: a < this.children.length && a >= 0 ? this.children[a].dom : null
                }
            }
            markDirty() {
                let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                this.flags |= 2,
                    this.markParentsDirty(e)
            }
            markParentsDirty(e) {
                for (let t = this.parent; t; t = t.parent) {
                    if (e && (t.flags |= 2),
                        1 & t.flags)
                        return;
                    t.flags |= 1,
                        e = !1
                }
            }
            setParent(e) {
                this.parent != e && (this.parent = e,
                    7 & this.flags && this.markParentsDirty(!0))
            }
            setDOM(e) {
                this.dom != e && (this.dom && (this.dom.cmView = null),
                    this.dom = e,
                    e.cmView = this)
            }
            get rootView() {
                for (let e = this; ;) {
                    let t = e.parent;
                    if (!t)
                        return e;
                    e = t
                }
            }
            replaceChildren(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Z;
                this.markDirty();
                for (let i = e; i < t; i++) {
                    let e = this.children[i];
                    e.parent == this && n.indexOf(e) < 0 && e.destroy()
                }
                this.children.splice(e, t - e, ...n);
                for (let i = 0; i < n.length; i++)
                    n[i].setParent(this)
            }
            ignoreMutation(e) {
                return !1
            }
            ignoreEvent(e) {
                return !1
            }
            childCursor() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.length;
                return new Y(this.children, e, this.children.length)
            }
            childPos(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                return this.childCursor().findPos(e, t)
            }
            toString() {
                let e = this.constructor.name.replace("View", "");
                return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + ("Text" == e ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "")
            }
            static get(e) {
                return e.cmView
            }
            get isEditable() {
                return !0
            }
            get isWidget() {
                return !1
            }
            get isHidden() {
                return !1
            }
            merge(e, t, n, i, r, a) {
                return !1
            }
            become(e) {
                return !1
            }
            canReuseDOM(e) {
                return e.constructor == this.constructor && !(8 & (this.flags | e.flags))
            }
            getSide() {
                return 0
            }
            destroy() {
                for (let e of this.children)
                    e.parent == this && e.destroy();
                this.parent = null
            }
        }
        function U(e) {
            let t = e.nextSibling;
            return e.parentNode.removeChild(e),
                t
        }
        q.prototype.breakAfter = 0;
        class Y {
            constructor(e, t, n) {
                this.children = e,
                    this.pos = t,
                    this.i = n,
                    this.off = 0
            }
            findPos(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                for (; ;) {
                    if (e > this.pos || e == this.pos && (t > 0 || 0 == this.i || this.children[this.i - 1].breakAfter))
                        return this.off = e - this.pos,
                            this;
                    let n = this.children[--this.i];
                    this.pos -= n.length + n.breakAfter
                }
            }
        }
        function A(e, t, n, i, r, a, o, O, s) {
            let { children: l } = e
                , c = l.length ? l[t] : null
                , u = a.length ? a[a.length - 1] : null
                , d = u ? u.breakAfter : o;
            if (!(t == i && c && !o && !d && a.length < 2 && c.merge(n, r, a.length ? u : null, 0 == n, O, s))) {
                if (i < l.length) {
                    let e = l[i];
                    e && (r < e.length || e.breakAfter && (null === u || void 0 === u ? void 0 : u.breakAfter)) ? (t == i && (e = e.split(r),
                        r = 0),
                        !d && u && e.merge(0, r, u, !0, 0, s) ? a[a.length - 1] = e : ((r || e.children.length && !e.children[0].length) && e.merge(0, r, null, !1, 0, s),
                            a.push(e))) : (null === e || void 0 === e ? void 0 : e.breakAfter) && (u ? u.breakAfter = 1 : o = 1),
                        i++
                }
                for (c && (c.breakAfter = o,
                    n > 0 && (!o && a.length && c.merge(n, c.length, a[0], !1, O, 0) ? c.breakAfter = a.shift().breakAfter : (n < c.length || c.children.length && 0 == c.children[c.children.length - 1].length) && c.merge(n, c.length, null, !1, O, 0),
                        t++)); t < i && a.length;)
                    if (l[i - 1].become(a[a.length - 1]))
                        i--,
                            a.pop(),
                            s = a.length ? 0 : O;
                    else {
                        if (!l[t].become(a[0]))
                            break;
                        t++,
                            a.shift(),
                            O = a.length ? 0 : s
                    }
                !a.length && t && i < l.length && !l[t - 1].breakAfter && l[i].merge(0, 0, l[t - 1], !1, O, s) && t--,
                    (t < i || a.length) && e.replaceChildren(t, i, a)
            }
        }
        function V(e, t, n, i, r, a) {
            let o = e.childCursor()
                , { i: O, off: s } = o.findPos(n, 1)
                , { i: l, off: c } = o.findPos(t, -1)
                , u = t - n;
            for (let d of i)
                u += d.length;
            e.length += u,
                A(e, l, c, O, s, i, 0, r, a)
        }
        let E = "undefined" != typeof navigator ? navigator : {
            userAgent: "",
            vendor: "",
            platform: ""
        }
            , j = "undefined" != typeof document ? document : {
                documentElement: {
                    style: {}
                }
            };
        const C = /Edge\/(\d+)/.exec(E.userAgent)
            , G = /MSIE \d/.test(E.userAgent)
            , I = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(E.userAgent)
            , D = !!(G || I || C)
            , N = !D && /gecko\/(\d+)/i.test(E.userAgent)
            , L = !D && /Chrome\/(\d+)/.exec(E.userAgent)
            , M = "webkitFontSmoothing" in j.documentElement.style
            , F = !D && /Apple Computer/.test(E.vendor)
            , B = F && (/Mobile\/\w+/.test(E.userAgent) || E.maxTouchPoints > 2);
        var H = {
            mac: B || /Mac/.test(E.platform),
            windows: /Win/.test(E.platform),
            linux: /Linux|X11/.test(E.platform),
            ie: D,
            ie_version: G ? j.documentMode || 6 : I ? +I[1] : C ? +C[1] : 0,
            gecko: N,
            gecko_version: N ? +(/Firefox\/(\d+)/.exec(E.userAgent) || [0, 0])[1] : 0,
            chrome: !!L,
            chrome_version: L ? +L[1] : 0,
            ios: B,
            android: /Android\b/.test(E.userAgent),
            webkit: M,
            safari: F,
            webkit_version: M ? +(/\bAppleWebKit\/(\d+)/.exec(E.userAgent) || [0, 0])[1] : 0,
            tabSize: null != j.documentElement.style.tabSize ? "tab-size" : "-moz-tab-size"
        };
        class K extends q {
            constructor(e) {
                super(),
                    this.text = e
            }
            get length() {
                return this.text.length
            }
            createDOM(e) {
                this.setDOM(e || document.createTextNode(this.text))
            }
            sync(e, t) {
                this.dom || this.createDOM(),
                    this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0),
                        this.dom.nodeValue = this.text)
            }
            reuseDOM(e) {
                3 == e.nodeType && this.createDOM(e)
            }
            merge(e, t, n) {
                return !(8 & this.flags || n && (!(n instanceof K) || this.length - (t - e) + n.length > 256 || 8 & n.flags)) && (this.text = this.text.slice(0, e) + (n ? n.text : "") + this.text.slice(t),
                    this.markDirty(),
                    !0)
            }
            split(e) {
                let t = new K(this.text.slice(e));
                return this.text = this.text.slice(0, e),
                    this.markDirty(),
                    t.flags |= 8 & this.flags,
                    t
            }
            localPosFromDOM(e, t) {
                return e == this.dom ? t : t ? this.text.length : 0
            }
            domAtPos(e) {
                return new W(this.dom, e)
            }
            domBoundsAround(e, t, n) {
                return {
                    from: n,
                    to: n + this.length,
                    startDOM: this.dom,
                    endDOM: this.dom.nextSibling
                }
            }
            coordsAt(e, t) {
                return function (e, t, n) {
                    let i = e.nodeValue.length;
                    t > i && (t = i);
                    let r = t
                        , a = t
                        , o = 0;
                    0 == t && n < 0 || t == i && n >= 0 ? H.chrome || H.gecko || (t ? (r--,
                        o = 1) : a < i && (a++,
                            o = -1)) : n < 0 ? r-- : a < i && a++;
                    let O = w(e, r, a).getClientRects();
                    if (!O.length)
                        return null;
                    let s = O[(o ? o < 0 : n >= 0) ? 0 : O.length - 1];
                    H.safari && !o && 0 == s.width && (s = Array.prototype.find.call(O, (e => e.width)) || s);
                    return o ? b(s, o < 0) : s || null
                }(this.dom, e, t)
            }
        }
        class J extends q {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []
                    , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                super(),
                    this.mark = e,
                    this.children = t,
                    this.length = n;
                for (let i of t)
                    i.setParent(this)
            }
            setAttrs(e) {
                if (_(e),
                    this.mark.class && (e.className = this.mark.class),
                    this.mark.attrs)
                    for (let t in this.mark.attrs)
                        e.setAttribute(t, this.mark.attrs[t]);
                return e
            }
            canReuseDOM(e) {
                return super.canReuseDOM(e) && !(8 & (this.flags | e.flags))
            }
            reuseDOM(e) {
                e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e),
                    this.flags |= 6)
            }
            sync(e, t) {
                this.dom ? 4 & this.flags && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),
                    super.sync(e, t)
            }
            merge(e, t, n, i, r, a) {
                return (!n || !(!(n instanceof J && n.mark.eq(this.mark)) || e && r <= 0 || t < this.length && a <= 0)) && (V(this, e, t, n ? n.children.slice() : [], r - 1, a - 1),
                    this.markDirty(),
                    !0)
            }
            split(e) {
                let t = []
                    , n = 0
                    , i = -1
                    , r = 0;
                for (let o of this.children) {
                    let a = n + o.length;
                    a > e && t.push(n < e ? o.split(e - n) : o),
                        i < 0 && n >= e && (i = r),
                        n = a,
                        r++
                }
                let a = this.length - e;
                return this.length = e,
                    i > -1 && (this.children.length = i,
                        this.markDirty()),
                    new J(this.mark, t, a)
            }
            domAtPos(e) {
                return ne(this, e)
            }
            coordsAt(e, t) {
                return re(this, e, t)
            }
        }
        class ee extends q {
            static create(e, t, n) {
                return new ee(e, t, n)
            }
            constructor(e, t, n) {
                super(),
                    this.widget = e,
                    this.length = t,
                    this.side = n,
                    this.prevWidget = null
            }
            split(e) {
                let t = ee.create(this.widget, this.length - e, this.side);
                return this.length -= e,
                    t
            }
            sync(e) {
                this.dom && this.widget.updateDOM(this.dom, e) || (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom),
                    this.prevWidget = null,
                    this.setDOM(this.widget.toDOM(e)),
                    this.widget.editable || (this.dom.contentEditable = "false"))
            }
            getSide() {
                return this.side
            }
            merge(e, t, n, i, r, a) {
                return !(n && (!(n instanceof ee && this.widget.compare(n.widget)) || e > 0 && r <= 0 || t < this.length && a <= 0)) && (this.length = e + (n ? n.length : 0) + (this.length - t),
                    !0)
            }
            become(e) {
                return e instanceof ee && e.side == this.side && this.widget.constructor == e.widget.constructor && (this.widget.compare(e.widget) || this.markDirty(!0),
                    this.dom && !this.prevWidget && (this.prevWidget = this.widget),
                    this.widget = e.widget,
                    this.length = e.length,
                    !0)
            }
            ignoreMutation() {
                return !0
            }
            ignoreEvent(e) {
                return this.widget.ignoreEvent(e)
            }
            get overrideDOMText() {
                if (0 == this.length)
                    return i.EY.empty;
                let e = this;
                for (; e.parent;)
                    e = e.parent;
                let { view: t } = e
                    , n = t && t.state.doc
                    , r = this.posAtStart;
                return n ? n.slice(r, r + this.length) : i.EY.empty
            }
            domAtPos(e) {
                return (this.length ? 0 == e : this.side > 0) ? W.before(this.dom) : W.after(this.dom, e == this.length)
            }
            domBoundsAround() {
                return null
            }
            coordsAt(e, t) {
                let n = this.widget.coordsAt(this.dom, e, t);
                if (n)
                    return n;
                let i = this.dom.getClientRects()
                    , r = null;
                if (!i.length)
                    return null;
                let a = this.side ? this.side < 0 : e > 0;
                for (let o = a ? i.length - 1 : 0; r = i[o],
                    !(e > 0 ? 0 == o : o == i.length - 1 || r.top < r.bottom); o += a ? -1 : 1)
                    ;
                return b(r, !a)
            }
            get isEditable() {
                return !1
            }
            get isWidget() {
                return !0
            }
            get isHidden() {
                return this.widget.isHidden
            }
            destroy() {
                super.destroy(),
                    this.dom && this.widget.destroy(this.dom)
            }
        }
        class te extends q {
            constructor(e) {
                super(),
                    this.side = e
            }
            get length() {
                return 0
            }
            merge() {
                return !1
            }
            become(e) {
                return e instanceof te && e.side == this.side
            }
            split() {
                return new te(this.side)
            }
            sync() {
                if (!this.dom) {
                    let e = document.createElement("img");
                    e.className = "cm-widgetBuffer",
                        e.setAttribute("aria-hidden", "true"),
                        this.setDOM(e)
                }
            }
            getSide() {
                return this.side
            }
            domAtPos(e) {
                return this.side > 0 ? W.before(this.dom) : W.after(this.dom)
            }
            localPosFromDOM() {
                return 0
            }
            domBoundsAround() {
                return null
            }
            coordsAt(e) {
                return this.dom.getBoundingClientRect()
            }
            get overrideDOMText() {
                return i.EY.empty
            }
            get isHidden() {
                return !0
            }
        }
        function ne(e, t) {
            let n = e.dom
                , { children: i } = e
                , r = 0;
            for (let a = 0; r < i.length; r++) {
                let e = i[r]
                    , o = a + e.length;
                if (!(o == a && e.getSide() <= 0)) {
                    if (t > a && t < o && e.dom.parentNode == n)
                        return e.domAtPos(t - a);
                    if (t <= a)
                        break;
                    a = o
                }
            }
            for (let a = r; a > 0; a--) {
                let e = i[a - 1];
                if (e.dom.parentNode == n)
                    return e.domAtPos(e.length)
            }
            for (let a = r; a < i.length; a++) {
                let e = i[a];
                if (e.dom.parentNode == n)
                    return e.domAtPos(0)
            }
            return new W(n, 0)
        }
        function ie(e, t, n) {
            let i, { children: r } = e;
            n > 0 && t instanceof J && r.length && (i = r[r.length - 1]) instanceof J && i.mark.eq(t.mark) ? ie(i, t.children[0], n - 1) : (r.push(t),
                t.setParent(e)),
                e.length += t.length
        }
        function re(e, t, n) {
            let i = null
                , r = -1
                , a = null
                , o = -1;
            !function e(t, O) {
                for (let s = 0, l = 0; s < t.children.length && l <= O; s++) {
                    let c = t.children[s]
                        , u = l + c.length;
                    u >= O && (c.children.length ? e(c, O - l) : (!a || a.isHidden && n > 0) && (u > O || l == u && c.getSide() > 0) ? (a = c,
                        o = O - l) : (l < O || l == u && c.getSide() < 0 && !c.isHidden) && (i = c,
                            r = O - l)),
                        l = u
                }
            }(e, t);
            let O = (n < 0 ? i : a) || i || a;
            return O ? O.coordsAt(Math.max(0, O == i ? r : o), n) : function (e) {
                let t = e.dom.lastChild;
                if (!t)
                    return e.dom.getBoundingClientRect();
                let n = f(t);
                return n[n.length - 1] || null
            }(e)
        }
        function ae(e, t) {
            for (let n in e)
                "class" == n && t.class ? t.class += " " + e.class : "style" == n && t.style ? t.style += ";" + e.style : t[n] = e[n];
            return t
        }
        K.prototype.children = ee.prototype.children = te.prototype.children = Z;
        const oe = Object.create(null);
        function Oe(e, t, n) {
            if (e == t)
                return !0;
            e || (e = oe),
                t || (t = oe);
            let i = Object.keys(e)
                , r = Object.keys(t);
            if (i.length - (n && i.indexOf(n) > -1 ? 1 : 0) != r.length - (n && r.indexOf(n) > -1 ? 1 : 0))
                return !1;
            for (let a of i)
                if (a != n && (-1 == r.indexOf(a) || e[a] !== t[a]))
                    return !1;
            return !0
        }
        function se(e, t, n) {
            let i = !1;
            if (t)
                for (let r in t)
                    n && r in n || (i = !0,
                        "style" == r ? e.style.cssText = "" : e.removeAttribute(r));
            if (n)
                for (let r in n)
                    t && t[r] == n[r] || (i = !0,
                        "style" == r ? e.style.cssText = n[r] : e.setAttribute(r, n[r]));
            return i
        }
        function le(e) {
            let t = Object.create(null);
            for (let n = 0; n < e.attributes.length; n++) {
                let i = e.attributes[n];
                t[i.name] = i.value
            }
            return t
        }
        class ce {
            eq(e) {
                return !1
            }
            updateDOM(e, t) {
                return !1
            }
            compare(e) {
                return this == e || this.constructor == e.constructor && this.eq(e)
            }
            get estimatedHeight() {
                return -1
            }
            get lineBreaks() {
                return 0
            }
            ignoreEvent(e) {
                return !0
            }
            coordsAt(e, t, n) {
                return null
            }
            get isHidden() {
                return !1
            }
            get editable() {
                return !1
            }
            destroy(e) { }
        }
        var ue = function (e) {
            return e[e.Text = 0] = "Text",
                e[e.WidgetBefore = 1] = "WidgetBefore",
                e[e.WidgetAfter = 2] = "WidgetAfter",
                e[e.WidgetRange = 3] = "WidgetRange",
                e
        }(ue || (ue = {}));
        class de extends i.FB {
            constructor(e, t, n, i) {
                super(),
                    this.startSide = e,
                    this.endSide = t,
                    this.widget = n,
                    this.spec = i
            }
            get heightRelevant() {
                return !1
            }
            static mark(e) {
                return new he(e)
            }
            static widget(e) {
                let t = Math.max(-1e4, Math.min(1e4, e.side || 0))
                    , n = !!e.block;
                return t += n && !e.inlineOrder ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8,
                    new pe(e, t, t, n, e.widget || null, !1)
            }
            static replace(e) {
                let t, n, i = !!e.block;
                if (e.isBlockGap)
                    t = -5e8,
                        n = 4e8;
                else {
                    let { start: r, end: a } = me(e, i);
                    t = (r ? i ? -3e8 : -1 : 5e8) - 1,
                        n = 1 + (a ? i ? 2e8 : 1 : -6e8)
                }
                return new pe(e, t, n, i, e.widget || null, !0)
            }
            static line(e) {
                return new fe(e)
            }
            static set(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                return i.om.of(e, t)
            }
            hasHeight() {
                return !!this.widget && this.widget.estimatedHeight > -1
            }
        }
        de.none = i.om.empty;
        class he extends de {
            constructor(e) {
                let { start: t, end: n } = me(e);
                super(t ? -1 : 5e8, n ? 1 : -6e8, null, e),
                    this.tagName = e.tagName || "span",
                    this.class = e.class || "",
                    this.attrs = e.attributes || null
            }
            eq(e) {
                var t, n;
                return this == e || e instanceof he && this.tagName == e.tagName && (this.class || (null === (t = this.attrs) || void 0 === t ? void 0 : t.class)) == (e.class || (null === (n = e.attrs) || void 0 === n ? void 0 : n.class)) && Oe(this.attrs, e.attrs, "class")
            }
            range(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                if (e >= t)
                    throw new RangeError("Mark decorations may not be empty");
                return super.range(e, t)
            }
        }
        he.prototype.point = !1;
        class fe extends de {
            constructor(e) {
                super(-2e8, -2e8, null, e)
            }
            eq(e) {
                return e instanceof fe && this.spec.class == e.spec.class && Oe(this.spec.attributes, e.spec.attributes)
            }
            range(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                if (t != e)
                    throw new RangeError("Line decoration ranges must be zero-length");
                return super.range(e, t)
            }
        }
        fe.prototype.mapMode = i.iR.TrackBefore,
            fe.prototype.point = !0;
        class pe extends de {
            constructor(e, t, n, r, a, o) {
                super(t, n, a, e),
                    this.block = r,
                    this.isReplace = o,
                    this.mapMode = r ? t <= 0 ? i.iR.TrackBefore : i.iR.TrackAfter : i.iR.TrackDel
            }
            get type() {
                return this.startSide != this.endSide ? ue.WidgetRange : this.startSide <= 0 ? ue.WidgetBefore : ue.WidgetAfter
            }
            get heightRelevant() {
                return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0)
            }
            eq(e) {
                return e instanceof pe && (t = this.widget,
                    n = e.widget,
                    t == n || !!(t && n && t.compare(n))) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
                var t, n
            }
            range(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e;
                if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
                    throw new RangeError("Invalid range for replacement decoration");
                if (!this.isReplace && t != e)
                    throw new RangeError("Widget decorations can only have zero-length ranges");
                return super.range(e, t)
            }
        }
        function me(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                , { inclusiveStart: n, inclusiveEnd: i } = e;
            return null == n && (n = e.inclusive),
                null == i && (i = e.inclusive),
            {
                start: null !== n && void 0 !== n ? n : t,
                end: null !== i && void 0 !== i ? i : t
            }
        }
        function ge(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
                , r = n.length - 1;
            r >= 0 && n[r] + i >= e ? n[r] = Math.max(n[r], t) : n.push(e, t)
        }
        pe.prototype.point = !0;
        class Qe extends q {
            constructor() {
                super(...arguments),
                    this.children = [],
                    this.length = 0,
                    this.prevAttrs = void 0,
                    this.attrs = null,
                    this.breakAfter = 0
            }
            merge(e, t, n, i, r, a) {
                if (n) {
                    if (!(n instanceof Qe))
                        return !1;
                    this.dom || n.transferDOM(this)
                }
                return i && this.setDeco(n ? n.attrs : null),
                    V(this, e, t, n ? n.children.slice() : [], r, a),
                    !0
            }
            split(e) {
                let t = new Qe;
                if (t.breakAfter = this.breakAfter,
                    0 == this.length)
                    return t;
                let { i: n, off: i } = this.childPos(e);
                i && (t.append(this.children[n].split(i), 0),
                    this.children[n].merge(i, this.children[n].length, null, !1, 0, 0),
                    n++);
                for (let r = n; r < this.children.length; r++)
                    t.append(this.children[r], 0);
                for (; n > 0 && 0 == this.children[n - 1].length;)
                    this.children[--n].destroy();
                return this.children.length = n,
                    this.markDirty(),
                    this.length = e,
                    t
            }
            transferDOM(e) {
                this.dom && (this.markDirty(),
                    e.setDOM(this.dom),
                    e.prevAttrs = void 0 === this.prevAttrs ? this.attrs : this.prevAttrs,
                    this.prevAttrs = void 0,
                    this.dom = null)
            }
            setDeco(e) {
                Oe(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs,
                    this.markDirty()),
                    this.attrs = e)
            }
            append(e, t) {
                ie(this, e, t)
            }
            addLineDeco(e) {
                let t = e.spec.attributes
                    , n = e.spec.class;
                t && (this.attrs = ae(t, this.attrs || {})),
                    n && (this.attrs = ae({
                        class: n
                    }, this.attrs || {}))
            }
            domAtPos(e) {
                return ne(this, e)
            }
            reuseDOM(e) {
                "DIV" == e.nodeName && (this.setDOM(e),
                    this.flags |= 6)
            }
            sync(e, t) {
                var n;
                this.dom ? 4 & this.flags && (_(this.dom),
                    this.dom.className = "cm-line",
                    this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")),
                        this.dom.className = "cm-line",
                        this.prevAttrs = this.attrs ? null : void 0),
                    void 0 !== this.prevAttrs && (se(this.dom, this.prevAttrs, this.attrs),
                        this.dom.classList.add("cm-line"),
                        this.prevAttrs = void 0),
                    super.sync(e, t);
                let i = this.dom.lastChild;
                for (; i && q.get(i) instanceof J;)
                    i = i.lastChild;
                if (!i || !this.length || "BR" != i.nodeName && 0 == (null === (n = q.get(i)) || void 0 === n ? void 0 : n.isEditable) && (!H.ios || !this.children.some((e => e instanceof K)))) {
                    let e = document.createElement("BR");
                    e.cmIgnore = !0,
                        this.dom.appendChild(e)
                }
            }
            measureTextSize() {
                if (0 == this.children.length || this.length > 20)
                    return null;
                let e, t = 0;
                for (let n of this.children) {
                    if (!(n instanceof K) || /[^ -~]/.test(n.text))
                        return null;
                    let i = f(n.dom);
                    if (1 != i.length)
                        return null;
                    t += i[0].width,
                        e = i[0].height
                }
                return t ? {
                    lineHeight: this.dom.getBoundingClientRect().height,
                    charWidth: t / this.length,
                    textHeight: e
                } : null
            }
            coordsAt(e, t) {
                let n = re(this, e, t);
                if (!this.children.length && n && this.parent) {
                    let { heightOracle: e } = this.parent.view.viewState
                        , t = n.bottom - n.top;
                    if (Math.abs(t - e.lineHeight) < 2 && e.textHeight < t) {
                        let i = (t - e.textHeight) / 2;
                        return {
                            top: n.top + i,
                            bottom: n.bottom - i,
                            left: n.left,
                            right: n.left
                        }
                    }
                }
                return n
            }
            become(e) {
                return e instanceof Qe && 0 == this.children.length && 0 == e.children.length && Oe(this.attrs, e.attrs) && this.breakAfter == e.breakAfter
            }
            covers() {
                return !0
            }
            static find(e, t) {
                for (let n = 0, i = 0; n < e.children.length; n++) {
                    let r = e.children[n]
                        , a = i + r.length;
                    if (a >= t) {
                        if (r instanceof Qe)
                            return r;
                        if (a > t)
                            break
                    }
                    i = a + r.breakAfter
                }
                return null
            }
        }
        class $e extends q {
            constructor(e, t, n) {
                super(),
                    this.widget = e,
                    this.length = t,
                    this.deco = n,
                    this.breakAfter = 0,
                    this.prevWidget = null
            }
            merge(e, t, n, i, r, a) {
                return !(n && (!(n instanceof $e && this.widget.compare(n.widget)) || e > 0 && r <= 0 || t < this.length && a <= 0)) && (this.length = e + (n ? n.length : 0) + (this.length - t),
                    !0)
            }
            domAtPos(e) {
                return 0 == e ? W.before(this.dom) : W.after(this.dom, e == this.length)
            }
            split(e) {
                let t = this.length - e;
                this.length = e;
                let n = new $e(this.widget, t, this.deco);
                return n.breakAfter = this.breakAfter,
                    n
            }
            get children() {
                return Z
            }
            sync(e) {
                this.dom && this.widget.updateDOM(this.dom, e) || (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom),
                    this.prevWidget = null,
                    this.setDOM(this.widget.toDOM(e)),
                    this.widget.editable || (this.dom.contentEditable = "false"))
            }
            get overrideDOMText() {
                return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : i.EY.empty
            }
            domBoundsAround() {
                return null
            }
            become(e) {
                return e instanceof $e && e.widget.constructor == this.widget.constructor && (e.widget.compare(this.widget) || this.markDirty(!0),
                    this.dom && !this.prevWidget && (this.prevWidget = this.widget),
                    this.widget = e.widget,
                    this.length = e.length,
                    this.deco = e.deco,
                    this.breakAfter = e.breakAfter,
                    !0)
            }
            ignoreMutation() {
                return !0
            }
            ignoreEvent(e) {
                return this.widget.ignoreEvent(e)
            }
            get isEditable() {
                return !1
            }
            get isWidget() {
                return !0
            }
            coordsAt(e, t) {
                let n = this.widget.coordsAt(this.dom, e, t);
                return n || (this.widget instanceof be ? null : b(this.dom.getBoundingClientRect(), this.length ? 0 == e : t <= 0))
            }
            destroy() {
                super.destroy(),
                    this.dom && this.widget.destroy(this.dom)
            }
            covers(e) {
                let { startSide: t, endSide: n } = this.deco;
                return t != n && (e < 0 ? t < 0 : n > 0)
            }
        }
        class be extends ce {
            constructor(e) {
                super(),
                    this.height = e
            }
            toDOM() {
                let e = document.createElement("div");
                return e.className = "cm-gap",
                    this.updateDOM(e),
                    e
            }
            eq(e) {
                return e.height == this.height
            }
            updateDOM(e) {
                return e.style.height = this.height + "px",
                    !0
            }
            get editable() {
                return !0
            }
            get estimatedHeight() {
                return this.height
            }
            ignoreEvent() {
                return !1
            }
        }
        class ye {
            constructor(e, t, n, i) {
                this.doc = e,
                    this.pos = t,
                    this.end = n,
                    this.disallowBlockEffectsFor = i,
                    this.content = [],
                    this.curLine = null,
                    this.breakAtStart = 0,
                    this.pendingBuffer = 0,
                    this.bufferMarks = [],
                    this.atCursorPos = !0,
                    this.openStart = -1,
                    this.openEnd = -1,
                    this.text = "",
                    this.textOff = 0,
                    this.cursor = e.iter(),
                    this.skip = t
            }
            posCovered() {
                if (0 == this.content.length)
                    return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
                let e = this.content[this.content.length - 1];
                return !(e.breakAfter || e instanceof $e && e.deco.endSide < 0)
            }
            getLine() {
                return this.curLine || (this.content.push(this.curLine = new Qe),
                    this.atCursorPos = !0),
                    this.curLine
            }
            flushBuffer() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.bufferMarks;
                this.pendingBuffer && (this.curLine.append(Se(new te(-1), e), e.length),
                    this.pendingBuffer = 0)
            }
            addBlockWidget(e) {
                this.flushBuffer(),
                    this.curLine = null,
                    this.content.push(e)
            }
            finish(e) {
                this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0,
                    this.posCovered() || e && this.content.length && this.content[this.content.length - 1] instanceof $e || this.getLine()
            }
            buildText(e, t, n) {
                for (; e > 0;) {
                    if (this.textOff == this.text.length) {
                        let { value: t, lineBreak: n, done: i } = this.cursor.next(this.skip);
                        if (this.skip = 0,
                            i)
                            throw new Error("Ran out of text content when drawing inline views");
                        if (n) {
                            this.posCovered() || this.getLine(),
                                this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1,
                                this.flushBuffer(),
                                this.curLine = null,
                                this.atCursorPos = !0,
                                e--;
                            continue
                        }
                        this.text = t,
                            this.textOff = 0
                    }
                    let i = Math.min(this.text.length - this.textOff, e, 512);
                    this.flushBuffer(t.slice(t.length - n)),
                        this.getLine().append(Se(new K(this.text.slice(this.textOff, this.textOff + i)), t), n),
                        this.atCursorPos = !0,
                        this.textOff += i,
                        e -= i,
                        n = 0
                }
            }
            span(e, t, n, i) {
                this.buildText(t - e, n, i),
                    this.pos = t,
                    this.openStart < 0 && (this.openStart = i)
            }
            point(e, t, n, i, r, a) {
                if (this.disallowBlockEffectsFor[a] && n instanceof pe) {
                    if (n.block)
                        throw new RangeError("Block decorations may not be specified via plugins");
                    if (t > this.doc.lineAt(this.pos).to)
                        throw new RangeError("Decorations that replace line breaks may not be specified via plugins")
                }
                let o = t - e;
                if (n instanceof pe)
                    if (n.block)
                        n.startSide > 0 && !this.posCovered() && this.getLine(),
                            this.addBlockWidget(new $e(n.widget || Pe.block, o, n));
                    else {
                        let a = ee.create(n.widget || Pe.inline, o, o ? 0 : n.startSide)
                            , O = this.atCursorPos && !a.isEditable && r <= i.length && (e < t || n.startSide > 0)
                            , s = !a.isEditable && (e < t || r > i.length || n.startSide <= 0)
                            , l = this.getLine();
                        2 != this.pendingBuffer || O || a.isEditable || (this.pendingBuffer = 0),
                            this.flushBuffer(i),
                            O && (l.append(Se(new te(1), i), r),
                                r = i.length + Math.max(0, r - i.length)),
                            l.append(Se(a, i), r),
                            this.atCursorPos = s,
                            this.pendingBuffer = s ? e < t || r > i.length ? 1 : 2 : 0,
                            this.pendingBuffer && (this.bufferMarks = i.slice())
                    }
                else
                    this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(n);
                o && (this.textOff + o <= this.text.length ? this.textOff += o : (this.skip += o - (this.text.length - this.textOff),
                    this.text = "",
                    this.textOff = 0),
                    this.pos = t),
                    this.openStart < 0 && (this.openStart = r)
            }
            static build(e, t, n, r, a) {
                let o = new ye(e, t, n, a);
                return o.openEnd = i.om.spans(r, t, n, o),
                    o.openStart < 0 && (o.openStart = o.openEnd),
                    o.finish(o.openEnd),
                    o
            }
        }
        function Se(e, t) {
            for (let n of t)
                e = new J(n, [e], e.length);
            return e
        }
        class Pe extends ce {
            constructor(e) {
                super(),
                    this.tag = e
            }
            eq(e) {
                return e.tag == this.tag
            }
            toDOM() {
                return document.createElement(this.tag)
            }
            updateDOM(e) {
                return e.nodeName.toLowerCase() == this.tag
            }
            get isHidden() {
                return !0
            }
        }
        Pe.inline = new Pe("span"),
            Pe.block = new Pe("div");
        var ve = function (e) {
            return e[e.LTR = 0] = "LTR",
                e[e.RTL = 1] = "RTL",
                e
        }(ve || (ve = {}));
        const xe = ve.LTR
            , ke = ve.RTL;
        function we(e) {
            let t = [];
            for (let n = 0; n < e.length; n++)
                t.push(1 << +e[n]);
            return t
        }
        const Xe = we("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008")
            , _e = we("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333")
            , Te = Object.create(null)
            , ze = [];
        for (let sa of ["()", "[]", "{}"]) {
            let e = sa.charCodeAt(0)
                , t = sa.charCodeAt(1);
            Te[e] = t,
                Te[t] = -e
        }
        function Re(e) {
            return e <= 247 ? Xe[e] : 1424 <= e && e <= 1524 ? 2 : 1536 <= e && e <= 1785 ? _e[e - 1536] : 1774 <= e && e <= 2220 ? 4 : 8192 <= e && e <= 8204 ? 256 : 64336 <= e && e <= 65023 ? 4 : 1
        }
        const We = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
        class Ze {
            get dir() {
                return this.level % 2 ? ke : xe
            }
            constructor(e, t, n) {
                this.from = e,
                    this.to = t,
                    this.level = n
            }
            side(e, t) {
                return this.dir == t == e ? this.to : this.from
            }
            forward(e, t) {
                return e == (this.dir == t)
            }
            static find(e, t, n, i) {
                let r = -1;
                for (let a = 0; a < e.length; a++) {
                    let o = e[a];
                    if (o.from <= t && o.to >= t) {
                        if (o.level == n)
                            return a;
                        (r < 0 || (0 != i ? i < 0 ? o.from < t : o.to > t : e[r].level > o.level)) && (r = a)
                    }
                }
                if (r < 0)
                    throw new RangeError("Index out of range");
                return r
            }
        }
        function qe(e, t) {
            if (e.length != t.length)
                return !1;
            for (let n = 0; n < e.length; n++) {
                let i = e[n]
                    , r = t[n];
                if (i.from != r.from || i.to != r.to || i.direction != r.direction || !qe(i.inner, r.inner))
                    return !1
            }
            return !0
        }
        const Ue = [];
        function Ye(e, t, n, i, r, a, o) {
            let O = i % 2 ? 2 : 1;
            if (i % 2 == r % 2)
                for (let s = t, l = 0; s < n;) {
                    let t = !0
                        , c = !1;
                    if (l == a.length || s < a[l].from) {
                        let e = Ue[s];
                        e != O && (t = !1,
                            c = 16 == e)
                    }
                    let u = t || 1 != O ? null : []
                        , d = t ? i : i + 1
                        , h = s;
                    e: for (; ;)
                        if (l < a.length && h == a[l].from) {
                            if (c)
                                break e;
                            let f = a[l];
                            if (!t)
                                for (let e = f.to, t = l + 1; ;) {
                                    if (e == n)
                                        break e;
                                    if (!(t < a.length && a[t].from == e)) {
                                        if (Ue[e] == O)
                                            break e;
                                        break
                                    }
                                    e = a[t++].to
                                }
                            if (l++,
                                u)
                                u.push(f);
                            else {
                                f.from > s && o.push(new Ze(s, f.from, d)),
                                    Ae(e, f.direction == xe != !(d % 2) ? i + 1 : i, r, f.inner, f.from, f.to, o),
                                    s = f.to
                            }
                            h = f.to
                        } else {
                            if (h == n || (t ? Ue[h] != O : Ue[h] == O))
                                break;
                            h++
                        }
                    u ? Ye(e, s, h, i + 1, r, u, o) : s < h && o.push(new Ze(s, h, d)),
                        s = h
                }
            else
                for (let s = n, l = a.length; s > t;) {
                    let n = !0
                        , c = !1;
                    if (!l || s > a[l - 1].to) {
                        let e = Ue[s - 1];
                        e != O && (n = !1,
                            c = 16 == e)
                    }
                    let u = n || 1 != O ? null : []
                        , d = n ? i : i + 1
                        , h = s;
                    e: for (; ;)
                        if (l && h == a[l - 1].to) {
                            if (c)
                                break e;
                            let f = a[--l];
                            if (!n)
                                for (let e = f.from, n = l; ;) {
                                    if (e == t)
                                        break e;
                                    if (!n || a[n - 1].to != e) {
                                        if (Ue[e - 1] == O)
                                            break e;
                                        break
                                    }
                                    e = a[--n].from
                                }
                            if (u)
                                u.push(f);
                            else {
                                f.to < s && o.push(new Ze(f.to, s, d)),
                                    Ae(e, f.direction == xe != !(d % 2) ? i + 1 : i, r, f.inner, f.from, f.to, o),
                                    s = f.from
                            }
                            h = f.from
                        } else {
                            if (h == t || (n ? Ue[h - 1] != O : Ue[h - 1] == O))
                                break;
                            h--
                        }
                    u ? Ye(e, h, s, i + 1, r, u, o) : h < s && o.push(new Ze(h, s, d)),
                        s = h
                }
        }
        function Ae(e, t, n, i, r, a, o) {
            let O = t % 2 ? 2 : 1;
            !function (e, t, n, i, r) {
                for (let a = 0; a <= i.length; a++) {
                    let o = a ? i[a - 1].to : t
                        , O = a < i.length ? i[a].from : n
                        , s = a ? 256 : r;
                    for (let t = o, n = s, i = s; t < O; t++) {
                        let r = Re(e.charCodeAt(t));
                        512 == r ? r = n : 8 == r && 4 == i && (r = 16),
                            Ue[t] = 4 == r ? 2 : r,
                            7 & r && (i = r),
                            n = r
                    }
                    for (let e = o, t = s, i = s; e < O; e++) {
                        let r = Ue[e];
                        if (128 == r)
                            e < O - 1 && t == Ue[e + 1] && 24 & t ? r = Ue[e] = t : Ue[e] = 256;
                        else if (64 == r) {
                            let r = e + 1;
                            for (; r < O && 64 == Ue[r];)
                                r++;
                            let a = e && 8 == t || r < n && 8 == Ue[r] ? 1 == i ? 1 : 8 : 256;
                            for (let t = e; t < r; t++)
                                Ue[t] = a;
                            e = r - 1
                        } else
                            8 == r && 1 == i && (Ue[e] = 1);
                        t = r,
                            7 & r && (i = r)
                    }
                }
            }(e, r, a, i, O),
                function (e, t, n, i, r) {
                    let a = 1 == r ? 2 : 1;
                    for (let o = 0, O = 0, s = 0; o <= i.length; o++) {
                        let l = o ? i[o - 1].to : t
                            , c = o < i.length ? i[o].from : n;
                        for (let t, n, i, o = l; o < c; o++)
                            if (n = Te[t = e.charCodeAt(o)])
                                if (n < 0) {
                                    for (let e = O - 3; e >= 0; e -= 3)
                                        if (ze[e + 1] == -n) {
                                            let t = ze[e + 2]
                                                , n = 2 & t ? r : 4 & t ? 1 & t ? a : r : 0;
                                            n && (Ue[o] = Ue[ze[e]] = n),
                                                O = e;
                                            break
                                        }
                                } else {
                                    if (189 == ze.length)
                                        break;
                                    ze[O++] = o,
                                        ze[O++] = t,
                                        ze[O++] = s
                                }
                            else if (2 == (i = Ue[o]) || 1 == i) {
                                let e = i == r;
                                s = e ? 0 : 1;
                                for (let t = O - 3; t >= 0; t -= 3) {
                                    let n = ze[t + 2];
                                    if (2 & n)
                                        break;
                                    if (e)
                                        ze[t + 2] |= 2;
                                    else {
                                        if (4 & n)
                                            break;
                                        ze[t + 2] |= 4
                                    }
                                }
                            }
                    }
                }(e, r, a, i, O),
                function (e, t, n, i) {
                    for (let r = 0, a = i; r <= n.length; r++) {
                        let o = r ? n[r - 1].to : e
                            , O = r < n.length ? n[r].from : t;
                        for (let s = o; s < O;) {
                            let o = Ue[s];
                            if (256 == o) {
                                let o = s + 1;
                                for (; ;)
                                    if (o == O) {
                                        if (r == n.length)
                                            break;
                                        o = n[r++].to,
                                            O = r < n.length ? n[r].from : t
                                    } else {
                                        if (256 != Ue[o])
                                            break;
                                        o++
                                    }
                                let l = 1 == a
                                    , c = l == (1 == (o < t ? Ue[o] : i)) ? l ? 1 : 2 : i;
                                for (let t = o, i = r, a = i ? n[i - 1].to : e; t > s;)
                                    t == a && (t = n[--i].from,
                                        a = i ? n[i - 1].to : e),
                                        Ue[--t] = c;
                                s = o
                            } else
                                a = o,
                                    s++
                        }
                    }
                }(r, a, i, O),
                Ye(e, r, a, t, n, i, o)
        }
        function Ve(e, t, n) {
            if (!e)
                return [new Ze(0, 0, t == ke ? 1 : 0)];
            if (t == xe && !n.length && !We.test(e))
                return Ee(e.length);
            if (n.length)
                for (; e.length > Ue.length;)
                    Ue[Ue.length] = 256;
            let i = []
                , r = t == xe ? 0 : 1;
            return Ae(e, r, r, n, 0, e.length, i),
                i
        }
        function Ee(e) {
            return [new Ze(0, e, 0)]
        }
        let je = "";
        function Ce(e, t, n, r, a) {
            var o;
            let O = r.head - e.from
                , s = Ze.find(t, O, null !== (o = r.bidiLevel) && void 0 !== o ? o : -1, r.assoc)
                , l = t[s]
                , c = l.side(a, n);
            if (O == c) {
                let e = s += a ? 1 : -1;
                if (e < 0 || e >= t.length)
                    return null;
                l = t[s = e],
                    O = l.side(!a, n),
                    c = l.side(a, n)
            }
            let u = (0,
                i.zK)(e.text, O, l.forward(a, n));
            (u < l.from || u > l.to) && (u = c),
                je = e.text.slice(Math.min(O, u), Math.max(O, u));
            let d = s == (a ? t.length - 1 : 0) ? null : t[s + (a ? 1 : -1)];
            return d && u == c && d.level + (a ? 0 : 1) < l.level ? i.OF.cursor(d.side(!a, n) + e.from, d.forward(a, n) ? 1 : -1, d.level) : i.OF.cursor(u + e.from, l.forward(a, n) ? -1 : 1, l.level)
        }
        function Ge(e, t, n) {
            for (let i = t; i < n; i++) {
                let t = Re(e.charCodeAt(i));
                if (1 == t)
                    return xe;
                if (2 == t || 4 == t)
                    return ke
            }
            return xe
        }
        const Ie = i.sj.define()
            , De = i.sj.define()
            , Ne = i.sj.define()
            , Le = i.sj.define()
            , Me = i.sj.define()
            , Fe = i.sj.define()
            , Be = i.sj.define()
            , He = i.sj.define()
            , Ke = i.sj.define()
            , Je = i.sj.define({
                combine: e => e.some((e => e))
            })
            , et = i.sj.define({
                combine: e => e.some((e => e))
            })
            , tt = i.sj.define();
        class nt {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "nearest"
                    , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "nearest"
                    , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 5
                    , r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 5
                    , a = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
                this.range = e,
                    this.y = t,
                    this.x = n,
                    this.yMargin = i,
                    this.xMargin = r,
                    this.isSnapshot = a
            }
            map(e) {
                return e.empty ? this : new nt(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot)
            }
            clip(e) {
                return this.range.to <= e.doc.length ? this : new nt(i.OF.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot)
            }
        }
        const it = i.Pe.define({
            map: (e, t) => e.map(t)
        })
            , rt = i.Pe.define();
        function at(e, t, n) {
            let i = e.facet(Le);
            i.length ? i[0](t) : window.onerror ? window.onerror(String(t), n, void 0, void 0, t) : n ? console.error(n + ":", t) : console.error(t)
        }
        const ot = i.sj.define({
            combine: e => !e.length || e[0]
        });
        let Ot = 0;
        const st = i.sj.define();
        class lt {
            constructor(e, t, n, i, r) {
                this.id = e,
                    this.create = t,
                    this.domEventHandlers = n,
                    this.domEventObservers = i,
                    this.extension = r(this)
            }
            static define(e, t) {
                const { eventHandlers: n, eventObservers: i, provide: r, decorations: a } = t || {};
                return new lt(Ot++, e, n, i, (e => {
                    let t = [st.of(e)];
                    return a && t.push(ht.of((t => {
                        let n = t.plugin(e);
                        return n ? a(n) : de.none
                    }
                    ))),
                        r && t.push(r(e)),
                        t
                }
                ))
            }
            static fromClass(e, t) {
                return lt.define((t => new e(t)), t)
            }
        }
        class ct {
            constructor(e) {
                this.spec = e,
                    this.mustUpdate = null,
                    this.value = null
            }
            update(e) {
                if (this.value) {
                    if (this.mustUpdate) {
                        let e = this.mustUpdate;
                        if (this.mustUpdate = null,
                            this.value.update)
                            try {
                                this.value.update(e)
                            } catch (t) {
                                if (at(e.state, t, "CodeMirror plugin crashed"),
                                    this.value.destroy)
                                    try {
                                        this.value.destroy()
                                    } catch (n) { }
                                this.deactivate()
                            }
                    }
                } else if (this.spec)
                    try {
                        this.value = this.spec.create(e)
                    } catch (t) {
                        at(e.state, t, "CodeMirror plugin crashed"),
                            this.deactivate()
                    }
                return this
            }
            destroy(e) {
                var t;
                if (null === (t = this.value) || void 0 === t ? void 0 : t.destroy)
                    try {
                        this.value.destroy()
                    } catch (n) {
                        at(e.state, n, "CodeMirror plugin crashed")
                    }
            }
            deactivate() {
                this.spec = this.value = null
            }
        }
        const ut = i.sj.define()
            , dt = i.sj.define()
            , ht = i.sj.define()
            , ft = i.sj.define()
            , pt = i.sj.define()
            , mt = i.sj.define();
        function gt(e, t) {
            let n = e.state.facet(mt);
            if (!n.length)
                return n;
            let r = n.map((t => t instanceof Function ? t(e) : t))
                , a = [];
            return i.om.spans(r, t.from, t.to, {
                point() { },
                span(e, n, i, r) {
                    let o = e - t.from
                        , O = n - t.from
                        , s = a;
                    for (let a = i.length - 1; a >= 0; a--,
                        r--) {
                        let e, n = i[a].spec.bidiIsolate;
                        if (null == n && (n = Ge(t.text, o, O)),
                            r > 0 && s.length && (e = s[s.length - 1]).to == o && e.direction == n)
                            e.to = O,
                                s = e.inner;
                        else {
                            let e = {
                                from: o,
                                to: O,
                                direction: n,
                                inner: []
                            };
                            s.push(e),
                                s = e.inner
                        }
                    }
                }
            }),
                a
        }
        const Qt = i.sj.define();
        function $t(e) {
            let t = 0
                , n = 0
                , i = 0
                , r = 0;
            for (let a of e.state.facet(Qt)) {
                let o = a(e);
                o && (null != o.left && (t = Math.max(t, o.left)),
                    null != o.right && (n = Math.max(n, o.right)),
                    null != o.top && (i = Math.max(i, o.top)),
                    null != o.bottom && (r = Math.max(r, o.bottom)))
            }
            return {
                left: t,
                right: n,
                top: i,
                bottom: r
            }
        }
        const bt = i.sj.define();
        class yt {
            constructor(e, t, n, i) {
                this.fromA = e,
                    this.toA = t,
                    this.fromB = n,
                    this.toB = i
            }
            join(e) {
                return new yt(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB))
            }
            addToSet(e) {
                let t = e.length
                    , n = this;
                for (; t > 0; t--) {
                    let i = e[t - 1];
                    if (!(i.fromA > n.toA)) {
                        if (i.toA < n.fromA)
                            break;
                        n = n.join(i),
                            e.splice(t - 1, 1)
                    }
                }
                return e.splice(t, 0, n),
                    e
            }
            static extendWithRanges(e, t) {
                if (0 == t.length)
                    return e;
                let n = [];
                for (let i = 0, r = 0, a = 0, o = 0; ; i++) {
                    let O = i == e.length ? null : e[i]
                        , s = a - o
                        , l = O ? O.fromB : 1e9;
                    for (; r < t.length && t[r] < l;) {
                        let e = t[r]
                            , i = t[r + 1]
                            , a = Math.max(o, e)
                            , O = Math.min(l, i);
                        if (a <= O && new yt(a + s, O + s, a, O).addToSet(n),
                            i > l)
                            break;
                        r += 2
                    }
                    if (!O)
                        return n;
                    new yt(O.fromA, O.toA, O.fromB, O.toB).addToSet(n),
                        a = O.toA,
                        o = O.toB
                }
            }
        }
        class St {
            constructor(e, t, n) {
                this.view = e,
                    this.state = t,
                    this.transactions = n,
                    this.flags = 0,
                    this.startState = e.state,
                    this.changes = i.VR.empty(this.startState.doc.length);
                for (let i of n)
                    this.changes = this.changes.compose(i.changes);
                let r = [];
                this.changes.iterChangedRanges(((e, t, n, i) => r.push(new yt(e, t, n, i)))),
                    this.changedRanges = r
            }
            static create(e, t, n) {
                return new St(e, t, n)
            }
            get viewportChanged() {
                return (4 & this.flags) > 0
            }
            get heightChanged() {
                return (2 & this.flags) > 0
            }
            get geometryChanged() {
                return this.docChanged || (10 & this.flags) > 0
            }
            get focusChanged() {
                return (1 & this.flags) > 0
            }
            get docChanged() {
                return !this.changes.empty
            }
            get selectionSet() {
                return this.transactions.some((e => e.selection))
            }
            get empty() {
                return 0 == this.flags && 0 == this.transactions.length
            }
        }
        class Pt extends q {
            get length() {
                return this.view.state.doc.length
            }
            constructor(e) {
                super(),
                    this.view = e,
                    this.decorations = [],
                    this.dynamicDecorationMap = [!1],
                    this.domChanged = null,
                    this.hasComposition = null,
                    this.markedForComposition = new Set,
                    this.editContextFormatting = de.none,
                    this.lastCompositionAfterCursor = !1,
                    this.minWidth = 0,
                    this.minWidthFrom = 0,
                    this.minWidthTo = 0,
                    this.impreciseAnchor = null,
                    this.impreciseHead = null,
                    this.forceSelection = !1,
                    this.lastUpdate = Date.now(),
                    this.setDOM(e.contentDOM),
                    this.children = [new Qe],
                    this.children[0].setParent(this),
                    this.updateDeco(),
                    this.updateInner([new yt(0, 0, 0, e.state.doc.length)], 0, null)
            }
            update(e) {
                var t;
                let n = e.changedRanges;
                this.minWidth > 0 && n.length && (n.every((e => {
                    let { fromA: t, toA: n } = e;
                    return n < this.minWidthFrom || t > this.minWidthTo
                }
                )) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1),
                    this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0),
                    this.updateEditContextFormatting(e);
                let r = -1;
                this.view.inputState.composing >= 0 && !this.view.observer.editContext && ((null === (t = this.domChanged) || void 0 === t ? void 0 : t.newSel) ? r = this.domChanged.newSel.head : function (e, t) {
                    let n = !1;
                    t && e.iterChangedRanges(((e, i) => {
                        e < t.to && i > t.from && (n = !0)
                    }
                    ));
                    return n
                }(e.changes, this.hasComposition) || e.selectionSet || (r = e.state.selection.main.head));
                let a = r > -1 ? function (e, t, n) {
                    let i = vt(e, n);
                    if (!i)
                        return null;
                    let { node: r, from: a, to: o } = i
                        , O = r.nodeValue;
                    if (/[\n\r]/.test(O))
                        return null;
                    if (e.state.doc.sliceString(i.from, i.to) != O)
                        return null;
                    let s = t.invertedDesc
                        , l = new yt(s.mapPos(a), s.mapPos(o), a, o)
                        , c = [];
                    for (let u = r.parentNode; ; u = u.parentNode) {
                        let t = q.get(u);
                        if (t instanceof J)
                            c.push({
                                node: u,
                                deco: t.mark
                            });
                        else {
                            if (t instanceof Qe || "DIV" == u.nodeName && u.parentNode == e.contentDOM)
                                return {
                                    range: l,
                                    text: r,
                                    marks: c,
                                    line: u
                                };
                            if (u == e.contentDOM)
                                return null;
                            c.push({
                                node: u,
                                deco: new he({
                                    inclusive: !0,
                                    attributes: le(u),
                                    tagName: u.tagName.toLowerCase()
                                })
                            })
                        }
                    }
                }(this.view, e.changes, r) : null;
                if (this.domChanged = null,
                    this.hasComposition) {
                    this.markedForComposition.clear();
                    let { from: t, to: i } = this.hasComposition;
                    n = new yt(t, i, e.changes.mapPos(t, -1), e.changes.mapPos(i, 1)).addToSet(n.slice())
                }
                this.hasComposition = a ? {
                    from: a.range.fromB,
                    to: a.range.toB
                } : null,
                    (H.ie || H.chrome) && !a && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
                let o = function (e, t, n) {
                    let r = new xt;
                    return i.om.compare(e, t, n, r),
                        r.changes
                }(this.decorations, this.updateDeco(), e.changes);
                return n = yt.extendWithRanges(n, o),
                    !!(7 & this.flags || 0 != n.length) && (this.updateInner(n, e.startState.doc.length, a),
                        e.transactions.length && (this.lastUpdate = Date.now()),
                        !0)
            }
            updateInner(e, t, n) {
                this.view.viewState.mustMeasureContent = !0,
                    this.updateChildren(e, t, n);
                let { observer: i } = this.view;
                i.ignore((() => {
                    this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px",
                        this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                    let e = H.chrome || H.ios ? {
                        node: i.selectionRange.focusNode,
                        written: !1
                    } : void 0;
                    this.sync(this.view, e),
                        this.flags &= -8,
                        e && (e.written || i.selectionRange.focusNode != e.node) && (this.forceSelection = !0),
                        this.dom.style.height = ""
                }
                )),
                    this.markedForComposition.forEach((e => e.flags &= -9));
                let r = [];
                if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                    for (let a of this.children)
                        a instanceof $e && a.widget instanceof be && r.push(a.dom);
                i.updateGaps(r)
            }
            updateChildren(e, t, n) {
                let i = n ? n.range.addToSet(e.slice()) : e
                    , r = this.childCursor(t);
                for (let a = i.length - 1; ; a--) {
                    let e = a >= 0 ? i[a] : null;
                    if (!e)
                        break;
                    let t, o, O, s, { fromA: l, toA: c, fromB: u, toB: d } = e;
                    if (n && n.range.fromB < d && n.range.toB > u) {
                        let e = ye.build(this.view.state.doc, u, n.range.fromB, this.decorations, this.dynamicDecorationMap)
                            , i = ye.build(this.view.state.doc, n.range.toB, d, this.decorations, this.dynamicDecorationMap);
                        o = e.breakAtStart,
                            O = e.openStart,
                            s = i.openEnd;
                        let r = this.compositionView(n);
                        i.breakAtStart ? r.breakAfter = 1 : i.content.length && r.merge(r.length, r.length, i.content[0], !1, i.openStart, 0) && (r.breakAfter = i.content[0].breakAfter,
                            i.content.shift()),
                            e.content.length && r.merge(0, 0, e.content[e.content.length - 1], !0, 0, e.openEnd) && e.content.pop(),
                            t = e.content.concat(r).concat(i.content)
                    } else
                        ({ content: t, breakAtStart: o, openStart: O, openEnd: s } = ye.build(this.view.state.doc, u, d, this.decorations, this.dynamicDecorationMap));
                    let { i: h, off: f } = r.findPos(c, 1)
                        , { i: p, off: m } = r.findPos(l, -1);
                    A(this, p, m, h, f, t, o, O, s)
                }
                n && this.fixCompositionDOM(n)
            }
            updateEditContextFormatting(e) {
                this.editContextFormatting = this.editContextFormatting.map(e.changes);
                for (let t of e.transactions)
                    for (let e of t.effects)
                        e.is(rt) && (this.editContextFormatting = e.value)
            }
            compositionView(e) {
                let t = new K(e.text.nodeValue);
                t.flags |= 8;
                for (let { deco: i } of e.marks)
                    t = new J(i, [t], t.length);
                let n = new Qe;
                return n.append(t, 0),
                    n
            }
            fixCompositionDOM(e) {
                let t = (e, t) => {
                    t.flags |= 8 | (t.children.some((e => 7 & e.flags)) ? 1 : 0),
                        this.markedForComposition.add(t);
                    let n = q.get(e);
                    n && n != t && (n.dom = null),
                        t.setDOM(e)
                }
                    , n = this.childPos(e.range.fromB, 1)
                    , i = this.children[n.i];
                t(e.line, i);
                for (let r = e.marks.length - 1; r >= -1; r--)
                    n = i.childPos(n.off, 1),
                        i = i.children[n.i],
                        t(r >= 0 ? e.marks[r].node : e.text, i)
            }
            updateSelection() {
                let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                !(arguments.length > 0 && void 0 !== arguments[0] && arguments[0]) && this.view.observer.selectionRange.focusNode || this.view.observer.readSelectionRange();
                let t = this.view.root.activeElement
                    , n = t == this.dom
                    , i = !n && h(this.dom, this.view.observer.selectionRange) && !(t && this.dom.contains(t));
                if (!(n || e || i))
                    return;
                let r = this.forceSelection;
                this.forceSelection = !1;
                let a = this.view.state.selection.main
                    , o = this.moveToLine(this.domAtPos(a.anchor))
                    , O = a.empty ? o : this.moveToLine(this.domAtPos(a.head));
                if (H.gecko && a.empty && !this.hasComposition && (1 == (s = o).node.nodeType && s.node.firstChild && (0 == s.offset || "false" == s.node.childNodes[s.offset - 1].contentEditable) && (s.offset == s.node.childNodes.length || "false" == s.node.childNodes[s.offset].contentEditable))) {
                    let e = document.createTextNode("");
                    this.view.observer.ignore((() => o.node.insertBefore(e, o.node.childNodes[o.offset] || null))),
                        o = O = new W(e, 0),
                        r = !0
                }
                var s;
                let l = this.view.observer.selectionRange;
                !r && l.focusNode && (p(o.node, o.offset, l.anchorNode, l.anchorOffset) && p(O.node, O.offset, l.focusNode, l.focusOffset) || this.suppressWidgetCursorChange(l, a)) || (this.view.observer.ignore((() => {
                    H.android && H.chrome && this.dom.contains(l.focusNode) && function (e, t) {
                        for (let n = e; n && n != t; n = n.assignedSlot || n.parentNode)
                            if (1 == n.nodeType && "false" == n.contentEditable)
                                return !0;
                        return !1
                    }(l.focusNode, this.dom) && (this.dom.blur(),
                        this.dom.focus({
                            preventScroll: !0
                        }));
                    let e = u(this.view.root);
                    if (e)
                        if (a.empty) {
                            if (H.gecko) {
                                let e = (n = o.node,
                                    r = o.offset,
                                    1 != n.nodeType ? 0 : (r && "false" == n.childNodes[r - 1].contentEditable ? 1 : 0) | (r < n.childNodes.length && "false" == n.childNodes[r].contentEditable ? 2 : 0));
                                if (e && 3 != e) {
                                    let t = (1 == e ? z : R)(o.node, o.offset);
                                    t && (o = new W(t.node, t.offset))
                                }
                            }
                            e.collapse(o.node, o.offset),
                                null != a.bidiLevel && void 0 !== e.caretBidiLevel && (e.caretBidiLevel = a.bidiLevel)
                        } else if (e.extend) {
                            e.collapse(o.node, o.offset);
                            try {
                                e.extend(O.node, O.offset)
                            } catch (s) { }
                        } else {
                            let t = document.createRange();
                            a.anchor > a.head && ([o, O] = [O, o]),
                                t.setEnd(O.node, O.offset),
                                t.setStart(o.node, o.offset),
                                e.removeAllRanges(),
                                e.addRange(t)
                        }
                    else
                        ; var n, r;
                    i && this.view.root.activeElement == this.dom && (this.dom.blur(),
                        t && t.focus())
                }
                )),
                    this.view.observer.setSelectionRange(o, O)),
                    this.impreciseAnchor = o.precise ? null : new W(l.anchorNode, l.anchorOffset),
                    this.impreciseHead = O.precise ? null : new W(l.focusNode, l.focusOffset)
            }
            suppressWidgetCursorChange(e, t) {
                return this.hasComposition && t.empty && p(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == t.head
            }
            enforceCursorAssoc() {
                if (this.hasComposition)
                    return;
                let { view: e } = this
                    , t = e.state.selection.main
                    , n = u(e.root)
                    , { anchorNode: i, anchorOffset: r } = e.observer.selectionRange;
                if (!n || !t.empty || !t.assoc || !n.modify)
                    return;
                let a = Qe.find(this, t.head);
                if (!a)
                    return;
                let o = a.posAtStart;
                if (t.head == o || t.head == o + a.length)
                    return;
                let O = this.coordsAt(t.head, -1)
                    , s = this.coordsAt(t.head, 1);
                if (!O || !s || O.bottom > s.top)
                    return;
                let l = this.domAtPos(t.head + t.assoc);
                n.collapse(l.node, l.offset),
                    n.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary"),
                    e.observer.readSelectionRange();
                let c = e.observer.selectionRange;
                e.docView.posFromDOM(c.anchorNode, c.anchorOffset) != t.from && n.collapse(i, r)
            }
            moveToLine(e) {
                let t, n = this.dom;
                if (e.node != n)
                    return e;
                for (let i = e.offset; !t && i < n.childNodes.length; i++) {
                    let e = q.get(n.childNodes[i]);
                    e instanceof Qe && (t = e.domAtPos(0))
                }
                for (let i = e.offset - 1; !t && i >= 0; i--) {
                    let e = q.get(n.childNodes[i]);
                    e instanceof Qe && (t = e.domAtPos(e.length))
                }
                return t ? new W(t.node, t.offset, !0) : e
            }
            nearest(e) {
                for (let t = e; t;) {
                    let e = q.get(t);
                    if (e && e.rootView == this)
                        return e;
                    t = t.parentNode
                }
                return null
            }
            posFromDOM(e, t) {
                let n = this.nearest(e);
                if (!n)
                    throw new RangeError("Trying to find position for a DOM position outside of the document");
                return n.localPosFromDOM(e, t) + n.posAtStart
            }
            domAtPos(e) {
                let { i: t, off: n } = this.childCursor().findPos(e, -1);
                for (; t < this.children.length - 1;) {
                    let e = this.children[t];
                    if (n < e.length || e instanceof Qe)
                        break;
                    t++,
                        n = 0
                }
                return this.children[t].domAtPos(n)
            }
            coordsAt(e, t) {
                let n = null
                    , i = 0;
                for (let r = this.length, a = this.children.length - 1; a >= 0; a--) {
                    let o = this.children[a]
                        , O = r - o.breakAfter
                        , s = O - o.length;
                    if (O < e)
                        break;
                    if (s <= e && (s < e || o.covers(-1)) && (O > e || o.covers(1)) && (!n || o instanceof Qe && !(n instanceof Qe && t >= 0)))
                        n = o,
                            i = s;
                    else if (n && s == e && O == e && o instanceof $e && Math.abs(t) < 2) {
                        if (o.deco.startSide < 0)
                            break;
                        a && (n = null)
                    }
                    r = s
                }
                return n ? n.coordsAt(e - i, t) : null
            }
            coordsForChar(e) {
                let { i: t, off: n } = this.childPos(e, 1)
                    , r = this.children[t];
                if (!(r instanceof Qe))
                    return null;
                for (; r.children.length;) {
                    let { i: e, off: t } = r.childPos(n, 1);
                    for (; ; e++) {
                        if (e == r.children.length)
                            return null;
                        if ((r = r.children[e]).length)
                            break
                    }
                    n = t
                }
                if (!(r instanceof K))
                    return null;
                let a = (0,
                    i.zK)(r.text, n);
                if (a == n)
                    return null;
                let o = w(r.dom, n, a).getClientRects();
                for (let i = 0; i < o.length; i++) {
                    let e = o[i];
                    if (i == o.length - 1 || e.top < e.bottom && e.left < e.right)
                        return e
                }
                return null
            }
            measureVisibleLineHeights(e) {
                let t = []
                    , { from: n, to: i } = e
                    , r = this.view.contentDOM.clientWidth
                    , a = r > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1
                    , o = -1
                    , O = this.view.textDirection == ve.LTR;
                for (let s = 0, l = 0; l < this.children.length; l++) {
                    let e = this.children[l]
                        , c = s + e.length;
                    if (c > i)
                        break;
                    if (s >= n) {
                        let n = e.dom.getBoundingClientRect();
                        if (t.push(n.height),
                            a) {
                            let t = e.dom.lastChild
                                , i = t ? f(t) : [];
                            if (i.length) {
                                let e = i[i.length - 1]
                                    , t = O ? e.right - n.left : n.right - e.left;
                                t > o && (o = t,
                                    this.minWidth = r,
                                    this.minWidthFrom = s,
                                    this.minWidthTo = c)
                            }
                        }
                    }
                    s = c + e.breakAfter
                }
                return t
            }
            textDirectionAt(e) {
                let { i: t } = this.childPos(e, 1);
                return "rtl" == getComputedStyle(this.children[t].dom).direction ? ve.RTL : ve.LTR
            }
            measureTextSize() {
                for (let r of this.children)
                    if (r instanceof Qe) {
                        let e = r.measureTextSize();
                        if (e)
                            return e
                    }
                let e, t, n, i = document.createElement("div");
                return i.className = "cm-line",
                    i.style.width = "99999px",
                    i.style.position = "absolute",
                    i.textContent = "abc def ghi jkl mno pqr stu",
                    this.view.observer.ignore((() => {
                        this.dom.appendChild(i);
                        let r = f(i.firstChild)[0];
                        e = i.getBoundingClientRect().height,
                            t = r ? r.width / 27 : 7,
                            n = r ? r.height : e,
                            i.remove()
                    }
                    )),
                {
                    lineHeight: e,
                    charWidth: t,
                    textHeight: n
                }
            }
            childCursor() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.length
                    , t = this.children.length;
                return t && (e -= this.children[--t].length),
                    new Y(this.children, e, t)
            }
            computeBlockGapDeco() {
                let e = []
                    , t = this.view.viewState;
                for (let n = 0, i = 0; ; i++) {
                    let r = i == t.viewports.length ? null : t.viewports[i]
                        , a = r ? r.from - 1 : this.length;
                    if (a > n) {
                        let i = (t.lineBlockAt(a).bottom - t.lineBlockAt(n).top) / this.view.scaleY;
                        e.push(de.replace({
                            widget: new be(i),
                            block: !0,
                            inclusive: !0,
                            isBlockGap: !0
                        }).range(n, a))
                    }
                    if (!r)
                        break;
                    n = r.to + 1
                }
                return de.set(e)
            }
            updateDeco() {
                let e = 1
                    , t = this.view.state.facet(ht).map((t => (this.dynamicDecorationMap[e++] = "function" == typeof t) ? t(this.view) : t))
                    , n = !1
                    , r = this.view.state.facet(ft).map(((e, t) => {
                        let i = "function" == typeof e;
                        return i && (n = !0),
                            i ? e(this.view) : e
                    }
                    ));
                for (r.length && (this.dynamicDecorationMap[e++] = n,
                    t.push(i.om.join(r))),
                    this.decorations = [this.editContextFormatting, ...t, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]; e < this.decorations.length;)
                    this.dynamicDecorationMap[e++] = !1;
                return this.decorations
            }
            scrollIntoView(e) {
                if (e.isSnapshot) {
                    let t = this.view.viewState.lineBlockAt(e.range.head);
                    return this.view.scrollDOM.scrollTop = t.top - e.yMargin,
                        void (this.view.scrollDOM.scrollLeft = e.xMargin)
                }
                for (let l of this.view.state.facet(tt))
                    try {
                        if (l(this.view, e.range, e))
                            return !0
                    } catch (s) {
                        at(this.view.state, s, "scroll handler")
                    }
                let t, { range: n } = e, i = this.coordsAt(n.head, n.empty ? n.assoc : n.head > n.anchor ? -1 : 1);
                if (!i)
                    return;
                !n.empty && (t = this.coordsAt(n.anchor, n.anchor > n.head ? -1 : 1)) && (i = {
                    left: Math.min(i.left, t.left),
                    top: Math.min(i.top, t.top),
                    right: Math.max(i.right, t.right),
                    bottom: Math.max(i.bottom, t.bottom)
                });
                let r = $t(this.view)
                    , a = {
                        left: i.left - r.left,
                        top: i.top - r.top,
                        right: i.right + r.right,
                        bottom: i.bottom + r.bottom
                    }
                    , { offsetWidth: o, offsetHeight: O } = this.view.scrollDOM;
                !function (e, t, n, i, r, a, o, O) {
                    let s = e.ownerDocument
                        , l = s.defaultView || window;
                    for (let c = e, u = !1; c && !u;)
                        if (1 == c.nodeType) {
                            let e, d = c == s.body, h = 1, f = 1;
                            if (d)
                                e = y(l);
                            else {
                                if (/^(fixed|sticky)$/.test(getComputedStyle(c).position) && (u = !0),
                                    c.scrollHeight <= c.clientHeight && c.scrollWidth <= c.clientWidth) {
                                    c = c.assignedSlot || c.parentNode;
                                    continue
                                }
                                let t = c.getBoundingClientRect();
                                ({ scaleX: h, scaleY: f } = S(c, t)),
                                    e = {
                                        left: t.left,
                                        right: t.left + c.clientWidth * h,
                                        top: t.top,
                                        bottom: t.top + c.clientHeight * f
                                    }
                            }
                            let p = 0
                                , m = 0;
                            if ("nearest" == r)
                                t.top < e.top ? (m = -(e.top - t.top + o),
                                    n > 0 && t.bottom > e.bottom + m && (m = t.bottom - e.bottom + m + o)) : t.bottom > e.bottom && (m = t.bottom - e.bottom + o,
                                        n < 0 && t.top - m < e.top && (m = -(e.top + m - t.top + o)));
                            else {
                                let i = t.bottom - t.top
                                    , a = e.bottom - e.top;
                                m = ("center" == r && i <= a ? t.top + i / 2 - a / 2 : "start" == r || "center" == r && n < 0 ? t.top - o : t.bottom - a + o) - e.top
                            }
                            if ("nearest" == i ? t.left < e.left ? (p = -(e.left - t.left + a),
                                n > 0 && t.right > e.right + p && (p = t.right - e.right + p + a)) : t.right > e.right && (p = t.right - e.right + a,
                                    n < 0 && t.left < e.left + p && (p = -(e.left + p - t.left + a))) : p = ("center" == i ? t.left + (t.right - t.left) / 2 - (e.right - e.left) / 2 : "start" == i == O ? t.left - a : t.right - (e.right - e.left) + a) - e.left,
                                p || m)
                                if (d)
                                    l.scrollBy(p, m);
                                else {
                                    let e = 0
                                        , n = 0;
                                    if (m) {
                                        let e = c.scrollTop;
                                        c.scrollTop += m / f,
                                            n = (c.scrollTop - e) * f
                                    }
                                    if (p) {
                                        let t = c.scrollLeft;
                                        c.scrollLeft += p / h,
                                            e = (c.scrollLeft - t) * h
                                    }
                                    t = {
                                        left: t.left - e,
                                        top: t.top - n,
                                        right: t.right - e,
                                        bottom: t.bottom - n
                                    },
                                        e && Math.abs(e - p) < 1 && (i = "nearest"),
                                        n && Math.abs(n - m) < 1 && (r = "nearest")
                                }
                            if (d)
                                break;
                            c = c.assignedSlot || c.parentNode
                        } else {
                            if (11 != c.nodeType)
                                break;
                            c = c.host
                        }
                }(this.view.scrollDOM, a, n.head < n.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, o), -o), Math.max(Math.min(e.yMargin, O), -O), this.view.textDirection == ve.LTR)
            }
        }
        function vt(e, t) {
            let n = e.observer.selectionRange;
            if (!n.focusNode)
                return null;
            let i = z(n.focusNode, n.focusOffset)
                , r = R(n.focusNode, n.focusOffset)
                , a = i || r;
            if (r && i && r.node != i.node) {
                let t = q.get(r.node);
                if (!t || t instanceof K && t.text != r.node.nodeValue)
                    a = r;
                else if (e.docView.lastCompositionAfterCursor) {
                    let e = q.get(i.node);
                    !e || e instanceof K && e.text != i.node.nodeValue || (a = r)
                }
            }
            if (e.docView.lastCompositionAfterCursor = a != i,
                !a)
                return null;
            let o = t - a.offset;
            return {
                from: o,
                to: o + a.node.nodeValue.length,
                node: a.node
            }
        }
        let xt = class {
            constructor() {
                this.changes = []
            }
            compareRange(e, t) {
                ge(e, t, this.changes)
            }
            comparePoint(e, t) {
                ge(e, t, this.changes)
            }
        }
            ;
        function kt(e, t) {
            return t.left > e ? t.left - e : Math.max(0, e - t.right)
        }
        function wt(e, t) {
            return t.top > e ? t.top - e : Math.max(0, e - t.bottom)
        }
        function Xt(e, t) {
            return e.top < t.bottom - 1 && e.bottom > t.top + 1
        }
        function _t(e, t) {
            return t < e.top ? {
                top: t,
                left: e.left,
                right: e.right,
                bottom: e.bottom
            } : e
        }
        function Tt(e, t) {
            return t > e.bottom ? {
                top: e.top,
                left: e.left,
                right: e.right,
                bottom: t
            } : e
        }
        function zt(e, t, n) {
            let i, r, a, o, O, s, l, c, u = !1;
            for (let h = e.firstChild; h; h = h.nextSibling) {
                let e = f(h);
                for (let d = 0; d < e.length; d++) {
                    let f = e[d];
                    r && Xt(r, f) && (f = _t(Tt(f, r.bottom), r.top));
                    let p = kt(t, f)
                        , m = wt(n, f);
                    if (0 == p && 0 == m)
                        return 3 == h.nodeType ? Rt(h, t, n) : zt(h, t, n);
                    if (!i || o > m || o == m && a > p) {
                        i = h,
                            r = f,
                            a = p,
                            o = m;
                        let O = m ? n < f.top ? -1 : 1 : p ? t < f.left ? -1 : 1 : 0;
                        u = !O || (O > 0 ? d < e.length - 1 : d > 0)
                    }
                    0 == p ? n > f.bottom && (!l || l.bottom < f.bottom) ? (O = h,
                        l = f) : n < f.top && (!c || c.top > f.top) && (s = h,
                            c = f) : l && Xt(l, f) ? l = Tt(l, f.bottom) : c && Xt(c, f) && (c = _t(c, f.top))
                }
            }
            if (l && l.bottom >= n ? (i = O,
                r = l) : c && c.top <= n && (i = s,
                    r = c),
                !i)
                return {
                    node: e,
                    offset: 0
                };
            let d = Math.max(r.left, Math.min(r.right, t));
            return 3 == i.nodeType ? Rt(i, d, n) : u && "false" != i.contentEditable ? zt(i, d, n) : {
                node: e,
                offset: Array.prototype.indexOf.call(e.childNodes, i) + (t >= (r.left + r.right) / 2 ? 1 : 0)
            }
        }
        function Rt(e, t, n) {
            let i = e.nodeValue.length
                , r = -1
                , a = 1e9
                , o = 0;
            for (let O = 0; O < i; O++) {
                let i = w(e, O, O + 1).getClientRects();
                for (let s = 0; s < i.length; s++) {
                    let l = i[s];
                    if (l.top == l.bottom)
                        continue;
                    o || (o = t - l.left);
                    let c = (l.top > n ? l.top - n : n - l.bottom) - 1;
                    if (l.left - 1 <= t && l.right + 1 >= t && c < a) {
                        let n = t >= (l.left + l.right) / 2
                            , i = n;
                        if (H.chrome || H.gecko) {
                            w(e, O).getBoundingClientRect().left == l.right && (i = !n)
                        }
                        if (c <= 0)
                            return {
                                node: e,
                                offset: O + (i ? 1 : 0)
                            };
                        r = O + (i ? 1 : 0),
                            a = c
                    }
                }
            }
            return {
                node: e,
                offset: r > -1 ? r : o > 0 ? e.nodeValue.length : 0
            }
        }
        function Wt(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : -1;
            var r, a;
            let o, O = e.contentDOM.getBoundingClientRect(), s = O.top + e.viewState.paddingTop, { docHeight: l } = e.viewState, { x: c, y: u } = t, d = u - s;
            if (d < 0)
                return 0;
            if (d > l)
                return e.state.doc.length;
            for (let b = e.viewState.heightOracle.textHeight / 2, y = !1; o = e.elementAtHeight(d),
                o.type != ue.Text;)
                for (; d = i > 0 ? o.bottom + b : o.top - b,
                    !(d >= 0 && d <= l);) {
                    if (y)
                        return n ? null : 0;
                    y = !0,
                        i = -i
                }
            u = s + d;
            let h = o.from;
            if (h < e.viewport.from)
                return 0 == e.viewport.from ? 0 : n ? null : Zt(e, O, o, c, u);
            if (h > e.viewport.to)
                return e.viewport.to == e.state.doc.length ? e.state.doc.length : n ? null : Zt(e, O, o, c, u);
            let f = e.dom.ownerDocument
                , p = e.root.elementFromPoint ? e.root : f
                , m = p.elementFromPoint(c, u);
            m && !e.contentDOM.contains(m) && (m = null),
                m || (c = Math.max(O.left + 1, Math.min(O.right - 1, c)),
                    m = p.elementFromPoint(c, u),
                    m && !e.contentDOM.contains(m) && (m = null));
            let g, Q = -1;
            if (m && 0 != (null === (r = e.docView.nearest(m)) || void 0 === r ? void 0 : r.isEditable))
                if (f.caretPositionFromPoint) {
                    let e = f.caretPositionFromPoint(c, u);
                    e && ({ offsetNode: g, offset: Q } = e)
                } else if (f.caretRangeFromPoint) {
                    let t = f.caretRangeFromPoint(c, u);
                    t && (({ startContainer: g, startOffset: Q } = t),
                        (!e.contentDOM.contains(g) || H.safari && function (e, t, n) {
                            let i;
                            if (3 != e.nodeType || t != (i = e.nodeValue.length))
                                return !1;
                            for (let r = e.nextSibling; r; r = r.nextSibling)
                                if (1 != r.nodeType || "BR" != r.nodeName)
                                    return !1;
                            return w(e, i - 1, i).getBoundingClientRect().left > n
                        }(g, Q, c) || H.chrome && function (e, t, n) {
                            if (0 != t)
                                return !1;
                            for (let r = e; ;) {
                                let e = r.parentNode;
                                if (!e || 1 != e.nodeType || e.firstChild != r)
                                    return !1;
                                if (e.classList.contains("cm-line"))
                                    break;
                                r = e
                            }
                            let i = 1 == e.nodeType ? e.getBoundingClientRect() : w(e, 0, Math.max(e.nodeValue.length, 1)).getBoundingClientRect();
                            return n - i.left > 5
                        }(g, Q, c)) && (g = void 0))
                }
            if (!g || !e.docView.dom.contains(g)) {
                let t = Qe.find(e.docView, h);
                if (!t)
                    return d > o.top + o.height / 2 ? o.to : o.from;
                ({ node: g, offset: Q } = zt(t.dom, c, u))
            }
            let $ = e.docView.nearest(g);
            if (!$)
                return null;
            if ($.isWidget && 1 == (null === (a = $.dom) || void 0 === a ? void 0 : a.nodeType)) {
                let e = $.dom.getBoundingClientRect();
                return t.y < e.top || t.y <= e.bottom && t.x <= (e.left + e.right) / 2 ? $.posAtStart : $.posAtEnd
            }
            return $.localPosFromDOM(g, Q) + $.posAtStart
        }
        function Zt(e, t, n, r, a) {
            let o = Math.round((r - t.left) * e.defaultCharacterWidth);
            if (e.lineWrapping && n.height > 1.5 * e.defaultLineHeight) {
                let t = e.viewState.heightOracle.textHeight;
                o += Math.floor((a - n.top - .5 * (e.defaultLineHeight - t)) / t) * e.viewState.heightOracle.lineLength
            }
            let O = e.state.sliceDoc(n.from, n.to);
            return n.from + (0,
                i.kn)(O, o, e.state.tabSize)
        }
        function qt(e, t) {
            let n = e.lineBlockAt(t);
            if (Array.isArray(n.type))
                for (let i of n.type)
                    if (i.to > t || i.to == t && (i.to == n.to || i.type == ue.Text))
                        return i;
            return n
        }
        function Ut(e, t, n, i) {
            let r = e.state.doc.lineAt(t.head)
                , a = e.bidiSpans(r)
                , o = e.textDirectionAt(r.from);
            for (let O = t, s = null; ;) {
                let t = Ce(r, a, o, O, n)
                    , l = je;
                if (!t) {
                    if (r.number == (n ? e.state.doc.lines : 1))
                        return O;
                    l = "\n",
                        r = e.state.doc.line(r.number + (n ? 1 : -1)),
                        a = e.bidiSpans(r),
                        t = e.visualLineSide(r, !n)
                }
                if (s) {
                    if (!s(l))
                        return O
                } else {
                    if (!i)
                        return t;
                    s = i(l)
                }
                O = t
            }
        }
        function Yt(e, t, n) {
            for (; ;) {
                let i = 0;
                for (let r of e)
                    r.between(t - 1, t + 1, ((e, r, a) => {
                        if (t > e && t < r) {
                            let a = i || n || (t - e < r - t ? -1 : 1);
                            t = a < 0 ? e : r,
                                i = a
                        }
                    }
                    ));
                if (!i)
                    return t
            }
        }
        function At(e, t, n) {
            let r = Yt(e.state.facet(pt).map((t => t(e))), n.from, t.head > n.from ? -1 : 1);
            return r == n.from ? n : i.OF.cursor(r, r < n.from ? 1 : -1)
        }
        const Vt = "\uffff";
        class Et {
            constructor(e, t) {
                this.points = e,
                    this.text = "",
                    this.lineSeparator = t.facet(i.$t.lineSeparator)
            }
            append(e) {
                this.text += e
            }
            lineBreak() {
                this.text += Vt
            }
            readRange(e, t) {
                if (!e)
                    return this;
                let n = e.parentNode;
                for (let i = e; ;) {
                    this.findPointBefore(n, i);
                    let e = this.text.length;
                    this.readNode(i);
                    let r = i.nextSibling;
                    if (r == t)
                        break;
                    let a = q.get(i)
                        , o = q.get(r);
                    (a && o ? a.breakAfter : (a ? a.breakAfter : g(i)) || g(r) && ("BR" != i.nodeName || i.cmIgnore) && this.text.length > e) && this.lineBreak(),
                        i = r
                }
                return this.findPointBefore(n, t),
                    this
            }
            readTextNode(e) {
                let t = e.nodeValue;
                for (let n of this.points)
                    n.node == e && (n.pos = this.text.length + Math.min(n.offset, t.length));
                for (let n = 0, i = this.lineSeparator ? null : /\r\n?|\n/g; ;) {
                    let r, a = -1, o = 1;
                    if (this.lineSeparator ? (a = t.indexOf(this.lineSeparator, n),
                        o = this.lineSeparator.length) : (r = i.exec(t)) && (a = r.index,
                            o = r[0].length),
                        this.append(t.slice(n, a < 0 ? t.length : a)),
                        a < 0)
                        break;
                    if (this.lineBreak(),
                        o > 1)
                        for (let t of this.points)
                            t.node == e && t.pos > this.text.length && (t.pos -= o - 1);
                    n = a + o
                }
            }
            readNode(e) {
                if (e.cmIgnore)
                    return;
                let t = q.get(e)
                    , n = t && t.overrideDOMText;
                if (null != n) {
                    this.findPointInside(e, n.length);
                    for (let e = n.iter(); !e.next().done;)
                        e.lineBreak ? this.lineBreak() : this.append(e.value)
                } else
                    3 == e.nodeType ? this.readTextNode(e) : "BR" == e.nodeName ? e.nextSibling && this.lineBreak() : 1 == e.nodeType && this.readRange(e.firstChild, null)
            }
            findPointBefore(e, t) {
                for (let n of this.points)
                    n.node == e && e.childNodes[n.offset] == t && (n.pos = this.text.length)
            }
            findPointInside(e, t) {
                for (let n of this.points)
                    (3 == e.nodeType ? n.node == e : e.contains(n.node)) && (n.pos = this.text.length + (jt(e, n.node, n.offset) ? t : 0))
            }
        }
        function jt(e, t, n) {
            for (; ;) {
                if (!t || n < $(t))
                    return !1;
                if (t == e)
                    return !0;
                n = m(t) + 1,
                    t = t.parentNode
            }
        }
        class Ct {
            constructor(e, t) {
                this.node = e,
                    this.offset = t,
                    this.pos = -1
            }
        }
        class Gt {
            constructor(e, t, n, r) {
                this.typeOver = r,
                    this.bounds = null,
                    this.text = "",
                    this.domChanged = t > -1;
                let { impreciseHead: a, impreciseAnchor: o } = e.docView;
                if (e.state.readOnly && t > -1)
                    this.newSel = null;
                else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, n, 0))) {
                    let t = a || o ? [] : function (e) {
                        let t = [];
                        if (e.root.activeElement != e.contentDOM)
                            return t;
                        let { anchorNode: n, anchorOffset: i, focusNode: r, focusOffset: a } = e.observer.selectionRange;
                        n && (t.push(new Ct(n, i)),
                            r == n && a == i || t.push(new Ct(r, a)));
                        return t
                    }(e)
                        , n = new Et(t, e.state);
                    n.readRange(this.bounds.startDOM, this.bounds.endDOM),
                        this.text = n.text,
                        this.newSel = function (e, t) {
                            if (0 == e.length)
                                return null;
                            let n = e[0].pos
                                , r = 2 == e.length ? e[1].pos : n;
                            return n > -1 && r > -1 ? i.OF.single(n + t, r + t) : null
                        }(t, this.bounds.from)
                } else {
                    let t = e.observer.selectionRange
                        , n = a && a.node == t.focusNode && a.offset == t.focusOffset || !d(e.contentDOM, t.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(t.focusNode, t.focusOffset)
                        , r = o && o.node == t.anchorNode && o.offset == t.anchorOffset || !d(e.contentDOM, t.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(t.anchorNode, t.anchorOffset)
                        , O = e.viewport;
                    if ((H.ios || H.chrome) && e.state.selection.main.empty && n != r && (O.from > 0 || O.to < e.state.doc.length)) {
                        let t = Math.min(n, r)
                            , i = Math.max(n, r)
                            , a = O.from - t
                            , o = O.to - i;
                        0 != a && 1 != a && 0 != t || 0 != o && -1 != o && i != e.state.doc.length || (n = 0,
                            r = e.state.doc.length)
                    }
                    this.newSel = i.OF.single(r, n)
                }
            }
        }
        function It(e, t) {
            let n, { newSel: r } = t, a = e.state.selection.main, o = e.inputState.lastKeyTime > Date.now() - 100 ? e.inputState.lastKeyCode : -1;
            if (t.bounds) {
                let { from: r, to: O } = t.bounds
                    , s = a.from
                    , l = null;
                (8 === o || H.android && t.text.length < O - r) && (s = a.to,
                    l = "end");
                let c = function (e, t, n, i) {
                    let r = Math.min(e.length, t.length)
                        , a = 0;
                    for (; a < r && e.charCodeAt(a) == t.charCodeAt(a);)
                        a++;
                    if (a == r && e.length == t.length)
                        return null;
                    let o = e.length
                        , O = t.length;
                    for (; o > 0 && O > 0 && e.charCodeAt(o - 1) == t.charCodeAt(O - 1);)
                        o--,
                            O--;
                    if ("end" == i) {
                        n -= o + Math.max(0, a - Math.min(o, O)) - a
                    }
                    if (o < a && e.length < t.length) {
                        a -= n <= a && n >= o ? a - n : 0,
                            O = a + (O - o),
                            o = a
                    } else if (O < a) {
                        a -= n <= a && n >= O ? a - n : 0,
                            o = a + (o - O),
                            O = a
                    }
                    return {
                        from: a,
                        toA: o,
                        toB: O
                    }
                }(e.state.doc.sliceString(r, O, Vt), t.text, s - r, l);
                c && (H.chrome && 13 == o && c.toB == c.from + 2 && t.text.slice(c.from, c.toB) == Vt + Vt && c.toB--,
                    n = {
                        from: r + c.from,
                        to: r + c.toA,
                        insert: i.EY.of(t.text.slice(c.from, c.toB).split(Vt))
                    })
            } else
                r && (!e.hasFocus && e.state.facet(ot) || r.main.eq(a)) && (r = null);
            if (!n && !r)
                return !1;
            if (!n && t.typeOver && !a.empty && r && r.main.empty ? n = {
                from: a.from,
                to: a.to,
                insert: e.state.doc.slice(a.from, a.to)
            } : n && n.from >= a.from && n.to <= a.to && (n.from != a.from || n.to != a.to) && a.to - a.from - (n.to - n.from) <= 4 ? n = {
                from: a.from,
                to: a.to,
                insert: e.state.doc.slice(a.from, n.from).append(n.insert).append(e.state.doc.slice(n.to, a.to))
            } : (H.mac || H.android) && n && n.from == n.to && n.from == a.head - 1 && /^\. ?$/.test(n.insert.toString()) && "off" == e.contentDOM.getAttribute("autocorrect") ? (r && 2 == n.insert.length && (r = i.OF.single(r.main.anchor - 1, r.main.head - 1)),
                n = {
                    from: a.from,
                    to: a.to,
                    insert: i.EY.of([" "])
                }) : H.chrome && n && n.from == n.to && n.from == a.head && "\n " == n.insert.toString() && e.lineWrapping && (r && (r = i.OF.single(r.main.anchor - 1, r.main.head - 1)),
                    n = {
                        from: a.from,
                        to: a.to,
                        insert: i.EY.of([" "])
                    }),
                n)
                return Dt(e, n, r, o);
            if (r && !r.main.eq(a)) {
                let t = !1
                    , n = "select";
                return e.inputState.lastSelectionTime > Date.now() - 50 && ("select" == e.inputState.lastSelectionOrigin && (t = !0),
                    n = e.inputState.lastSelectionOrigin),
                    e.dispatch({
                        selection: r,
                        scrollIntoView: t,
                        userEvent: n
                    }),
                    !0
            }
            return !1
        }
        function Dt(e, t, n) {
            let r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : -1;
            if (H.ios && e.inputState.flushIOSKey(t))
                return !0;
            let a = e.state.selection.main;
            if (H.android && (t.to == a.to && (t.from == a.from || t.from == a.from - 1 && " " == e.state.sliceDoc(t.from, a.from)) && 1 == t.insert.length && 2 == t.insert.lines && X(e.contentDOM, "Enter", 13) || (t.from == a.from - 1 && t.to == a.to && 0 == t.insert.length || 8 == r && t.insert.length < t.to - t.from && t.to > a.head) && X(e.contentDOM, "Backspace", 8) || t.from == a.from && t.to == a.to + 1 && 0 == t.insert.length && X(e.contentDOM, "Delete", 46)))
                return !0;
            let o, O = t.insert.toString();
            e.inputState.composing >= 0 && e.inputState.composing++;
            let s = () => o || (o = function (e, t, n) {
                let r, a = e.state, o = a.selection.main;
                if (t.from >= o.from && t.to <= o.to && t.to - t.from >= (o.to - o.from) / 3 && (!n || n.main.empty && n.main.from == t.from + t.insert.length) && e.inputState.composing < 0) {
                    let n = o.from < t.from ? a.sliceDoc(o.from, t.from) : ""
                        , i = o.to > t.to ? a.sliceDoc(t.to, o.to) : "";
                    r = a.replaceSelection(e.state.toText(n + t.insert.sliceString(0, void 0, e.state.lineBreak) + i))
                } else {
                    let O = a.changes(t)
                        , s = n && n.main.to <= O.newLength ? n.main : void 0;
                    if (a.selection.ranges.length > 1 && e.inputState.composing >= 0 && t.to <= o.to && t.to >= o.to - 10) {
                        let l, c = e.state.sliceDoc(t.from, t.to), u = n && vt(e, n.main.head);
                        if (u) {
                            let e = t.insert.length - (t.to - t.from);
                            l = {
                                from: u.from,
                                to: u.to - e
                            }
                        } else
                            l = e.state.doc.lineAt(o.head);
                        let d = o.to - t.to
                            , h = o.to - o.from;
                        r = a.changeByRange((n => {
                            if (n.from == o.from && n.to == o.to)
                                return {
                                    changes: O,
                                    range: s || n.map(O)
                                };
                            let r = n.to - d
                                , u = r - c.length;
                            if (n.to - n.from != h || e.state.sliceDoc(u, r) != c || n.to >= l.from && n.from <= l.to)
                                return {
                                    range: n
                                };
                            let f = a.changes({
                                from: u,
                                to: r,
                                insert: t.insert
                            })
                                , p = n.to - o.to;
                            return {
                                changes: f,
                                range: s ? i.OF.range(Math.max(0, s.anchor + p), Math.max(0, s.head + p)) : n.map(f)
                            }
                        }
                        ))
                    } else
                        r = {
                            changes: O,
                            selection: s && a.selection.replaceRange(s)
                        }
                }
                let O = "input.type";
                (e.composing || e.inputState.compositionPendingChange && e.inputState.compositionEndedAt > Date.now() - 50) && (e.inputState.compositionPendingChange = !1,
                    O += ".compose",
                    e.inputState.compositionFirstChange && (O += ".start",
                        e.inputState.compositionFirstChange = !1));
                return a.update(r, {
                    userEvent: O,
                    scrollIntoView: !0
                })
            }(e, t, n));
            return e.state.facet(Fe).some((n => n(e, t.from, t.to, O, s))) || e.dispatch(s()),
                !0
        }
        class Nt {
            setSelectionOrigin(e) {
                this.lastSelectionOrigin = e,
                    this.lastSelectionTime = Date.now()
            }
            constructor(e) {
                this.view = e,
                    this.lastKeyCode = 0,
                    this.lastKeyTime = 0,
                    this.lastTouchTime = 0,
                    this.lastFocusTime = 0,
                    this.lastScrollTop = 0,
                    this.lastScrollLeft = 0,
                    this.pendingIOSKey = void 0,
                    this.tabFocusMode = -1,
                    this.lastSelectionOrigin = null,
                    this.lastSelectionTime = 0,
                    this.lastContextMenu = 0,
                    this.scrollHandlers = [],
                    this.handlers = Object.create(null),
                    this.composing = -1,
                    this.compositionFirstChange = null,
                    this.compositionEndedAt = 0,
                    this.compositionPendingKey = !1,
                    this.compositionPendingChange = !1,
                    this.mouseSelection = null,
                    this.draggedContent = null,
                    this.handleEvent = this.handleEvent.bind(this),
                    this.notifiedFocused = e.hasFocus,
                    H.safari && e.contentDOM.addEventListener("input", (() => null)),
                    H.gecko && function (e) {
                        bn.has(e) || (bn.add(e),
                            e.addEventListener("copy", (() => { }
                            )),
                            e.addEventListener("cut", (() => { }
                            )))
                    }(e.contentDOM.ownerDocument)
            }
            handleEvent(e) {
                (function (e, t) {
                    if (!t.bubbles)
                        return !0;
                    if (t.defaultPrevented)
                        return !1;
                    for (let n, i = t.target; i != e.contentDOM; i = i.parentNode)
                        if (!i || 11 == i.nodeType || (n = q.get(i)) && n.ignoreEvent(t))
                            return !1;
                    return !0
                }
                )(this.view, e) && !this.ignoreDuringComposition(e) && ("keydown" == e.type && this.keydown(e) || this.runHandlers(e.type, e))
            }
            runHandlers(e, t) {
                let n = this.handlers[e];
                if (n) {
                    for (let e of n.observers)
                        e(this.view, t);
                    for (let e of n.handlers) {
                        if (t.defaultPrevented)
                            break;
                        if (e(this.view, t)) {
                            t.preventDefault();
                            break
                        }
                    }
                }
            }
            ensureHandlers(e) {
                let t = Mt(e)
                    , n = this.handlers
                    , i = this.view.contentDOM;
                for (let r in t)
                    if ("scroll" != r) {
                        let e = !t[r].handlers.length
                            , a = n[r];
                        a && e != !a.handlers.length && (i.removeEventListener(r, this.handleEvent),
                            a = null),
                            a || i.addEventListener(r, this.handleEvent, {
                                passive: e
                            })
                    }
                for (let r in n)
                    "scroll" == r || t[r] || i.removeEventListener(r, this.handleEvent);
                this.handlers = t
            }
            keydown(e) {
                if (this.lastKeyCode = e.keyCode,
                    this.lastKeyTime = Date.now(),
                    9 == e.keyCode && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
                    return !0;
                if (this.tabFocusMode > 0 && 27 != e.keyCode && Ht.indexOf(e.keyCode) < 0 && (this.tabFocusMode = -1),
                    H.android && H.chrome && !e.synthetic && (13 == e.keyCode || 8 == e.keyCode))
                    return this.view.observer.delayAndroidKey(e.key, e.keyCode),
                        !0;
                let t;
                return !H.ios || e.synthetic || e.altKey || e.metaKey || !((t = Ft.find((t => t.keyCode == e.keyCode))) && !e.ctrlKey || Bt.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (229 != e.keyCode && this.view.observer.forceFlush(),
                    !1) : (this.pendingIOSKey = t || e,
                        setTimeout((() => this.flushIOSKey()), 250),
                        !0)
            }
            flushIOSKey(e) {
                let t = this.pendingIOSKey;
                return !!t && (!("Enter" == t.key && e && e.from < e.to && /^\S+$/.test(e.insert.toString())) && (this.pendingIOSKey = void 0,
                    X(this.view.contentDOM, t.key, t.keyCode, t instanceof KeyboardEvent ? t : void 0)))
            }
            ignoreDuringComposition(e) {
                return !!/^key/.test(e.type) && (this.composing > 0 || !!(H.safari && !H.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) && (this.compositionPendingKey = !1,
                    !0))
            }
            startMouseSelection(e) {
                this.mouseSelection && this.mouseSelection.destroy(),
                    this.mouseSelection = e
            }
            update(e) {
                this.view.observer.update(e),
                    this.mouseSelection && this.mouseSelection.update(e),
                    this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)),
                    e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0)
            }
            destroy() {
                this.mouseSelection && this.mouseSelection.destroy()
            }
        }
        function Lt(e, t) {
            return (n, i) => {
                try {
                    return t.call(e, i, n)
                } catch (r) {
                    at(n.state, r)
                }
            }
        }
        function Mt(e) {
            let t = Object.create(null);
            function n(e) {
                return t[e] || (t[e] = {
                    observers: [],
                    handlers: []
                })
            }
            for (let i of e) {
                let e = i.spec;
                if (e && e.domEventHandlers)
                    for (let t in e.domEventHandlers) {
                        let r = e.domEventHandlers[t];
                        r && n(t).handlers.push(Lt(i.value, r))
                    }
                if (e && e.domEventObservers)
                    for (let t in e.domEventObservers) {
                        let r = e.domEventObservers[t];
                        r && n(t).observers.push(Lt(i.value, r))
                    }
            }
            for (let i in en)
                n(i).handlers.push(en[i]);
            for (let i in tn)
                n(i).observers.push(tn[i]);
            return t
        }
        const Ft = [{
            key: "Backspace",
            keyCode: 8,
            inputType: "deleteContentBackward"
        }, {
            key: "Enter",
            keyCode: 13,
            inputType: "insertParagraph"
        }, {
            key: "Enter",
            keyCode: 13,
            inputType: "insertLineBreak"
        }, {
            key: "Delete",
            keyCode: 46,
            inputType: "deleteContentForward"
        }]
            , Bt = "dthko"
            , Ht = [16, 17, 18, 20, 91, 92, 224, 225];
        function Kt(e) {
            return .7 * Math.max(0, e) + 8
        }
        class Jt {
            constructor(e, t, n, r) {
                this.view = e,
                    this.startEvent = t,
                    this.style = n,
                    this.mustSelect = r,
                    this.scrollSpeed = {
                        x: 0,
                        y: 0
                    },
                    this.scrolling = -1,
                    this.lastEvent = t,
                    this.scrollParents = function (e) {
                        let t, n, i = e.ownerDocument;
                        for (let r = e.parentNode; r && !(r == i.body || t && n);)
                            if (1 == r.nodeType)
                                !n && r.scrollHeight > r.clientHeight && (n = r),
                                    !t && r.scrollWidth > r.clientWidth && (t = r),
                                    r = r.assignedSlot || r.parentNode;
                            else {
                                if (11 != r.nodeType)
                                    break;
                                r = r.host
                            }
                        return {
                            x: t,
                            y: n
                        }
                    }(e.contentDOM),
                    this.atoms = e.state.facet(pt).map((t => t(e)));
                let a = e.contentDOM.ownerDocument;
                a.addEventListener("mousemove", this.move = this.move.bind(this)),
                    a.addEventListener("mouseup", this.up = this.up.bind(this)),
                    this.extend = t.shiftKey,
                    this.multiple = e.state.facet(i.$t.allowMultipleSelections) && function (e, t) {
                        let n = e.state.facet(Ie);
                        return n.length ? n[0](t) : H.mac ? t.metaKey : t.ctrlKey
                    }(e, t),
                    this.dragging = !(!function (e, t) {
                        let { main: n } = e.state.selection;
                        if (n.empty)
                            return !1;
                        let i = u(e.root);
                        if (!i || 0 == i.rangeCount)
                            return !0;
                        let r = i.getRangeAt(0).getClientRects();
                        for (let a = 0; a < r.length; a++) {
                            let e = r[a];
                            if (e.left <= t.clientX && e.right >= t.clientX && e.top <= t.clientY && e.bottom >= t.clientY)
                                return !0
                        }
                        return !1
                    }(e, t) || 1 != fn(t)) && null
            }
            start(e) {
                !1 === this.dragging && this.select(e)
            }
            move(e) {
                if (0 == e.buttons)
                    return this.destroy();
                if (this.dragging || null == this.dragging && (t = this.startEvent,
                    n = e,
                    Math.max(Math.abs(t.clientX - n.clientX), Math.abs(t.clientY - n.clientY)) < 10))
                    return;
                var t, n;
                this.select(this.lastEvent = e);
                let i = 0
                    , r = 0
                    , a = 0
                    , o = 0
                    , O = this.view.win.innerWidth
                    , s = this.view.win.innerHeight;
                this.scrollParents.x && ({ left: a, right: O } = this.scrollParents.x.getBoundingClientRect()),
                    this.scrollParents.y && ({ top: o, bottom: s } = this.scrollParents.y.getBoundingClientRect());
                let l = $t(this.view);
                e.clientX - l.left <= a + 6 ? i = -Kt(a - e.clientX) : e.clientX + l.right >= O - 6 && (i = Kt(e.clientX - O)),
                    e.clientY - l.top <= o + 6 ? r = -Kt(o - e.clientY) : e.clientY + l.bottom >= s - 6 && (r = Kt(e.clientY - s)),
                    this.setScrollSpeed(i, r)
            }
            up(e) {
                null == this.dragging && this.select(this.lastEvent),
                    this.dragging || e.preventDefault(),
                    this.destroy()
            }
            destroy() {
                this.setScrollSpeed(0, 0);
                let e = this.view.contentDOM.ownerDocument;
                e.removeEventListener("mousemove", this.move),
                    e.removeEventListener("mouseup", this.up),
                    this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null
            }
            setScrollSpeed(e, t) {
                this.scrollSpeed = {
                    x: e,
                    y: t
                },
                    e || t ? this.scrolling < 0 && (this.scrolling = setInterval((() => this.scroll()), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling),
                        this.scrolling = -1)
            }
            scroll() {
                let { x: e, y: t } = this.scrollSpeed;
                e && this.scrollParents.x && (this.scrollParents.x.scrollLeft += e,
                    e = 0),
                    t && this.scrollParents.y && (this.scrollParents.y.scrollTop += t,
                        t = 0),
                    (e || t) && this.view.win.scrollBy(e, t),
                    !1 === this.dragging && this.select(this.lastEvent)
            }
            skipAtoms(e) {
                let t = null;
                for (let n = 0; n < e.ranges.length; n++) {
                    let r = e.ranges[n]
                        , a = null;
                    if (r.empty) {
                        let e = Yt(this.atoms, r.from, 0);
                        e != r.from && (a = i.OF.cursor(e, -1))
                    } else {
                        let e = Yt(this.atoms, r.from, -1)
                            , t = Yt(this.atoms, r.to, 1);
                        e == r.from && t == r.to || (a = i.OF.range(r.from == r.anchor ? e : t, r.from == r.head ? e : t))
                    }
                    a && (t || (t = e.ranges.slice()),
                        t[n] = a)
                }
                return t ? i.OF.create(t, e.mainIndex) : e
            }
            select(e) {
                let { view: t } = this
                    , n = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
                !this.mustSelect && n.eq(t.state.selection, !1 === this.dragging) || this.view.dispatch({
                    selection: n,
                    userEvent: "select.pointer"
                }),
                    this.mustSelect = !1
            }
            update(e) {
                e.transactions.some((e => e.isUserEvent("input.type"))) ? this.destroy() : this.style.update(e) && setTimeout((() => this.select(this.lastEvent)), 20)
            }
        }
        const en = Object.create(null)
            , tn = Object.create(null)
            , nn = H.ie && H.ie_version < 15 || H.ios && H.webkit_version < 604;
        function rn(e, t, n) {
            for (let i of e.facet(t))
                n = i(n, e);
            return n
        }
        function an(e, t) {
            t = rn(e.state, He, t);
            let n, { state: r } = e, a = 1, o = r.toText(t), O = o.lines == r.selection.ranges.length;
            if (null != mn && r.selection.ranges.every((e => e.empty)) && mn == o.toString()) {
                let e = -1;
                n = r.changeByRange((n => {
                    let s = r.doc.lineAt(n.from);
                    if (s.from == e)
                        return {
                            range: n
                        };
                    e = s.from;
                    let l = r.toText((O ? o.line(a++).text : t) + r.lineBreak);
                    return {
                        changes: {
                            from: s.from,
                            insert: l
                        },
                        range: i.OF.cursor(n.from + l.length)
                    }
                }
                ))
            } else
                n = O ? r.changeByRange((e => {
                    let t = o.line(a++);
                    return {
                        changes: {
                            from: e.from,
                            to: e.to,
                            insert: t.text
                        },
                        range: i.OF.cursor(e.from + t.length)
                    }
                }
                )) : r.replaceSelection(o);
            e.dispatch(n, {
                userEvent: "input.paste",
                scrollIntoView: !0
            })
        }
        function on(e, t, n, r) {
            if (1 == r)
                return i.OF.cursor(t, n);
            if (2 == r)
                return function (e, t) {
                    let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1
                        , r = e.charCategorizer(t)
                        , a = e.doc.lineAt(t)
                        , o = t - a.from;
                    if (0 == a.length)
                        return i.OF.cursor(t);
                    0 == o ? n = 1 : o == a.length && (n = -1);
                    let O = o
                        , s = o;
                    n < 0 ? O = (0,
                        i.zK)(a.text, o, !1) : s = (0,
                            i.zK)(a.text, o);
                    let l = r(a.text.slice(O, s));
                    for (; O > 0;) {
                        let e = (0,
                            i.zK)(a.text, O, !1);
                        if (r(a.text.slice(e, O)) != l)
                            break;
                        O = e
                    }
                    for (; s < a.length;) {
                        let e = (0,
                            i.zK)(a.text, s);
                        if (r(a.text.slice(s, e)) != l)
                            break;
                        s = e
                    }
                    return i.OF.range(O + a.from, s + a.from)
                }(e.state, t, n);
            {
                let n = Qe.find(e.docView, t)
                    , r = e.state.doc.lineAt(n ? n.posAtEnd : t)
                    , a = n ? n.posAtStart : r.from
                    , o = n ? n.posAtEnd : r.to;
                return o < e.state.doc.length && o == r.to && o++,
                    i.OF.range(a, o)
            }
        }
        tn.scroll = e => {
            e.inputState.lastScrollTop = e.scrollDOM.scrollTop,
                e.inputState.lastScrollLeft = e.scrollDOM.scrollLeft
        }
            ,
            en.keydown = (e, t) => (e.inputState.setSelectionOrigin("select"),
                27 == t.keyCode && 0 != e.inputState.tabFocusMode && (e.inputState.tabFocusMode = Date.now() + 2e3),
                !1),
            tn.touchstart = (e, t) => {
                e.inputState.lastTouchTime = Date.now(),
                    e.inputState.setSelectionOrigin("select.pointer")
            }
            ,
            tn.touchmove = e => {
                e.inputState.setSelectionOrigin("select.pointer")
            }
            ,
            en.mousedown = (e, t) => {
                if (e.observer.flush(),
                    e.inputState.lastTouchTime > Date.now() - 2e3)
                    return !1;
                let n = null;
                for (let i of e.state.facet(Ne))
                    if (n = i(e, t),
                        n)
                        break;
                if (n || 0 != t.button || (n = function (e, t) {
                    let n = ln(e, t)
                        , r = fn(t)
                        , a = e.state.selection;
                    return {
                        update(e) {
                            e.docChanged && (n.pos = e.changes.mapPos(n.pos),
                                a = a.map(e.changes))
                        },
                        get(t, o, O) {
                            let s, l = ln(e, t), c = on(e, l.pos, l.bias, r);
                            if (n.pos != l.pos && !o) {
                                let t = on(e, n.pos, n.bias, r)
                                    , a = Math.min(t.from, c.from)
                                    , o = Math.max(t.to, c.to);
                                c = a < c.from ? i.OF.range(a, o) : i.OF.range(o, a)
                            }
                            return o ? a.replaceRange(a.main.extend(c.from, c.to)) : O && 1 == r && a.ranges.length > 1 && (s = function (e, t) {
                                for (let n = 0; n < e.ranges.length; n++) {
                                    let { from: r, to: a } = e.ranges[n];
                                    if (r <= t && a >= t)
                                        return i.OF.create(e.ranges.slice(0, n).concat(e.ranges.slice(n + 1)), e.mainIndex == n ? 0 : e.mainIndex - (e.mainIndex > n ? 1 : 0))
                                }
                                return null
                            }(a, l.pos)) ? s : O ? a.addRange(c) : i.OF.create([c])
                        }
                    }
                }(e, t)),
                    n) {
                    let i = !e.hasFocus;
                    e.inputState.startMouseSelection(new Jt(e, t, n, i)),
                        i && e.observer.ignore((() => {
                            k(e.contentDOM);
                            let t = e.root.activeElement;
                            t && !t.contains(e.contentDOM) && t.blur()
                        }
                        ));
                    let r = e.inputState.mouseSelection;
                    if (r)
                        return r.start(t),
                            !1 === r.dragging
                }
                return !1
            }
            ;
        let On = (e, t, n) => t >= n.top && t <= n.bottom && e >= n.left && e <= n.right;
        function sn(e, t, n, i) {
            let r = Qe.find(e.docView, t);
            if (!r)
                return 1;
            let a = t - r.posAtStart;
            if (0 == a)
                return 1;
            if (a == r.length)
                return -1;
            let o = r.coordsAt(a, -1);
            if (o && On(n, i, o))
                return -1;
            let O = r.coordsAt(a, 1);
            return O && On(n, i, O) ? 1 : o && o.bottom >= i ? -1 : 1
        }
        function ln(e, t) {
            let n = e.posAtCoords({
                x: t.clientX,
                y: t.clientY
            }, !1);
            return {
                pos: n,
                bias: sn(e, n, t.clientX, t.clientY)
            }
        }
        const cn = H.ie && H.ie_version <= 11;
        let un = null
            , dn = 0
            , hn = 0;
        function fn(e) {
            if (!cn)
                return e.detail;
            let t = un
                , n = hn;
            return un = e,
                hn = Date.now(),
                dn = !t || n > Date.now() - 400 && Math.abs(t.clientX - e.clientX) < 2 && Math.abs(t.clientY - e.clientY) < 2 ? (dn + 1) % 3 : 1
        }
        function pn(e, t, n, i) {
            if (!(n = rn(e.state, He, n)))
                return;
            let r = e.posAtCoords({
                x: t.clientX,
                y: t.clientY
            }, !1)
                , { draggedContent: a } = e.inputState
                , o = i && a && function (e, t) {
                    let n = e.state.facet(De);
                    return n.length ? n[0](t) : H.mac ? !t.altKey : !t.ctrlKey
                }(e, t) ? {
                    from: a.from,
                    to: a.to
                } : null
                , O = {
                    from: r,
                    insert: n
                }
                , s = e.state.changes(o ? [o, O] : O);
            e.focus(),
                e.dispatch({
                    changes: s,
                    selection: {
                        anchor: s.mapPos(r, -1),
                        head: s.mapPos(r, 1)
                    },
                    userEvent: o ? "move.drop" : "input.drop"
                }),
                e.inputState.draggedContent = null
        }
        en.dragstart = (e, t) => {
            let { selection: { main: n } } = e.state;
            if (t.target.draggable) {
                let r = e.docView.nearest(t.target);
                if (r && r.isWidget) {
                    let e = r.posAtStart
                        , t = e + r.length;
                    (e >= n.to || t <= n.from) && (n = i.OF.range(e, t))
                }
            }
            let { inputState: r } = e;
            return r.mouseSelection && (r.mouseSelection.dragging = !0),
                r.draggedContent = n,
                t.dataTransfer && (t.dataTransfer.setData("Text", rn(e.state, Ke, e.state.sliceDoc(n.from, n.to))),
                    t.dataTransfer.effectAllowed = "copyMove"),
                !1
        }
            ,
            en.dragend = e => (e.inputState.draggedContent = null,
                !1),
            en.drop = (e, t) => {
                if (!t.dataTransfer)
                    return !1;
                if (e.state.readOnly)
                    return !0;
                let n = t.dataTransfer.files;
                if (n && n.length) {
                    let i = Array(n.length)
                        , r = 0
                        , a = () => {
                            ++r == n.length && pn(e, t, i.filter((e => null != e)).join(e.state.lineBreak), !1)
                        }
                        ;
                    for (let e = 0; e < n.length; e++) {
                        let t = new FileReader;
                        t.onerror = a,
                            t.onload = () => {
                                /[\x00-\x08\x0e-\x1f]{2}/.test(t.result) || (i[e] = t.result),
                                    a()
                            }
                            ,
                            t.readAsText(n[e])
                    }
                    return !0
                }
                {
                    let n = t.dataTransfer.getData("Text");
                    if (n)
                        return pn(e, t, n, !0),
                            !0
                }
                return !1
            }
            ,
            en.paste = (e, t) => {
                if (e.state.readOnly)
                    return !0;
                e.observer.flush();
                let n = nn ? null : t.clipboardData;
                return n ? (an(e, n.getData("text/plain") || n.getData("text/uri-list")),
                    !0) : (function (e) {
                        let t = e.dom.parentNode;
                        if (!t)
                            return;
                        let n = t.appendChild(document.createElement("textarea"));
                        n.style.cssText = "position: fixed; left: -10000px; top: 10px",
                            n.focus(),
                            setTimeout((() => {
                                e.focus(),
                                    n.remove(),
                                    an(e, n.value)
                            }
                            ), 50)
                    }(e),
                        !1)
            }
            ;
        let mn = null;
        en.copy = en.cut = (e, t) => {
            let { text: n, ranges: i, linewise: r } = function (e) {
                let t = []
                    , n = []
                    , i = !1;
                for (let r of e.selection.ranges)
                    r.empty || (t.push(e.sliceDoc(r.from, r.to)),
                        n.push(r));
                if (!t.length) {
                    let r = -1;
                    for (let { from: i } of e.selection.ranges) {
                        let a = e.doc.lineAt(i);
                        a.number > r && (t.push(a.text),
                            n.push({
                                from: a.from,
                                to: Math.min(e.doc.length, a.to + 1)
                            })),
                            r = a.number
                    }
                    i = !0
                }
                return {
                    text: rn(e, Ke, t.join(e.lineBreak)),
                    ranges: n,
                    linewise: i
                }
            }(e.state);
            if (!n && !r)
                return !1;
            mn = r ? n : null,
                "cut" != t.type || e.state.readOnly || e.dispatch({
                    changes: i,
                    scrollIntoView: !0,
                    userEvent: "delete.cut"
                });
            let a = nn ? null : t.clipboardData;
            return a ? (a.clearData(),
                a.setData("text/plain", n),
                !0) : (function (e, t) {
                    let n = e.dom.parentNode;
                    if (!n)
                        return;
                    let i = n.appendChild(document.createElement("textarea"));
                    i.style.cssText = "position: fixed; left: -10000px; top: 10px",
                        i.value = t,
                        i.focus(),
                        i.selectionEnd = t.length,
                        i.selectionStart = 0,
                        setTimeout((() => {
                            i.remove(),
                                e.focus()
                        }
                        ), 50)
                }(e, n),
                    !1)
        }
            ;
        const gn = i.YH.define();
        function Qn(e, t) {
            let n = [];
            for (let i of e.facet(Be)) {
                let r = i(e, t);
                r && n.push(r)
            }
            return n ? e.update({
                effects: n,
                annotations: gn.of(!0)
            }) : null
        }
        function $n(e) {
            setTimeout((() => {
                let t = e.hasFocus;
                if (t != e.inputState.notifiedFocused) {
                    let n = Qn(e.state, t);
                    n ? e.dispatch(n) : e.update([])
                }
            }
            ), 10)
        }
        tn.focus = e => {
            e.inputState.lastFocusTime = Date.now(),
                e.scrollDOM.scrollTop || !e.inputState.lastScrollTop && !e.inputState.lastScrollLeft || (e.scrollDOM.scrollTop = e.inputState.lastScrollTop,
                    e.scrollDOM.scrollLeft = e.inputState.lastScrollLeft),
                $n(e)
        }
            ,
            tn.blur = e => {
                e.observer.clearSelectionRange(),
                    $n(e)
            }
            ,
            tn.compositionstart = tn.compositionupdate = e => {
                e.observer.editContext || (null == e.inputState.compositionFirstChange && (e.inputState.compositionFirstChange = !0),
                    e.inputState.composing < 0 && (e.inputState.composing = 0))
            }
            ,
            tn.compositionend = e => {
                e.observer.editContext || (e.inputState.composing = -1,
                    e.inputState.compositionEndedAt = Date.now(),
                    e.inputState.compositionPendingKey = !0,
                    e.inputState.compositionPendingChange = e.observer.pendingRecords().length > 0,
                    e.inputState.compositionFirstChange = null,
                    H.chrome && H.android ? e.observer.flushSoon() : e.inputState.compositionPendingChange ? Promise.resolve().then((() => e.observer.flush())) : setTimeout((() => {
                        e.inputState.composing < 0 && e.docView.hasComposition && e.update([])
                    }
                    ), 50))
            }
            ,
            tn.contextmenu = e => {
                e.inputState.lastContextMenu = Date.now()
            }
            ,
            en.beforeinput = (e, t) => {
                var n, i;
                if ("insertReplacementText" == t.inputType && e.observer.editContext) {
                    let i = null === (n = t.dataTransfer) || void 0 === n ? void 0 : n.getData("text/plain")
                        , r = t.getTargetRanges();
                    if (i && r.length) {
                        let t = r[0]
                            , n = e.posAtDOM(t.startContainer, t.startOffset)
                            , a = e.posAtDOM(t.endContainer, t.endOffset);
                        return Dt(e, {
                            from: n,
                            to: a,
                            insert: e.state.toText(i)
                        }, null),
                            !0
                    }
                }
                let r;
                if (H.chrome && H.android && (r = Ft.find((e => e.inputType == t.inputType))) && (e.observer.delayAndroidKey(r.key, r.keyCode),
                    "Backspace" == r.key || "Delete" == r.key)) {
                    let t = (null === (i = window.visualViewport) || void 0 === i ? void 0 : i.height) || 0;
                    setTimeout((() => {
                        var n;
                        ((null === (n = window.visualViewport) || void 0 === n ? void 0 : n.height) || 0) > t + 10 && e.hasFocus && (e.contentDOM.blur(),
                            e.focus())
                    }
                    ), 100)
                }
                return H.ios && "deleteContentForward" == t.inputType && e.observer.flushSoon(),
                    H.safari && "insertText" == t.inputType && e.inputState.composing >= 0 && setTimeout((() => tn.compositionend(e, t)), 20),
                    !1
            }
            ;
        const bn = new Set;
        const yn = ["pre-wrap", "normal", "pre-line", "break-spaces"];
        let Sn = !1;
        function Pn() {
            Sn = !1
        }
        class vn {
            constructor(e) {
                this.lineWrapping = e,
                    this.doc = i.EY.empty,
                    this.heightSamples = {},
                    this.lineHeight = 14,
                    this.charWidth = 7,
                    this.textHeight = 14,
                    this.lineLength = 30
            }
            heightForGap(e, t) {
                let n = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
                return this.lineWrapping && (n += Math.max(0, Math.ceil((t - e - n * this.lineLength * .5) / this.lineLength))),
                    this.lineHeight * n
            }
            heightForLine(e) {
                if (!this.lineWrapping)
                    return this.lineHeight;
                return (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight
            }
            setDoc(e) {
                return this.doc = e,
                    this
            }
            mustRefreshForWrapping(e) {
                return yn.indexOf(e) > -1 != this.lineWrapping
            }
            mustRefreshForHeights(e) {
                let t = !1;
                for (let n = 0; n < e.length; n++) {
                    let i = e[n];
                    i < 0 ? n++ : this.heightSamples[Math.floor(10 * i)] || (t = !0,
                        this.heightSamples[Math.floor(10 * i)] = !0)
                }
                return t
            }
            refresh(e, t, n, i, r, a) {
                let o = yn.indexOf(e) > -1
                    , O = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != o;
                if (this.lineWrapping = o,
                    this.lineHeight = t,
                    this.charWidth = n,
                    this.textHeight = i,
                    this.lineLength = r,
                    O) {
                    this.heightSamples = {};
                    for (let e = 0; e < a.length; e++) {
                        let t = a[e];
                        t < 0 ? e++ : this.heightSamples[Math.floor(10 * t)] = !0
                    }
                }
                return O
            }
        }
        class xn {
            constructor(e, t) {
                this.from = e,
                    this.heights = t,
                    this.index = 0
            }
            get more() {
                return this.index < this.heights.length
            }
        }
        class kn {
            constructor(e, t, n, i, r) {
                this.from = e,
                    this.length = t,
                    this.top = n,
                    this.height = i,
                    this._content = r
            }
            get type() {
                return "number" == typeof this._content ? ue.Text : Array.isArray(this._content) ? this._content : this._content.type
            }
            get to() {
                return this.from + this.length
            }
            get bottom() {
                return this.top + this.height
            }
            get widget() {
                return this._content instanceof pe ? this._content.widget : null
            }
            get widgetLineBreaks() {
                return "number" == typeof this._content ? this._content : 0
            }
            join(e) {
                let t = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
                return new kn(this.from, this.length + e.length, this.top, this.height + e.height, t)
            }
        }
        var wn = function (e) {
            return e[e.ByPos = 0] = "ByPos",
                e[e.ByHeight = 1] = "ByHeight",
                e[e.ByPosNoHeight = 2] = "ByPosNoHeight",
                e
        }(wn || (wn = {}));
        const Xn = .001;
        class _n {
            constructor(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 2;
                this.length = e,
                    this.height = t,
                    this.flags = n
            }
            get outdated() {
                return (2 & this.flags) > 0
            }
            set outdated(e) {
                this.flags = (e ? 2 : 0) | -3 & this.flags
            }
            setHeight(e) {
                this.height != e && (Math.abs(this.height - e) > Xn && (Sn = !0),
                    this.height = e)
            }
            replace(e, t, n) {
                return _n.of(n)
            }
            decomposeLeft(e, t) {
                t.push(this)
            }
            decomposeRight(e, t) {
                t.push(this)
            }
            applyChanges(e, t, n, i) {
                let r = this
                    , a = n.doc;
                for (let o = i.length - 1; o >= 0; o--) {
                    let { fromA: O, toA: s, fromB: l, toB: c } = i[o]
                        , u = r.lineAt(O, wn.ByPosNoHeight, n.setDoc(t), 0, 0)
                        , d = u.to >= s ? u : r.lineAt(s, wn.ByPosNoHeight, n, 0, 0);
                    for (c += d.to - s,
                        s = d.to; o > 0 && u.from <= i[o - 1].toA;)
                        O = i[o - 1].fromA,
                            l = i[o - 1].fromB,
                            o--,
                            O < u.from && (u = r.lineAt(O, wn.ByPosNoHeight, n, 0, 0));
                    l += u.from - O,
                        O = u.from;
                    let h = Un.build(n.setDoc(a), e, l, c);
                    r = Tn(r, r.replace(O, s, h))
                }
                return r.updateHeight(n, 0)
            }
            static empty() {
                return new Rn(0, 0)
            }
            static of(e) {
                if (1 == e.length)
                    return e[0];
                let t = 0
                    , n = e.length
                    , i = 0
                    , r = 0;
                for (; ;)
                    if (t == n)
                        if (i > 2 * r) {
                            let r = e[t - 1];
                            r.break ? e.splice(--t, 1, r.left, null, r.right) : e.splice(--t, 1, r.left, r.right),
                                n += 1 + r.break,
                                i -= r.size
                        } else {
                            if (!(r > 2 * i))
                                break;
                            {
                                let t = e[n];
                                t.break ? e.splice(n, 1, t.left, null, t.right) : e.splice(n, 1, t.left, t.right),
                                    n += 2 + t.break,
                                    r -= t.size
                            }
                        }
                    else if (i < r) {
                        let n = e[t++];
                        n && (i += n.size)
                    } else {
                        let t = e[--n];
                        t && (r += t.size)
                    }
                let a = 0;
                return null == e[t - 1] ? (a = 1,
                    t--) : null == e[t] && (a = 1,
                        n++),
                    new Zn(_n.of(e.slice(0, t)), a, _n.of(e.slice(n)))
            }
        }
        function Tn(e, t) {
            return e == t ? e : (e.constructor != t.constructor && (Sn = !0),
                t)
        }
        _n.prototype.size = 1;
        class zn extends _n {
            constructor(e, t, n) {
                super(e, t),
                    this.deco = n
            }
            blockAt(e, t, n, i) {
                return new kn(i, this.length, n, this.height, this.deco || 0)
            }
            lineAt(e, t, n, i, r) {
                return this.blockAt(0, n, i, r)
            }
            forEachLine(e, t, n, i, r, a) {
                e <= r + this.length && t >= r && a(this.blockAt(0, n, i, r))
            }
            updateHeight(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = arguments.length > 3 ? arguments[3] : void 0;
                return n && n.from <= t && n.more && this.setHeight(n.heights[n.index++]),
                    this.outdated = !1,
                    this
            }
            toString() {
                return `block(${this.length})`
            }
        }
        class Rn extends zn {
            constructor(e, t) {
                super(e, t, null),
                    this.collapsed = 0,
                    this.widgetHeight = 0,
                    this.breaks = 0
            }
            blockAt(e, t, n, i) {
                return new kn(i, this.length, n, this.height, this.breaks)
            }
            replace(e, t, n) {
                let i = n[0];
                return 1 == n.length && (i instanceof Rn || i instanceof Wn && 4 & i.flags) && Math.abs(this.length - i.length) < 10 ? (i instanceof Wn ? i = new Rn(i.length, this.height) : i.height = this.height,
                    this.outdated || (i.outdated = !1),
                    i) : _n.of(n)
            }
            updateHeight(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                    , i = arguments.length > 3 ? arguments[3] : void 0;
                return i && i.from <= t && i.more ? this.setHeight(i.heights[i.index++]) : (n || this.outdated) && this.setHeight(Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight),
                    this.outdated = !1,
                    this
            }
            toString() {
                return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`
            }
        }
        class Wn extends _n {
            constructor(e) {
                super(e, 0)
            }
            heightMetrics(e, t) {
                let n, i = e.doc.lineAt(t).number, r = e.doc.lineAt(t + this.length).number, a = r - i + 1, o = 0;
                if (e.lineWrapping) {
                    let t = Math.min(this.height, e.lineHeight * a);
                    n = t / a,
                        this.length > a + 1 && (o = (this.height - t) / (this.length - a - 1))
                } else
                    n = this.height / a;
                return {
                    firstLine: i,
                    lastLine: r,
                    perLine: n,
                    perChar: o
                }
            }
            blockAt(e, t, n, i) {
                let { firstLine: r, lastLine: a, perLine: o, perChar: O } = this.heightMetrics(t, i);
                if (t.lineWrapping) {
                    let r = i + (e < t.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (e - n) / this.height)) * this.length))
                        , a = t.doc.lineAt(r)
                        , s = o + a.length * O
                        , l = Math.max(n, e - s / 2);
                    return new kn(a.from, a.length, l, s, 0)
                }
                {
                    let i = Math.max(0, Math.min(a - r, Math.floor((e - n) / o)))
                        , { from: O, length: s } = t.doc.line(r + i);
                    return new kn(O, s, n + o * i, o, 0)
                }
            }
            lineAt(e, t, n, i, r) {
                if (t == wn.ByHeight)
                    return this.blockAt(e, n, i, r);
                if (t == wn.ByPosNoHeight) {
                    let { from: t, to: i } = n.doc.lineAt(e);
                    return new kn(t, i - t, 0, 0, 0)
                }
                let { firstLine: a, perLine: o, perChar: O } = this.heightMetrics(n, r)
                    , s = n.doc.lineAt(e)
                    , l = o + s.length * O
                    , c = s.number - a
                    , u = i + o * c + O * (s.from - r - c);
                return new kn(s.from, s.length, Math.max(i, Math.min(u, i + this.height - l)), l, 0)
            }
            forEachLine(e, t, n, i, r, a) {
                e = Math.max(e, r),
                    t = Math.min(t, r + this.length);
                let { firstLine: o, perLine: O, perChar: s } = this.heightMetrics(n, r);
                for (let l = e, c = i; l <= t;) {
                    let t = n.doc.lineAt(l);
                    if (l == e) {
                        let n = t.number - o;
                        c += O * n + s * (e - r - n)
                    }
                    let i = O + s * t.length;
                    a(new kn(t.from, t.length, c, i, 0)),
                        c += i,
                        l = t.to + 1
                }
            }
            replace(e, t, n) {
                let i = this.length - t;
                if (i > 0) {
                    let e = n[n.length - 1];
                    e instanceof Wn ? n[n.length - 1] = new Wn(e.length + i) : n.push(null, new Wn(i - 1))
                }
                if (e > 0) {
                    let t = n[0];
                    t instanceof Wn ? n[0] = new Wn(e + t.length) : n.unshift(new Wn(e - 1), null)
                }
                return _n.of(n)
            }
            decomposeLeft(e, t) {
                t.push(new Wn(e - 1), null)
            }
            decomposeRight(e, t) {
                t.push(null, new Wn(this.length - e - 1))
            }
            updateHeight(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                    , i = arguments.length > 3 ? arguments[3] : void 0
                    , r = t + this.length;
                if (i && i.from <= t + this.length && i.more) {
                    let n = []
                        , a = Math.max(t, i.from)
                        , o = -1;
                    for (i.from > t && n.push(new Wn(i.from - t - 1).updateHeight(e, t)); a <= r && i.more;) {
                        let t = e.doc.lineAt(a).length;
                        n.length && n.push(null);
                        let r = i.heights[i.index++];
                        -1 == o ? o = r : Math.abs(r - o) >= Xn && (o = -2);
                        let O = new Rn(t, r);
                        O.outdated = !1,
                            n.push(O),
                            a += t + 1
                    }
                    a <= r && n.push(null, new Wn(r - a).updateHeight(e, a));
                    let O = _n.of(n);
                    return (o < 0 || Math.abs(O.height - this.height) >= Xn || Math.abs(o - this.heightMetrics(e, t).perLine) >= Xn) && (Sn = !0),
                        Tn(this, O)
                }
                return (n || this.outdated) && (this.setHeight(e.heightForGap(t, t + this.length)),
                    this.outdated = !1),
                    this
            }
            toString() {
                return `gap(${this.length})`
            }
        }
        class Zn extends _n {
            constructor(e, t, n) {
                super(e.length + t + n.length, e.height + n.height, t | (e.outdated || n.outdated ? 2 : 0)),
                    this.left = e,
                    this.right = n,
                    this.size = e.size + n.size
            }
            get break() {
                return 1 & this.flags
            }
            blockAt(e, t, n, i) {
                let r = n + this.left.height;
                return e < r ? this.left.blockAt(e, t, n, i) : this.right.blockAt(e, t, r, i + this.left.length + this.break)
            }
            lineAt(e, t, n, i, r) {
                let a = i + this.left.height
                    , o = r + this.left.length + this.break
                    , O = t == wn.ByHeight ? e < a : e < o
                    , s = O ? this.left.lineAt(e, t, n, i, r) : this.right.lineAt(e, t, n, a, o);
                if (this.break || (O ? s.to < o : s.from > o))
                    return s;
                let l = t == wn.ByPosNoHeight ? wn.ByPosNoHeight : wn.ByPos;
                return O ? s.join(this.right.lineAt(o, l, n, a, o)) : this.left.lineAt(o, l, n, i, r).join(s)
            }
            forEachLine(e, t, n, i, r, a) {
                let o = i + this.left.height
                    , O = r + this.left.length + this.break;
                if (this.break)
                    e < O && this.left.forEachLine(e, t, n, i, r, a),
                        t >= O && this.right.forEachLine(e, t, n, o, O, a);
                else {
                    let s = this.lineAt(O, wn.ByPos, n, i, r);
                    e < s.from && this.left.forEachLine(e, s.from - 1, n, i, r, a),
                        s.to >= e && s.from <= t && a(s),
                        t > s.to && this.right.forEachLine(s.to + 1, t, n, o, O, a)
                }
            }
            replace(e, t, n) {
                let i = this.left.length + this.break;
                if (t < i)
                    return this.balanced(this.left.replace(e, t, n), this.right);
                if (e > this.left.length)
                    return this.balanced(this.left, this.right.replace(e - i, t - i, n));
                let r = [];
                e > 0 && this.decomposeLeft(e, r);
                let a = r.length;
                for (let o of n)
                    r.push(o);
                if (e > 0 && qn(r, a - 1),
                    t < this.length) {
                    let e = r.length;
                    this.decomposeRight(t, r),
                        qn(r, e)
                }
                return _n.of(r)
            }
            decomposeLeft(e, t) {
                let n = this.left.length;
                if (e <= n)
                    return this.left.decomposeLeft(e, t);
                t.push(this.left),
                    this.break && (n++,
                        e >= n && t.push(null)),
                    e > n && this.right.decomposeLeft(e - n, t)
            }
            decomposeRight(e, t) {
                let n = this.left.length
                    , i = n + this.break;
                if (e >= i)
                    return this.right.decomposeRight(e - i, t);
                e < n && this.left.decomposeRight(e, t),
                    this.break && e < i && t.push(null),
                    t.push(this.right)
            }
            balanced(e, t) {
                return e.size > 2 * t.size || t.size > 2 * e.size ? _n.of(this.break ? [e, null, t] : [e, t]) : (this.left = Tn(this.left, e),
                    this.right = Tn(this.right, t),
                    this.setHeight(e.height + t.height),
                    this.outdated = e.outdated || t.outdated,
                    this.size = e.size + t.size,
                    this.length = e.length + this.break + t.length,
                    this)
            }
            updateHeight(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                    , i = arguments.length > 3 ? arguments[3] : void 0
                    , { left: r, right: a } = this
                    , o = t + r.length + this.break
                    , O = null;
                return i && i.from <= t + r.length && i.more ? O = r = r.updateHeight(e, t, n, i) : r.updateHeight(e, t, n),
                    i && i.from <= o + a.length && i.more ? O = a = a.updateHeight(e, o, n, i) : a.updateHeight(e, o, n),
                    O ? this.balanced(r, a) : (this.height = this.left.height + this.right.height,
                        this.outdated = !1,
                        this)
            }
            toString() {
                return this.left + (this.break ? " " : "-") + this.right
            }
        }
        function qn(e, t) {
            let n, i;
            null == e[t] && (n = e[t - 1]) instanceof Wn && (i = e[t + 1]) instanceof Wn && e.splice(t - 1, 3, new Wn(n.length + 1 + i.length))
        }
        class Un {
            constructor(e, t) {
                this.pos = e,
                    this.oracle = t,
                    this.nodes = [],
                    this.lineStart = -1,
                    this.lineEnd = -1,
                    this.covering = null,
                    this.writtenTo = e
            }
            get isCovered() {
                return this.covering && this.nodes[this.nodes.length - 1] == this.covering
            }
            span(e, t) {
                if (this.lineStart > -1) {
                    let e = Math.min(t, this.lineEnd)
                        , n = this.nodes[this.nodes.length - 1];
                    n instanceof Rn ? n.length += e - this.pos : (e > this.pos || !this.isCovered) && this.nodes.push(new Rn(e - this.pos, -1)),
                        this.writtenTo = e,
                        t > e && (this.nodes.push(null),
                            this.writtenTo++,
                            this.lineStart = -1)
                }
                this.pos = t
            }
            point(e, t, n) {
                if (e < t || n.heightRelevant) {
                    let i = n.widget ? n.widget.estimatedHeight : 0
                        , r = n.widget ? n.widget.lineBreaks : 0;
                    i < 0 && (i = this.oracle.lineHeight);
                    let a = t - e;
                    n.block ? this.addBlock(new zn(a, i, n)) : (a || r || i >= 5) && this.addLineDeco(i, r, a)
                } else
                    t > e && this.span(e, t);
                this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to)
            }
            enterLine() {
                if (this.lineStart > -1)
                    return;
                let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
                this.lineStart = e,
                    this.lineEnd = t,
                    this.writtenTo < e && ((this.writtenTo < e - 1 || null == this.nodes[this.nodes.length - 1]) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)),
                        this.nodes.push(null)),
                    this.pos > e && this.nodes.push(new Rn(this.pos - e, -1)),
                    this.writtenTo = this.pos
            }
            blankContent(e, t) {
                let n = new Wn(t - e);
                return this.oracle.doc.lineAt(e).to == t && (n.flags |= 4),
                    n
            }
            ensureLine() {
                this.enterLine();
                let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
                if (e instanceof Rn)
                    return e;
                let t = new Rn(0, -1);
                return this.nodes.push(t),
                    t
            }
            addBlock(e) {
                this.enterLine();
                let t = e.deco;
                t && t.startSide > 0 && !this.isCovered && this.ensureLine(),
                    this.nodes.push(e),
                    this.writtenTo = this.pos = this.pos + e.length,
                    t && t.endSide > 0 && (this.covering = e)
            }
            addLineDeco(e, t, n) {
                let i = this.ensureLine();
                i.length += n,
                    i.collapsed += n,
                    i.widgetHeight = Math.max(i.widgetHeight, e),
                    i.breaks += t,
                    this.writtenTo = this.pos = this.pos + n
            }
            finish(e) {
                let t = 0 == this.nodes.length ? null : this.nodes[this.nodes.length - 1];
                !(this.lineStart > -1) || t instanceof Rn || this.isCovered ? (this.writtenTo < this.pos || null == t) && this.nodes.push(this.blankContent(this.writtenTo, this.pos)) : this.nodes.push(new Rn(0, -1));
                let n = e;
                for (let i of this.nodes)
                    i instanceof Rn && i.updateHeight(this.oracle, n),
                        n += i ? i.length : 1;
                return this.nodes
            }
            static build(e, t, n, r) {
                let a = new Un(n, e);
                return i.om.spans(t, n, r, a, 0),
                    a.finish(n)
            }
        }
        class Yn {
            constructor() {
                this.changes = []
            }
            compareRange() { }
            comparePoint(e, t, n, i) {
                (e < t || n && n.heightRelevant || i && i.heightRelevant) && ge(e, t, this.changes, 5)
            }
        }
        function An(e, t) {
            let n = e.getBoundingClientRect()
                , i = e.ownerDocument
                , r = i.defaultView || window
                , a = Math.max(0, n.left)
                , o = Math.min(r.innerWidth, n.right)
                , O = Math.max(0, n.top)
                , s = Math.min(r.innerHeight, n.bottom);
            for (let l = e.parentNode; l && l != i.body;)
                if (1 == l.nodeType) {
                    let t = l
                        , n = window.getComputedStyle(t);
                    if ((t.scrollHeight > t.clientHeight || t.scrollWidth > t.clientWidth) && "visible" != n.overflow) {
                        let n = t.getBoundingClientRect();
                        a = Math.max(a, n.left),
                            o = Math.min(o, n.right),
                            O = Math.max(O, n.top),
                            s = Math.min(l == e.parentNode ? r.innerHeight : s, n.bottom)
                    }
                    l = "absolute" == n.position || "fixed" == n.position ? t.offsetParent : t.parentNode
                } else {
                    if (11 != l.nodeType)
                        break;
                    l = l.host
                }
            return {
                left: a - n.left,
                right: Math.max(a, o) - n.left,
                top: O - (n.top + t),
                bottom: Math.max(O, s) - (n.top + t)
            }
        }
        function Vn(e, t) {
            let n = e.getBoundingClientRect();
            return {
                left: 0,
                right: n.right - n.left,
                top: t,
                bottom: n.bottom - (n.top + t)
            }
        }
        class En {
            constructor(e, t, n) {
                this.from = e,
                    this.to = t,
                    this.size = n
            }
            static same(e, t) {
                if (e.length != t.length)
                    return !1;
                for (let n = 0; n < e.length; n++) {
                    let i = e[n]
                        , r = t[n];
                    if (i.from != r.from || i.to != r.to || i.size != r.size)
                        return !1
                }
                return !0
            }
            draw(e, t) {
                return de.replace({
                    widget: new jn(this.size * (t ? e.scaleY : e.scaleX), t)
                }).range(this.from, this.to)
            }
        }
        class jn extends ce {
            constructor(e, t) {
                super(),
                    this.size = e,
                    this.vertical = t
            }
            eq(e) {
                return e.size == this.size && e.vertical == this.vertical
            }
            toDOM() {
                let e = document.createElement("div");
                return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px",
                    e.style.height = "2px",
                    e.style.display = "inline-block"),
                    e
            }
            get estimatedHeight() {
                return this.vertical ? this.size : -1
            }
        }
        class Cn {
            constructor(e) {
                this.state = e,
                    this.pixelViewport = {
                        left: 0,
                        right: window.innerWidth,
                        top: 0,
                        bottom: 0
                    },
                    this.inView = !0,
                    this.paddingTop = 0,
                    this.paddingBottom = 0,
                    this.contentDOMWidth = 0,
                    this.contentDOMHeight = 0,
                    this.editorHeight = 0,
                    this.editorWidth = 0,
                    this.scrollTop = 0,
                    this.scrolledToBottom = !1,
                    this.scaleX = 1,
                    this.scaleY = 1,
                    this.scrollAnchorPos = 0,
                    this.scrollAnchorHeight = -1,
                    this.scaler = Nn,
                    this.scrollTarget = null,
                    this.printing = !1,
                    this.mustMeasureContent = !0,
                    this.defaultTextDirection = ve.LTR,
                    this.visibleRanges = [],
                    this.mustEnforceCursorAssoc = !1;
                let t = e.facet(dt).some((e => "function" != typeof e && "cm-lineWrapping" == e.class));
                this.heightOracle = new vn(t),
                    this.stateDeco = e.facet(ht).filter((e => "function" != typeof e)),
                    this.heightMap = _n.empty().applyChanges(this.stateDeco, i.EY.empty, this.heightOracle.setDoc(e.doc), [new yt(0, 0, 0, e.doc.length)]);
                for (let n = 0; n < 2 && (this.viewport = this.getViewport(0, null),
                    this.updateForViewport()); n++)
                    ;
                this.updateViewportLines(),
                    this.lineGaps = this.ensureLineGaps([]),
                    this.lineGapDeco = de.set(this.lineGaps.map((e => e.draw(this, !1)))),
                    this.computeVisibleRanges()
            }
            updateForViewport() {
                let e = [this.viewport]
                    , { main: t } = this.state.selection;
                for (let n = 0; n <= 1; n++) {
                    let i = n ? t.head : t.anchor;
                    if (!e.some((e => {
                        let { from: t, to: n } = e;
                        return i >= t && i <= n
                    }
                    ))) {
                        let { from: t, to: n } = this.lineBlockAt(i);
                        e.push(new Gn(t, n))
                    }
                }
                return this.viewports = e.sort(((e, t) => e.from - t.from)),
                    this.updateScaler()
            }
            updateScaler() {
                let e = this.scaler;
                return this.scaler = this.heightMap.height <= 7e6 ? Nn : new Ln(this.heightOracle, this.heightMap, this.viewports),
                    e.eq(this.scaler) ? 0 : 2
            }
            updateViewportLines() {
                this.viewportLines = [],
                    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e => {
                        this.viewportLines.push(Mn(e, this.scaler))
                    }
                    ))
            }
            update(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                this.state = e.state;
                let n = this.stateDeco;
                this.stateDeco = this.state.facet(ht).filter((e => "function" != typeof e));
                let r = e.changedRanges
                    , a = yt.extendWithRanges(r, function (e, t, n) {
                        let r = new Yn;
                        return i.om.compare(e, t, n, r, 0),
                            r.changes
                    }(n, this.stateDeco, e ? e.changes : i.VR.empty(this.state.doc.length)))
                    , o = this.heightMap.height
                    , O = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
                Pn(),
                    this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), a),
                    (this.heightMap.height != o || Sn) && (e.flags |= 2),
                    O ? (this.scrollAnchorPos = e.changes.mapPos(O.from, -1),
                        this.scrollAnchorHeight = O.top) : (this.scrollAnchorPos = -1,
                            this.scrollAnchorHeight = this.heightMap.height);
                let s = a.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
                (t && (t.range.head < s.from || t.range.head > s.to) || !this.viewportIsAppropriate(s)) && (s = this.getViewport(0, t));
                let l = s.from != this.viewport.from || s.to != this.viewport.to;
                this.viewport = s,
                    e.flags |= this.updateForViewport(),
                    (l || !e.changes.empty || 2 & e.flags) && this.updateViewportLines(),
                    (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))),
                    e.flags |= this.computeVisibleRanges(),
                    t && (this.scrollTarget = t),
                    !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(et) && (this.mustEnforceCursorAssoc = !0)
            }
            measure(e) {
                let t = e.contentDOM
                    , n = window.getComputedStyle(t)
                    , r = this.heightOracle
                    , a = n.whiteSpace;
                this.defaultTextDirection = "rtl" == n.direction ? ve.RTL : ve.LTR;
                let o = this.heightOracle.mustRefreshForWrapping(a)
                    , O = t.getBoundingClientRect()
                    , s = o || this.mustMeasureContent || this.contentDOMHeight != O.height;
                this.contentDOMHeight = O.height,
                    this.mustMeasureContent = !1;
                let l = 0
                    , c = 0;
                if (O.width && O.height) {
                    let { scaleX: e, scaleY: n } = S(t, O);
                    (e > .005 && Math.abs(this.scaleX - e) > .005 || n > .005 && Math.abs(this.scaleY - n) > .005) && (this.scaleX = e,
                        this.scaleY = n,
                        l |= 8,
                        o = s = !0)
                }
                let u = (parseInt(n.paddingTop) || 0) * this.scaleY
                    , d = (parseInt(n.paddingBottom) || 0) * this.scaleY;
                this.paddingTop == u && this.paddingBottom == d || (this.paddingTop = u,
                    this.paddingBottom = d,
                    l |= 10),
                    this.editorWidth != e.scrollDOM.clientWidth && (r.lineWrapping && (s = !0),
                        this.editorWidth = e.scrollDOM.clientWidth,
                        l |= 8);
                let h = e.scrollDOM.scrollTop * this.scaleY;
                this.scrollTop != h && (this.scrollAnchorHeight = -1,
                    this.scrollTop = h),
                    this.scrolledToBottom = T(e.scrollDOM);
                let f = (this.printing ? Vn : An)(t, this.paddingTop)
                    , p = f.top - this.pixelViewport.top
                    , m = f.bottom - this.pixelViewport.bottom;
                this.pixelViewport = f;
                let g = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
                if (g != this.inView && (this.inView = g,
                    g && (s = !0)),
                    !this.inView && !this.scrollTarget)
                    return 0;
                let Q = O.width;
                if (this.contentDOMWidth == Q && this.editorHeight == e.scrollDOM.clientHeight || (this.contentDOMWidth = O.width,
                    this.editorHeight = e.scrollDOM.clientHeight,
                    l |= 8),
                    s) {
                    let t = e.docView.measureVisibleLineHeights(this.viewport);
                    if (r.mustRefreshForHeights(t) && (o = !0),
                        o || r.lineWrapping && Math.abs(Q - this.contentDOMWidth) > r.charWidth) {
                        let { lineHeight: n, charWidth: i, textHeight: O } = e.docView.measureTextSize();
                        o = n > 0 && r.refresh(a, n, i, O, Q / i, t),
                            o && (e.docView.minWidth = 0,
                                l |= 8)
                    }
                    p > 0 && m > 0 ? c = Math.max(p, m) : p < 0 && m < 0 && (c = Math.min(p, m)),
                        Pn();
                    for (let n of this.viewports) {
                        let a = n.from == this.viewport.from ? t : e.docView.measureVisibleLineHeights(n);
                        this.heightMap = (o ? _n.empty().applyChanges(this.stateDeco, i.EY.empty, this.heightOracle, [new yt(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(r, 0, o, new xn(n.from, a))
                    }
                    Sn && (l |= 2)
                }
                let $ = !this.viewportIsAppropriate(this.viewport, c) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
                return $ && (2 & l && (l |= this.updateScaler()),
                    this.viewport = this.getViewport(c, this.scrollTarget),
                    l |= this.updateForViewport()),
                    (2 & l || $) && this.updateViewportLines(),
                    (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)),
                    l |= this.computeVisibleRanges(),
                    this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1,
                        e.docView.enforceCursorAssoc()),
                    l
            }
            get visibleTop() {
                return this.scaler.fromDOM(this.pixelViewport.top)
            }
            get visibleBottom() {
                return this.scaler.fromDOM(this.pixelViewport.bottom)
            }
            getViewport(e, t) {
                let n = .5 - Math.max(-.5, Math.min(.5, e / 1e3 / 2))
                    , i = this.heightMap
                    , r = this.heightOracle
                    , { visibleTop: a, visibleBottom: o } = this
                    , O = new Gn(i.lineAt(a - 1e3 * n, wn.ByHeight, r, 0, 0).from, i.lineAt(o + 1e3 * (1 - n), wn.ByHeight, r, 0, 0).to);
                if (t) {
                    let { head: e } = t.range;
                    if (e < O.from || e > O.to) {
                        let n, a = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), o = i.lineAt(e, wn.ByPos, r, 0, 0);
                        n = "center" == t.y ? (o.top + o.bottom) / 2 - a / 2 : "start" == t.y || "nearest" == t.y && e < O.from ? o.top : o.bottom - a,
                            O = new Gn(i.lineAt(n - 500, wn.ByHeight, r, 0, 0).from, i.lineAt(n + a + 500, wn.ByHeight, r, 0, 0).to)
                    }
                }
                return O
            }
            mapViewport(e, t) {
                let n = t.mapPos(e.from, -1)
                    , i = t.mapPos(e.to, 1);
                return new Gn(this.heightMap.lineAt(n, wn.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(i, wn.ByPos, this.heightOracle, 0, 0).to)
            }
            viewportIsAppropriate(e) {
                let { from: t, to: n } = e
                    , i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (!this.inView)
                    return !0;
                let { top: r } = this.heightMap.lineAt(t, wn.ByPos, this.heightOracle, 0, 0)
                    , { bottom: a } = this.heightMap.lineAt(n, wn.ByPos, this.heightOracle, 0, 0)
                    , { visibleTop: o, visibleBottom: O } = this;
                return (0 == t || r <= o - Math.max(10, Math.min(-i, 250))) && (n == this.state.doc.length || a >= O + Math.max(10, Math.min(i, 250))) && r > o - 2e3 && a < O + 2e3
            }
            mapLineGaps(e, t) {
                if (!e.length || t.empty)
                    return e;
                let n = [];
                for (let i of e)
                    t.touchesRange(i.from, i.to) || n.push(new En(t.mapPos(i.from), t.mapPos(i.to), i.size));
                return n
            }
            ensureLineGaps(e, t) {
                let n = this.heightOracle.lineWrapping
                    , r = n ? 1e4 : 2e3
                    , a = r >> 1
                    , o = r << 1;
                if (this.defaultTextDirection != ve.LTR && !n)
                    return [];
                let O = []
                    , s = (r, o, l, c) => {
                        if (o - r < a)
                            return;
                        let u = this.state.selection.main
                            , d = [u.from];
                        u.empty || d.push(u.to);
                        for (let e of d)
                            if (e > r && e < o)
                                return s(r, e - 10, l, c),
                                    void s(e + 10, o, l, c);
                        let h = function (e, t) {
                            for (let n of e)
                                if (t(n))
                                    return n;
                            return
                        }(e, (e => e.from >= l.from && e.to <= l.to && Math.abs(e.from - r) < a && Math.abs(e.to - o) < a && !d.some((t => e.from < t && e.to > t))));
                        if (!h) {
                            if (o < l.to && t && n && t.visibleRanges.some((e => e.from <= o && e.to >= o))) {
                                let e = t.moveToLineBoundary(i.OF.cursor(o), !1, !0).head;
                                e > r && (o = e)
                            }
                            h = new En(r, o, this.gapSize(l, r, o, c))
                        }
                        O.push(h)
                    }
                    , l = e => {
                        if (e.length < o || e.type != ue.Text)
                            return;
                        let t = function (e, t, n) {
                            let r = []
                                , a = e
                                , o = 0;
                            i.om.spans(n, e, t, {
                                span() { },
                                point(e, t) {
                                    e > a && (r.push({
                                        from: a,
                                        to: e
                                    }),
                                        o += e - a),
                                        a = t
                                }
                            }, 20),
                                a < t && (r.push({
                                    from: a,
                                    to: t
                                }),
                                    o += t - a);
                            return {
                                total: o,
                                ranges: r
                            }
                        }(e.from, e.to, this.stateDeco);
                        if (t.total < o)
                            return;
                        let a, O, l = this.scrollTarget ? this.scrollTarget.range.head : null;
                        if (n) {
                            let n, i, o = r / this.heightOracle.lineLength * this.heightOracle.lineHeight;
                            if (null != l) {
                                let r = Dn(t, l)
                                    , a = ((this.visibleBottom - this.visibleTop) / 2 + o) / e.height;
                                n = r - a,
                                    i = r + a
                            } else
                                n = (this.visibleTop - e.top - o) / e.height,
                                    i = (this.visibleBottom - e.top + o) / e.height;
                            a = In(t, n),
                                O = In(t, i)
                        } else {
                            let e, n, i = t.total * this.heightOracle.charWidth, o = r * this.heightOracle.charWidth;
                            if (null != l) {
                                let r = Dn(t, l)
                                    , a = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + o) / i;
                                e = r - a,
                                    n = r + a
                            } else
                                e = (this.pixelViewport.left - o) / i,
                                    n = (this.pixelViewport.right + o) / i;
                            a = In(t, e),
                                O = In(t, n)
                        }
                        a > e.from && s(e.from, a, e, t),
                            O < e.to && s(O, e.to, e, t)
                    }
                    ;
                for (let i of this.viewportLines)
                    Array.isArray(i.type) ? i.type.forEach(l) : l(i);
                return O
            }
            gapSize(e, t, n, i) {
                let r = Dn(i, n) - Dn(i, t);
                return this.heightOracle.lineWrapping ? e.height * r : i.total * this.heightOracle.charWidth * r
            }
            updateLineGaps(e) {
                En.same(e, this.lineGaps) || (this.lineGaps = e,
                    this.lineGapDeco = de.set(e.map((e => e.draw(this, this.heightOracle.lineWrapping)))))
            }
            computeVisibleRanges() {
                let e = this.stateDeco;
                this.lineGaps.length && (e = e.concat(this.lineGapDeco));
                let t = [];
                i.om.spans(e, this.viewport.from, this.viewport.to, {
                    span(e, n) {
                        t.push({
                            from: e,
                            to: n
                        })
                    },
                    point() { }
                }, 20);
                let n = t.length != this.visibleRanges.length || this.visibleRanges.some(((e, n) => e.from != t[n].from || e.to != t[n].to));
                return this.visibleRanges = t,
                    n ? 4 : 0
            }
            lineBlockAt(e) {
                return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t => t.from <= e && t.to >= e)) || Mn(this.heightMap.lineAt(e, wn.ByPos, this.heightOracle, 0, 0), this.scaler)
            }
            lineBlockAtHeight(e) {
                return e >= this.viewportLines[0].top && e <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((t => t.top <= e && t.bottom >= e)) || Mn(this.heightMap.lineAt(this.scaler.fromDOM(e), wn.ByHeight, this.heightOracle, 0, 0), this.scaler)
            }
            scrollAnchorAt(e) {
                let t = this.lineBlockAtHeight(e + 8);
                return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? t : this.viewportLines[0]
            }
            elementAtHeight(e) {
                return Mn(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler)
            }
            get docHeight() {
                return this.scaler.toDOM(this.heightMap.height)
            }
            get contentHeight() {
                return this.docHeight + this.paddingTop + this.paddingBottom
            }
        }
        class Gn {
            constructor(e, t) {
                this.from = e,
                    this.to = t
            }
        }
        function In(e, t) {
            let { total: n, ranges: i } = e;
            if (t <= 0)
                return i[0].from;
            if (t >= 1)
                return i[i.length - 1].to;
            let r = Math.floor(n * t);
            for (let a = 0; ; a++) {
                let { from: e, to: t } = i[a]
                    , n = t - e;
                if (r <= n)
                    return e + r;
                r -= n
            }
        }
        function Dn(e, t) {
            let n = 0;
            for (let { from: i, to: r } of e.ranges) {
                if (t <= r) {
                    n += t - i;
                    break
                }
                n += r - i
            }
            return n / e.total
        }
        const Nn = {
            toDOM: e => e,
            fromDOM: e => e,
            scale: 1,
            eq(e) {
                return e == this
            }
        };
        class Ln {
            constructor(e, t, n) {
                let i = 0
                    , r = 0
                    , a = 0;
                this.viewports = n.map((n => {
                    let { from: r, to: a } = n
                        , o = t.lineAt(r, wn.ByPos, e, 0, 0).top
                        , O = t.lineAt(a, wn.ByPos, e, 0, 0).bottom;
                    return i += O - o,
                    {
                        from: r,
                        to: a,
                        top: o,
                        bottom: O,
                        domTop: 0,
                        domBottom: 0
                    }
                }
                )),
                    this.scale = (7e6 - i) / (t.height - i);
                for (let o of this.viewports)
                    o.domTop = a + (o.top - r) * this.scale,
                        a = o.domBottom = o.domTop + (o.bottom - o.top),
                        r = o.bottom
            }
            toDOM(e) {
                for (let t = 0, n = 0, i = 0; ; t++) {
                    let r = t < this.viewports.length ? this.viewports[t] : null;
                    if (!r || e < r.top)
                        return i + (e - n) * this.scale;
                    if (e <= r.bottom)
                        return r.domTop + (e - r.top);
                    n = r.bottom,
                        i = r.domBottom
                }
            }
            fromDOM(e) {
                for (let t = 0, n = 0, i = 0; ; t++) {
                    let r = t < this.viewports.length ? this.viewports[t] : null;
                    if (!r || e < r.domTop)
                        return n + (e - i) / this.scale;
                    if (e <= r.domBottom)
                        return r.top + (e - r.domTop);
                    n = r.bottom,
                        i = r.domBottom
                }
            }
            eq(e) {
                return e instanceof Ln && (this.scale == e.scale && this.viewports.length == e.viewports.length && this.viewports.every(((t, n) => t.from == e.viewports[n].from && t.to == e.viewports[n].to)))
            }
        }
        function Mn(e, t) {
            if (1 == t.scale)
                return e;
            let n = t.toDOM(e.top)
                , i = t.toDOM(e.bottom);
            return new kn(e.from, e.length, n, i - n, Array.isArray(e._content) ? e._content.map((e => Mn(e, t))) : e._content)
        }
        const Fn = i.sj.define({
            combine: e => e.join(" ")
        })
            , Bn = i.sj.define({
                combine: e => e.indexOf(!0) > -1
            })
            , Hn = r.G.newName()
            , Kn = r.G.newName()
            , Jn = r.G.newName()
            , ei = {
                "&light": "." + Kn,
                "&dark": "." + Jn
            };
        function ti(e, t, n) {
            return new r.G(t, {
                finish: t => /&/.test(t) ? t.replace(/&\w*/, (t => {
                    if ("&" == t)
                        return e;
                    if (!n || !n[t])
                        throw new RangeError(`Unsupported selector: ${t}`);
                    return n[t]
                }
                )) : e + " " + t
            })
        }
        const ni = ti("." + Hn, {
            "&": {
                position: "relative !important",
                boxSizing: "border-box",
                "&.cm-focused": {
                    outline: "1px dotted #212121"
                },
                display: "flex !important",
                flexDirection: "column"
            },
            ".cm-scroller": {
                display: "flex !important",
                alignItems: "flex-start !important",
                fontFamily: "monospace",
                lineHeight: 1.4,
                height: "100%",
                overflowX: "auto",
                position: "relative",
                zIndex: 0,
                overflowAnchor: "none"
            },
            ".cm-content": {
                margin: 0,
                flexGrow: 2,
                flexShrink: 0,
                display: "block",
                whiteSpace: "pre",
                wordWrap: "normal",
                boxSizing: "border-box",
                minHeight: "100%",
                padding: "4px 0",
                outline: "none",
                "&[contenteditable=true]": {
                    WebkitUserModify: "read-write-plaintext-only"
                }
            },
            ".cm-lineWrapping": {
                whiteSpace_fallback: "pre-wrap",
                whiteSpace: "break-spaces",
                wordBreak: "break-word",
                overflowWrap: "anywhere",
                flexShrink: 1
            },
            "&light .cm-content": {
                caretColor: "black"
            },
            "&dark .cm-content": {
                caretColor: "white"
            },
            ".cm-line": {
                display: "block",
                padding: "0 2px 0 6px"
            },
            ".cm-layer": {
                position: "absolute",
                left: 0,
                top: 0,
                contain: "size style",
                "& > *": {
                    position: "absolute"
                }
            },
            "&light .cm-selectionBackground": {
                background: "#d9d9d9"
            },
            "&dark .cm-selectionBackground": {
                background: "#222"
            },
            "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
                background: "#d7d4f0"
            },
            "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
                background: "#233"
            },
            ".cm-cursorLayer": {
                pointerEvents: "none"
            },
            "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
                animation: "steps(1) cm-blink 1.2s infinite"
            },
            "@keyframes cm-blink": {
                "0%": {},
                "50%": {
                    opacity: 0
                },
                "100%": {}
            },
            "@keyframes cm-blink2": {
                "0%": {},
                "50%": {
                    opacity: 0
                },
                "100%": {}
            },
            ".cm-cursor, .cm-dropCursor": {
                borderLeft: "1.2px solid black",
                marginLeft: "-0.6px",
                pointerEvents: "none"
            },
            ".cm-cursor": {
                display: "none"
            },
            "&dark .cm-cursor": {
                borderLeftColor: "#444"
            },
            ".cm-dropCursor": {
                position: "absolute"
            },
            "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
                display: "block"
            },
            ".cm-iso": {
                unicodeBidi: "isolate"
            },
            ".cm-announced": {
                position: "fixed",
                top: "-10000px"
            },
            "@media print": {
                ".cm-announced": {
                    display: "none"
                }
            },
            "&light .cm-activeLine": {
                backgroundColor: "#cceeff44"
            },
            "&dark .cm-activeLine": {
                backgroundColor: "#99eeff33"
            },
            "&light .cm-specialChar": {
                color: "red"
            },
            "&dark .cm-specialChar": {
                color: "#f78"
            },
            ".cm-gutters": {
                flexShrink: 0,
                display: "flex",
                height: "100%",
                boxSizing: "border-box",
                insetInlineStart: 0,
                zIndex: 200
            },
            "&light .cm-gutters": {
                backgroundColor: "#f5f5f5",
                color: "#6c6c6c",
                borderRight: "1px solid #ddd"
            },
            "&dark .cm-gutters": {
                backgroundColor: "#333338",
                color: "#ccc"
            },
            ".cm-gutter": {
                display: "flex !important",
                flexDirection: "column",
                flexShrink: 0,
                boxSizing: "border-box",
                minHeight: "100%",
                overflow: "hidden"
            },
            ".cm-gutterElement": {
                boxSizing: "border-box"
            },
            ".cm-lineNumbers .cm-gutterElement": {
                padding: "0 3px 0 5px",
                minWidth: "20px",
                textAlign: "right",
                whiteSpace: "nowrap"
            },
            "&light .cm-activeLineGutter": {
                backgroundColor: "#e2f2ff"
            },
            "&dark .cm-activeLineGutter": {
                backgroundColor: "#222227"
            },
            ".cm-panels": {
                boxSizing: "border-box",
                position: "sticky",
                left: 0,
                right: 0,
                zIndex: 300
            },
            "&light .cm-panels": {
                backgroundColor: "#f5f5f5",
                color: "black"
            },
            "&light .cm-panels-top": {
                borderBottom: "1px solid #ddd"
            },
            "&light .cm-panels-bottom": {
                borderTop: "1px solid #ddd"
            },
            "&dark .cm-panels": {
                backgroundColor: "#333338",
                color: "white"
            },
            ".cm-tab": {
                display: "inline-block",
                overflow: "hidden",
                verticalAlign: "bottom"
            },
            ".cm-widgetBuffer": {
                verticalAlign: "text-top",
                height: "1em",
                width: 0,
                display: "inline"
            },
            ".cm-placeholder": {
                color: "#888",
                display: "inline-block",
                verticalAlign: "top"
            },
            ".cm-highlightSpace:before": {
                content: "attr(data-display)",
                position: "absolute",
                pointerEvents: "none",
                color: "#888"
            },
            ".cm-highlightTab": {
                backgroundImage: 'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',
                backgroundSize: "auto 100%",
                backgroundPosition: "right 90%",
                backgroundRepeat: "no-repeat"
            },
            ".cm-trailingSpace": {
                backgroundColor: "#ff332255"
            },
            ".cm-button": {
                verticalAlign: "middle",
                color: "inherit",
                fontSize: "70%",
                padding: ".2em 1em",
                borderRadius: "1px"
            },
            "&light .cm-button": {
                backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
                border: "1px solid #888",
                "&:active": {
                    backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
                }
            },
            "&dark .cm-button": {
                backgroundImage: "linear-gradient(#393939, #111)",
                border: "1px solid #888",
                "&:active": {
                    backgroundImage: "linear-gradient(#111, #333)"
                }
            },
            ".cm-textfield": {
                verticalAlign: "middle",
                color: "inherit",
                fontSize: "70%",
                border: "1px solid silver",
                padding: ".2em .5em"
            },
            "&light .cm-textfield": {
                backgroundColor: "white"
            },
            "&dark .cm-textfield": {
                border: "1px solid #555",
                backgroundColor: "inherit"
            }
        }, ei)
            , ii = {
                childList: !0,
                characterData: !0,
                subtree: !0,
                attributes: !0,
                characterDataOldValue: !0
            }
            , ri = H.ie && H.ie_version <= 11;
        class ai {
            constructor(e) {
                this.view = e,
                    this.active = !1,
                    this.editContext = null,
                    this.selectionRange = new P,
                    this.selectionChanged = !1,
                    this.delayedFlush = -1,
                    this.resizeTimeout = -1,
                    this.queue = [],
                    this.delayedAndroidKey = null,
                    this.flushingAndroidKey = -1,
                    this.lastChange = 0,
                    this.scrollTargets = [],
                    this.intersection = null,
                    this.resizeScroll = null,
                    this.intersecting = !1,
                    this.gapIntersection = null,
                    this.gaps = [],
                    this.printQuery = null,
                    this.parentCheck = -1,
                    this.dom = e.contentDOM,
                    this.observer = new MutationObserver((t => {
                        for (let e of t)
                            this.queue.push(e);
                        (H.ie && H.ie_version <= 11 || H.ios && e.composing) && t.some((e => "childList" == e.type && e.removedNodes.length || "characterData" == e.type && e.oldValue.length > e.target.nodeValue.length)) ? this.flushSoon() : this.flush()
                    }
                    )),
                    !window.EditContext || !1 === e.constructor.EDIT_CONTEXT || H.chrome && H.chrome_version < 126 || (this.editContext = new si(e),
                        e.state.facet(ot) && (e.contentDOM.editContext = this.editContext.editContext)),
                    ri && (this.onCharData = e => {
                        this.queue.push({
                            target: e.target,
                            type: "characterData",
                            oldValue: e.prevValue
                        }),
                            this.flushSoon()
                    }
                    ),
                    this.onSelectionChange = this.onSelectionChange.bind(this),
                    this.onResize = this.onResize.bind(this),
                    this.onPrint = this.onPrint.bind(this),
                    this.onScroll = this.onScroll.bind(this),
                    window.matchMedia && (this.printQuery = window.matchMedia("print")),
                    "function" == typeof ResizeObserver && (this.resizeScroll = new ResizeObserver((() => {
                        var e;
                        (null === (e = this.view.docView) || void 0 === e ? void 0 : e.lastUpdate) < Date.now() - 75 && this.onResize()
                    }
                    )),
                        this.resizeScroll.observe(e.scrollDOM)),
                    this.addWindowListeners(this.win = e.win),
                    this.start(),
                    "function" == typeof IntersectionObserver && (this.intersection = new IntersectionObserver((e => {
                        this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)),
                            e.length > 0 && e[e.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting,
                                this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")))
                    }
                    ), {
                        threshold: [0, .001]
                    }),
                        this.intersection.observe(this.dom),
                        this.gapIntersection = new IntersectionObserver((e => {
                            e.length > 0 && e[e.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"))
                        }
                        ), {})),
                    this.listenForScroll(),
                    this.readSelectionRange()
            }
            onScrollChanged(e) {
                this.view.inputState.runHandlers("scroll", e),
                    this.intersecting && this.view.measure()
            }
            onScroll(e) {
                this.intersecting && this.flush(!1),
                    this.editContext && this.view.requestMeasure(this.editContext.measureReq),
                    this.onScrollChanged(e)
            }
            onResize() {
                this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout((() => {
                    this.resizeTimeout = -1,
                        this.view.requestMeasure()
                }
                ), 50))
            }
            onPrint(e) {
                ("change" != e.type && e.type || e.matches) && (this.view.viewState.printing = !0,
                    this.view.measure(),
                    setTimeout((() => {
                        this.view.viewState.printing = !1,
                            this.view.requestMeasure()
                    }
                    ), 500))
            }
            updateGaps(e) {
                if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some(((t, n) => t != e[n])))) {
                    this.gapIntersection.disconnect();
                    for (let t of e)
                        this.gapIntersection.observe(t);
                    this.gaps = e
                }
            }
            onSelectionChange(e) {
                let t = this.selectionChanged;
                if (!this.readSelectionRange() || this.delayedAndroidKey)
                    return;
                let { view: n } = this
                    , i = this.selectionRange;
                if (n.state.facet(ot) ? n.root.activeElement != this.dom : !h(n.dom, i))
                    return;
                let r = i.anchorNode && n.docView.nearest(i.anchorNode);
                r && r.ignoreEvent(e) ? t || (this.selectionChanged = !1) : (H.ie && H.ie_version <= 11 || H.android && H.chrome) && !n.state.selection.main.empty && i.focusNode && p(i.focusNode, i.focusOffset, i.anchorNode, i.anchorOffset) ? this.flushSoon() : this.flush(!1)
            }
            readSelectionRange() {
                let { view: e } = this
                    , t = u(e.root);
                if (!t)
                    return !1;
                let n = H.safari && 11 == e.root.nodeType && function (e) {
                    let t = e.activeElement;
                    for (; t && t.shadowRoot;)
                        t = t.shadowRoot.activeElement;
                    return t
                }(this.dom.ownerDocument) == this.dom && function (e, t) {
                    if (t.getComposedRanges) {
                        let n = t.getComposedRanges(e.root)[0];
                        if (n)
                            return Oi(e, n)
                    }
                    let n = null;
                    function i(e) {
                        e.preventDefault(),
                            e.stopImmediatePropagation(),
                            n = e.getTargetRanges()[0]
                    }
                    return e.contentDOM.addEventListener("beforeinput", i, !0),
                        e.dom.ownerDocument.execCommand("indent"),
                        e.contentDOM.removeEventListener("beforeinput", i, !0),
                        n ? Oi(e, n) : null
                }(this.view, t) || t;
                if (!n || this.selectionRange.eq(n))
                    return !1;
                let i = h(this.dom, n);
                return i && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && function (e, t) {
                    let n = t.focusNode
                        , i = t.focusOffset;
                    if (!n || t.anchorNode != n || t.anchorOffset != i)
                        return !1;
                    for (i = Math.min(i, $(n)); ;)
                        if (i) {
                            if (1 != n.nodeType)
                                return !1;
                            let e = n.childNodes[i - 1];
                            "false" == e.contentEditable ? i-- : (n = e,
                                i = $(n))
                        } else {
                            if (n == e)
                                return !0;
                            i = m(n),
                                n = n.parentNode
                        }
                }(this.dom, n) ? (this.view.inputState.lastFocusTime = 0,
                    e.docView.updateSelection(),
                    !1) : (this.selectionRange.setRange(n),
                        i && (this.selectionChanged = !0),
                        !0)
            }
            setSelectionRange(e, t) {
                this.selectionRange.set(e.node, e.offset, t.node, t.offset),
                    this.selectionChanged = !1
            }
            clearSelectionRange() {
                this.selectionRange.set(null, 0, null, 0)
            }
            listenForScroll() {
                this.parentCheck = -1;
                let e = 0
                    , t = null;
                for (let n = this.dom; n;)
                    if (1 == n.nodeType)
                        !t && e < this.scrollTargets.length && this.scrollTargets[e] == n ? e++ : t || (t = this.scrollTargets.slice(0, e)),
                            t && t.push(n),
                            n = n.assignedSlot || n.parentNode;
                    else {
                        if (11 != n.nodeType)
                            break;
                        n = n.host
                    }
                if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)),
                    t) {
                    for (let e of this.scrollTargets)
                        e.removeEventListener("scroll", this.onScroll);
                    for (let e of this.scrollTargets = t)
                        e.addEventListener("scroll", this.onScroll)
                }
            }
            ignore(e) {
                if (!this.active)
                    return e();
                try {
                    return this.stop(),
                        e()
                } finally {
                    this.start(),
                        this.clear()
                }
            }
            start() {
                this.active || (this.observer.observe(this.dom, ii),
                    ri && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData),
                    this.active = !0)
            }
            stop() {
                this.active && (this.active = !1,
                    this.observer.disconnect(),
                    ri && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData))
            }
            clear() {
                this.processRecords(),
                    this.queue.length = 0,
                    this.selectionChanged = !1
            }
            delayAndroidKey(e, t) {
                var n;
                if (!this.delayedAndroidKey) {
                    let e = () => {
                        let e = this.delayedAndroidKey;
                        if (e) {
                            this.clearDelayedAndroidKey(),
                                this.view.inputState.lastKeyCode = e.keyCode,
                                this.view.inputState.lastKeyTime = Date.now(),
                                !this.flush() && e.force && X(this.dom, e.key, e.keyCode)
                        }
                    }
                        ;
                    this.flushingAndroidKey = this.view.win.requestAnimationFrame(e)
                }
                this.delayedAndroidKey && "Enter" != e || (this.delayedAndroidKey = {
                    key: e,
                    keyCode: t,
                    force: this.lastChange < Date.now() - 50 || !!(null === (n = this.delayedAndroidKey) || void 0 === n ? void 0 : n.force)
                })
            }
            clearDelayedAndroidKey() {
                this.win.cancelAnimationFrame(this.flushingAndroidKey),
                    this.delayedAndroidKey = null,
                    this.flushingAndroidKey = -1
            }
            flushSoon() {
                this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame((() => {
                    this.delayedFlush = -1,
                        this.flush()
                }
                )))
            }
            forceFlush() {
                this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush),
                    this.delayedFlush = -1),
                    this.flush()
            }
            pendingRecords() {
                for (let e of this.observer.takeRecords())
                    this.queue.push(e);
                return this.queue
            }
            processRecords() {
                let e = this.pendingRecords();
                e.length && (this.queue = []);
                let t = -1
                    , n = -1
                    , i = !1;
                for (let r of e) {
                    let e = this.readMutation(r);
                    e && (e.typeOver && (i = !0),
                        -1 == t ? ({ from: t, to: n } = e) : (t = Math.min(e.from, t),
                            n = Math.max(e.to, n)))
                }
                return {
                    from: t,
                    to: n,
                    typeOver: i
                }
            }
            readChange() {
                let { from: e, to: t, typeOver: n } = this.processRecords()
                    , i = this.selectionChanged && h(this.dom, this.selectionRange);
                if (e < 0 && !i)
                    return null;
                e > -1 && (this.lastChange = Date.now()),
                    this.view.inputState.lastFocusTime = 0,
                    this.selectionChanged = !1;
                let r = new Gt(this.view, e, t, n);
                return this.view.docView.domChanged = {
                    newSel: r.newSel ? r.newSel.main : null
                },
                    r
            }
            flush() {
                let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                    return !1;
                e && this.readSelectionRange();
                let t = this.readChange();
                if (!t)
                    return this.view.requestMeasure(),
                        !1;
                let n = this.view.state
                    , i = It(this.view, t);
                return this.view.state == n && (t.domChanged || t.newSel && !t.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]),
                    i
            }
            readMutation(e) {
                let t = this.view.docView.nearest(e.target);
                if (!t || t.ignoreMutation(e))
                    return null;
                if (t.markDirty("attributes" == e.type),
                    "attributes" == e.type && (t.flags |= 4),
                    "childList" == e.type) {
                    let n = oi(t, e.previousSibling || e.target.previousSibling, -1)
                        , i = oi(t, e.nextSibling || e.target.nextSibling, 1);
                    return {
                        from: n ? t.posAfter(n) : t.posAtStart,
                        to: i ? t.posBefore(i) : t.posAtEnd,
                        typeOver: !1
                    }
                }
                return "characterData" == e.type ? {
                    from: t.posAtStart,
                    to: t.posAtEnd,
                    typeOver: e.target.nodeValue == e.oldValue
                } : null
            }
            setWindow(e) {
                e != this.win && (this.removeWindowListeners(this.win),
                    this.win = e,
                    this.addWindowListeners(this.win))
            }
            addWindowListeners(e) {
                e.addEventListener("resize", this.onResize),
                    this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : e.addEventListener("beforeprint", this.onPrint),
                    e.addEventListener("scroll", this.onScroll),
                    e.document.addEventListener("selectionchange", this.onSelectionChange)
            }
            removeWindowListeners(e) {
                e.removeEventListener("scroll", this.onScroll),
                    e.removeEventListener("resize", this.onResize),
                    this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : e.removeEventListener("beforeprint", this.onPrint),
                    e.document.removeEventListener("selectionchange", this.onSelectionChange)
            }
            update(e) {
                this.editContext && (this.editContext.update(e),
                    e.startState.facet(ot) != e.state.facet(ot) && (e.view.contentDOM.editContext = e.state.facet(ot) ? this.editContext.editContext : null))
            }
            destroy() {
                var e, t, n;
                this.stop(),
                    null === (e = this.intersection) || void 0 === e || e.disconnect(),
                    null === (t = this.gapIntersection) || void 0 === t || t.disconnect(),
                    null === (n = this.resizeScroll) || void 0 === n || n.disconnect();
                for (let i of this.scrollTargets)
                    i.removeEventListener("scroll", this.onScroll);
                this.removeWindowListeners(this.win),
                    clearTimeout(this.parentCheck),
                    clearTimeout(this.resizeTimeout),
                    this.win.cancelAnimationFrame(this.delayedFlush),
                    this.win.cancelAnimationFrame(this.flushingAndroidKey),
                    this.editContext && (this.view.contentDOM.editContext = null,
                        this.editContext.destroy())
            }
        }
        function oi(e, t, n) {
            for (; t;) {
                let i = q.get(t);
                if (i && i.parent == e)
                    return i;
                let r = t.parentNode;
                t = r != e.dom ? r : n > 0 ? t.nextSibling : t.previousSibling
            }
            return null
        }
        function Oi(e, t) {
            let n = t.startContainer
                , i = t.startOffset
                , r = t.endContainer
                , a = t.endOffset
                , o = e.docView.domAtPos(e.state.selection.main.anchor);
            return p(o.node, o.offset, r, a) && ([n, i, r, a] = [r, a, n, i]),
            {
                anchorNode: n,
                anchorOffset: i,
                focusNode: r,
                focusOffset: a
            }
        }
        class si {
            constructor(e) {
                this.from = 0,
                    this.to = 0,
                    this.pendingContextChange = null,
                    this.handlers = Object.create(null),
                    this.resetRange(e.state);
                let t = this.editContext = new window.EditContext({
                    text: e.state.doc.sliceString(this.from, this.to),
                    selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, e.state.selection.main.anchor))),
                    selectionEnd: this.toContextPos(e.state.selection.main.head)
                });
                this.handlers.textupdate = t => {
                    let { anchor: n } = e.state.selection.main
                        , r = {
                            from: this.toEditorPos(t.updateRangeStart),
                            to: this.toEditorPos(t.updateRangeEnd),
                            insert: i.EY.of(t.text.split("\n"))
                        };
                    r.from == this.from && n < this.from ? r.from = n : r.to == this.to && n > this.to && (r.to = n),
                        (r.from != r.to || r.insert.length) && (this.pendingContextChange = r,
                            e.state.readOnly || Dt(e, r, i.OF.single(this.toEditorPos(t.selectionStart), this.toEditorPos(t.selectionEnd))),
                            this.pendingContextChange && (this.revertPending(e.state),
                                this.setSelection(e.state)))
                }
                    ,
                    this.handlers.characterboundsupdate = n => {
                        let i = []
                            , r = null;
                        for (let t = this.toEditorPos(n.rangeStart), a = this.toEditorPos(n.rangeEnd); t < a; t++) {
                            let n = e.coordsForChar(t);
                            r = n && new DOMRect(n.left, n.top, n.right - n.left, n.bottom - n.top) || r || new DOMRect,
                                i.push(r)
                        }
                        t.updateCharacterBounds(n.rangeStart, i)
                    }
                    ,
                    this.handlers.textformatupdate = t => {
                        let n = [];
                        for (let e of t.getTextFormats()) {
                            let t = e.underlineStyle
                                , i = e.underlineThickness;
                            if ("None" != t && "None" != i) {
                                let r = `text-decoration: underline ${"Dashed" == t ? "dashed " : "Squiggle" == t ? "wavy " : ""}${"Thin" == i ? 1 : 2}px`;
                                n.push(de.mark({
                                    attributes: {
                                        style: r
                                    }
                                }).range(this.toEditorPos(e.rangeStart), this.toEditorPos(e.rangeEnd)))
                            }
                        }
                        e.dispatch({
                            effects: rt.of(de.set(n))
                        })
                    }
                    ,
                    this.handlers.compositionstart = () => {
                        e.inputState.composing < 0 && (e.inputState.composing = 0,
                            e.inputState.compositionFirstChange = !0)
                    }
                    ,
                    this.handlers.compositionend = () => {
                        e.inputState.composing = -1,
                            e.inputState.compositionFirstChange = null
                    }
                    ;
                for (let n in this.handlers)
                    t.addEventListener(n, this.handlers[n]);
                this.measureReq = {
                    read: e => {
                        this.editContext.updateControlBounds(e.contentDOM.getBoundingClientRect());
                        let t = u(e.root);
                        t && t.rangeCount && this.editContext.updateSelectionBounds(t.getRangeAt(0).getBoundingClientRect())
                    }
                }
            }
            applyEdits(e) {
                let t = 0
                    , n = !1
                    , i = this.pendingContextChange;
                return e.changes.iterChanges(((r, a, o, O, s) => {
                    if (n)
                        return;
                    let l = s.length - (a - r);
                    if (i && a >= i.to) {
                        if (i.from == r && i.to == a && i.insert.eq(s))
                            return i = this.pendingContextChange = null,
                                t += l,
                                void (this.to += l);
                        i = null,
                            this.revertPending(e.state)
                    }
                    if (r += t,
                        (a += t) <= this.from)
                        this.from += l,
                            this.to += l;
                    else if (r < this.to) {
                        if (r < this.from || a > this.to || this.to - this.from + s.length > 3e4)
                            return void (n = !0);
                        this.editContext.updateText(this.toContextPos(r), this.toContextPos(a), s.toString()),
                            this.to += l
                    }
                    t += l
                }
                )),
                    i && !n && this.revertPending(e.state),
                    !n
            }
            update(e) {
                let t = this.pendingContextChange;
                this.applyEdits(e) && this.rangeIsValid(e.state) ? (e.docChanged || e.selectionSet || t) && this.setSelection(e.state) : (this.pendingContextChange = null,
                    this.resetRange(e.state),
                    this.editContext.updateText(0, this.editContext.text.length, e.state.doc.sliceString(this.from, this.to)),
                    this.setSelection(e.state)),
                    (e.geometryChanged || e.docChanged || e.selectionSet) && e.view.requestMeasure(this.measureReq)
            }
            resetRange(e) {
                let { head: t } = e.selection.main;
                this.from = Math.max(0, t - 1e4),
                    this.to = Math.min(e.doc.length, t + 1e4)
            }
            revertPending(e) {
                let t = this.pendingContextChange;
                this.pendingContextChange = null,
                    this.editContext.updateText(this.toContextPos(t.from), this.toContextPos(t.from + t.insert.length), e.doc.sliceString(t.from, t.to))
            }
            setSelection(e) {
                let { main: t } = e.selection
                    , n = this.toContextPos(Math.max(this.from, Math.min(this.to, t.anchor)))
                    , i = this.toContextPos(t.head);
                this.editContext.selectionStart == n && this.editContext.selectionEnd == i || this.editContext.updateSelection(n, i)
            }
            rangeIsValid(e) {
                let { head: t } = e.selection.main;
                return !(this.from > 0 && t - this.from < 500 || this.to < e.doc.length && this.to - t < 500 || this.to - this.from > 3e4)
            }
            toEditorPos(e) {
                return e + this.from
            }
            toContextPos(e) {
                return e - this.from
            }
            destroy() {
                for (let e in this.handlers)
                    this.editContext.removeEventListener(e, this.handlers[e])
            }
        }
        class li {
            get state() {
                return this.viewState.state
            }
            get viewport() {
                return this.viewState.viewport
            }
            get visibleRanges() {
                return this.viewState.visibleRanges
            }
            get inView() {
                return this.viewState.inView
            }
            get composing() {
                return this.inputState.composing > 0
            }
            get compositionStarted() {
                return this.inputState.composing >= 0
            }
            get root() {
                return this._root
            }
            get win() {
                return this.dom.ownerDocument.defaultView || window
            }
            constructor() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                var t;
                this.plugins = [],
                    this.pluginMap = new Map,
                    this.editorAttrs = {},
                    this.contentAttrs = {},
                    this.bidiCache = [],
                    this.destroyed = !1,
                    this.updateState = 2,
                    this.measureScheduled = -1,
                    this.measureRequests = [],
                    this.contentDOM = document.createElement("div"),
                    this.scrollDOM = document.createElement("div"),
                    this.scrollDOM.tabIndex = -1,
                    this.scrollDOM.className = "cm-scroller",
                    this.scrollDOM.appendChild(this.contentDOM),
                    this.announceDOM = document.createElement("div"),
                    this.announceDOM.className = "cm-announced",
                    this.announceDOM.setAttribute("aria-live", "polite"),
                    this.dom = document.createElement("div"),
                    this.dom.appendChild(this.announceDOM),
                    this.dom.appendChild(this.scrollDOM),
                    e.parent && e.parent.appendChild(this.dom);
                let { dispatch: n } = e;
                this.dispatchTransactions = e.dispatchTransactions || n && (e => e.forEach((e => n(e, this)))) || (e => this.update(e)),
                    this.dispatch = this.dispatch.bind(this),
                    this._root = e.root || function (e) {
                        for (; e;) {
                            if (e && (9 == e.nodeType || 11 == e.nodeType && e.host))
                                return e;
                            e = e.assignedSlot || e.parentNode
                        }
                        return null
                    }(e.parent) || document,
                    this.viewState = new Cn(e.state || i.$t.create(e)),
                    e.scrollTo && e.scrollTo.is(it) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)),
                    this.plugins = this.state.facet(st).map((e => new ct(e)));
                for (let i of this.plugins)
                    i.update(this);
                this.observer = new ai(this),
                    this.inputState = new Nt(this),
                    this.inputState.ensureHandlers(this.plugins),
                    this.docView = new Pt(this),
                    this.mountStyles(),
                    this.updateAttrs(),
                    this.updateState = 0,
                    this.requestMeasure(),
                    (null === (t = document.fonts) || void 0 === t ? void 0 : t.ready) && document.fonts.ready.then((() => this.requestMeasure()))
            }
            dispatch() {
                for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
                    t[n] = arguments[n];
                let r = 1 == t.length && t[0] instanceof i.ZX ? t : 1 == t.length && Array.isArray(t[0]) ? t[0] : [this.state.update(...t)];
                this.dispatchTransactions(r, this)
            }
            update(e) {
                if (0 != this.updateState)
                    throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
                let t, n = !1, r = !1, a = this.state;
                for (let i of e) {
                    if (i.startState != a)
                        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                    a = i.state
                }
                if (this.destroyed)
                    return void (this.viewState.state = a);
                let o = this.hasFocus
                    , O = 0
                    , s = null;
                e.some((e => e.annotation(gn))) ? (this.inputState.notifiedFocused = o,
                    O = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o,
                        s = Qn(a, o),
                        s || (O = 1));
                let l = this.observer.delayedAndroidKey
                    , c = null;
                if (l ? (this.observer.clearDelayedAndroidKey(),
                    c = this.observer.readChange(),
                    (c && !this.state.doc.eq(a.doc) || !this.state.selection.eq(a.selection)) && (c = null)) : this.observer.clear(),
                    a.facet(i.$t.phrases) != this.state.facet(i.$t.phrases))
                    return this.setState(a);
                t = St.create(this, a, e),
                    t.flags |= O;
                let u = this.viewState.scrollTarget;
                try {
                    this.updateState = 2;
                    for (let t of e) {
                        if (u && (u = u.map(t.changes)),
                            t.scrollIntoView) {
                            let { main: e } = t.state.selection;
                            u = new nt(e.empty ? e : i.OF.cursor(e.head, e.head > e.anchor ? -1 : 1))
                        }
                        for (let e of t.effects)
                            e.is(it) && (u = e.value.clip(this.state))
                    }
                    this.viewState.update(t, u),
                        this.bidiCache = di.update(this.bidiCache, t.changes),
                        t.empty || (this.updatePlugins(t),
                            this.inputState.update(t)),
                        n = this.docView.update(t),
                        this.state.facet(bt) != this.styleModules && this.mountStyles(),
                        r = this.updateAttrs(),
                        this.showAnnouncements(e),
                        this.docView.updateSelection(n, e.some((e => e.isUserEvent("select.pointer"))))
                } finally {
                    this.updateState = 0
                }
                if (t.startState.facet(Fn) != t.state.facet(Fn) && (this.viewState.mustMeasureContent = !0),
                    (n || r || u || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(),
                    n && this.docViewUpdate(),
                    !t.empty)
                    for (let i of this.state.facet(Me))
                        try {
                            i(t)
                        } catch (d) {
                            at(this.state, d, "update listener")
                        }
                (s || c) && Promise.resolve().then((() => {
                    s && this.state == s.startState && this.dispatch(s),
                        c && !It(this, c) && l.force && X(this.contentDOM, l.key, l.keyCode)
                }
                ))
            }
            setState(e) {
                if (0 != this.updateState)
                    throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
                if (this.destroyed)
                    return void (this.viewState.state = e);
                this.updateState = 2;
                let t = this.hasFocus;
                try {
                    for (let e of this.plugins)
                        e.destroy(this);
                    this.viewState = new Cn(e),
                        this.plugins = e.facet(st).map((e => new ct(e))),
                        this.pluginMap.clear();
                    for (let e of this.plugins)
                        e.update(this);
                    this.docView.destroy(),
                        this.docView = new Pt(this),
                        this.inputState.ensureHandlers(this.plugins),
                        this.mountStyles(),
                        this.updateAttrs(),
                        this.bidiCache = []
                } finally {
                    this.updateState = 0
                }
                t && this.focus(),
                    this.requestMeasure()
            }
            updatePlugins(e) {
                let t = e.startState.facet(st)
                    , n = e.state.facet(st);
                if (t != n) {
                    let i = [];
                    for (let r of n) {
                        let n = t.indexOf(r);
                        if (n < 0)
                            i.push(new ct(r));
                        else {
                            let t = this.plugins[n];
                            t.mustUpdate = e,
                                i.push(t)
                        }
                    }
                    for (let t of this.plugins)
                        t.mustUpdate != e && t.destroy(this);
                    this.plugins = i,
                        this.pluginMap.clear()
                } else
                    for (let i of this.plugins)
                        i.mustUpdate = e;
                for (let i = 0; i < this.plugins.length; i++)
                    this.plugins[i].update(this);
                t != n && this.inputState.ensureHandlers(this.plugins)
            }
            docViewUpdate() {
                for (let t of this.plugins) {
                    let n = t.value;
                    if (n && n.docViewUpdate)
                        try {
                            n.docViewUpdate(this)
                        } catch (e) {
                            at(this.state, e, "doc view update listener")
                        }
                }
            }
            measure() {
                let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                if (this.destroyed)
                    return;
                if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled),
                    this.observer.delayedAndroidKey)
                    return this.measureScheduled = -1,
                        void this.requestMeasure();
                this.measureScheduled = 0,
                    e && this.observer.forceFlush();
                let t = null
                    , n = this.scrollDOM
                    , i = n.scrollTop * this.scaleY
                    , { scrollAnchorPos: r, scrollAnchorHeight: a } = this.viewState;
                Math.abs(i - this.viewState.scrollTop) > 1 && (a = -1),
                    this.viewState.scrollAnchorHeight = -1;
                try {
                    for (let e = 0; ; e++) {
                        if (a < 0)
                            if (T(n))
                                r = -1,
                                    a = this.viewState.heightMap.height;
                            else {
                                let e = this.viewState.scrollAnchorAt(i);
                                r = e.from,
                                    a = e.top
                            }
                        this.updateState = 1;
                        let O = this.viewState.measure(this);
                        if (!O && !this.measureRequests.length && null == this.viewState.scrollTarget)
                            break;
                        if (e > 5) {
                            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
                            break
                        }
                        let s = [];
                        4 & O || ([this.measureRequests, s] = [s, this.measureRequests]);
                        let l = s.map((e => {
                            try {
                                return e.read(this)
                            } catch (t) {
                                return at(this.state, t),
                                    ui
                            }
                        }
                        ))
                            , c = St.create(this, this.state, [])
                            , u = !1;
                        c.flags |= O,
                            t ? t.flags |= O : t = c,
                            this.updateState = 2,
                            c.empty || (this.updatePlugins(c),
                                this.inputState.update(c),
                                this.updateAttrs(),
                                u = this.docView.update(c),
                                u && this.docViewUpdate());
                        for (let e = 0; e < s.length; e++)
                            if (l[e] != ui)
                                try {
                                    let t = s[e];
                                    t.write && t.write(l[e], this)
                                } catch (o) {
                                    at(this.state, o)
                                }
                        if (u && this.docView.updateSelection(!0),
                            !c.viewportChanged && 0 == this.measureRequests.length) {
                            if (this.viewState.editorHeight) {
                                if (this.viewState.scrollTarget) {
                                    this.docView.scrollIntoView(this.viewState.scrollTarget),
                                        this.viewState.scrollTarget = null,
                                        a = -1;
                                    continue
                                }
                                {
                                    let e = (r < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(r).top) - a;
                                    if (e > 1 || e < -1) {
                                        i += e,
                                            n.scrollTop = i / this.scaleY,
                                            a = -1;
                                        continue
                                    }
                                }
                            }
                            break
                        }
                    }
                } finally {
                    this.updateState = 0,
                        this.measureScheduled = -1
                }
                if (t && !t.empty)
                    for (let O of this.state.facet(Me))
                        O(t)
            }
            get themeClasses() {
                return Hn + " " + (this.state.facet(Bn) ? Jn : Kn) + " " + this.state.facet(Fn)
            }
            updateAttrs() {
                let e = hi(this, ut, {
                    class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
                })
                    , t = {
                        spellcheck: "false",
                        autocorrect: "off",
                        autocapitalize: "off",
                        translate: "no",
                        contenteditable: this.state.facet(ot) ? "true" : "false",
                        class: "cm-content",
                        style: `${H.tabSize}: ${this.state.tabSize}`,
                        role: "textbox",
                        "aria-multiline": "true"
                    };
                this.state.readOnly && (t["aria-readonly"] = "true"),
                    hi(this, dt, t);
                let n = this.observer.ignore((() => {
                    let n = se(this.contentDOM, this.contentAttrs, t)
                        , i = se(this.dom, this.editorAttrs, e);
                    return n || i
                }
                ));
                return this.editorAttrs = e,
                    this.contentAttrs = t,
                    n
            }
            showAnnouncements(e) {
                let t = !0;
                for (let n of e)
                    for (let e of n.effects)
                        if (e.is(li.announce)) {
                            t && (this.announceDOM.textContent = ""),
                                t = !1,
                                this.announceDOM.appendChild(document.createElement("div")).textContent = e.value
                        }
            }
            mountStyles() {
                this.styleModules = this.state.facet(bt);
                let e = this.state.facet(li.cspNonce);
                r.G.mount(this.root, this.styleModules.concat(ni).reverse(), e ? {
                    nonce: e
                } : void 0)
            }
            readMeasured() {
                if (2 == this.updateState)
                    throw new Error("Reading the editor layout isn't allowed during an update");
                0 == this.updateState && this.measureScheduled > -1 && this.measure(!1)
            }
            requestMeasure(e) {
                if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame((() => this.measure()))),
                    e) {
                    if (this.measureRequests.indexOf(e) > -1)
                        return;
                    if (null != e.key)
                        for (let t = 0; t < this.measureRequests.length; t++)
                            if (this.measureRequests[t].key === e.key)
                                return void (this.measureRequests[t] = e);
                    this.measureRequests.push(e)
                }
            }
            plugin(e) {
                let t = this.pluginMap.get(e);
                return (void 0 === t || t && t.spec != e) && this.pluginMap.set(e, t = this.plugins.find((t => t.spec == e)) || null),
                    t && t.update(this).value
            }
            get documentTop() {
                return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop
            }
            get documentPadding() {
                return {
                    top: this.viewState.paddingTop,
                    bottom: this.viewState.paddingBottom
                }
            }
            get scaleX() {
                return this.viewState.scaleX
            }
            get scaleY() {
                return this.viewState.scaleY
            }
            elementAtHeight(e) {
                return this.readMeasured(),
                    this.viewState.elementAtHeight(e)
            }
            lineBlockAtHeight(e) {
                return this.readMeasured(),
                    this.viewState.lineBlockAtHeight(e)
            }
            get viewportLineBlocks() {
                return this.viewState.viewportLines
            }
            lineBlockAt(e) {
                return this.viewState.lineBlockAt(e)
            }
            get contentHeight() {
                return this.viewState.contentHeight
            }
            moveByChar(e, t, n) {
                return At(this, e, Ut(this, e, t, n))
            }
            moveByGroup(e, t) {
                return At(this, e, Ut(this, e, t, (t => function (e, t, n) {
                    let r = e.state.charCategorizer(t)
                        , a = r(n);
                    return e => {
                        let t = r(e);
                        return a == i.Je.Space && (a = t),
                            a == t
                    }
                }(this, e.head, t))))
            }
            visualLineSide(e, t) {
                let n = this.bidiSpans(e)
                    , r = this.textDirectionAt(e.from)
                    , a = n[t ? n.length - 1 : 0];
                return i.OF.cursor(a.side(t, r) + e.from, a.forward(!t, r) ? 1 : -1)
            }
            moveToLineBoundary(e, t) {
                return function (e, t, n, r) {
                    let a = qt(e, t.head)
                        , o = r && a.type == ue.Text && (e.lineWrapping || a.widgetLineBreaks) ? e.coordsAtPos(t.assoc < 0 && t.head > a.from ? t.head - 1 : t.head) : null;
                    if (o) {
                        let t = e.dom.getBoundingClientRect()
                            , r = e.textDirectionAt(a.from)
                            , O = e.posAtCoords({
                                x: n == (r == ve.LTR) ? t.right - 1 : t.left + 1,
                                y: (o.top + o.bottom) / 2
                            });
                        if (null != O)
                            return i.OF.cursor(O, n ? -1 : 1)
                    }
                    return i.OF.cursor(n ? a.to : a.from, n ? -1 : 1)
                }(this, e, t, !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2])
            }
            moveVertically(e, t, n) {
                return At(this, e, function (e, t, n, r) {
                    let a = t.head
                        , o = n ? 1 : -1;
                    if (a == (n ? e.state.doc.length : 0))
                        return i.OF.cursor(a, t.assoc);
                    let O, s = t.goalColumn, l = e.contentDOM.getBoundingClientRect(), c = e.coordsAtPos(a, t.assoc || -1), u = e.documentTop;
                    if (c)
                        null == s && (s = c.left - l.left),
                            O = o < 0 ? c.top : c.bottom;
                    else {
                        let t = e.viewState.lineBlockAt(a);
                        null == s && (s = Math.min(l.right - l.left, e.defaultCharacterWidth * (a - t.from))),
                            O = (o < 0 ? t.top : t.bottom) + u
                    }
                    let d = l.left + s
                        , h = null !== r && void 0 !== r ? r : e.viewState.heightOracle.textHeight >> 1;
                    for (let f = 0; ; f += 10) {
                        let t = O + (h + f) * o
                            , n = Wt(e, {
                                x: d,
                                y: t
                            }, !1, o);
                        if (t < l.top || t > l.bottom || (o < 0 ? n < a : n > a)) {
                            let r = e.docView.coordsForChar(n)
                                , a = !r || t < r.top ? -1 : 1;
                            return i.OF.cursor(n, a, void 0, s)
                        }
                    }
                }(this, e, t, n))
            }
            domAtPos(e) {
                return this.docView.domAtPos(e)
            }
            posAtDOM(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                return this.docView.posFromDOM(e, t)
            }
            posAtCoords(e) {
                let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                return this.readMeasured(),
                    Wt(this, e, t)
            }
            coordsAtPos(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                this.readMeasured();
                let n = this.docView.coordsAt(e, t);
                if (!n || n.left == n.right)
                    return n;
                let i = this.state.doc.lineAt(e)
                    , r = this.bidiSpans(i);
                return b(n, r[Ze.find(r, e - i.from, -1, t)].dir == ve.LTR == t > 0)
            }
            coordsForChar(e) {
                return this.readMeasured(),
                    this.docView.coordsForChar(e)
            }
            get defaultCharacterWidth() {
                return this.viewState.heightOracle.charWidth
            }
            get defaultLineHeight() {
                return this.viewState.heightOracle.lineHeight
            }
            get textDirection() {
                return this.viewState.defaultTextDirection
            }
            textDirectionAt(e) {
                return !this.state.facet(Je) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(),
                    this.docView.textDirectionAt(e))
            }
            get lineWrapping() {
                return this.viewState.heightOracle.lineWrapping
            }
            bidiSpans(e) {
                if (e.length > ci)
                    return Ee(e.length);
                let t, n = this.textDirectionAt(e.from);
                for (let r of this.bidiCache)
                    if (r.from == e.from && r.dir == n && (r.fresh || qe(r.isolates, t = gt(this, e))))
                        return r.order;
                t || (t = gt(this, e));
                let i = Ve(e.text, n, t);
                return this.bidiCache.push(new di(e.from, e.to, n, t, !0, i)),
                    i
            }
            get hasFocus() {
                var e;
                return (this.dom.ownerDocument.hasFocus() || H.safari && (null === (e = this.inputState) || void 0 === e ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM
            }
            focus() {
                this.observer.ignore((() => {
                    k(this.contentDOM),
                        this.docView.updateSelection()
                }
                ))
            }
            setRoot(e) {
                this._root != e && (this._root = e,
                    this.observer.setWindow((9 == e.nodeType ? e : e.ownerDocument).defaultView || window),
                    this.mountStyles())
            }
            destroy() {
                this.root.activeElement == this.contentDOM && this.contentDOM.blur();
                for (let e of this.plugins)
                    e.destroy(this);
                this.plugins = [],
                    this.inputState.destroy(),
                    this.docView.destroy(),
                    this.dom.remove(),
                    this.observer.destroy(),
                    this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled),
                    this.destroyed = !0
            }
            static scrollIntoView(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                return it.of(new nt("number" == typeof e ? i.OF.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin))
            }
            scrollSnapshot() {
                let { scrollTop: e, scrollLeft: t } = this.scrollDOM
                    , n = this.viewState.scrollAnchorAt(e);
                return it.of(new nt(i.OF.cursor(n.from), "start", "start", n.top - e, t, !0))
            }
            setTabFocusMode(e) {
                null == e ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : "boolean" == typeof e ? this.inputState.tabFocusMode = e ? 0 : -1 : 0 != this.inputState.tabFocusMode && (this.inputState.tabFocusMode = Date.now() + e)
            }
            static domEventHandlers(e) {
                return lt.define((() => ({})), {
                    eventHandlers: e
                })
            }
            static domEventObservers(e) {
                return lt.define((() => ({})), {
                    eventObservers: e
                })
            }
            static theme(e, t) {
                let n = r.G.newName()
                    , i = [Fn.of(n), bt.of(ti(`.${n}`, e))];
                return t && t.dark && i.push(Bn.of(!0)),
                    i
            }
            static baseTheme(e) {
                return i.Nb.lowest(bt.of(ti("." + Hn, e, ei)))
            }
            static findFromDOM(e) {
                var t;
                let n = e.querySelector(".cm-content")
                    , i = n && q.get(n) || q.get(e);
                return (null === (t = null === i || void 0 === i ? void 0 : i.rootView) || void 0 === t ? void 0 : t.view) || null
            }
        }
        li.styleModule = bt,
            li.inputHandler = Fe,
            li.clipboardInputFilter = He,
            li.clipboardOutputFilter = Ke,
            li.scrollHandler = tt,
            li.focusChangeEffect = Be,
            li.perLineTextDirection = Je,
            li.exceptionSink = Le,
            li.updateListener = Me,
            li.editable = ot,
            li.mouseSelectionStyle = Ne,
            li.dragMovesSelection = De,
            li.clickAddsSelectionRange = Ie,
            li.decorations = ht,
            li.outerDecorations = ft,
            li.atomicRanges = pt,
            li.bidiIsolatedRanges = mt,
            li.scrollMargins = Qt,
            li.darkTheme = Bn,
            li.cspNonce = i.sj.define({
                combine: e => e.length ? e[0] : ""
            }),
            li.contentAttributes = dt,
            li.editorAttributes = ut,
            li.lineWrapping = li.contentAttributes.of({
                class: "cm-lineWrapping"
            }),
            li.announce = i.Pe.define();
        const ci = 4096
            , ui = {};
        class di {
            constructor(e, t, n, i, r, a) {
                this.from = e,
                    this.to = t,
                    this.dir = n,
                    this.isolates = i,
                    this.fresh = r,
                    this.order = a
            }
            static update(e, t) {
                if (t.empty && !e.some((e => e.fresh)))
                    return e;
                let n = []
                    , i = e.length ? e[e.length - 1].dir : ve.LTR;
                for (let r = Math.max(0, e.length - 10); r < e.length; r++) {
                    let a = e[r];
                    a.dir != i || t.touchesRange(a.from, a.to) || n.push(new di(t.mapPos(a.from, 1), t.mapPos(a.to, -1), a.dir, a.isolates, !1, a.order))
                }
                return n
            }
        }
        function hi(e, t, n) {
            for (let i = e.state.facet(t), r = i.length - 1; r >= 0; r--) {
                let t = i[r]
                    , a = "function" == typeof t ? t(e) : t;
                a && ae(a, n)
            }
            return n
        }
        const fi = H.mac ? "mac" : H.windows ? "win" : H.linux ? "linux" : "key";
        function pi(e, t, n) {
            return t.altKey && (e = "Alt-" + e),
                t.ctrlKey && (e = "Ctrl-" + e),
                t.metaKey && (e = "Meta-" + e),
                !1 !== n && t.shiftKey && (e = "Shift-" + e),
                e
        }
        const mi = i.Nb.default(li.domEventHandlers({
            keydown: (e, t) => vi($i(t.state), e, t, "editor")
        }))
            , gi = i.sj.define({
                enables: mi
            })
            , Qi = new WeakMap;
        function $i(e) {
            let t = e.facet(gi)
                , n = Qi.get(t);
            return n || Qi.set(t, n = function (e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : fi
                    , n = Object.create(null)
                    , i = Object.create(null)
                    , r = (e, t) => {
                        let n = i[e];
                        if (null == n)
                            i[e] = t;
                        else if (n != t)
                            throw new Error("Key binding " + e + " is used both as a regular binding and as a multi-stroke prefix")
                    }
                    , a = (e, i, a, o, O) => {
                        var s, l;
                        let c = n[e] || (n[e] = Object.create(null))
                            , u = i.split(/ (?!$)/).map((e => function (e, t) {
                                const n = e.split(/-(?!$)/);
                                let i, r, a, o, O = n[n.length - 1];
                                "Space" == O && (O = " ");
                                for (let s = 0; s < n.length - 1; ++s) {
                                    const e = n[s];
                                    if (/^(cmd|meta|m)$/i.test(e))
                                        o = !0;
                                    else if (/^a(lt)?$/i.test(e))
                                        i = !0;
                                    else if (/^(c|ctrl|control)$/i.test(e))
                                        r = !0;
                                    else if (/^s(hift)?$/i.test(e))
                                        a = !0;
                                    else {
                                        if (!/^mod$/i.test(e))
                                            throw new Error("Unrecognized modifier name: " + e);
                                        "mac" == t ? o = !0 : r = !0
                                    }
                                }
                                return i && (O = "Alt-" + O),
                                    r && (O = "Ctrl-" + O),
                                    o && (O = "Meta-" + O),
                                    a && (O = "Shift-" + O),
                                    O
                            }(e, t)));
                        for (let t = 1; t < u.length; t++) {
                            let n = u.slice(0, t).join(" ");
                            r(n, !0),
                                c[n] || (c[n] = {
                                    preventDefault: !0,
                                    stopPropagation: !1,
                                    run: [t => {
                                        let i = yi = {
                                            view: t,
                                            prefix: n,
                                            scope: e
                                        };
                                        return setTimeout((() => {
                                            yi == i && (yi = null)
                                        }
                                        ), Si),
                                            !0
                                    }
                                    ]
                                })
                        }
                        let d = u.join(" ");
                        r(d, !1);
                        let h = c[d] || (c[d] = {
                            preventDefault: !1,
                            stopPropagation: !1,
                            run: (null === (l = null === (s = c._any) || void 0 === s ? void 0 : s.run) || void 0 === l ? void 0 : l.slice()) || []
                        });
                        a && h.run.push(a),
                            o && (h.preventDefault = !0),
                            O && (h.stopPropagation = !0)
                    }
                    ;
                for (let o of e) {
                    let e = o.scope ? o.scope.split(" ") : ["editor"];
                    if (o.any)
                        for (let t of e) {
                            let e = n[t] || (n[t] = Object.create(null));
                            e._any || (e._any = {
                                preventDefault: !1,
                                stopPropagation: !1,
                                run: []
                            });
                            let { any: i } = o;
                            for (let t in e)
                                e[t].run.push((e => i(e, Pi)))
                        }
                    let i = o[t] || o.key;
                    if (i)
                        for (let t of e)
                            a(t, i, o.run, o.preventDefault, o.stopPropagation),
                                o.shift && a(t, "Shift-" + i, o.shift, o.preventDefault, o.stopPropagation)
                }
                return n
            }(t.reduce(((e, t) => e.concat(t)), []))),
                n
        }
        function bi(e, t, n) {
            return vi($i(e.state), t, e, n)
        }
        let yi = null;
        const Si = 4e3;
        let Pi = null;
        function vi(e, t, n, r) {
            Pi = t;
            let l = function (e) {
                var t = !(O && e.metaKey && e.shiftKey && !e.ctrlKey && !e.altKey || s && e.shiftKey && e.key && 1 == e.key.length || "Unidentified" == e.key) && e.key || (e.shiftKey ? o : a)[e.keyCode] || e.key || "Unidentified";
                return "Esc" == t && (t = "Escape"),
                    "Del" == t && (t = "Delete"),
                    "Left" == t && (t = "ArrowLeft"),
                    "Up" == t && (t = "ArrowUp"),
                    "Right" == t && (t = "ArrowRight"),
                    "Down" == t && (t = "ArrowDown"),
                    t
            }(t)
                , c = (0,
                    i.vS)(l, 0)
                , u = (0,
                    i.Fh)(c) == l.length && " " != l
                , d = ""
                , h = !1
                , f = !1
                , p = !1;
            yi && yi.view == n && yi.scope == r && (d = yi.prefix + " ",
                Ht.indexOf(t.keyCode) < 0 && (f = !0,
                    yi = null));
            let m, g, Q = new Set, $ = e => {
                if (e) {
                    for (let t of e.run)
                        if (!Q.has(t) && (Q.add(t),
                            t(n)))
                            return e.stopPropagation && (p = !0),
                                !0;
                    e.preventDefault && (e.stopPropagation && (p = !0),
                        f = !0)
                }
                return !1
            }
                , b = e[r];
            return b && ($(b[d + pi(l, t, !u)]) ? h = !0 : u && (t.altKey || t.metaKey || t.ctrlKey) && !(H.windows && t.ctrlKey && t.altKey) && (m = a[t.keyCode]) && m != l ? ($(b[d + pi(m, t, !0)]) || t.shiftKey && (g = o[t.keyCode]) != l && g != m && $(b[d + pi(g, t, !1)])) && (h = !0) : u && t.shiftKey && $(b[d + pi(l, t, !0)]) && (h = !0),
                !h && $(b._any) && (h = !0)),
                f && (h = !0),
                h && p && t.stopPropagation(),
                Pi = null,
                h
        }
        class xi {
            constructor(e, t, n, i, r) {
                this.className = e,
                    this.left = t,
                    this.top = n,
                    this.width = i,
                    this.height = r
            }
            draw() {
                let e = document.createElement("div");
                return e.className = this.className,
                    this.adjust(e),
                    e
            }
            update(e, t) {
                return t.className == this.className && (this.adjust(e),
                    !0)
            }
            adjust(e) {
                e.style.left = this.left + "px",
                    e.style.top = this.top + "px",
                    null != this.width && (e.style.width = this.width + "px"),
                    e.style.height = this.height + "px"
            }
            eq(e) {
                return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className
            }
            static forRange(e, t, n) {
                if (n.empty) {
                    let i = e.coordsAtPos(n.head, n.assoc || 1);
                    if (!i)
                        return [];
                    let r = ki(e);
                    return [new xi(t, i.left - r.left, i.top - r.top, null, i.bottom - i.top)]
                }
                return function (e, t, n) {
                    if (n.to <= e.viewport.from || n.from >= e.viewport.to)
                        return [];
                    let i = Math.max(n.from, e.viewport.from)
                        , r = Math.min(n.to, e.viewport.to)
                        , a = e.textDirection == ve.LTR
                        , o = e.contentDOM
                        , O = o.getBoundingClientRect()
                        , s = ki(e)
                        , l = o.querySelector(".cm-line")
                        , c = l && window.getComputedStyle(l)
                        , u = O.left + (c ? parseInt(c.paddingLeft) + Math.min(0, parseInt(c.textIndent)) : 0)
                        , d = O.right - (c ? parseInt(c.paddingRight) : 0)
                        , h = qt(e, i)
                        , f = qt(e, r)
                        , p = h.type == ue.Text ? h : null
                        , m = f.type == ue.Text ? f : null;
                    p && (e.lineWrapping || h.widgetLineBreaks) && (p = wi(e, i, 1, p));
                    m && (e.lineWrapping || f.widgetLineBreaks) && (m = wi(e, r, -1, m));
                    if (p && m && p.from == m.from && p.to == m.to)
                        return Q($(n.from, n.to, p));
                    {
                        let t = p ? $(n.from, null, p) : b(h, !1)
                            , i = m ? $(null, n.to, m) : b(f, !0)
                            , r = [];
                        return (p || h).to < (m || f).from - (p && m ? 1 : 0) || h.widgetLineBreaks > 1 && t.bottom + e.defaultLineHeight / 2 < i.top ? r.push(g(u, t.bottom, d, i.top)) : t.bottom < i.top && e.elementAtHeight((t.bottom + i.top) / 2).type == ue.Text && (t.bottom = i.top = (t.bottom + i.top) / 2),
                            Q(t).concat(r).concat(Q(i))
                    }
                    function g(e, n, i, r) {
                        return new xi(t, e - s.left, n - s.top - .01, i - e, r - n + .01)
                    }
                    function Q(e) {
                        let { top: t, bottom: n, horizontal: i } = e
                            , r = [];
                        for (let a = 0; a < i.length; a += 2)
                            r.push(g(i[a], t, i[a + 1], n));
                        return r
                    }
                    function $(t, n, i) {
                        let r = 1e9
                            , o = -1e9
                            , O = [];
                        function s(t, n, s, l, c) {
                            let h = e.coordsAtPos(t, t == i.to ? -2 : 2)
                                , f = e.coordsAtPos(s, s == i.from ? 2 : -2);
                            h && f && (r = Math.min(h.top, f.top, r),
                                o = Math.max(h.bottom, f.bottom, o),
                                c == ve.LTR ? O.push(a && n ? u : h.left, a && l ? d : f.right) : O.push(!a && l ? u : f.left, !a && n ? d : h.right))
                        }
                        let l = null !== t && void 0 !== t ? t : i.from
                            , c = null !== n && void 0 !== n ? n : i.to;
                        for (let a of e.visibleRanges)
                            if (a.to > l && a.from < c)
                                for (let i = Math.max(a.from, l), r = Math.min(a.to, c); ;) {
                                    let a = e.state.doc.lineAt(i);
                                    for (let o of e.bidiSpans(a)) {
                                        let e = o.from + a.from
                                            , O = o.to + a.from;
                                        if (e >= r)
                                            break;
                                        O > i && s(Math.max(e, i), null == t && e <= l, Math.min(O, r), null == n && O >= c, o.dir)
                                    }
                                    if (i = a.to + 1,
                                        i >= r)
                                        break
                                }
                        return 0 == O.length && s(l, null == t, c, null == n, e.textDirection),
                        {
                            top: r,
                            bottom: o,
                            horizontal: O
                        }
                    }
                    function b(e, t) {
                        let n = O.top + (t ? e.top : e.bottom);
                        return {
                            top: n,
                            bottom: n,
                            horizontal: []
                        }
                    }
                }(e, t, n)
            }
        }
        function ki(e) {
            let t = e.scrollDOM.getBoundingClientRect();
            return {
                left: (e.textDirection == ve.LTR ? t.left : t.right - e.scrollDOM.clientWidth * e.scaleX) - e.scrollDOM.scrollLeft * e.scaleX,
                top: t.top - e.scrollDOM.scrollTop * e.scaleY
            }
        }
        function wi(e, t, n, i) {
            let r = e.coordsAtPos(t, 2 * n);
            if (!r)
                return i;
            let a = e.dom.getBoundingClientRect()
                , o = (r.top + r.bottom) / 2
                , O = e.posAtCoords({
                    x: a.left + 1,
                    y: o
                })
                , s = e.posAtCoords({
                    x: a.right - 1,
                    y: o
                });
            return null == O || null == s ? i : {
                from: Math.max(i.from, Math.min(O, s)),
                to: Math.min(i.to, Math.max(O, s))
            }
        }
        class Xi {
            constructor(e, t) {
                this.view = e,
                    this.layer = t,
                    this.drawn = [],
                    this.scaleX = 1,
                    this.scaleY = 1,
                    this.measureReq = {
                        read: this.measure.bind(this),
                        write: this.draw.bind(this)
                    },
                    this.dom = e.scrollDOM.appendChild(document.createElement("div")),
                    this.dom.classList.add("cm-layer"),
                    t.above && this.dom.classList.add("cm-layer-above"),
                    t.class && this.dom.classList.add(t.class),
                    this.scale(),
                    this.dom.setAttribute("aria-hidden", "true"),
                    this.setOrder(e.state),
                    e.requestMeasure(this.measureReq),
                    t.mount && t.mount(this.dom, e)
            }
            update(e) {
                e.startState.facet(_i) != e.state.facet(_i) && this.setOrder(e.state),
                    (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(),
                        e.view.requestMeasure(this.measureReq))
            }
            docViewUpdate(e) {
                !1 !== this.layer.updateOnDocViewUpdate && e.requestMeasure(this.measureReq)
            }
            setOrder(e) {
                let t = 0
                    , n = e.facet(_i);
                for (; t < n.length && n[t] != this.layer;)
                    t++;
                this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t)
            }
            measure() {
                return this.layer.markers(this.view)
            }
            scale() {
                let { scaleX: e, scaleY: t } = this.view;
                e == this.scaleX && t == this.scaleY || (this.scaleX = e,
                    this.scaleY = t,
                    this.dom.style.transform = `scale(${1 / e}, ${1 / t})`)
            }
            draw(e) {
                if (e.length != this.drawn.length || e.some(((e, t) => {
                    return n = e,
                        i = this.drawn[t],
                        !(n.constructor == i.constructor && n.eq(i));
                    var n, i
                }
                ))) {
                    let t = this.dom.firstChild
                        , n = 0;
                    for (let i of e)
                        i.update && t && i.constructor && this.drawn[n].constructor && i.update(t, this.drawn[n]) ? (t = t.nextSibling,
                            n++) : this.dom.insertBefore(i.draw(), t);
                    for (; t;) {
                        let e = t.nextSibling;
                        t.remove(),
                            t = e
                    }
                    this.drawn = e
                }
            }
            destroy() {
                this.layer.destroy && this.layer.destroy(this.dom, this.view),
                    this.dom.remove()
            }
        }
        const _i = i.sj.define();
        function Ti(e) {
            return [lt.define((t => new Xi(t, e))), _i.of(e)]
        }
        const zi = !H.ios
            , Ri = i.sj.define({
                combine: e => (0,
                    i.QR)(e, {
                        cursorBlinkRate: 1200,
                        drawRangeCursor: !0
                    }, {
                        cursorBlinkRate: (e, t) => Math.min(e, t),
                        drawRangeCursor: (e, t) => e || t
                    })
            });
        function Wi() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return [Ri.of(e), qi, Yi, Vi, et.of(!0)]
        }
        function Zi(e) {
            return e.startState.facet(Ri) != e.state.facet(Ri)
        }
        const qi = Ti({
            above: !0,
            markers(e) {
                let { state: t } = e
                    , n = t.facet(Ri)
                    , r = [];
                for (let a of t.selection.ranges) {
                    let o = a == t.selection.main;
                    if (a.empty ? !o || zi : n.drawRangeCursor) {
                        let t = o ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary"
                            , n = a.empty ? a : i.OF.cursor(a.head, a.head > a.anchor ? -1 : 1);
                        for (let i of xi.forRange(e, t, n))
                            r.push(i)
                    }
                }
                return r
            },
            update(e, t) {
                e.transactions.some((e => e.selection)) && (t.style.animationName = "cm-blink" == t.style.animationName ? "cm-blink2" : "cm-blink");
                let n = Zi(e);
                return n && Ui(e.state, t),
                    e.docChanged || e.selectionSet || n
            },
            mount(e, t) {
                Ui(t.state, e)
            },
            class: "cm-cursorLayer"
        });
        function Ui(e, t) {
            t.style.animationDuration = e.facet(Ri).cursorBlinkRate + "ms"
        }
        const Yi = Ti({
            above: !1,
            markers: e => e.state.selection.ranges.map((t => t.empty ? [] : xi.forRange(e, "cm-selectionBackground", t))).reduce(((e, t) => e.concat(t))),
            update: (e, t) => e.docChanged || e.selectionSet || e.viewportChanged || Zi(e),
            class: "cm-selectionLayer"
        })
            , Ai = {
                ".cm-line": {
                    "& ::selection, &::selection": {
                        backgroundColor: "transparent !important"
                    }
                },
                ".cm-content": {
                    "& :focus": {
                        caretColor: "initial !important",
                        "&::selection, & ::selection": {
                            backgroundColor: "Highlight !important"
                        }
                    }
                }
            };
        zi && (Ai[".cm-line"].caretColor = Ai[".cm-content"].caretColor = "transparent !important");
        const Vi = i.Nb.highest(li.theme(Ai))
            , Ei = i.Pe.define({
                map: (e, t) => null == e ? null : t.mapPos(e)
            })
            , ji = i.sU.define({
                create: () => null,
                update: (e, t) => (null != e && (e = t.changes.mapPos(e)),
                    t.effects.reduce(((e, t) => t.is(Ei) ? t.value : e), e))
            })
            , Ci = lt.fromClass(class {
                constructor(e) {
                    this.view = e,
                        this.cursor = null,
                        this.measureReq = {
                            read: this.readPos.bind(this),
                            write: this.drawCursor.bind(this)
                        }
                }
                update(e) {
                    var t;
                    let n = e.state.field(ji);
                    null == n ? null != this.cursor && (null === (t = this.cursor) || void 0 === t || t.remove(),
                        this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")),
                            this.cursor.className = "cm-dropCursor"),
                            (e.startState.field(ji) != n || e.docChanged || e.geometryChanged) && this.view.requestMeasure(this.measureReq))
                }
                readPos() {
                    let { view: e } = this
                        , t = e.state.field(ji)
                        , n = null != t && e.coordsAtPos(t);
                    if (!n)
                        return null;
                    let i = e.scrollDOM.getBoundingClientRect();
                    return {
                        left: n.left - i.left + e.scrollDOM.scrollLeft * e.scaleX,
                        top: n.top - i.top + e.scrollDOM.scrollTop * e.scaleY,
                        height: n.bottom - n.top
                    }
                }
                drawCursor(e) {
                    if (this.cursor) {
                        let { scaleX: t, scaleY: n } = this.view;
                        e ? (this.cursor.style.left = e.left / t + "px",
                            this.cursor.style.top = e.top / n + "px",
                            this.cursor.style.height = e.height / n + "px") : this.cursor.style.left = "-100000px"
                    }
                }
                destroy() {
                    this.cursor && this.cursor.remove()
                }
                setDropPos(e) {
                    this.view.state.field(ji) != e && this.view.dispatch({
                        effects: Ei.of(e)
                    })
                }
            }
                , {
                    eventObservers: {
                        dragover(e) {
                            this.setDropPos(this.view.posAtCoords({
                                x: e.clientX,
                                y: e.clientY
                            }))
                        },
                        dragleave(e) {
                            e.target != this.view.contentDOM && this.view.contentDOM.contains(e.relatedTarget) || this.setDropPos(null)
                        },
                        dragend() {
                            this.setDropPos(null)
                        },
                        drop() {
                            this.setDropPos(null)
                        }
                    }
                });
        function Gi() {
            return [ji, Ci]
        }
        function Ii(e, t, n, i, r) {
            t.lastIndex = 0;
            for (let a, o = e.iterRange(n, i), O = n; !o.next().done; O += o.value.length)
                if (!o.lineBreak)
                    for (; a = t.exec(o.value);)
                        r(O + a.index, a)
        }
        class Di {
            constructor(e) {
                const { regexp: t, decoration: n, decorate: i, boundary: r, maxLength: a = 1e3 } = e;
                if (!t.global)
                    throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
                if (this.regexp = t,
                    i)
                    this.addMatch = (e, t, n, r) => i(r, n, n + e[0].length, e, t);
                else if ("function" == typeof n)
                    this.addMatch = (e, t, i, r) => {
                        let a = n(e, t, i);
                        a && r(i, i + e[0].length, a)
                    }
                        ;
                else {
                    if (!n)
                        throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
                    this.addMatch = (e, t, i, r) => r(i, i + e[0].length, n)
                }
                this.boundary = r,
                    this.maxLength = a
            }
            createDeco(e) {
                let t = new i.vB
                    , n = t.add.bind(t);
                for (let { from: i, to: r } of function (e, t) {
                    let n = e.visibleRanges;
                    if (1 == n.length && n[0].from == e.viewport.from && n[0].to == e.viewport.to)
                        return n;
                    let i = [];
                    for (let { from: r, to: a } of n)
                        r = Math.max(e.state.doc.lineAt(r).from, r - t),
                            a = Math.min(e.state.doc.lineAt(a).to, a + t),
                            i.length && i[i.length - 1].to >= r ? i[i.length - 1].to = a : i.push({
                                from: r,
                                to: a
                            });
                    return i
                }(e, this.maxLength))
                    Ii(e.state.doc, this.regexp, i, r, ((t, i) => this.addMatch(i, e, t, n)));
                return t.finish()
            }
            updateDeco(e, t) {
                let n = 1e9
                    , i = -1;
                return e.docChanged && e.changes.iterChanges(((t, r, a, o) => {
                    o > e.view.viewport.from && a < e.view.viewport.to && (n = Math.min(a, n),
                        i = Math.max(o, i))
                }
                )),
                    e.viewportChanged || i - n > 1e3 ? this.createDeco(e.view) : i > -1 ? this.updateRange(e.view, t.map(e.changes), n, i) : t
            }
            updateRange(e, t, n, i) {
                for (let r of e.visibleRanges) {
                    let a = Math.max(r.from, n)
                        , o = Math.min(r.to, i);
                    if (o > a) {
                        let n = e.state.doc.lineAt(a)
                            , i = n.to < o ? e.state.doc.lineAt(o) : n
                            , O = Math.max(r.from, n.from)
                            , s = Math.min(r.to, i.to);
                        if (this.boundary) {
                            for (; a > n.from; a--)
                                if (this.boundary.test(n.text[a - 1 - n.from])) {
                                    O = a;
                                    break
                                }
                            for (; o < i.to; o++)
                                if (this.boundary.test(i.text[o - i.from])) {
                                    s = o;
                                    break
                                }
                        }
                        let l, c = [], u = (e, t, n) => c.push(n.range(e, t));
                        if (n == i)
                            for (this.regexp.lastIndex = O - n.from; (l = this.regexp.exec(n.text)) && l.index < s - n.from;)
                                this.addMatch(l, e, l.index + n.from, u);
                        else
                            Ii(e.state.doc, this.regexp, O, s, ((t, n) => this.addMatch(n, e, t, u)));
                        t = t.update({
                            filterFrom: O,
                            filterTo: s,
                            filter: (e, t) => e < O || t > s,
                            add: c
                        })
                    }
                }
                return t
            }
        }
        const Ni = null != /x/.unicode ? "gu" : "g"
            , Li = new RegExp("[\0-\b\n-\x1f\x7f-\x9f\xad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", Ni)
            , Mi = {
                0: "null",
                7: "bell",
                8: "backspace",
                10: "newline",
                11: "vertical tab",
                13: "carriage return",
                27: "escape",
                8203: "zero width space",
                8204: "zero width non-joiner",
                8205: "zero width joiner",
                8206: "left-to-right mark",
                8207: "right-to-left mark",
                8232: "line separator",
                8237: "left-to-right override",
                8238: "right-to-left override",
                8294: "left-to-right isolate",
                8295: "right-to-left isolate",
                8297: "pop directional isolate",
                8233: "paragraph separator",
                65279: "zero width no-break space",
                65532: "object replacement"
            };
        let Fi = null;
        const Bi = i.sj.define({
            combine(e) {
                let t = (0,
                    i.QR)(e, {
                        render: null,
                        specialChars: Li,
                        addSpecialChars: null
                    });
                return (t.replaceTabs = !function () {
                    var e;
                    if (null == Fi && "undefined" != typeof document && document.body) {
                        let t = document.body.style;
                        Fi = null != (null !== (e = t.tabSize) && void 0 !== e ? e : t.MozTabSize)
                    }
                    return Fi || !1
                }()) && (t.specialChars = new RegExp("\t|" + t.specialChars.source, Ni)),
                    t.addSpecialChars && (t.specialChars = new RegExp(t.specialChars.source + "|" + t.addSpecialChars.source, Ni)),
                    t
            }
        });
        function Hi() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return [Bi.of(e), Ki || (Ki = lt.fromClass(class {
                constructor(e) {
                    this.view = e,
                        this.decorations = de.none,
                        this.decorationCache = Object.create(null),
                        this.decorator = this.makeDecorator(e.state.facet(Bi)),
                        this.decorations = this.decorator.createDeco(e)
                }
                makeDecorator(e) {
                    return new Di({
                        regexp: e.specialChars,
                        decoration: (t, n, r) => {
                            let { doc: a } = n.state
                                , o = (0,
                                    i.vS)(t[0], 0);
                            if (9 == o) {
                                let e = a.lineAt(r)
                                    , t = n.state.tabSize
                                    , o = (0,
                                        i.y$)(e.text, t, r - e.from);
                                return de.replace({
                                    widget: new er((t - o % t) * this.view.defaultCharacterWidth / this.view.scaleX)
                                })
                            }
                            return this.decorationCache[o] || (this.decorationCache[o] = de.replace({
                                widget: new Ji(e, o)
                            }))
                        }
                        ,
                        boundary: e.replaceTabs ? void 0 : /[^]/
                    })
                }
                update(e) {
                    let t = e.state.facet(Bi);
                    e.startState.facet(Bi) != t ? (this.decorator = this.makeDecorator(t),
                        this.decorations = this.decorator.createDeco(e.view)) : this.decorations = this.decorator.updateDeco(e, this.decorations)
                }
            }
                , {
                    decorations: e => e.decorations
                }))]
        }
        let Ki = null;
        class Ji extends ce {
            constructor(e, t) {
                super(),
                    this.options = e,
                    this.code = t
            }
            eq(e) {
                return e.code == this.code
            }
            toDOM(e) {
                let t = function (e) {
                    return e >= 32 ? "\u2022" : 10 == e ? "\u2424" : String.fromCharCode(9216 + e)
                }(this.code)
                    , n = e.state.phrase("Control character") + " " + (Mi[this.code] || "0x" + this.code.toString(16))
                    , i = this.options.render && this.options.render(this.code, n, t);
                if (i)
                    return i;
                let r = document.createElement("span");
                return r.textContent = t,
                    r.title = n,
                    r.setAttribute("aria-label", n),
                    r.className = "cm-specialChar",
                    r
            }
            ignoreEvent() {
                return !1
            }
        }
        class er extends ce {
            constructor(e) {
                super(),
                    this.width = e
            }
            eq(e) {
                return e.width == this.width
            }
            toDOM() {
                let e = document.createElement("span");
                return e.textContent = "\t",
                    e.className = "cm-tab",
                    e.style.width = this.width + "px",
                    e
            }
            ignoreEvent() {
                return !1
            }
        }
        function tr() {
            return ir
        }
        const nr = de.line({
            class: "cm-activeLine"
        })
            , ir = lt.fromClass(class {
                constructor(e) {
                    this.decorations = this.getDeco(e)
                }
                update(e) {
                    (e.docChanged || e.selectionSet) && (this.decorations = this.getDeco(e.view))
                }
                getDeco(e) {
                    let t = -1
                        , n = [];
                    for (let i of e.state.selection.ranges) {
                        let r = e.lineBlockAt(i.head);
                        r.from > t && (n.push(nr.range(r.from)),
                            t = r.from)
                    }
                    return de.set(n)
                }
            }
                , {
                    decorations: e => e.decorations
                });
        class rr extends ce {
            constructor(e) {
                super(),
                    this.content = e
            }
            toDOM() {
                let e = document.createElement("span");
                return e.className = "cm-placeholder",
                    e.style.pointerEvents = "none",
                    e.appendChild("string" == typeof this.content ? document.createTextNode(this.content) : this.content),
                    "string" == typeof this.content ? e.setAttribute("aria-label", "placeholder " + this.content) : e.setAttribute("aria-hidden", "true"),
                    e
            }
            coordsAt(e) {
                let t = e.firstChild ? f(e.firstChild) : [];
                if (!t.length)
                    return null;
                let n = window.getComputedStyle(e.parentNode)
                    , i = b(t[0], "rtl" != n.direction)
                    , r = parseInt(n.lineHeight);
                return i.bottom - i.top > 1.5 * r ? {
                    left: i.left,
                    right: i.right,
                    top: i.top,
                    bottom: i.top + r
                } : i
            }
            ignoreEvent() {
                return !1
            }
        }
        function ar(e) {
            return lt.fromClass(class {
                constructor(t) {
                    this.view = t,
                        this.placeholder = e ? de.set([de.widget({
                            widget: new rr(e),
                            side: 1
                        }).range(0)]) : de.none
                }
                get decorations() {
                    return this.view.state.doc.length ? de.none : this.placeholder
                }
            }
                , {
                    decorations: e => e.decorations
                })
        }
        const or = 2e3;
        function Or(e, t) {
            let n = e.posAtCoords({
                x: t.clientX,
                y: t.clientY
            }, !1)
                , r = e.state.doc.lineAt(n)
                , a = n - r.from
                , o = a > or ? -1 : a == r.length ? function (e, t) {
                    let n = e.coordsAtPos(e.viewport.from);
                    return n ? Math.round(Math.abs((n.left - t) / e.defaultCharacterWidth)) : -1
                }(e, t.clientX) : (0,
                    i.y$)(r.text, e.state.tabSize, n - r.from);
            return {
                line: r.number,
                col: o,
                off: a
            }
        }
        function sr(e, t) {
            let n = Or(e, t)
                , r = e.state.selection;
            return n ? {
                update(e) {
                    if (e.docChanged) {
                        let t = e.changes.mapPos(e.startState.doc.line(n.line).from)
                            , i = e.state.doc.lineAt(t);
                        n = {
                            line: i.number,
                            col: n.col,
                            off: Math.min(n.off, i.length)
                        },
                            r = r.map(e.changes)
                    }
                },
                get(t, a, o) {
                    let O = Or(e, t);
                    if (!O)
                        return r;
                    let s = function (e, t, n) {
                        let r = Math.min(t.line, n.line)
                            , a = Math.max(t.line, n.line)
                            , o = [];
                        if (t.off > or || n.off > or || t.col < 0 || n.col < 0) {
                            let O = Math.min(t.off, n.off)
                                , s = Math.max(t.off, n.off);
                            for (let t = r; t <= a; t++) {
                                let n = e.doc.line(t);
                                n.length <= s && o.push(i.OF.range(n.from + O, n.to + s))
                            }
                        } else {
                            let O = Math.min(t.col, n.col)
                                , s = Math.max(t.col, n.col);
                            for (let t = r; t <= a; t++) {
                                let n = e.doc.line(t)
                                    , r = (0,
                                        i.kn)(n.text, O, e.tabSize, !0);
                                if (r < 0)
                                    o.push(i.OF.cursor(n.to));
                                else {
                                    let t = (0,
                                        i.kn)(n.text, s, e.tabSize);
                                    o.push(i.OF.range(n.from + r, n.from + t))
                                }
                            }
                        }
                        return o
                    }(e.state, n, O);
                    return s.length ? o ? i.OF.create(s.concat(r.ranges)) : i.OF.create(s) : r
                }
            } : null
        }
        function lr(e) {
            let t = (null === e || void 0 === e ? void 0 : e.eventFilter) || (e => e.altKey && 0 == e.button);
            return li.mouseSelectionStyle.of(((e, n) => t(n) ? sr(e, n) : null))
        }
        const cr = {
            Alt: [18, e => !!e.altKey],
            Control: [17, e => !!e.ctrlKey],
            Shift: [16, e => !!e.shiftKey],
            Meta: [91, e => !!e.metaKey]
        }
            , ur = {
                style: "cursor: crosshair"
            };
        function dr() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                , [t, n] = cr[e.key || "Alt"]
                , i = lt.fromClass(class {
                    constructor(e) {
                        this.view = e,
                            this.isDown = !1
                    }
                    set(e) {
                        this.isDown != e && (this.isDown = e,
                            this.view.update([]))
                    }
                }
                    , {
                        eventObservers: {
                            keydown(e) {
                                this.set(e.keyCode == t || n(e))
                            },
                            keyup(e) {
                                e.keyCode != t && n(e) || this.set(!1)
                            },
                            mousemove(e) {
                                this.set(n(e))
                            }
                        }
                    });
            return [i, li.contentAttributes.of((e => {
                var t;
                return (null === (t = e.plugin(i)) || void 0 === t ? void 0 : t.isDown) ? ur : null
            }
            ))]
        }
        const hr = "-10000px";
        class fr {
            constructor(e, t, n, i) {
                this.facet = t,
                    this.createTooltipView = n,
                    this.removeTooltipView = i,
                    this.input = e.state.facet(t),
                    this.tooltips = this.input.filter((e => e));
                let r = null;
                this.tooltipViews = this.tooltips.map((e => r = n(e, r)))
            }
            update(e, t) {
                var n;
                let i = e.state.facet(this.facet)
                    , r = i.filter((e => e));
                if (i === this.input) {
                    for (let t of this.tooltipViews)
                        t.update && t.update(e);
                    return !1
                }
                let a = []
                    , o = t ? [] : null;
                for (let O = 0; O < r.length; O++) {
                    let n = r[O]
                        , i = -1;
                    if (n) {
                        for (let e = 0; e < this.tooltips.length; e++) {
                            let t = this.tooltips[e];
                            t && t.create == n.create && (i = e)
                        }
                        if (i < 0)
                            a[O] = this.createTooltipView(n, O ? a[O - 1] : null),
                                o && (o[O] = !!n.above);
                        else {
                            let n = a[O] = this.tooltipViews[i];
                            o && (o[O] = t[i]),
                                n.update && n.update(e)
                        }
                    }
                }
                for (let O of this.tooltipViews)
                    a.indexOf(O) < 0 && (this.removeTooltipView(O),
                        null === (n = O.destroy) || void 0 === n || n.call(O));
                return t && (o.forEach(((e, n) => t[n] = e)),
                    t.length = o.length),
                    this.input = i,
                    this.tooltips = r,
                    this.tooltipViews = a,
                    !0
            }
        }
        function pr() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return gr.of(e)
        }
        function mr(e) {
            let { win: t } = e;
            return {
                top: 0,
                left: 0,
                bottom: t.innerHeight,
                right: t.innerWidth
            }
        }
        const gr = i.sj.define({
            combine: e => {
                var t, n, i;
                return {
                    position: H.ios ? "absolute" : (null === (t = e.find((e => e.position))) || void 0 === t ? void 0 : t.position) || "fixed",
                    parent: (null === (n = e.find((e => e.parent))) || void 0 === n ? void 0 : n.parent) || null,
                    tooltipSpace: (null === (i = e.find((e => e.tooltipSpace))) || void 0 === i ? void 0 : i.tooltipSpace) || mr
                }
            }
        })
            , Qr = new WeakMap
            , $r = lt.fromClass(class {
                constructor(e) {
                    this.view = e,
                        this.above = [],
                        this.inView = !0,
                        this.madeAbsolute = !1,
                        this.lastTransaction = 0,
                        this.measureTimeout = -1;
                    let t = e.state.facet(gr);
                    this.position = t.position,
                        this.parent = t.parent,
                        this.classes = e.themeClasses,
                        this.createContainer(),
                        this.measureReq = {
                            read: this.readMeasure.bind(this),
                            write: this.writeMeasure.bind(this),
                            key: this
                        },
                        this.resizeObserver = "function" == typeof ResizeObserver ? new ResizeObserver((() => this.measureSoon())) : null,
                        this.manager = new fr(e, Sr, ((e, t) => this.createTooltip(e, t)), (e => {
                            this.resizeObserver && this.resizeObserver.unobserve(e.dom),
                                e.dom.remove()
                        }
                        )),
                        this.above = this.manager.tooltips.map((e => !!e.above)),
                        this.intersectionObserver = "function" == typeof IntersectionObserver ? new IntersectionObserver((e => {
                            Date.now() > this.lastTransaction - 50 && e.length > 0 && e[e.length - 1].intersectionRatio < 1 && this.measureSoon()
                        }
                        ), {
                            threshold: [1]
                        }) : null,
                        this.observeIntersection(),
                        e.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)),
                        this.maybeMeasure()
                }
                createContainer() {
                    this.parent ? (this.container = document.createElement("div"),
                        this.container.style.position = "relative",
                        this.container.className = this.view.themeClasses,
                        this.parent.appendChild(this.container)) : this.container = this.view.dom
                }
                observeIntersection() {
                    if (this.intersectionObserver) {
                        this.intersectionObserver.disconnect();
                        for (let e of this.manager.tooltipViews)
                            this.intersectionObserver.observe(e.dom)
                    }
                }
                measureSoon() {
                    this.measureTimeout < 0 && (this.measureTimeout = setTimeout((() => {
                        this.measureTimeout = -1,
                            this.maybeMeasure()
                    }
                    ), 50))
                }
                update(e) {
                    e.transactions.length && (this.lastTransaction = Date.now());
                    let t = this.manager.update(e, this.above);
                    t && this.observeIntersection();
                    let n = t || e.geometryChanged
                        , i = e.state.facet(gr);
                    if (i.position != this.position && !this.madeAbsolute) {
                        this.position = i.position;
                        for (let e of this.manager.tooltipViews)
                            e.dom.style.position = this.position;
                        n = !0
                    }
                    if (i.parent != this.parent) {
                        this.parent && this.container.remove(),
                            this.parent = i.parent,
                            this.createContainer();
                        for (let e of this.manager.tooltipViews)
                            this.container.appendChild(e.dom);
                        n = !0
                    } else
                        this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
                    n && this.maybeMeasure()
                }
                createTooltip(e, t) {
                    let n = e.create(this.view)
                        , i = t ? t.dom : null;
                    if (n.dom.classList.add("cm-tooltip"),
                        e.arrow && !n.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
                        let e = document.createElement("div");
                        e.className = "cm-tooltip-arrow",
                            n.dom.appendChild(e)
                    }
                    return n.dom.style.position = this.position,
                        n.dom.style.top = hr,
                        n.dom.style.left = "0px",
                        this.container.insertBefore(n.dom, i),
                        n.mount && n.mount(this.view),
                        this.resizeObserver && this.resizeObserver.observe(n.dom),
                        n
                }
                destroy() {
                    var e, t, n;
                    this.view.win.removeEventListener("resize", this.measureSoon);
                    for (let i of this.manager.tooltipViews)
                        i.dom.remove(),
                            null === (e = i.destroy) || void 0 === e || e.call(i);
                    this.parent && this.container.remove(),
                        null === (t = this.resizeObserver) || void 0 === t || t.disconnect(),
                        null === (n = this.intersectionObserver) || void 0 === n || n.disconnect(),
                        clearTimeout(this.measureTimeout)
                }
                readMeasure() {
                    let e = this.view.dom.getBoundingClientRect()
                        , t = 1
                        , n = 1
                        , i = !1;
                    if ("fixed" == this.position && this.manager.tooltipViews.length) {
                        let { dom: e } = this.manager.tooltipViews[0];
                        if (H.gecko)
                            i = e.offsetParent != this.container.ownerDocument.body;
                        else if (e.style.top == hr && "0px" == e.style.left) {
                            let t = e.getBoundingClientRect();
                            i = Math.abs(t.top + 1e4) > 1 || Math.abs(t.left) > 1
                        }
                    }
                    if (i || "absolute" == this.position)
                        if (this.parent) {
                            let e = this.parent.getBoundingClientRect();
                            e.width && e.height && (t = e.width / this.parent.offsetWidth,
                                n = e.height / this.parent.offsetHeight)
                        } else
                            ({ scaleX: t, scaleY: n } = this.view.viewState);
                    return {
                        editor: e,
                        parent: this.parent ? this.container.getBoundingClientRect() : e,
                        pos: this.manager.tooltips.map(((e, t) => {
                            let n = this.manager.tooltipViews[t];
                            return n.getCoords ? n.getCoords(e.pos) : this.view.coordsAtPos(e.pos)
                        }
                        )),
                        size: this.manager.tooltipViews.map((e => {
                            let { dom: t } = e;
                            return t.getBoundingClientRect()
                        }
                        )),
                        space: this.view.state.facet(gr).tooltipSpace(this.view),
                        scaleX: t,
                        scaleY: n,
                        makeAbsolute: i
                    }
                }
                writeMeasure(e) {
                    var t;
                    if (e.makeAbsolute) {
                        this.madeAbsolute = !0,
                            this.position = "absolute";
                        for (let e of this.manager.tooltipViews)
                            e.dom.style.position = "absolute"
                    }
                    let { editor: n, space: i, scaleX: r, scaleY: a } = e
                        , o = [];
                    for (let O = 0; O < this.manager.tooltips.length; O++) {
                        let s = this.manager.tooltips[O]
                            , l = this.manager.tooltipViews[O]
                            , { dom: c } = l
                            , u = e.pos[O]
                            , d = e.size[O];
                        if (!u || u.bottom <= Math.max(n.top, i.top) || u.top >= Math.min(n.bottom, i.bottom) || u.right < Math.max(n.left, i.left) - .1 || u.left > Math.min(n.right, i.right) + .1) {
                            c.style.top = hr;
                            continue
                        }
                        let h = s.arrow ? l.dom.querySelector(".cm-tooltip-arrow") : null
                            , f = h ? 7 : 0
                            , p = d.right - d.left
                            , m = null !== (t = Qr.get(l)) && void 0 !== t ? t : d.bottom - d.top
                            , g = l.offset || yr
                            , Q = this.view.textDirection == ve.LTR
                            , $ = d.width > i.right - i.left ? Q ? i.left : i.right - d.width : Q ? Math.max(i.left, Math.min(u.left - (h ? 14 : 0) + g.x, i.right - p)) : Math.min(Math.max(i.left, u.left - p + (h ? 14 : 0) - g.x), i.right - p)
                            , b = this.above[O];
                        !s.strictSide && (b ? u.top - (d.bottom - d.top) - g.y < i.top : u.bottom + (d.bottom - d.top) + g.y > i.bottom) && b == i.bottom - u.bottom > u.top - i.top && (b = this.above[O] = !b);
                        let y = (b ? u.top - i.top : i.bottom - u.bottom) - f;
                        if (y < m && !1 !== l.resize) {
                            if (y < this.view.defaultLineHeight) {
                                c.style.top = hr;
                                continue
                            }
                            Qr.set(l, m),
                                c.style.height = (m = y) / a + "px"
                        } else
                            c.style.height && (c.style.height = "");
                        let S = b ? u.top - m - f - g.y : u.bottom + f + g.y
                            , P = $ + p;
                        if (!0 !== l.overlap)
                            for (let e of o)
                                e.left < P && e.right > $ && e.top < S + m && e.bottom > S && (S = b ? e.top - m - 2 - f : e.bottom + f + 2);
                        if ("absolute" == this.position ? (c.style.top = (S - e.parent.top) / a + "px",
                            c.style.left = ($ - e.parent.left) / r + "px") : (c.style.top = S / a + "px",
                                c.style.left = $ / r + "px"),
                            h) {
                            let e = u.left + (Q ? g.x : -g.x) - ($ + 14 - 7);
                            h.style.left = e / r + "px"
                        }
                        !0 !== l.overlap && o.push({
                            left: $,
                            top: S,
                            right: P,
                            bottom: S + m
                        }),
                            c.classList.toggle("cm-tooltip-above", b),
                            c.classList.toggle("cm-tooltip-below", !b),
                            l.positioned && l.positioned(e.space)
                    }
                }
                maybeMeasure() {
                    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq),
                        this.inView != this.view.inView && (this.inView = this.view.inView,
                            !this.inView)))
                        for (let e of this.manager.tooltipViews)
                            e.dom.style.top = hr
                }
            }
                , {
                    eventObservers: {
                        scroll() {
                            this.maybeMeasure()
                        }
                    }
                })
            , br = li.baseTheme({
                ".cm-tooltip": {
                    zIndex: 100,
                    boxSizing: "border-box"
                },
                "&light .cm-tooltip": {
                    border: "1px solid #bbb",
                    backgroundColor: "#f5f5f5"
                },
                "&light .cm-tooltip-section:not(:first-child)": {
                    borderTop: "1px solid #bbb"
                },
                "&dark .cm-tooltip": {
                    backgroundColor: "#333338",
                    color: "white"
                },
                ".cm-tooltip-arrow": {
                    height: "7px",
                    width: "14px",
                    position: "absolute",
                    zIndex: -1,
                    overflow: "hidden",
                    "&:before, &:after": {
                        content: "''",
                        position: "absolute",
                        width: 0,
                        height: 0,
                        borderLeft: "7px solid transparent",
                        borderRight: "7px solid transparent"
                    },
                    ".cm-tooltip-above &": {
                        bottom: "-7px",
                        "&:before": {
                            borderTop: "7px solid #bbb"
                        },
                        "&:after": {
                            borderTop: "7px solid #f5f5f5",
                            bottom: "1px"
                        }
                    },
                    ".cm-tooltip-below &": {
                        top: "-7px",
                        "&:before": {
                            borderBottom: "7px solid #bbb"
                        },
                        "&:after": {
                            borderBottom: "7px solid #f5f5f5",
                            top: "1px"
                        }
                    }
                },
                "&dark .cm-tooltip .cm-tooltip-arrow": {
                    "&:before": {
                        borderTopColor: "#333338",
                        borderBottomColor: "#333338"
                    },
                    "&:after": {
                        borderTopColor: "transparent",
                        borderBottomColor: "transparent"
                    }
                }
            })
            , yr = {
                x: 0,
                y: 0
            }
            , Sr = i.sj.define({
                enables: [$r, br]
            })
            , Pr = i.sj.define({
                combine: e => e.reduce(((e, t) => e.concat(t)), [])
            });
        class vr {
            static create(e) {
                return new vr(e)
            }
            constructor(e) {
                this.view = e,
                    this.mounted = !1,
                    this.dom = document.createElement("div"),
                    this.dom.classList.add("cm-tooltip-hover"),
                    this.manager = new fr(e, Pr, ((e, t) => this.createHostedView(e, t)), (e => e.dom.remove()))
            }
            createHostedView(e, t) {
                let n = e.create(this.view);
                return n.dom.classList.add("cm-tooltip-section"),
                    this.dom.insertBefore(n.dom, t ? t.dom.nextSibling : this.dom.firstChild),
                    this.mounted && n.mount && n.mount(this.view),
                    n
            }
            mount(e) {
                for (let t of this.manager.tooltipViews)
                    t.mount && t.mount(e);
                this.mounted = !0
            }
            positioned(e) {
                for (let t of this.manager.tooltipViews)
                    t.positioned && t.positioned(e)
            }
            update(e) {
                this.manager.update(e)
            }
            destroy() {
                var e;
                for (let t of this.manager.tooltipViews)
                    null === (e = t.destroy) || void 0 === e || e.call(t)
            }
            passProp(e) {
                let t;
                for (let n of this.manager.tooltipViews) {
                    let i = n[e];
                    if (void 0 !== i)
                        if (void 0 === t)
                            t = i;
                        else if (t !== i)
                            return
                }
                return t
            }
            get offset() {
                return this.passProp("offset")
            }
            get getCoords() {
                return this.passProp("getCoords")
            }
            get overlap() {
                return this.passProp("overlap")
            }
            get resize() {
                return this.passProp("resize")
            }
        }
        const xr = Sr.compute([Pr], (e => {
            let t = e.facet(Pr);
            return 0 === t.length ? null : {
                pos: Math.min(...t.map((e => e.pos))),
                end: Math.max(...t.map((e => {
                    var t;
                    return null !== (t = e.end) && void 0 !== t ? t : e.pos
                }
                ))),
                create: vr.create,
                above: t[0].above,
                arrow: t.some((e => e.arrow))
            }
        }
        ));
        class kr {
            constructor(e, t, n, i, r) {
                this.view = e,
                    this.source = t,
                    this.field = n,
                    this.setHover = i,
                    this.hoverTime = r,
                    this.hoverTimeout = -1,
                    this.restartTimeout = -1,
                    this.pending = null,
                    this.lastMove = {
                        x: 0,
                        y: 0,
                        target: e.dom,
                        time: 0
                    },
                    this.checkHover = this.checkHover.bind(this),
                    e.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)),
                    e.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this))
            }
            update() {
                this.pending && (this.pending = null,
                    clearTimeout(this.restartTimeout),
                    this.restartTimeout = setTimeout((() => this.startHover()), 20))
            }
            get active() {
                return this.view.state.field(this.field)
            }
            checkHover() {
                if (this.hoverTimeout = -1,
                    this.active.length)
                    return;
                let e = Date.now() - this.lastMove.time;
                e < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e) : this.startHover()
            }
            startHover() {
                clearTimeout(this.restartTimeout);
                let { view: e, lastMove: t } = this
                    , n = e.docView.nearest(t.target);
                if (!n)
                    return;
                let i, r = 1;
                if (n instanceof ee)
                    i = n.posAtStart;
                else {
                    if (i = e.posAtCoords(t),
                        null == i)
                        return;
                    let n = e.coordsAtPos(i);
                    if (!n || t.y < n.top || t.y > n.bottom || t.x < n.left - e.defaultCharacterWidth || t.x > n.right + e.defaultCharacterWidth)
                        return;
                    let a = e.bidiSpans(e.state.doc.lineAt(i)).find((e => e.from <= i && e.to >= i))
                        , o = a && a.dir == ve.RTL ? -1 : 1;
                    r = t.x < n.left ? -o : o
                }
                let a = this.source(e, i, r);
                if (null === a || void 0 === a ? void 0 : a.then) {
                    let t = this.pending = {
                        pos: i
                    };
                    a.then((n => {
                        this.pending == t && (this.pending = null,
                            !n || Array.isArray(n) && !n.length || e.dispatch({
                                effects: this.setHover.of(Array.isArray(n) ? n : [n])
                            }))
                    }
                    ), (t => at(e.state, t, "hover tooltip")))
                } else
                    !a || Array.isArray(a) && !a.length || e.dispatch({
                        effects: this.setHover.of(Array.isArray(a) ? a : [a])
                    })
            }
            get tooltip() {
                let e = this.view.plugin($r)
                    , t = e ? e.manager.tooltips.findIndex((e => e.create == vr.create)) : -1;
                return t > -1 ? e.manager.tooltipViews[t] : null
            }
            mousemove(e) {
                var t, n;
                this.lastMove = {
                    x: e.clientX,
                    y: e.clientY,
                    target: e.target,
                    time: Date.now()
                },
                    this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
                let { active: i, tooltip: r } = this;
                if (i.length && r && !function (e, t) {
                    let n, { left: i, right: r, top: a, bottom: o } = e.getBoundingClientRect();
                    if (n = e.querySelector(".cm-tooltip-arrow")) {
                        let e = n.getBoundingClientRect();
                        a = Math.min(e.top, a),
                            o = Math.max(e.bottom, o)
                    }
                    return t.clientX >= i - wr && t.clientX <= r + wr && t.clientY >= a - wr && t.clientY <= o + wr
                }(r.dom, e) || this.pending) {
                    let { pos: r } = i[0] || this.pending
                        , a = null !== (n = null === (t = i[0]) || void 0 === t ? void 0 : t.end) && void 0 !== n ? n : r;
                    (r == a ? this.view.posAtCoords(this.lastMove) == r : function (e, t, n, i, r) {
                        let a = e.scrollDOM.getBoundingClientRect()
                            , o = e.documentTop + e.documentPadding.top + e.contentHeight;
                        if (a.left > i || a.right < i || a.top > r || Math.min(a.bottom, o) < r)
                            return !1;
                        let O = e.posAtCoords({
                            x: i,
                            y: r
                        }, !1);
                        return O >= t && O <= n
                    }(this.view, r, a, e.clientX, e.clientY)) || (this.view.dispatch({
                        effects: this.setHover.of([])
                    }),
                        this.pending = null)
                }
            }
            mouseleave(e) {
                clearTimeout(this.hoverTimeout),
                    this.hoverTimeout = -1;
                let { active: t } = this;
                if (t.length) {
                    let { tooltip: t } = this;
                    t && t.dom.contains(e.relatedTarget) ? this.watchTooltipLeave(t.dom) : this.view.dispatch({
                        effects: this.setHover.of([])
                    })
                }
            }
            watchTooltipLeave(e) {
                let t = n => {
                    e.removeEventListener("mouseleave", t),
                        this.active.length && !this.view.dom.contains(n.relatedTarget) && this.view.dispatch({
                            effects: this.setHover.of([])
                        })
                }
                    ;
                e.addEventListener("mouseleave", t)
            }
            destroy() {
                clearTimeout(this.hoverTimeout),
                    this.view.dom.removeEventListener("mouseleave", this.mouseleave),
                    this.view.dom.removeEventListener("mousemove", this.mousemove)
            }
        }
        const wr = 4;
        function Xr(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
                , n = i.Pe.define()
                , r = i.sU.define({
                    create: () => [],
                    update(e, r) {
                        if (e.length && (t.hideOnChange && (r.docChanged || r.selection) ? e = [] : t.hideOn && (e = e.filter((e => !t.hideOn(r, e)))),
                            r.docChanged)) {
                            let t = [];
                            for (let n of e) {
                                let e = r.changes.mapPos(n.pos, -1, i.iR.TrackDel);
                                if (null != e) {
                                    let i = Object.assign(Object.create(null), n);
                                    i.pos = e,
                                        null != i.end && (i.end = r.changes.mapPos(i.end)),
                                        t.push(i)
                                }
                            }
                            e = t
                        }
                        for (let t of r.effects)
                            t.is(n) && (e = t.value),
                                t.is(Tr) && (e = []);
                        return e
                    },
                    provide: e => Pr.from(e)
                });
            return {
                active: r,
                extension: [r, lt.define((i => new kr(i, e, r, n, t.hoverTime || 300))), xr]
            }
        }
        function _r(e, t) {
            let n = e.plugin($r);
            if (!n)
                return null;
            let i = n.manager.tooltips.indexOf(t);
            return i < 0 ? null : n.manager.tooltipViews[i]
        }
        const Tr = i.Pe.define();
        const zr = i.sj.define({
            combine(e) {
                let t, n;
                for (let i of e)
                    t = t || i.topContainer,
                        n = n || i.bottomContainer;
                return {
                    topContainer: t,
                    bottomContainer: n
                }
            }
        });
        function Rr(e, t) {
            let n = e.plugin(Wr)
                , i = n ? n.specs.indexOf(t) : -1;
            return i > -1 ? n.panels[i] : null
        }
        const Wr = lt.fromClass(class {
            constructor(e) {
                this.input = e.state.facet(Ur),
                    this.specs = this.input.filter((e => e)),
                    this.panels = this.specs.map((t => t(e)));
                let t = e.state.facet(zr);
                this.top = new Zr(e, !0, t.topContainer),
                    this.bottom = new Zr(e, !1, t.bottomContainer),
                    this.top.sync(this.panels.filter((e => e.top))),
                    this.bottom.sync(this.panels.filter((e => !e.top)));
                for (let n of this.panels)
                    n.dom.classList.add("cm-panel"),
                        n.mount && n.mount()
            }
            update(e) {
                let t = e.state.facet(zr);
                this.top.container != t.topContainer && (this.top.sync([]),
                    this.top = new Zr(e.view, !0, t.topContainer)),
                    this.bottom.container != t.bottomContainer && (this.bottom.sync([]),
                        this.bottom = new Zr(e.view, !1, t.bottomContainer)),
                    this.top.syncClasses(),
                    this.bottom.syncClasses();
                let n = e.state.facet(Ur);
                if (n != this.input) {
                    let t = n.filter((e => e))
                        , i = []
                        , r = []
                        , a = []
                        , o = [];
                    for (let n of t) {
                        let t, O = this.specs.indexOf(n);
                        O < 0 ? (t = n(e.view),
                            o.push(t)) : (t = this.panels[O],
                                t.update && t.update(e)),
                            i.push(t),
                            (t.top ? r : a).push(t)
                    }
                    this.specs = t,
                        this.panels = i,
                        this.top.sync(r),
                        this.bottom.sync(a);
                    for (let e of o)
                        e.dom.classList.add("cm-panel"),
                            e.mount && e.mount()
                } else
                    for (let i of this.panels)
                        i.update && i.update(e)
            }
            destroy() {
                this.top.sync([]),
                    this.bottom.sync([])
            }
        }
            , {
                provide: e => li.scrollMargins.of((t => {
                    let n = t.plugin(e);
                    return n && {
                        top: n.top.scrollMargin(),
                        bottom: n.bottom.scrollMargin()
                    }
                }
                ))
            });
        class Zr {
            constructor(e, t, n) {
                this.view = e,
                    this.top = t,
                    this.container = n,
                    this.dom = void 0,
                    this.classes = "",
                    this.panels = [],
                    this.syncClasses()
            }
            sync(e) {
                for (let t of this.panels)
                    t.destroy && e.indexOf(t) < 0 && t.destroy();
                this.panels = e,
                    this.syncDOM()
            }
            syncDOM() {
                if (0 == this.panels.length)
                    return void (this.dom && (this.dom.remove(),
                        this.dom = void 0));
                if (!this.dom) {
                    this.dom = document.createElement("div"),
                        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom",
                        this.dom.style[this.top ? "top" : "bottom"] = "0";
                    let e = this.container || this.view.dom;
                    e.insertBefore(this.dom, this.top ? e.firstChild : null)
                }
                let e = this.dom.firstChild;
                for (let t of this.panels)
                    if (t.dom.parentNode == this.dom) {
                        for (; e != t.dom;)
                            e = qr(e);
                        e = e.nextSibling
                    } else
                        this.dom.insertBefore(t.dom, e);
                for (; e;)
                    e = qr(e)
            }
            scrollMargin() {
                return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top)
            }
            syncClasses() {
                if (this.container && this.classes != this.view.themeClasses) {
                    for (let e of this.classes.split(" "))
                        e && this.container.classList.remove(e);
                    for (let e of (this.classes = this.view.themeClasses).split(" "))
                        e && this.container.classList.add(e)
                }
            }
        }
        function qr(e) {
            let t = e.nextSibling;
            return e.remove(),
                t
        }
        const Ur = i.sj.define({
            enables: Wr
        });
        class Yr extends i.FB {
            compare(e) {
                return this == e || this.constructor == e.constructor && this.eq(e)
            }
            eq(e) {
                return !1
            }
            destroy(e) { }
        }
        Yr.prototype.elementClass = "",
            Yr.prototype.toDOM = void 0,
            Yr.prototype.mapMode = i.iR.TrackBefore,
            Yr.prototype.startSide = Yr.prototype.endSide = -1,
            Yr.prototype.point = !0;
        const Ar = i.sj.define()
            , Vr = i.sj.define()
            , Er = {
                class: "",
                renderEmptyElements: !1,
                elementStyle: "",
                markers: () => i.om.empty,
                lineMarker: () => null,
                widgetMarker: () => null,
                lineMarkerChange: null,
                initialSpacer: null,
                updateSpacer: null,
                domEventHandlers: {}
            }
            , jr = i.sj.define();
        function Cr(e) {
            return [Ir(), jr.of(Object.assign(Object.assign({}, Er), e))]
        }
        const Gr = i.sj.define({
            combine: e => e.some((e => e))
        });
        function Ir(e) {
            let t = [Dr];
            return e && !1 === e.fixed && t.push(Gr.of(!0)),
                t
        }
        const Dr = lt.fromClass(class {
            constructor(e) {
                this.view = e,
                    this.prevViewport = e.viewport,
                    this.dom = document.createElement("div"),
                    this.dom.className = "cm-gutters",
                    this.dom.setAttribute("aria-hidden", "true"),
                    this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px",
                    this.gutters = e.state.facet(jr).map((t => new Fr(e, t)));
                for (let t of this.gutters)
                    this.dom.appendChild(t.dom);
                this.fixed = !e.state.facet(Gr),
                    this.fixed && (this.dom.style.position = "sticky"),
                    this.syncGutters(!1),
                    e.scrollDOM.insertBefore(this.dom, e.contentDOM)
            }
            update(e) {
                if (this.updateGutters(e)) {
                    let t = this.prevViewport
                        , n = e.view.viewport
                        , i = Math.min(t.to, n.to) - Math.max(t.from, n.from);
                    this.syncGutters(i < .8 * (n.to - n.from))
                }
                e.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px"),
                    this.view.state.facet(Gr) != !this.fixed && (this.fixed = !this.fixed,
                        this.dom.style.position = this.fixed ? "sticky" : ""),
                    this.prevViewport = e.view.viewport
            }
            syncGutters(e) {
                let t = this.dom.nextSibling;
                e && this.dom.remove();
                let n = i.om.iter(this.view.state.facet(Ar), this.view.viewport.from)
                    , r = []
                    , a = this.gutters.map((e => new Mr(e, this.view.viewport, -this.view.documentPadding.top)));
                for (let i of this.view.viewportLineBlocks)
                    if (r.length && (r = []),
                        Array.isArray(i.type)) {
                        let e = !0;
                        for (let t of i.type)
                            if (t.type == ue.Text && e) {
                                Lr(n, r, t.from);
                                for (let e of a)
                                    e.line(this.view, t, r);
                                e = !1
                            } else if (t.widget)
                                for (let e of a)
                                    e.widget(this.view, t)
                    } else if (i.type == ue.Text) {
                        Lr(n, r, i.from);
                        for (let e of a)
                            e.line(this.view, i, r)
                    } else if (i.widget)
                        for (let e of a)
                            e.widget(this.view, i);
                for (let i of a)
                    i.finish();
                e && this.view.scrollDOM.insertBefore(this.dom, t)
            }
            updateGutters(e) {
                let t = e.startState.facet(jr)
                    , n = e.state.facet(jr)
                    , r = e.docChanged || e.heightChanged || e.viewportChanged || !i.om.eq(e.startState.facet(Ar), e.state.facet(Ar), e.view.viewport.from, e.view.viewport.to);
                if (t == n)
                    for (let i of this.gutters)
                        i.update(e) && (r = !0);
                else {
                    r = !0;
                    let i = [];
                    for (let r of n) {
                        let n = t.indexOf(r);
                        n < 0 ? i.push(new Fr(this.view, r)) : (this.gutters[n].update(e),
                            i.push(this.gutters[n]))
                    }
                    for (let e of this.gutters)
                        e.dom.remove(),
                            i.indexOf(e) < 0 && e.destroy();
                    for (let e of i)
                        this.dom.appendChild(e.dom);
                    this.gutters = i
                }
                return r
            }
            destroy() {
                for (let e of this.gutters)
                    e.destroy();
                this.dom.remove()
            }
        }
            , {
                provide: e => li.scrollMargins.of((t => {
                    let n = t.plugin(e);
                    return n && 0 != n.gutters.length && n.fixed ? t.textDirection == ve.LTR ? {
                        left: n.dom.offsetWidth * t.scaleX
                    } : {
                        right: n.dom.offsetWidth * t.scaleX
                    } : null
                }
                ))
            });
        function Nr(e) {
            return Array.isArray(e) ? e : [e]
        }
        function Lr(e, t, n) {
            for (; e.value && e.from <= n;)
                e.from == n && t.push(e.value),
                    e.next()
        }
        class Mr {
            constructor(e, t, n) {
                this.gutter = e,
                    this.height = n,
                    this.i = 0,
                    this.cursor = i.om.iter(e.markers, t.from)
            }
            addElement(e, t, n) {
                let { gutter: i } = this
                    , r = (t.top - this.height) / e.scaleY
                    , a = t.height / e.scaleY;
                if (this.i == i.elements.length) {
                    let t = new Br(e, a, r, n);
                    i.elements.push(t),
                        i.dom.appendChild(t.dom)
                } else
                    i.elements[this.i].update(e, a, r, n);
                this.height = t.bottom,
                    this.i++
            }
            line(e, t, n) {
                let i = [];
                Lr(this.cursor, i, t.from),
                    n.length && (i = i.concat(n));
                let r = this.gutter.config.lineMarker(e, t, i);
                r && i.unshift(r);
                let a = this.gutter;
                (0 != i.length || a.config.renderEmptyElements) && this.addElement(e, t, i)
            }
            widget(e, t) {
                let n = this.gutter.config.widgetMarker(e, t.widget, t)
                    , i = n ? [n] : null;
                for (let r of e.state.facet(Vr)) {
                    let n = r(e, t.widget, t);
                    n && (i || (i = [])).push(n)
                }
                i && this.addElement(e, t, i)
            }
            finish() {
                let e = this.gutter;
                for (; e.elements.length > this.i;) {
                    let t = e.elements.pop();
                    e.dom.removeChild(t.dom),
                        t.destroy()
                }
            }
        }
        class Fr {
            constructor(e, t) {
                this.view = e,
                    this.config = t,
                    this.elements = [],
                    this.spacer = null,
                    this.dom = document.createElement("div"),
                    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
                for (let n in t.domEventHandlers)
                    this.dom.addEventListener(n, (i => {
                        let r, a = i.target;
                        if (a != this.dom && this.dom.contains(a)) {
                            for (; a.parentNode != this.dom;)
                                a = a.parentNode;
                            let e = a.getBoundingClientRect();
                            r = (e.top + e.bottom) / 2
                        } else
                            r = i.clientY;
                        let o = e.lineBlockAtHeight(r - e.documentTop);
                        t.domEventHandlers[n](e, o, i) && i.preventDefault()
                    }
                    ));
                this.markers = Nr(t.markers(e)),
                    t.initialSpacer && (this.spacer = new Br(e, 0, 0, [t.initialSpacer(e)]),
                        this.dom.appendChild(this.spacer.dom),
                        this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none")
            }
            update(e) {
                let t = this.markers;
                if (this.markers = Nr(this.config.markers(e.view)),
                    this.spacer && this.config.updateSpacer) {
                    let t = this.config.updateSpacer(this.spacer.markers[0], e);
                    t != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [t])
                }
                let n = e.view.viewport;
                return !i.om.eq(this.markers, t, n.from, n.to) || !!this.config.lineMarkerChange && this.config.lineMarkerChange(e)
            }
            destroy() {
                for (let e of this.elements)
                    e.destroy()
            }
        }
        class Br {
            constructor(e, t, n, i) {
                this.height = -1,
                    this.above = 0,
                    this.markers = [],
                    this.dom = document.createElement("div"),
                    this.dom.className = "cm-gutterElement",
                    this.update(e, t, n, i)
            }
            update(e, t, n, i) {
                this.height != t && (this.height = t,
                    this.dom.style.height = t + "px"),
                    this.above != n && (this.dom.style.marginTop = (this.above = n) ? n + "px" : ""),
                    function (e, t) {
                        if (e.length != t.length)
                            return !1;
                        for (let n = 0; n < e.length; n++)
                            if (!e[n].compare(t[n]))
                                return !1;
                        return !0
                    }(this.markers, i) || this.setMarkers(e, i)
            }
            setMarkers(e, t) {
                let n = "cm-gutterElement"
                    , i = this.dom.firstChild;
                for (let r = 0, a = 0; ;) {
                    let o = a
                        , O = r < t.length ? t[r++] : null
                        , s = !1;
                    if (O) {
                        let e = O.elementClass;
                        e && (n += " " + e);
                        for (let t = a; t < this.markers.length; t++)
                            if (this.markers[t].compare(O)) {
                                o = t,
                                    s = !0;
                                break
                            }
                    } else
                        o = this.markers.length;
                    for (; a < o;) {
                        let e = this.markers[a++];
                        if (e.toDOM) {
                            e.destroy(i);
                            let t = i.nextSibling;
                            i.remove(),
                                i = t
                        }
                    }
                    if (!O)
                        break;
                    O.toDOM && (s ? i = i.nextSibling : this.dom.insertBefore(O.toDOM(e), i)),
                        s && a++
                }
                this.dom.className = n,
                    this.markers = t
            }
            destroy() {
                this.setMarkers(null, [])
            }
        }
        const Hr = i.sj.define()
            , Kr = i.sj.define()
            , Jr = i.sj.define({
                combine: e => (0,
                    i.QR)(e, {
                        formatNumber: String,
                        domEventHandlers: {}
                    }, {
                        domEventHandlers(e, t) {
                            let n = Object.assign({}, e);
                            for (let i in t) {
                                let e = n[i]
                                    , r = t[i];
                                n[i] = e ? (t, n, i) => e(t, n, i) || r(t, n, i) : r
                            }
                            return n
                        }
                    })
            });
        class ea extends Yr {
            constructor(e) {
                super(),
                    this.number = e
            }
            eq(e) {
                return this.number == e.number
            }
            toDOM() {
                return document.createTextNode(this.number)
            }
        }
        function ta(e, t) {
            return e.state.facet(Jr).formatNumber(t, e.state)
        }
        const na = jr.compute([Jr], (e => ({
            class: "cm-lineNumbers",
            renderEmptyElements: !1,
            markers: e => e.state.facet(Hr),
            lineMarker: (e, t, n) => n.some((e => e.toDOM)) ? null : new ea(ta(e, e.state.doc.lineAt(t.from).number)),
            widgetMarker: (e, t, n) => {
                for (let i of e.state.facet(Kr)) {
                    let r = i(e, t, n);
                    if (r)
                        return r
                }
                return null
            }
            ,
            lineMarkerChange: e => e.startState.facet(Jr) != e.state.facet(Jr),
            initialSpacer: e => new ea(ta(e, ra(e.state.doc.lines))),
            updateSpacer(e, t) {
                let n = ta(t.view, ra(t.view.state.doc.lines));
                return n == e.number ? e : new ea(n)
            },
            domEventHandlers: e.facet(Jr).domEventHandlers
        })));
        function ia() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return [Jr.of(e), Ir(), na]
        }
        function ra(e) {
            let t = 9;
            for (; t < e;)
                t = 10 * t + 9;
            return t
        }
        const aa = new class extends Yr {
            constructor() {
                super(...arguments),
                    this.elementClass = "cm-activeLineGutter"
            }
        }
            , oa = Ar.compute(["selection"], (e => {
                let t = []
                    , n = -1;
                for (let i of e.selection.ranges) {
                    let r = e.doc.lineAt(i.head).from;
                    r > n && (n = r,
                        t.push(aa.range(r)))
                }
                return i.om.of(t)
            }
            ));
        function Oa() {
            return oa
        }
    }
    ,
    45615: (e, t, n) => {
        n.d(t, {
            $g: () => U,
            PH: () => f,
            Qj: () => h,
            RY: () => R,
            Z6: () => l,
            cF: () => i,
            fI: () => c,
            iX: () => Z,
            rr: () => W,
            uY: () => o
        });
        const i = 1024;
        let r = 0;
        class a {
            constructor(e, t) {
                this.from = e,
                    this.to = t
            }
        }
        class o {
            constructor() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                this.id = r++,
                    this.perNode = !!e.perNode,
                    this.deserialize = e.deserialize || (() => {
                        throw new Error("This node type doesn't define a deserialize function")
                    }
                    )
            }
            add(e) {
                if (this.perNode)
                    throw new RangeError("Can't add per-node props to node types");
                return "function" != typeof e && (e = l.match(e)),
                    t => {
                        let n = e(t);
                        return void 0 === n ? null : [this, n]
                    }
            }
        }
        o.closedBy = new o({
            deserialize: e => e.split(" ")
        }),
            o.openedBy = new o({
                deserialize: e => e.split(" ")
            }),
            o.group = new o({
                deserialize: e => e.split(" ")
            }),
            o.isolate = new o({
                deserialize: e => {
                    if (e && "rtl" != e && "ltr" != e && "auto" != e)
                        throw new RangeError("Invalid value for isolate: " + e);
                    return e || "auto"
                }
            }),
            o.contextHash = new o({
                perNode: !0
            }),
            o.lookAhead = new o({
                perNode: !0
            }),
            o.mounted = new o({
                perNode: !0
            });
        class O {
            constructor(e, t, n) {
                this.tree = e,
                    this.overlay = t,
                    this.parser = n
            }
            static get(e) {
                return e && e.props && e.props[o.mounted.id]
            }
        }
        const s = Object.create(null);
        class l {
            constructor(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                this.name = e,
                    this.props = t,
                    this.id = n,
                    this.flags = i
            }
            static define(e) {
                let t = e.props && e.props.length ? Object.create(null) : s
                    , n = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (null == e.name ? 8 : 0)
                    , i = new l(e.name || "", t, e.id, n);
                if (e.props)
                    for (let r of e.props)
                        if (Array.isArray(r) || (r = r(i)),
                            r) {
                            if (r[0].perNode)
                                throw new RangeError("Can't store a per-node prop on a node type");
                            t[r[0].id] = r[1]
                        }
                return i
            }
            prop(e) {
                return this.props[e.id]
            }
            get isTop() {
                return (1 & this.flags) > 0
            }
            get isSkipped() {
                return (2 & this.flags) > 0
            }
            get isError() {
                return (4 & this.flags) > 0
            }
            get isAnonymous() {
                return (8 & this.flags) > 0
            }
            is(e) {
                if ("string" == typeof e) {
                    if (this.name == e)
                        return !0;
                    let t = this.prop(o.group);
                    return !!t && t.indexOf(e) > -1
                }
                return this.id == e
            }
            static match(e) {
                let t = Object.create(null);
                for (let n in e)
                    for (let i of n.split(" "))
                        t[i] = e[n];
                return e => {
                    for (let n = e.prop(o.group), i = -1; i < (n ? n.length : 0); i++) {
                        let r = t[i < 0 ? e.name : n[i]];
                        if (r)
                            return r
                    }
                }
            }
        }
        l.none = new l("", Object.create(null), 0, 8);
        class c {
            constructor(e) {
                this.types = e;
                for (let t = 0; t < e.length; t++)
                    if (e[t].id != t)
                        throw new RangeError("Node type ids should correspond to array positions when creating a node set")
            }
            extend() {
                let e = [];
                for (var t = arguments.length, n = new Array(t), i = 0; i < t; i++)
                    n[i] = arguments[i];
                for (let r of this.types) {
                    let t = null;
                    for (let e of n) {
                        let n = e(r);
                        n && (t || (t = Object.assign({}, r.props)),
                            t[n[0].id] = n[1])
                    }
                    e.push(t ? new l(r.name, t, r.id, r.flags) : r)
                }
                return new c(e)
            }
        }
        const u = new WeakMap
            , d = new WeakMap;
        var h;
        !function (e) {
            e[e.ExcludeBuffers = 1] = "ExcludeBuffers",
                e[e.IncludeAnonymous = 2] = "IncludeAnonymous",
                e[e.IgnoreMounts = 4] = "IgnoreMounts",
                e[e.IgnoreOverlays = 8] = "IgnoreOverlays"
        }(h || (h = {}));
        class f {
            constructor(e, t, n, i, r) {
                if (this.type = e,
                    this.children = t,
                    this.positions = n,
                    this.length = i,
                    this.props = null,
                    r && r.length) {
                    this.props = Object.create(null);
                    for (let [e, t] of r)
                        this.props["number" == typeof e ? e : e.id] = t
                }
            }
            toString() {
                let e = O.get(this);
                if (e && !e.overlay)
                    return e.tree.toString();
                let t = "";
                for (let n of this.children) {
                    let e = n.toString();
                    e && (t && (t += ","),
                        t += e)
                }
                return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t
            }
            cursor() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                return new w(this.topNode, e)
            }
            cursorAt(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = u.get(this) || this.topNode
                    , i = new w(n);
                return i.moveTo(e, t),
                    u.set(this, i._tree),
                    i
            }
            get topNode() {
                return new b(this, 0, 0, null)
            }
            resolve(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = Q(u.get(this) || this.topNode, e, t, !1);
                return u.set(this, n),
                    n
            }
            resolveInner(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = Q(d.get(this) || this.topNode, e, t, !0);
                return d.set(this, n),
                    n
            }
            resolveStack(e) {
                return function (e, t, n) {
                    let i = e.resolveInner(t, n)
                        , r = null;
                    for (let a = i instanceof b ? i : i.context.parent; a; a = a.parent)
                        if (a.index < 0) {
                            let e = a.parent;
                            (r || (r = [i])).push(e.resolve(t, n)),
                                a = e
                        } else {
                            let e = O.get(a.tree);
                            if (e && e.overlay && e.overlay[0].from <= t && e.overlay[e.overlay.length - 1].to >= t) {
                                let o = new b(e.tree, e.overlay[0].from + a.from, -1, a);
                                (r || (r = [i])).push(Q(o, t, n, !1))
                            }
                        }
                    return r ? x(r) : i
                }(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0)
            }
            iterate(e) {
                let { enter: t, leave: n, from: i = 0, to: r = this.length } = e
                    , a = e.mode || 0
                    , o = (a & h.IncludeAnonymous) > 0;
                for (let O = this.cursor(a | h.IncludeAnonymous); ;) {
                    let e = !1;
                    if (O.from <= r && O.to >= i && (!o && O.type.isAnonymous || !1 !== t(O))) {
                        if (O.firstChild())
                            continue;
                        e = !0
                    }
                    for (; e && n && (o || !O.type.isAnonymous) && n(O),
                        !O.nextSibling();) {
                        if (!O.parent())
                            return;
                        e = !0
                    }
                }
            }
            prop(e) {
                return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e)
            }
            get propValues() {
                let e = [];
                if (this.props)
                    for (let t in this.props)
                        e.push([+t, this.props[t]]);
                return e
            }
            balance() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return this.children.length <= 8 ? this : z(l.none, this.children, this.positions, 0, this.children.length, 0, this.length, ((e, t, n) => new f(this.type, e, t, n, this.propValues)), e.makeTree || ((e, t, n) => new f(l.none, e, t, n)))
            }
            static build(e) {
                return function (e) {
                    var t;
                    let { buffer: n, nodeSet: r, maxBufferLength: a = i, reused: O = [], minRepeatType: s = r.types.length } = e
                        , l = Array.isArray(n) ? new p(n, n.length) : n
                        , c = r.types
                        , u = 0
                        , d = 0;
                    function h(e, t, n, i, o, f) {
                        let { id: p, start: P, end: v, size: x } = l
                            , k = d;
                        for (; x < 0;) {
                            if (l.next(),
                                -1 == x) {
                                let t = O[p];
                                return n.push(t),
                                    void i.push(P - e)
                            }
                            if (-3 == x)
                                return void (u = p);
                            if (-4 == x)
                                return void (d = p);
                            throw new RangeError(`Unrecognized record size: ${x}`)
                        }
                        let w, X, _ = c[p], T = P - e;
                        if (v - P <= a && (X = y(l.pos - t, o))) {
                            let t = new Uint16Array(X.size - X.skip)
                                , n = l.pos - X.size
                                , i = t.length;
                            for (; l.pos > n;)
                                i = S(X.start, t, i);
                            w = new m(t, v - X.start, r),
                                T = X.start - e
                        } else {
                            let e = l.pos - x;
                            l.next();
                            let t = []
                                , n = []
                                , i = p >= s ? p : -1
                                , r = 0
                                , o = v;
                            for (; l.pos > e;)
                                i >= 0 && l.id == i && l.size >= 0 ? (l.end <= o - a && ($(t, n, P, r, l.end, o, i, k),
                                    r = t.length,
                                    o = l.end),
                                    l.next()) : f > 2500 ? g(P, e, t, n) : h(P, e, t, n, i, f + 1);
                            if (i >= 0 && r > 0 && r < t.length && $(t, n, P, r, P, o, i, k),
                                t.reverse(),
                                n.reverse(),
                                i > -1 && r > 0) {
                                let e = Q(_);
                                w = z(_, t, n, 0, t.length, 0, v - P, e, e)
                            } else
                                w = b(_, t, n, v - P, k - v)
                        }
                        n.push(w),
                            i.push(T)
                    }
                    function g(e, t, n, i) {
                        let o = []
                            , O = 0
                            , s = -1;
                        for (; l.pos > t;) {
                            let { id: e, start: t, end: n, size: i } = l;
                            if (i > 4)
                                l.next();
                            else {
                                if (s > -1 && t < s)
                                    break;
                                s < 0 && (s = n - a),
                                    o.push(e, t, n),
                                    O++,
                                    l.next()
                            }
                        }
                        if (O) {
                            let t = new Uint16Array(4 * O)
                                , a = o[o.length - 2];
                            for (let e = o.length - 3, n = 0; e >= 0; e -= 3)
                                t[n++] = o[e],
                                    t[n++] = o[e + 1] - a,
                                    t[n++] = o[e + 2] - a,
                                    t[n++] = n;
                            n.push(new m(t, o[2] - a, r)),
                                i.push(a - e)
                        }
                    }
                    function Q(e) {
                        return (t, n, i) => {
                            let r, a, O = 0, s = t.length - 1;
                            if (s >= 0 && (r = t[s]) instanceof f) {
                                if (!s && r.type == e && r.length == i)
                                    return r;
                                (a = r.prop(o.lookAhead)) && (O = n[s] + r.length + a)
                            }
                            return b(e, t, n, i, O)
                        }
                    }
                    function $(e, t, n, i, a, o, O, s) {
                        let l = []
                            , c = [];
                        for (; e.length > i;)
                            l.push(e.pop()),
                                c.push(t.pop() + n - a);
                        e.push(b(r.types[O], l, c, o - a, s - o)),
                            t.push(a - n)
                    }
                    function b(e, t, n, i) {
                        let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0
                            , a = arguments.length > 5 ? arguments[5] : void 0;
                        if (u) {
                            let e = [o.contextHash, u];
                            a = a ? [e].concat(a) : [e]
                        }
                        if (r > 25) {
                            let e = [o.lookAhead, r];
                            a = a ? [e].concat(a) : [e]
                        }
                        return new f(e, t, n, i, a)
                    }
                    function y(e, t) {
                        let n = l.fork()
                            , i = 0
                            , r = 0
                            , o = 0
                            , O = n.end - a
                            , c = {
                                size: 0,
                                start: 0,
                                skip: 0
                            };
                        e: for (let a = n.pos - e; n.pos > a;) {
                            let e = n.size;
                            if (n.id == t && e >= 0) {
                                c.size = i,
                                    c.start = r,
                                    c.skip = o,
                                    o += 4,
                                    i += 4,
                                    n.next();
                                continue
                            }
                            let l = n.pos - e;
                            if (e < 0 || l < a || n.start < O)
                                break;
                            let u = n.id >= s ? 4 : 0
                                , d = n.start;
                            for (n.next(); n.pos > l;) {
                                if (n.size < 0) {
                                    if (-3 != n.size)
                                        break e;
                                    u += 4
                                } else
                                    n.id >= s && (u += 4);
                                n.next()
                            }
                            r = d,
                                i += e,
                                o += u
                        }
                        return (t < 0 || i == e) && (c.size = i,
                            c.start = r,
                            c.skip = o),
                            c.size > 4 ? c : void 0
                    }
                    function S(e, t, n) {
                        let { id: i, start: r, end: a, size: o } = l;
                        if (l.next(),
                            o >= 0 && i < s) {
                            let O = n;
                            if (o > 4) {
                                let i = l.pos - (o - 4);
                                for (; l.pos > i;)
                                    n = S(e, t, n)
                            }
                            t[--n] = O,
                                t[--n] = a - e,
                                t[--n] = r - e,
                                t[--n] = i
                        } else
                            -3 == o ? u = i : -4 == o && (d = i);
                        return n
                    }
                    let P = []
                        , v = [];
                    for (; l.pos > 0;)
                        h(e.start || 0, e.bufferStart || 0, P, v, -1, 0);
                    let x = null !== (t = e.length) && void 0 !== t ? t : P.length ? v[0] + P[0].length : 0;
                    return new f(c[e.topID], P.reverse(), v.reverse(), x)
                }(e)
            }
        }
        f.empty = new f(l.none, [], [], 0);
        class p {
            constructor(e, t) {
                this.buffer = e,
                    this.index = t
            }
            get id() {
                return this.buffer[this.index - 4]
            }
            get start() {
                return this.buffer[this.index - 3]
            }
            get end() {
                return this.buffer[this.index - 2]
            }
            get size() {
                return this.buffer[this.index - 1]
            }
            get pos() {
                return this.index
            }
            next() {
                this.index -= 4
            }
            fork() {
                return new p(this.buffer, this.index)
            }
        }
        class m {
            constructor(e, t, n) {
                this.buffer = e,
                    this.length = t,
                    this.set = n
            }
            get type() {
                return l.none
            }
            toString() {
                let e = [];
                for (let t = 0; t < this.buffer.length;)
                    e.push(this.childString(t)),
                        t = this.buffer[t + 3];
                return e.join(",")
            }
            childString(e) {
                let t = this.buffer[e]
                    , n = this.buffer[e + 3]
                    , i = this.set.types[t]
                    , r = i.name;
                if (/\W/.test(r) && !i.isError && (r = JSON.stringify(r)),
                    n == (e += 4))
                    return r;
                let a = [];
                for (; e < n;)
                    a.push(this.childString(e)),
                        e = this.buffer[e + 3];
                return r + "(" + a.join(",") + ")"
            }
            findChild(e, t, n, i, r) {
                let { buffer: a } = this
                    , o = -1;
                for (let O = e; O != t && !(g(r, i, a[O + 1], a[O + 2]) && (o = O,
                    n > 0)); O = a[O + 3])
                    ;
                return o
            }
            slice(e, t, n) {
                let i = this.buffer
                    , r = new Uint16Array(t - e)
                    , a = 0;
                for (let o = e, O = 0; o < t;) {
                    r[O++] = i[o++],
                        r[O++] = i[o++] - n;
                    let t = r[O++] = i[o++] - n;
                    r[O++] = i[o++] - e,
                        a = Math.max(a, t)
                }
                return new m(r, a, this.set)
            }
        }
        function g(e, t, n, i) {
            switch (e) {
                case -2:
                    return n < t;
                case -1:
                    return i >= t && n < t;
                case 0:
                    return n < t && i > t;
                case 1:
                    return n <= t && i > t;
                case 2:
                    return i > t;
                case 4:
                    return !0
            }
        }
        function Q(e, t, n, i) {
            for (var r; e.from == e.to || (n < 1 ? e.from >= t : e.from > t) || (n > -1 ? e.to <= t : e.to < t);) {
                let t = !i && e instanceof b && e.index < 0 ? null : e.parent;
                if (!t)
                    return e;
                e = t
            }
            let a = i ? 0 : h.IgnoreOverlays;
            if (i)
                for (let o = e, O = o.parent; O; o = O,
                    O = o.parent)
                    o instanceof b && o.index < 0 && (null === (r = O.enter(t, n, a)) || void 0 === r ? void 0 : r.from) != o.from && (e = O);
            for (; ;) {
                let i = e.enter(t, n, a);
                if (!i)
                    return e;
                e = i
            }
        }
        class $ {
            cursor() {
                return new w(this, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0)
            }
            getChild(e) {
                let t = y(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null);
                return t.length ? t[0] : null
            }
            getChildren(e) {
                return y(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null)
            }
            resolve(e) {
                return Q(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, !1)
            }
            resolveInner(e) {
                return Q(this, e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, !0)
            }
            matchContext(e) {
                return S(this, e)
            }
            enterUnfinishedNodesBefore(e) {
                let t = this.childBefore(e)
                    , n = this;
                for (; t;) {
                    let e = t.lastChild;
                    if (!e || e.to != t.to)
                        break;
                    e.type.isError && e.from == e.to ? (n = t,
                        t = e.prevSibling) : t = e
                }
                return n
            }
            get node() {
                return this
            }
            get next() {
                return this.parent
            }
        }
        class b extends $ {
            constructor(e, t, n, i) {
                super(),
                    this._tree = e,
                    this.from = t,
                    this.index = n,
                    this._parent = i
            }
            get type() {
                return this._tree.type
            }
            get name() {
                return this._tree.type.name
            }
            get to() {
                return this.from + this._tree.length
            }
            nextChild(e, t, n, i) {
                let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                for (let a = this; ;) {
                    for (let { children: o, positions: s } = a._tree, l = t > 0 ? o.length : -1; e != l; e += t) {
                        let l = o[e]
                            , c = s[e] + a.from;
                        if (g(i, n, c, c + l.length))
                            if (l instanceof m) {
                                if (r & h.ExcludeBuffers)
                                    continue;
                                let o = l.findChild(0, l.buffer.length, t, n - c, i);
                                if (o > -1)
                                    return new v(new P(a, l, e, c), null, o)
                            } else if (r & h.IncludeAnonymous || !l.type.isAnonymous || X(l)) {
                                let o;
                                if (!(r & h.IgnoreMounts) && (o = O.get(l)) && !o.overlay)
                                    return new b(o.tree, c, e, a);
                                let s = new b(l, c, e, a);
                                return r & h.IncludeAnonymous || !s.type.isAnonymous ? s : s.nextChild(t < 0 ? l.children.length - 1 : 0, t, n, i)
                            }
                    }
                    if (r & h.IncludeAnonymous || !a.type.isAnonymous)
                        return null;
                    if (e = a.index >= 0 ? a.index + t : t < 0 ? -1 : a._parent._tree.children.length,
                        a = a._parent,
                        !a)
                        return null
                }
            }
            get firstChild() {
                return this.nextChild(0, 1, 0, 4)
            }
            get lastChild() {
                return this.nextChild(this._tree.children.length - 1, -1, 0, 4)
            }
            childAfter(e) {
                return this.nextChild(0, 1, e, 2)
            }
            childBefore(e) {
                return this.nextChild(this._tree.children.length - 1, -1, e, -2)
            }
            enter(e, t) {
                let n, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                if (!(i & h.IgnoreOverlays) && (n = O.get(this._tree)) && n.overlay) {
                    let i = e - this.from;
                    for (let { from: e, to: r } of n.overlay)
                        if ((t > 0 ? e <= i : e < i) && (t < 0 ? r >= i : r > i))
                            return new b(n.tree, n.overlay[0].from + this.from, -1, this)
                }
                return this.nextChild(0, 1, e, t, i)
            }
            nextSignificantParent() {
                let e = this;
                for (; e.type.isAnonymous && e._parent;)
                    e = e._parent;
                return e
            }
            get parent() {
                return this._parent ? this._parent.nextSignificantParent() : null
            }
            get nextSibling() {
                return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4) : null
            }
            get prevSibling() {
                return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4) : null
            }
            get tree() {
                return this._tree
            }
            toTree() {
                return this._tree
            }
            toString() {
                return this._tree.toString()
            }
        }
        function y(e, t, n, i) {
            let r = e.cursor()
                , a = [];
            if (!r.firstChild())
                return a;
            if (null != n)
                for (let o = !1; !o;)
                    if (o = r.type.is(n),
                        !r.nextSibling())
                        return a;
            for (; ;) {
                if (null != i && r.type.is(i))
                    return a;
                if (r.type.is(t) && a.push(r.node),
                    !r.nextSibling())
                    return null == i ? a : []
            }
        }
        function S(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t.length - 1;
            for (let i = e.parent; n >= 0; i = i.parent) {
                if (!i)
                    return !1;
                if (!i.type.isAnonymous) {
                    if (t[n] && t[n] != i.name)
                        return !1;
                    n--
                }
            }
            return !0
        }
        class P {
            constructor(e, t, n, i) {
                this.parent = e,
                    this.buffer = t,
                    this.index = n,
                    this.start = i
            }
        }
        class v extends $ {
            get name() {
                return this.type.name
            }
            get from() {
                return this.context.start + this.context.buffer.buffer[this.index + 1]
            }
            get to() {
                return this.context.start + this.context.buffer.buffer[this.index + 2]
            }
            constructor(e, t, n) {
                super(),
                    this.context = e,
                    this._parent = t,
                    this.index = n,
                    this.type = e.buffer.set.types[e.buffer.buffer[n]]
            }
            child(e, t, n) {
                let { buffer: i } = this.context
                    , r = i.findChild(this.index + 4, i.buffer[this.index + 3], e, t - this.context.start, n);
                return r < 0 ? null : new v(this.context, this, r)
            }
            get firstChild() {
                return this.child(1, 0, 4)
            }
            get lastChild() {
                return this.child(-1, 0, 4)
            }
            childAfter(e) {
                return this.child(1, e, 2)
            }
            childBefore(e) {
                return this.child(-1, e, -2)
            }
            enter(e, t) {
                if ((arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0) & h.ExcludeBuffers)
                    return null;
                let { buffer: n } = this.context
                    , i = n.findChild(this.index + 4, n.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
                return i < 0 ? null : new v(this.context, this, i)
            }
            get parent() {
                return this._parent || this.context.parent.nextSignificantParent()
            }
            externalSibling(e) {
                return this._parent ? null : this.context.parent.nextChild(this.context.index + e, e, 0, 4)
            }
            get nextSibling() {
                let { buffer: e } = this.context
                    , t = e.buffer[this.index + 3];
                return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new v(this.context, this._parent, t) : this.externalSibling(1)
            }
            get prevSibling() {
                let { buffer: e } = this.context
                    , t = this._parent ? this._parent.index + 4 : 0;
                return this.index == t ? this.externalSibling(-1) : new v(this.context, this._parent, e.findChild(t, this.index, -1, 0, 4))
            }
            get tree() {
                return null
            }
            toTree() {
                let e = []
                    , t = []
                    , { buffer: n } = this.context
                    , i = this.index + 4
                    , r = n.buffer[this.index + 3];
                if (r > i) {
                    let a = n.buffer[this.index + 1];
                    e.push(n.slice(i, r, a)),
                        t.push(0)
                }
                return new f(this.type, e, t, this.to - this.from)
            }
            toString() {
                return this.context.buffer.childString(this.index)
            }
        }
        function x(e) {
            if (!e.length)
                return null;
            let t = 0
                , n = e[0];
            for (let a = 1; a < e.length; a++) {
                let i = e[a];
                (i.from > n.from || i.to < n.to) && (n = i,
                    t = a)
            }
            let i = n instanceof b && n.index < 0 ? null : n.parent
                , r = e.slice();
            return i ? r[t] = i : r.splice(t, 1),
                new k(r, n)
        }
        class k {
            constructor(e, t) {
                this.heads = e,
                    this.node = t
            }
            get next() {
                return x(this.heads)
            }
        }
        class w {
            get name() {
                return this.type.name
            }
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (this.mode = t,
                    this.buffer = null,
                    this.stack = [],
                    this.index = 0,
                    this.bufferNode = null,
                    e instanceof b)
                    this.yieldNode(e);
                else {
                    this._tree = e.context.parent,
                        this.buffer = e.context;
                    for (let t = e._parent; t; t = t._parent)
                        this.stack.unshift(t.index);
                    this.bufferNode = e,
                        this.yieldBuf(e.index)
                }
            }
            yieldNode(e) {
                return !!e && (this._tree = e,
                    this.type = e.type,
                    this.from = e.from,
                    this.to = e.to,
                    !0)
            }
            yieldBuf(e, t) {
                this.index = e;
                let { start: n, buffer: i } = this.buffer;
                return this.type = t || i.set.types[i.buffer[e]],
                    this.from = n + i.buffer[e + 1],
                    this.to = n + i.buffer[e + 2],
                    !0
            }
            yield(e) {
                return !!e && (e instanceof b ? (this.buffer = null,
                    this.yieldNode(e)) : (this.buffer = e.context,
                        this.yieldBuf(e.index, e.type)))
            }
            toString() {
                return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString()
            }
            enterChild(e, t, n) {
                if (!this.buffer)
                    return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, n, this.mode));
                let { buffer: i } = this.buffer
                    , r = i.findChild(this.index + 4, i.buffer[this.index + 3], e, t - this.buffer.start, n);
                return !(r < 0) && (this.stack.push(this.index),
                    this.yieldBuf(r))
            }
            firstChild() {
                return this.enterChild(1, 0, 4)
            }
            lastChild() {
                return this.enterChild(-1, 0, 4)
            }
            childAfter(e) {
                return this.enterChild(1, e, 2)
            }
            childBefore(e) {
                return this.enterChild(-1, e, -2)
            }
            enter(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.mode;
                return this.buffer ? !(n & h.ExcludeBuffers) && this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, n))
            }
            parent() {
                if (!this.buffer)
                    return this.yieldNode(this.mode & h.IncludeAnonymous ? this._tree._parent : this._tree.parent);
                if (this.stack.length)
                    return this.yieldBuf(this.stack.pop());
                let e = this.mode & h.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
                return this.buffer = null,
                    this.yieldNode(e)
            }
            sibling(e) {
                if (!this.buffer)
                    return !!this._tree._parent && this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode));
                let { buffer: t } = this.buffer
                    , n = this.stack.length - 1;
                if (e < 0) {
                    let e = n < 0 ? 0 : this.stack[n] + 4;
                    if (this.index != e)
                        return this.yieldBuf(t.findChild(e, this.index, -1, 0, 4))
                } else {
                    let e = t.buffer[this.index + 3];
                    if (e < (n < 0 ? t.buffer.length : t.buffer[this.stack[n] + 3]))
                        return this.yieldBuf(e)
                }
                return n < 0 && this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode))
            }
            nextSibling() {
                return this.sibling(1)
            }
            prevSibling() {
                return this.sibling(-1)
            }
            atLastNode(e) {
                let t, n, { buffer: i } = this;
                if (i) {
                    if (e > 0) {
                        if (this.index < i.buffer.buffer.length)
                            return !1
                    } else
                        for (let e = 0; e < this.index; e++)
                            if (i.buffer.buffer[e + 3] < this.index)
                                return !1;
                    ({ index: t, parent: n } = i)
                } else
                    ({ index: t, _parent: n } = this._tree);
                for (; n; ({ index: t, _parent: n } = n))
                    if (t > -1)
                        for (let i = t + e, r = e < 0 ? -1 : n._tree.children.length; i != r; i += e) {
                            let e = n._tree.children[i];
                            if (this.mode & h.IncludeAnonymous || e instanceof m || !e.type.isAnonymous || X(e))
                                return !1
                        }
                return !0
            }
            move(e, t) {
                if (t && this.enterChild(e, 0, 4))
                    return !0;
                for (; ;) {
                    if (this.sibling(e))
                        return !0;
                    if (this.atLastNode(e) || !this.parent())
                        return !1
                }
            }
            next() {
                let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                return this.move(1, e)
            }
            prev() {
                let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                return this.move(-1, e)
            }
            moveTo(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent();)
                    ;
                for (; this.enterChild(1, e, t);)
                    ;
                return this
            }
            get node() {
                if (!this.buffer)
                    return this._tree;
                let e = this.bufferNode
                    , t = null
                    , n = 0;
                if (e && e.context == this.buffer)
                    e: for (let i = this.index, r = this.stack.length; r >= 0;) {
                        for (let a = e; a; a = a._parent)
                            if (a.index == i) {
                                if (i == this.index)
                                    return a;
                                t = a,
                                    n = r + 1;
                                break e
                            }
                        i = this.stack[--r]
                    }
                for (let i = n; i < this.stack.length; i++)
                    t = new v(this.buffer, t, this.stack[i]);
                return this.bufferNode = new v(this.buffer, t, this.index)
            }
            get tree() {
                return this.buffer ? null : this._tree._tree
            }
            iterate(e, t) {
                for (let n = 0; ;) {
                    let i = !1;
                    if (this.type.isAnonymous || !1 !== e(this)) {
                        if (this.firstChild()) {
                            n++;
                            continue
                        }
                        this.type.isAnonymous || (i = !0)
                    }
                    for (; i && t && t(this),
                        i = this.type.isAnonymous,
                        !this.nextSibling();) {
                        if (!n)
                            return;
                        this.parent(),
                            n--,
                            i = !0
                    }
                }
            }
            matchContext(e) {
                if (!this.buffer)
                    return S(this.node, e);
                let { buffer: t } = this.buffer
                    , { types: n } = t.set;
                for (let i = e.length - 1, r = this.stack.length - 1; i >= 0; r--) {
                    if (r < 0)
                        return S(this.node, e, i);
                    let a = n[t.buffer[this.stack[r]]];
                    if (!a.isAnonymous) {
                        if (e[i] && e[i] != a.name)
                            return !1;
                        i--
                    }
                }
                return !0
            }
        }
        function X(e) {
            return e.children.some((e => e instanceof m || !e.type.isAnonymous || X(e)))
        }
        const _ = new WeakMap;
        function T(e, t) {
            if (!e.isAnonymous || t instanceof m || t.type != e)
                return 1;
            let n = _.get(t);
            if (null == n) {
                n = 1;
                for (let i of t.children) {
                    if (i.type != e || !(i instanceof f)) {
                        n = 1;
                        break
                    }
                    n += T(e, i)
                }
                _.set(t, n)
            }
            return n
        }
        function z(e, t, n, i, r, a, o, O, s) {
            let l = 0;
            for (let h = i; h < r; h++)
                l += T(e, t[h]);
            let c = Math.ceil(1.5 * l / 8)
                , u = []
                , d = [];
            return function t(n, i, r, o, O) {
                for (let l = r; l < o;) {
                    let r = l
                        , h = i[l]
                        , f = T(e, n[l]);
                    for (l++; l < o; l++) {
                        let t = T(e, n[l]);
                        if (f + t >= c)
                            break;
                        f += t
                    }
                    if (l == r + 1) {
                        if (f > c) {
                            let e = n[r];
                            t(e.children, e.positions, 0, e.children.length, i[r] + O);
                            continue
                        }
                        u.push(n[r])
                    } else {
                        let t = i[l - 1] + n[l - 1].length - h;
                        u.push(z(e, n, i, r, l, h, t, null, s))
                    }
                    d.push(h + O - a)
                }
            }(t, n, i, r, 0),
                (O || s)(u, d, o)
        }
        class R {
            constructor() {
                this.map = new WeakMap
            }
            setBuffer(e, t, n) {
                let i = this.map.get(e);
                i || this.map.set(e, i = new Map),
                    i.set(t, n)
            }
            getBuffer(e, t) {
                let n = this.map.get(e);
                return n && n.get(t)
            }
            set(e, t) {
                e instanceof v ? this.setBuffer(e.context.buffer, e.index, t) : e instanceof b && this.map.set(e.tree, t)
            }
            get(e) {
                return e instanceof v ? this.getBuffer(e.context.buffer, e.index) : e instanceof b ? this.map.get(e.tree) : void 0
            }
            cursorSet(e, t) {
                e.buffer ? this.setBuffer(e.buffer.buffer, e.index, t) : this.map.set(e.tree, t)
            }
            cursorGet(e) {
                return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree)
            }
        }
        class W {
            constructor(e, t, n, i) {
                let r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4]
                    , a = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
                this.from = e,
                    this.to = t,
                    this.tree = n,
                    this.offset = i,
                    this.open = (r ? 1 : 0) | (a ? 2 : 0)
            }
            get openStart() {
                return (1 & this.open) > 0
            }
            get openEnd() {
                return (2 & this.open) > 0
            }
            static addTree(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []
                    , n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                    , i = [new W(0, e.length, e, 0, !1, n)];
                for (let r of t)
                    r.to > e.length && i.push(r);
                return i
            }
            static applyChanges(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 128;
                if (!t.length)
                    return e;
                let i = []
                    , r = 1
                    , a = e.length ? e[0] : null;
                for (let o = 0, O = 0, s = 0; ; o++) {
                    let l = o < t.length ? t[o] : null
                        , c = l ? l.fromA : 1e9;
                    if (c - O >= n)
                        for (; a && a.from < c;) {
                            let t = a;
                            if (O >= t.from || c <= t.to || s) {
                                let e = Math.max(t.from, O) - s
                                    , n = Math.min(t.to, c) - s;
                                t = e >= n ? null : new W(e, n, t.tree, t.offset + s, o > 0, !!l)
                            }
                            if (t && i.push(t),
                                a.to > c)
                                break;
                            a = r < e.length ? e[r++] : null
                        }
                    if (!l)
                        break;
                    O = l.toA,
                        s = l.toA - l.toB
                }
                return i
            }
        }
        class Z {
            startParse(e, t, n) {
                return "string" == typeof e && (e = new q(e)),
                    n = n ? n.length ? n.map((e => new a(e.from, e.to))) : [new a(0, 0)] : [new a(0, e.length)],
                    this.createParse(e, t || [], n)
            }
            parse(e, t, n) {
                let i = this.startParse(e, t, n);
                for (; ;) {
                    let e = i.advance();
                    if (e)
                        return e
                }
            }
        }
        class q {
            constructor(e) {
                this.string = e
            }
            get length() {
                return this.string.length
            }
            chunk(e) {
                return this.string.slice(e)
            }
            get lineChunks() {
                return !1
            }
            read(e, t) {
                return this.string.slice(e, t)
            }
        }
        function U(e) {
            return (t, n, i, r) => new j(t, e, n, i, r)
        }
        class Y {
            constructor(e, t, n, i, r) {
                this.parser = e,
                    this.parse = t,
                    this.overlay = n,
                    this.target = i,
                    this.from = r
            }
        }
        function A(e) {
            if (!e.length || e.some((e => e.from >= e.to)))
                throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(e))
        }
        class V {
            constructor(e, t, n, i, r, a, o) {
                this.parser = e,
                    this.predicate = t,
                    this.mounts = n,
                    this.index = i,
                    this.start = r,
                    this.target = a,
                    this.prev = o,
                    this.depth = 0,
                    this.ranges = []
            }
        }
        const E = new o({
            perNode: !0
        });
        class j {
            constructor(e, t, n, i, r) {
                this.nest = t,
                    this.input = n,
                    this.fragments = i,
                    this.ranges = r,
                    this.inner = [],
                    this.innerDone = 0,
                    this.baseTree = null,
                    this.stoppedAt = null,
                    this.baseParse = e
            }
            advance() {
                if (this.baseParse) {
                    let e = this.baseParse.advance();
                    if (!e)
                        return null;
                    if (this.baseParse = null,
                        this.baseTree = e,
                        this.startInner(),
                        null != this.stoppedAt)
                        for (let t of this.inner)
                            t.parse.stopAt(this.stoppedAt)
                }
                if (this.innerDone == this.inner.length) {
                    let e = this.baseTree;
                    return null != this.stoppedAt && (e = new f(e.type, e.children, e.positions, e.length, e.propValues.concat([[E, this.stoppedAt]]))),
                        e
                }
                let e = this.inner[this.innerDone]
                    , t = e.parse.advance();
                if (t) {
                    this.innerDone++;
                    let n = Object.assign(Object.create(null), e.target.props);
                    n[o.mounted.id] = new O(t, e.overlay, e.parser),
                        e.target.props = n
                }
                return null
            }
            get parsedPos() {
                if (this.baseParse)
                    return 0;
                let e = this.input.length;
                for (let t = this.innerDone; t < this.inner.length; t++)
                    this.inner[t].from < e && (e = Math.min(e, this.inner[t].parse.parsedPos));
                return e
            }
            stopAt(e) {
                if (this.stoppedAt = e,
                    this.baseParse)
                    this.baseParse.stopAt(e);
                else
                    for (let t = this.innerDone; t < this.inner.length; t++)
                        this.inner[t].parse.stopAt(e)
            }
            startInner() {
                let e = new N(this.fragments)
                    , t = null
                    , n = null
                    , i = new w(new b(this.baseTree, this.ranges[0].from, 0, null), h.IncludeAnonymous | h.IgnoreMounts);
                e: for (let r, o; ;) {
                    let O, s = !0;
                    if (null != this.stoppedAt && i.from >= this.stoppedAt)
                        s = !1;
                    else if (e.hasNode(i)) {
                        if (t) {
                            let e = t.mounts.find((e => e.frag.from <= i.from && e.frag.to >= i.to && e.mount.overlay));
                            if (e)
                                for (let n of e.mount.overlay) {
                                    let r = n.from + e.pos
                                        , a = n.to + e.pos;
                                    r >= i.from && a <= i.to && !t.ranges.some((e => e.from < a && e.to > r)) && t.ranges.push({
                                        from: r,
                                        to: a
                                    })
                                }
                        }
                        s = !1
                    } else if (n && (o = C(n.ranges, i.from, i.to)))
                        s = 2 != o;
                    else if (!i.type.isAnonymous && (r = this.nest(i, this.input)) && (i.from < i.to || !r.overlay)) {
                        i.tree || I(i);
                        let o = e.findMounts(i.from, r.parser);
                        if ("function" == typeof r.overlay)
                            t = new V(r.parser, r.overlay, o, this.inner.length, i.from, i.tree, t);
                        else {
                            let e = L(this.ranges, r.overlay || (i.from < i.to ? [new a(i.from, i.to)] : []));
                            e.length && A(e),
                                !e.length && r.overlay || this.inner.push(new Y(r.parser, e.length ? r.parser.startParse(this.input, F(o, e), e) : r.parser.startParse(""), r.overlay ? r.overlay.map((e => new a(e.from - i.from, e.to - i.from))) : null, i.tree, e.length ? e[0].from : i.from)),
                                r.overlay ? e.length && (n = {
                                    ranges: e,
                                    depth: 0,
                                    prev: n
                                }) : s = !1
                        }
                    } else
                        t && (O = t.predicate(i)) && (!0 === O && (O = new a(i.from, i.to)),
                            O.from < O.to && t.ranges.push(O));
                    if (s && i.firstChild())
                        t && t.depth++,
                            n && n.depth++;
                    else
                        for (; !i.nextSibling();) {
                            if (!i.parent())
                                break e;
                            if (t && !--t.depth) {
                                let e = L(this.ranges, t.ranges);
                                e.length && (A(e),
                                    this.inner.splice(t.index, 0, new Y(t.parser, t.parser.startParse(this.input, F(t.mounts, e), e), t.ranges.map((e => new a(e.from - t.start, e.to - t.start))), t.target, e[0].from))),
                                    t = t.prev
                            }
                            n && !--n.depth && (n = n.prev)
                        }
                }
            }
        }
        function C(e, t, n) {
            for (let i of e) {
                if (i.from >= n)
                    break;
                if (i.to > t)
                    return i.from <= t && i.to >= n ? 2 : 1
            }
            return 0
        }
        function G(e, t, n, i, r, a) {
            if (t < n) {
                let o = e.buffer[t + 1];
                i.push(e.slice(t, n, o)),
                    r.push(o - a)
            }
        }
        function I(e) {
            let { node: t } = e
                , n = []
                , i = t.context.buffer;
            do {
                n.push(e.index),
                    e.parent()
            } while (!e.tree);
            let r = e.tree
                , a = r.children.indexOf(i)
                , o = r.children[a]
                , O = o.buffer
                , s = [a];
            r.children[a] = function e(i, r, a, l, c, u) {
                let d = n[u]
                    , h = []
                    , p = [];
                G(o, i, d, h, p, l);
                let m = O[d + 1]
                    , g = O[d + 2];
                s.push(h.length);
                let Q = u ? e(d + 4, O[d + 3], o.set.types[O[d]], m, g - m, u - 1) : t.toTree();
                return h.push(Q),
                    p.push(m - l),
                    G(o, O[d + 3], r, h, p, l),
                    new f(a, h, p, c)
            }(0, O.length, l.none, 0, o.length, n.length - 1);
            for (let l of s) {
                let t = e.tree.children[l]
                    , n = e.tree.positions[l];
                e.yield(new b(t, n + e.from, l, e._tree))
            }
        }
        class D {
            constructor(e, t) {
                this.offset = t,
                    this.done = !1,
                    this.cursor = e.cursor(h.IncludeAnonymous | h.IgnoreMounts)
            }
            moveTo(e) {
                let { cursor: t } = this
                    , n = e - this.offset;
                for (; !this.done && t.from < n;)
                    t.to >= e && t.enter(n, 1, h.IgnoreOverlays | h.ExcludeBuffers) || t.next(!1) || (this.done = !0)
            }
            hasNode(e) {
                if (this.moveTo(e.from),
                    !this.done && this.cursor.from + this.offset == e.from && this.cursor.tree)
                    for (let t = this.cursor.tree; ;) {
                        if (t == e.tree)
                            return !0;
                        if (!(t.children.length && 0 == t.positions[0] && t.children[0] instanceof f))
                            break;
                        t = t.children[0]
                    }
                return !1
            }
        }
        class N {
            constructor(e) {
                var t;
                if (this.fragments = e,
                    this.curTo = 0,
                    this.fragI = 0,
                    e.length) {
                    let n = this.curFrag = e[0];
                    this.curTo = null !== (t = n.tree.prop(E)) && void 0 !== t ? t : n.to,
                        this.inner = new D(n.tree, -n.offset)
                } else
                    this.curFrag = this.inner = null
            }
            hasNode(e) {
                for (; this.curFrag && e.from >= this.curTo;)
                    this.nextFrag();
                return this.curFrag && this.curFrag.from <= e.from && this.curTo >= e.to && this.inner.hasNode(e)
            }
            nextFrag() {
                var e;
                if (this.fragI++,
                    this.fragI == this.fragments.length)
                    this.curFrag = this.inner = null;
                else {
                    let t = this.curFrag = this.fragments[this.fragI];
                    this.curTo = null !== (e = t.tree.prop(E)) && void 0 !== e ? e : t.to,
                        this.inner = new D(t.tree, -t.offset)
                }
            }
            findMounts(e, t) {
                var n;
                let i = [];
                if (this.inner) {
                    this.inner.cursor.moveTo(e, 1);
                    for (let e = this.inner.cursor.node; e; e = e.parent) {
                        let r = null === (n = e.tree) || void 0 === n ? void 0 : n.prop(o.mounted);
                        if (r && r.parser == t)
                            for (let t = this.fragI; t < this.fragments.length; t++) {
                                let n = this.fragments[t];
                                if (n.from >= e.to)
                                    break;
                                n.tree == this.curFrag.tree && i.push({
                                    frag: n,
                                    pos: e.from - n.offset,
                                    mount: r
                                })
                            }
                    }
                }
                return i
            }
        }
        function L(e, t) {
            let n = null
                , i = t;
            for (let r = 1, o = 0; r < e.length; r++) {
                let O = e[r - 1].to
                    , s = e[r].from;
                for (; o < i.length; o++) {
                    let e = i[o];
                    if (e.from >= s)
                        break;
                    e.to <= O || (n || (i = n = t.slice()),
                        e.from < O ? (n[o] = new a(e.from, O),
                            e.to > s && n.splice(o + 1, 0, new a(s, e.to))) : e.to > s ? n[o--] = new a(s, e.to) : n.splice(o--, 1))
                }
            }
            return i
        }
        function M(e, t, n, i) {
            let r = 0
                , o = 0
                , O = !1
                , s = !1
                , l = -1e9
                , c = [];
            for (; ;) {
                let u = r == e.length ? 1e9 : O ? e[r].to : e[r].from
                    , d = o == t.length ? 1e9 : s ? t[o].to : t[o].from;
                if (O != s) {
                    let e = Math.max(l, n)
                        , t = Math.min(u, d, i);
                    e < t && c.push(new a(e, t))
                }
                if (l = Math.min(u, d),
                    1e9 == l)
                    break;
                u == l && (O ? (O = !1,
                    r++) : O = !0),
                    d == l && (s ? (s = !1,
                        o++) : s = !0)
            }
            return c
        }
        function F(e, t) {
            let n = [];
            for (let { pos: i, mount: r, frag: o } of e) {
                let e = i + (r.overlay ? r.overlay[0].from : 0)
                    , O = e + r.tree.length
                    , s = Math.max(o.from, e)
                    , l = Math.min(o.to, O);
                if (r.overlay) {
                    let O = M(t, r.overlay.map((e => new a(e.from + i, e.to + i))), s, l);
                    for (let t = 0, i = s; ; t++) {
                        let a = t == O.length
                            , s = a ? l : O[t].from;
                        if (s > i && n.push(new W(i, s, r.tree, -e, o.from >= i || o.openStart, o.to <= s || o.openEnd)),
                            a)
                            break;
                        i = O[t].to
                    }
                } else
                    n.push(new W(s, l, r.tree, -e, o.from >= e || o.openStart, o.to <= O || o.openEnd))
            }
            return n
        }
    }
    ,
    14462: (e, t, n) => {
        n.d(t, {
            DM: () => d,
            _A: () => _,
            az: () => u,
            pn: () => s,
            vw: () => a
        });
        var i = n(45615);
        let r = 0;
        class a {
            constructor(e, t, n, i) {
                this.name = e,
                    this.set = t,
                    this.base = n,
                    this.modified = i,
                    this.id = r++
            }
            toString() {
                let { name: e } = this;
                for (let t of this.modified)
                    t.name && (e = `${t.name}(${e})`);
                return e
            }
            static define(e, t) {
                let n = "string" == typeof e ? e : "?";
                if (e instanceof a && (t = e),
                    null === t || void 0 === t ? void 0 : t.base)
                    throw new Error("Can not derive from a modified tag");
                let i = new a(n, [], null, []);
                if (i.set.push(i),
                    t)
                    for (let r of t.set)
                        i.set.push(r);
                return i
            }
            static defineModifier(e) {
                let t = new O(e);
                return e => e.modified.indexOf(t) > -1 ? e : O.get(e.base || e, e.modified.concat(t).sort(((e, t) => e.id - t.id)))
            }
        }
        let o = 0;
        class O {
            constructor(e) {
                this.name = e,
                    this.instances = [],
                    this.id = o++
            }
            static get(e, t) {
                if (!t.length)
                    return e;
                let n = t[0].instances.find((n => {
                    return n.base == e && (i = t,
                        r = n.modified,
                        i.length == r.length && i.every(((e, t) => e == r[t])));
                    var i, r
                }
                ));
                if (n)
                    return n;
                let i = []
                    , r = new a(e.name, i, e, t);
                for (let a of t)
                    a.instances.push(r);
                let o = function (e) {
                    let t = [[]];
                    for (let n = 0; n < e.length; n++)
                        for (let i = 0, r = t.length; i < r; i++)
                            t.push(t[i].concat(e[n]));
                    return t.sort(((e, t) => t.length - e.length))
                }(t);
                for (let a of e.set)
                    if (!a.modified.length)
                        for (let e of o)
                            i.push(O.get(a, e));
                return r
            }
        }
        function s(e) {
            let t = Object.create(null);
            for (let n in e) {
                let i = e[n];
                Array.isArray(i) || (i = [i]);
                for (let e of n.split(" "))
                    if (e) {
                        let n = []
                            , r = 2
                            , a = e;
                        for (let t = 0; ;) {
                            if ("..." == a && t > 0 && t + 3 == e.length) {
                                r = 1;
                                break
                            }
                            let i = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(a);
                            if (!i)
                                throw new RangeError("Invalid path: " + e);
                            if (n.push("*" == i[0] ? "" : '"' == i[0][0] ? JSON.parse(i[0]) : i[0]),
                                t += i[0].length,
                                t == e.length)
                                break;
                            let o = e[t++];
                            if (t == e.length && "!" == o) {
                                r = 0;
                                break
                            }
                            if ("/" != o)
                                throw new RangeError("Invalid path: " + e);
                            a = e.slice(t)
                        }
                        let o = n.length - 1
                            , O = n[o];
                        if (!O)
                            throw new RangeError("Invalid path: " + e);
                        let s = new c(i, r, o > 0 ? n.slice(0, o) : null);
                        t[O] = s.sort(t[O])
                    }
            }
            return l.add(t)
        }
        const l = new i.uY;
        class c {
            constructor(e, t, n, i) {
                this.tags = e,
                    this.mode = t,
                    this.context = n,
                    this.next = i
            }
            get opaque() {
                return 0 == this.mode
            }
            get inherit() {
                return 1 == this.mode
            }
            sort(e) {
                return !e || e.depth < this.depth ? (this.next = e,
                    this) : (e.next = this.sort(e.next),
                        e)
            }
            get depth() {
                return this.context ? this.context.length : 0
            }
        }
        function u(e, t) {
            let n = Object.create(null);
            for (let a of e)
                if (Array.isArray(a.tag))
                    for (let e of a.tag)
                        n[e.id] = a.class;
                else
                    n[a.tag.id] = a.class;
            let { scope: i, all: r = null } = t || {};
            return {
                style: e => {
                    let t = r;
                    for (let i of e)
                        for (let e of i.set) {
                            let i = n[e.id];
                            if (i) {
                                t = t ? t + " " + i : i;
                                break
                            }
                        }
                    return t
                }
                ,
                scope: i
            }
        }
        function d(e, t, n) {
            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
                , r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : e.length
                , a = new h(i, Array.isArray(t) ? t : [t], n);
            a.highlightRange(e.cursor(), i, r, "", a.highlighters),
                a.flush(r)
        }
        c.empty = new c([], 2, null);
        class h {
            constructor(e, t, n) {
                this.at = e,
                    this.highlighters = t,
                    this.span = n,
                    this.class = ""
            }
            startSpan(e, t) {
                t != this.class && (this.flush(e),
                    e > this.at && (this.at = e),
                    this.class = t)
            }
            flush(e) {
                e > this.at && this.class && this.span(this.at, e, this.class)
            }
            highlightRange(e, t, n, r, a) {
                let { type: o, from: O, to: s } = e;
                if (O >= n || s <= t)
                    return;
                o.isTop && (a = this.highlighters.filter((e => !e.scope || e.scope(o))));
                let u = r
                    , d = function (e) {
                        let t = e.type.prop(l);
                        for (; t && t.context && !e.matchContext(t.context);)
                            t = t.next;
                        return t || null
                    }(e) || c.empty
                    , h = function (e, t) {
                        let n = null;
                        for (let i of e) {
                            let e = i.style(t);
                            e && (n = n ? n + " " + e : e)
                        }
                        return n
                    }(a, d.tags);
                if (h && (u && (u += " "),
                    u += h,
                    1 == d.mode && (r += (r ? " " : "") + h)),
                    this.startSpan(Math.max(t, O), u),
                    d.opaque)
                    return;
                let f = e.tree && e.tree.prop(i.uY.mounted);
                if (f && f.overlay) {
                    let i = e.node.enter(f.overlay[0].from + O, 1)
                        , o = this.highlighters.filter((e => !e.scope || e.scope(f.tree.type)))
                        , l = e.firstChild();
                    for (let c = 0, d = O; ; c++) {
                        let h = c < f.overlay.length ? f.overlay[c] : null
                            , p = h ? h.from + O : s
                            , m = Math.max(t, d)
                            , g = Math.min(n, p);
                        if (m < g && l)
                            for (; e.from < g && (this.highlightRange(e, m, g, r, a),
                                this.startSpan(Math.min(g, e.to), u),
                                !(e.to >= p) && e.nextSibling());)
                                ;
                        if (!h || p > n)
                            break;
                        d = h.to + O,
                            d > t && (this.highlightRange(i.cursor(), Math.max(t, h.from + O), Math.min(n, d), "", o),
                                this.startSpan(Math.min(n, d), u))
                    }
                    l && e.parent()
                } else if (e.firstChild()) {
                    f && (r = "");
                    do {
                        if (!(e.to <= t)) {
                            if (e.from >= n)
                                break;
                            this.highlightRange(e, t, n, r, a),
                                this.startSpan(Math.min(n, e.to), u)
                        }
                    } while (e.nextSibling());
                    e.parent()
                }
            }
        }
        const f = a.define
            , p = f()
            , m = f()
            , g = f(m)
            , Q = f(m)
            , $ = f()
            , b = f($)
            , y = f($)
            , S = f()
            , P = f(S)
            , v = f()
            , x = f()
            , k = f()
            , w = f(k)
            , X = f()
            , _ = {
                comment: p,
                lineComment: f(p),
                blockComment: f(p),
                docComment: f(p),
                name: m,
                variableName: f(m),
                typeName: g,
                tagName: f(g),
                propertyName: Q,
                attributeName: f(Q),
                className: f(m),
                labelName: f(m),
                namespace: f(m),
                macroName: f(m),
                literal: $,
                string: b,
                docString: f(b),
                character: f(b),
                attributeValue: f(b),
                number: y,
                integer: f(y),
                float: f(y),
                bool: f($),
                regexp: f($),
                escape: f($),
                color: f($),
                url: f($),
                keyword: v,
                self: f(v),
                null: f(v),
                atom: f(v),
                unit: f(v),
                modifier: f(v),
                operatorKeyword: f(v),
                controlKeyword: f(v),
                definitionKeyword: f(v),
                moduleKeyword: f(v),
                operator: x,
                derefOperator: f(x),
                arithmeticOperator: f(x),
                logicOperator: f(x),
                bitwiseOperator: f(x),
                compareOperator: f(x),
                updateOperator: f(x),
                definitionOperator: f(x),
                typeOperator: f(x),
                controlOperator: f(x),
                punctuation: k,
                separator: f(k),
                bracket: w,
                angleBracket: f(w),
                squareBracket: f(w),
                paren: f(w),
                brace: f(w),
                content: S,
                heading: P,
                heading1: f(P),
                heading2: f(P),
                heading3: f(P),
                heading4: f(P),
                heading5: f(P),
                heading6: f(P),
                contentSeparator: f(S),
                list: f(S),
                quote: f(S),
                emphasis: f(S),
                strong: f(S),
                link: f(S),
                monospace: f(S),
                strikethrough: f(S),
                inserted: f(),
                deleted: f(),
                changed: f(),
                invalid: f(),
                meta: X,
                documentMeta: f(X),
                annotation: f(X),
                processingInstruction: f(X),
                definition: a.defineModifier("definition"),
                constant: a.defineModifier("constant"),
                function: a.defineModifier("function"),
                standard: a.defineModifier("standard"),
                local: a.defineModifier("local"),
                special: a.defineModifier("special")
            };
        for (let T in _) {
            let e = _[T];
            e instanceof a && (e.name = T)
        }
        u([{
            tag: _.link,
            class: "tok-link"
        }, {
            tag: _.heading,
            class: "tok-heading"
        }, {
            tag: _.emphasis,
            class: "tok-emphasis"
        }, {
            tag: _.strong,
            class: "tok-strong"
        }, {
            tag: _.keyword,
            class: "tok-keyword"
        }, {
            tag: _.atom,
            class: "tok-atom"
        }, {
            tag: _.bool,
            class: "tok-bool"
        }, {
            tag: _.url,
            class: "tok-url"
        }, {
            tag: _.labelName,
            class: "tok-labelName"
        }, {
            tag: _.inserted,
            class: "tok-inserted"
        }, {
            tag: _.deleted,
            class: "tok-deleted"
        }, {
            tag: _.literal,
            class: "tok-literal"
        }, {
            tag: _.string,
            class: "tok-string"
        }, {
            tag: _.number,
            class: "tok-number"
        }, {
            tag: [_.regexp, _.escape, _.special(_.string)],
            class: "tok-string2"
        }, {
            tag: _.variableName,
            class: "tok-variableName"
        }, {
            tag: _.local(_.variableName),
            class: "tok-variableName tok-local"
        }, {
            tag: _.definition(_.variableName),
            class: "tok-variableName tok-definition"
        }, {
            tag: _.special(_.variableName),
            class: "tok-variableName2"
        }, {
            tag: _.definition(_.propertyName),
            class: "tok-propertyName tok-definition"
        }, {
            tag: _.typeName,
            class: "tok-typeName"
        }, {
            tag: _.namespace,
            class: "tok-namespace"
        }, {
            tag: _.className,
            class: "tok-className"
        }, {
            tag: _.macroName,
            class: "tok-macroName"
        }, {
            tag: _.propertyName,
            class: "tok-propertyName"
        }, {
            tag: _.operator,
            class: "tok-operator"
        }, {
            tag: _.comment,
            class: "tok-comment"
        }, {
            tag: _.meta,
            class: "tok-meta"
        }, {
            tag: _.invalid,
            class: "tok-invalid"
        }, {
            tag: _.punctuation,
            class: "tok-punctuation"
        }])
    }
    ,
    92547: (e, t, n) => {
        n.d(t, {
            K: () => Y,
            n: () => j
        });
        var i = n(5178)
            , r = n(14462)
            , a = n(45615);
        const o = 20
            , O = 22
            , s = 23
            , l = 24
            , c = 26
            , u = 27
            , d = 28
            , h = 31
            , f = 34
            , p = 37
            , m = {
                area: !0,
                base: !0,
                br: !0,
                col: !0,
                command: !0,
                embed: !0,
                frame: !0,
                hr: !0,
                img: !0,
                input: !0,
                keygen: !0,
                link: !0,
                meta: !0,
                param: !0,
                source: !0,
                track: !0,
                wbr: !0,
                menuitem: !0
            }
            , g = {
                dd: !0,
                li: !0,
                optgroup: !0,
                option: !0,
                p: !0,
                rp: !0,
                rt: !0,
                tbody: !0,
                td: !0,
                tfoot: !0,
                th: !0,
                tr: !0
            }
            , Q = {
                dd: {
                    dd: !0,
                    dt: !0
                },
                dt: {
                    dd: !0,
                    dt: !0
                },
                li: {
                    li: !0
                },
                option: {
                    option: !0,
                    optgroup: !0
                },
                optgroup: {
                    optgroup: !0
                },
                p: {
                    address: !0,
                    article: !0,
                    aside: !0,
                    blockquote: !0,
                    dir: !0,
                    div: !0,
                    dl: !0,
                    fieldset: !0,
                    footer: !0,
                    form: !0,
                    h1: !0,
                    h2: !0,
                    h3: !0,
                    h4: !0,
                    h5: !0,
                    h6: !0,
                    header: !0,
                    hgroup: !0,
                    hr: !0,
                    menu: !0,
                    nav: !0,
                    ol: !0,
                    p: !0,
                    pre: !0,
                    section: !0,
                    table: !0,
                    ul: !0
                },
                rp: {
                    rp: !0,
                    rt: !0
                },
                rt: {
                    rp: !0,
                    rt: !0
                },
                tbody: {
                    tbody: !0,
                    tfoot: !0
                },
                td: {
                    td: !0,
                    th: !0
                },
                tfoot: {
                    tbody: !0
                },
                th: {
                    td: !0,
                    th: !0
                },
                thead: {
                    tbody: !0,
                    tfoot: !0
                },
                tr: {
                    tr: !0
                }
            };
        function $(e) {
            return 9 == e || 10 == e || 13 == e || 32 == e
        }
        let b = null
            , y = null
            , S = 0;
        function P(e, t) {
            let n = e.pos + t;
            if (S == n && y == e)
                return b;
            let i = e.peek(t);
            for (; $(i);)
                i = e.peek(++t);
            let r = "";
            for (; 45 == (a = i) || 46 == a || 58 == a || a >= 65 && a <= 90 || 95 == a || a >= 97 && a <= 122 || a >= 161;)
                r += String.fromCharCode(i),
                    i = e.peek(++t);
            var a;
            return y = e,
                S = n,
                b = r ? r.toLowerCase() : i == v || i == x ? void 0 : null
        }
        const v = 63
            , x = 33;
        function k(e, t) {
            this.name = e,
                this.parent = t
        }
        const w = [6, 10, 7, 8, 9]
            , X = new i.Aj({
                start: null,
                shift: (e, t, n, i) => w.indexOf(t) > -1 ? new k(P(i, 1) || "", e) : e,
                reduce: (e, t) => t == o && e ? e.parent : e,
                reuse(e, t, n, i) {
                    let r = t.type.id;
                    return 6 == r || 36 == r ? new k(P(i, 1) || "", e) : e
                },
                strict: !1
            })
            , _ = new i.Lu(((e, t) => {
                if (60 != e.next)
                    return void (e.next < 0 && t.context && e.acceptToken(57));
                e.advance();
                let n = 47 == e.next;
                n && e.advance();
                let i = P(e, 0);
                if (void 0 === i)
                    return;
                if (!i)
                    return e.acceptToken(n ? 14 : 6);
                let r = t.context ? t.context.name : null;
                if (n) {
                    if (i == r)
                        return e.acceptToken(11);
                    if (r && g[r])
                        return e.acceptToken(57, -2);
                    if (t.dialectEnabled(0))
                        return e.acceptToken(12);
                    for (let e = t.context; e; e = e.parent)
                        if (e.name == i)
                            return;
                    e.acceptToken(13)
                } else {
                    if ("script" == i)
                        return e.acceptToken(7);
                    if ("style" == i)
                        return e.acceptToken(8);
                    if ("textarea" == i)
                        return e.acceptToken(9);
                    if (m.hasOwnProperty(i))
                        return e.acceptToken(10);
                    r && Q[r] && Q[r][i] ? e.acceptToken(57, -1) : e.acceptToken(6)
                }
            }
            ), {
                contextual: !0
            })
            , T = new i.Lu((e => {
                for (let t = 0, n = 0; ; n++) {
                    if (e.next < 0) {
                        n && e.acceptToken(58);
                        break
                    }
                    if (45 == e.next)
                        t++;
                    else {
                        if (62 == e.next && t >= 2) {
                            n >= 3 && e.acceptToken(58, -2);
                            break
                        }
                        t = 0
                    }
                    e.advance()
                }
            }
            ));
        const z = new i.Lu(((e, t) => {
            if (47 == e.next && 62 == e.peek(1)) {
                let n = t.dialectEnabled(1) || function (e) {
                    for (; e; e = e.parent)
                        if ("svg" == e.name || "math" == e.name)
                            return !0;
                    return !1
                }(t.context);
                e.acceptToken(n ? 5 : 4, 2)
            } else
                62 == e.next && e.acceptToken(4, 1)
        }
        ));
        function R(e, t, n) {
            let r = 2 + e.length;
            return new i.Lu((i => {
                for (let a = 0, o = 0, O = 0; ; O++) {
                    if (i.next < 0) {
                        O && i.acceptToken(t);
                        break
                    }
                    if (0 == a && 60 == i.next || 1 == a && 47 == i.next || a >= 2 && a < r && i.next == e.charCodeAt(a - 2))
                        a++,
                            o++;
                    else if (2 != a && a != r || !$(i.next)) {
                        if (a == r && 62 == i.next) {
                            O > o ? i.acceptToken(t, -o) : i.acceptToken(n, -(o - 2));
                            break
                        }
                        if ((10 == i.next || 13 == i.next) && O) {
                            i.acceptToken(t, 1);
                            break
                        }
                        a = o = 0
                    } else
                        o++;
                    i.advance()
                }
            }
            ))
        }
        const W = R("script", 54, 1)
            , Z = R("style", 55, 2)
            , q = R("textarea", 56, 3)
            , U = (0,
                r.pn)({
                    "Text RawText": r._A.content,
                    "StartTag StartCloseTag SelfClosingEndTag EndTag": r._A.angleBracket,
                    TagName: r._A.tagName,
                    "MismatchedCloseTag/TagName": [r._A.tagName, r._A.invalid],
                    AttributeName: r._A.attributeName,
                    "AttributeValue UnquotedAttributeValue": r._A.attributeValue,
                    Is: r._A.definitionOperator,
                    "EntityReference CharacterReference": r._A.character,
                    Comment: r._A.blockComment,
                    ProcessingInst: r._A.processingInstruction,
                    DoctypeDecl: r._A.documentMeta
                })
            , Y = i.U1.deserialize({
                version: 14,
                states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
                stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
                goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
                nodeNames: "\u26a0 StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
                maxTerm: 67,
                context: X,
                nodeProps: [["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"], ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"], ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"], ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]],
                propSources: [U],
                skippedNodes: [0],
                repeatNodeCount: 9,
                tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
                tokenizers: [W, Z, q, z, _, T, 0, 1, 2, 3, 4, 5],
                topRules: {
                    Document: [0, 15]
                },
                dialects: {
                    noMatch: 0,
                    selfClosing: 509
                },
                tokenPrec: 511
            });
        function A(e, t) {
            let n = Object.create(null);
            for (let i of e.getChildren(s)) {
                let e = i.getChild(l)
                    , r = i.getChild(c) || i.getChild(u);
                e && (n[t.read(e.from, e.to)] = r ? r.type.id == c ? t.read(r.from + 1, r.to - 1) : t.read(r.from, r.to) : "")
            }
            return n
        }
        function V(e, t) {
            let n = e.getChild(O);
            return n ? t.read(n.from, n.to) : " "
        }
        function E(e, t, n) {
            let i;
            for (let r of n)
                if (!r.attrs || r.attrs(i || (i = A(e.node.parent.firstChild, t))))
                    return {
                        parser: r.parser
                    };
            return null
        }
        function j() {
            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []
                , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []
                , n = []
                , i = []
                , r = []
                , O = [];
            for (let a of e) {
                ("script" == a.tag ? n : "style" == a.tag ? i : "textarea" == a.tag ? r : O).push(a)
            }
            let l = t.length ? Object.create(null) : null;
            for (let a of t)
                (l[a.name] || (l[a.name] = [])).push(a);
            return (0,
                a.$g)(((e, t) => {
                    let a = e.type.id;
                    if (a == d)
                        return E(e, t, n);
                    if (a == h)
                        return E(e, t, i);
                    if (a == f)
                        return E(e, t, r);
                    if (a == o && O.length) {
                        let n, i = e.node, r = i.firstChild, a = r && V(r, t);
                        if (a)
                            for (let e of O)
                                if (e.tag == a && (!e.attrs || e.attrs(n || (n = A(r, t))))) {
                                    let t = i.lastChild
                                        , n = t.type.id == p ? t.from : i.to;
                                    if (n > r.to)
                                        return {
                                            parser: e.parser,
                                            overlay: [{
                                                from: r.to,
                                                to: n
                                            }]
                                        }
                                }
                    }
                    if (l && a == s) {
                        let n, i = e.node;
                        if (n = i.firstChild) {
                            let e = l[t.read(n.from, n.to)];
                            if (e)
                                for (let n of e) {
                                    if (n.tagName && n.tagName != V(i.parent, t))
                                        continue;
                                    let e = i.lastChild;
                                    if (e.type.id == c) {
                                        let t = e.from + 1
                                            , i = e.lastChild
                                            , r = e.to - (i && i.isError ? 0 : 1);
                                        if (r > t)
                                            return {
                                                parser: n.parser,
                                                overlay: [{
                                                    from: t,
                                                    to: r
                                                }]
                                            }
                                    } else if (e.type.id == u)
                                        return {
                                            parser: n.parser,
                                            overlay: [{
                                                from: e.from,
                                                to: e.to
                                            }]
                                        }
                                }
                        }
                    }
                    return null
                }
                ))
        }
    }
    ,
    40193: (e, t, n) => {
        n.d(t, {
            K: () => m
        });
        var i = n(5178)
            , r = n(14462);
        const a = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288]
            , o = new i.Aj({
                start: !1,
                shift: (e, t) => 5 == t || 6 == t || 315 == t ? e : 316 == t,
                strict: !1
            })
            , O = new i.Lu(((e, t) => {
                let { next: n } = e;
                (125 == n || -1 == n || t.context) && e.acceptToken(313)
            }
            ), {
                contextual: !0,
                fallback: !0
            })
            , s = new i.Lu(((e, t) => {
                let n, { next: i } = e;
                a.indexOf(i) > -1 || (47 != i || 47 != (n = e.peek(1)) && 42 != n) && (125 == i || 59 == i || -1 == i || t.context || e.acceptToken(312))
            }
            ), {
                contextual: !0
            })
            , l = new i.Lu(((e, t) => {
                let { next: n } = e;
                if (43 == n || 45 == n) {
                    if (e.advance(),
                        n == e.next) {
                        e.advance();
                        let n = !t.context && t.canShift(1);
                        e.acceptToken(n ? 1 : 2)
                    }
                } else
                    63 == n && 46 == e.peek(1) && (e.advance(),
                        e.advance(),
                        (e.next < 48 || e.next > 57) && e.acceptToken(3))
            }
            ), {
                contextual: !0
            });
        function c(e, t) {
            return e >= 65 && e <= 90 || e >= 97 && e <= 122 || 95 == e || e >= 192 || !t && e >= 48 && e <= 57
        }
        const u = new i.Lu(((e, t) => {
            if (60 != e.next || !t.dialectEnabled(0))
                return;
            if (e.advance(),
                47 == e.next)
                return;
            let n = 0;
            for (; a.indexOf(e.next) > -1;)
                e.advance(),
                    n++;
            if (c(e.next, !0)) {
                for (e.advance(),
                    n++; c(e.next, !1);)
                    e.advance(),
                        n++;
                for (; a.indexOf(e.next) > -1;)
                    e.advance(),
                        n++;
                if (44 == e.next)
                    return;
                for (let t = 0; ; t++) {
                    if (7 == t) {
                        if (!c(e.next, !0))
                            return;
                        break
                    }
                    if (e.next != "extends".charCodeAt(t))
                        break;
                    e.advance(),
                        n++
                }
            }
            e.acceptToken(4, -n)
        }
        ))
            , d = (0,
                r.pn)({
                    "get set async static": r._A.modifier,
                    "for while do if else switch try catch finally return throw break continue default case": r._A.controlKeyword,
                    "in of await yield void typeof delete instanceof": r._A.operatorKeyword,
                    "let var const using function class extends": r._A.definitionKeyword,
                    "import export from": r._A.moduleKeyword,
                    "with debugger as new": r._A.keyword,
                    TemplateString: r._A.special(r._A.string),
                    super: r._A.atom,
                    BooleanLiteral: r._A.bool,
                    this: r._A.self,
                    null: r._A.null,
                    Star: r._A.modifier,
                    VariableName: r._A.variableName,
                    "CallExpression/VariableName TaggedTemplateExpression/VariableName": r._A.function(r._A.variableName),
                    VariableDefinition: r._A.definition(r._A.variableName),
                    Label: r._A.labelName,
                    PropertyName: r._A.propertyName,
                    PrivatePropertyName: r._A.special(r._A.propertyName),
                    "CallExpression/MemberExpression/PropertyName": r._A.function(r._A.propertyName),
                    "FunctionDeclaration/VariableDefinition": r._A.function(r._A.definition(r._A.variableName)),
                    "ClassDeclaration/VariableDefinition": r._A.definition(r._A.className),
                    PropertyDefinition: r._A.definition(r._A.propertyName),
                    PrivatePropertyDefinition: r._A.definition(r._A.special(r._A.propertyName)),
                    UpdateOp: r._A.updateOperator,
                    "LineComment Hashbang": r._A.lineComment,
                    BlockComment: r._A.blockComment,
                    Number: r._A.number,
                    String: r._A.string,
                    Escape: r._A.escape,
                    ArithOp: r._A.arithmeticOperator,
                    LogicOp: r._A.logicOperator,
                    BitOp: r._A.bitwiseOperator,
                    CompareOp: r._A.compareOperator,
                    RegExp: r._A.regexp,
                    Equals: r._A.definitionOperator,
                    Arrow: r._A.function(r._A.punctuation),
                    ": Spread": r._A.punctuation,
                    "( )": r._A.paren,
                    "[ ]": r._A.squareBracket,
                    "{ }": r._A.brace,
                    "InterpolationStart InterpolationEnd": r._A.special(r._A.brace),
                    ".": r._A.derefOperator,
                    ", ;": r._A.separator,
                    "@": r._A.meta,
                    TypeName: r._A.typeName,
                    TypeDefinition: r._A.definition(r._A.typeName),
                    "type enum interface implements namespace module declare": r._A.definitionKeyword,
                    "abstract global Privacy readonly override": r._A.modifier,
                    "is keyof unique infer": r._A.operatorKeyword,
                    JSXAttributeValue: r._A.attributeValue,
                    JSXText: r._A.content,
                    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": r._A.angleBracket,
                    "JSXIdentifier JSXNameSpacedName": r._A.tagName,
                    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": r._A.attributeName,
                    "JSXBuiltin/JSXIdentifier": r._A.standard(r._A.tagName)
                })
            , h = {
                __proto__: null,
                export: 20,
                as: 25,
                from: 33,
                default: 36,
                async: 41,
                function: 42,
                extends: 54,
                this: 58,
                true: 66,
                false: 66,
                null: 78,
                void: 82,
                typeof: 86,
                super: 102,
                new: 136,
                delete: 148,
                yield: 157,
                await: 161,
                class: 166,
                public: 229,
                private: 229,
                protected: 229,
                readonly: 231,
                instanceof: 250,
                satisfies: 253,
                in: 254,
                const: 256,
                import: 290,
                keyof: 345,
                unique: 349,
                infer: 355,
                is: 391,
                abstract: 411,
                implements: 413,
                type: 415,
                let: 418,
                var: 420,
                using: 423,
                interface: 429,
                enum: 433,
                namespace: 439,
                module: 441,
                declare: 445,
                global: 449,
                for: 468,
                of: 477,
                while: 480,
                with: 484,
                do: 488,
                if: 492,
                else: 494,
                switch: 498,
                case: 504,
                try: 510,
                catch: 514,
                finally: 518,
                return: 522,
                throw: 526,
                break: 530,
                continue: 534,
                debugger: 538
            }
            , f = {
                __proto__: null,
                async: 123,
                get: 125,
                set: 127,
                declare: 189,
                public: 191,
                private: 191,
                protected: 191,
                static: 193,
                abstract: 195,
                override: 197,
                readonly: 203,
                accessor: 205,
                new: 395
            }
            , p = {
                __proto__: null,
                "<": 187
            }
            , m = i.U1.deserialize({
                version: 14,
                states: "$@QO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#CiO+RO!bO'#CjO+aO#tO'#CjO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DwO0fQ^O'#EPOOQ?Mr'#EX'#EXO1PQWO'#EUOOQO'#Em'#EmOOQO'#Ih'#IhO1XQWO'#GpO1dQWO'#ElO1iQWO'#ElO3hQ?NdO'#JmO6[Q?NdO'#JnO6uQWO'#F[O6zQ&jO'#FsOOQ?Mr'#Fe'#FeO7VO,YO'#FeO7eQ7[O'#FzO9RQWO'#FyOOQ?Mr'#Jn'#JnOOQ?Mp'#Jm'#JmO9WQWO'#GtOOQU'#KZ'#KZO9cQWO'#IUO9hQ?MxO'#IVOOQU'#JZ'#JZOOQU'#IZ'#IZQ`Q^OOO`Q^OOO9pQMnO'#DsO9wQ^O'#D{O:OQ^O'#D}O9^QWO'#GpO:VQ7[O'#CoO:eQWO'#EkO:pQWO'#EvO:uQ7[O'#FdO;dQWO'#GpOOQO'#K['#K[O;iQWO'#K[O;wQWO'#GxO;wQWO'#GyO;wQWO'#G{O9^QWO'#HOO<nQWO'#HRO>VQWO'#CeO>gQWO'#H_O>oQWO'#HeO>oQWO'#HgO`Q^O'#HiO>oQWO'#HkO>oQWO'#HnO>tQWO'#HtO>yQ?MyO'#HzO%[Q^O'#H|O?UQ?MyO'#IOO?aQ?MyO'#IQO9hQ?MxO'#ISO?lQ?NdO'#CiO@nQ`O'#DiQOQWOOO%[Q^O'#D}OAUQWO'#EQO:VQ7[O'#EkOAaQWO'#EkOAlQpO'#FdOOQU'#Cg'#CgOOQ?Mp'#Dn'#DnOOQ?Mp'#Jq'#JqO%[Q^O'#JqOOQO'#Jt'#JtOOQO'#Id'#IdOBlQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Jx'#JxOChQ?NQO'#EdOCrQ`O'#ETOOQO'#Js'#JsODWQ`O'#JtOEeQ`O'#ETOCrQ`O'#EdPErO#@ItO'#CbPOOO)CDx)CDxOOOO'#I['#I[OE}O!bO,59UOOQ?Mr,59U,59UOOOO'#I]'#I]OF]O#tO,59UO%[Q^O'#D`OOOO'#I_'#I_OFkO!0LbO,59xOOQ?Mr,59x,59xOFyQ^O'#I`OG^QWO'#JoOI]QrO'#JoO+}Q^O'#JoOIdQWO,5:OOIzQWO'#EmOJXQWO'#KOOJdQWO'#J}OJdQWO'#J}OJlQWO,5;ZOJqQWO'#J|OOQ?Mv,5:Z,5:ZOJxQ^O,5:ZOLvQ?NdO,5:cOMgQWO,5:kONQQ?MxO'#J{ONXQWO'#JzO9WQWO'#JzONmQWO'#JzONuQWO,5;YONzQWO'#JzO!#PQrO'#JnOOQ?Mr'#Ci'#CiO%[Q^O'#EPO!#oQrO,5:pOOQQ'#Ju'#JuOOQO-E<f-E<fO9^QWO,5=[O!$VQWO,5=[O!$[Q^O,5;WO!&_Q7[O'#EhO!'xQWO,5;WO!'}Q^O'#DvO!(XQ`O,5;aO!(aQ`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!(oQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yOOQ?Mr,5;{,5;{O%[Q^O'#IlO!*rQ?MxO,5<gO%[Q^O,5;bO!&_Q7[O,5;bO!+aQ7[O,5;bO!-RQ7[O'#EZO%[Q^O,5;vOOQ?Mr,5;z,5;zO!-YQ&jO'#FiO!.VQ&jO'#KSO!-qQ&jO'#KSO!.^Q&jO'#KSOOQO'#KS'#KSO!.rQ&jO,5<ROOOS,5<_,5<_O!/TQ^O'#FuOOOS'#Ik'#IkO7VO,YO,5<PO!/[Q&jO'#FwOOQ?Mr,5<P,5<PO!/{Q!LQO'#CvOOQ?Mr'#Cz'#CzO!0`O!0LbO'#DOO!0|Q7[O,5<dO!1TQWO,5<fO!2pQ$ISO'#GVO!2}QWO'#GWO!3SQWO'#GWO!4rQ$ISO'#G[O!5nQ`O'#G`OOQO'#Gk'#GkO!+hQ7[O'#GjOOQO'#Gm'#GmO!+hQ7[O'#GlO!6aQ!LQO'#JgOOQ?Mr'#Jg'#JgO!6kQWO'#JfO!6yQWO'#JeO!7RQWO'#CuOOQ?Mr'#Cx'#CxO!7ZQWO'#CzOOQ?Mr'#DS'#DSOOQ?Mr'#DU'#DUO1SQWO'#DWO!+hQ7[O'#F}O!+hQ7[O'#GPO!7`QWO'#GRO!7eQWO'#GSO!3SQWO'#GYO!+hQ7[O'#G_O!7jQWO'#EnO!8XQWO,5<eOOQ?Mp'#Cr'#CrO!8aQWO'#EoO!9ZQ`O'#EpOOQ?Mp'#J|'#J|O!9bQ?MxO'#K]O9hQ?MxO,5=`O`Q^O,5>pOOQU'#Jc'#JcOOQU,5>q,5>qOOQU-E<X-E<XO!;aQ?NdO,5:_O!9UQ`O,5:]O!=zQ?NdO,5:gO%[Q^O,5:gO!@bQ?NdO,5:iOOQO,5@v,5@vO!ARQ7[O,5=[O!AaQ?MxO'#JdO9RQWO'#JdO!ArQ?MxO,59ZO!A}Q`O,59ZO!BVQ7[O,59ZO:VQ7[O,59ZO!BbQWO,5;WO!BjQWO'#H^O!COQWO'#K`O%[Q^O,5;|O!9UQ`O,5<OO!CWQWO,5=wO!C]QWO,5=wO!CbQWO,5=wO9hQ?MxO,5=wO;wQWO,5=gOOQO'#Cv'#CvO!CpQ`O,5=dO!CxQ7[O,5=eO!DTQWO,5=gO!DYQpO,5=jO!DbQWO'#K[O>tQWO'#HTO9^QWO'#HVO!DgQWO'#HVO:VQ7[O'#HXO!DlQWO'#HXOOQU,5=m,5=mO!DqQWO'#HYO!ESQWO'#CoO!EXQWO,59PO!EcQWO,59PO!GhQ^O,59POOQU,59P,59PO!GxQ?MxO,59PO%[Q^O,59PO!JTQ^O'#HaOOQU'#Hb'#HbOOQU'#Hc'#HcO`Q^O,5=yO!JkQWO,5=yO`Q^O,5>PO`Q^O,5>RO!JpQWO,5>TO`Q^O,5>VO!JuQWO,5>YO!JzQ^O,5>`OOQU,5>f,5>fO%[Q^O,5>fO9hQ?MxO,5>hOOQU,5>j,5>jO# UQWO,5>jOOQU,5>l,5>lO# UQWO,5>lOOQU,5>n,5>nO# rQ`O'#D[O%[Q^O'#JqO# |Q`O'#JqO#!kQ`O'#DjO#!|Q`O'#DjO#%_Q^O'#DjO#%fQWO'#JpO#%nQWO,5:TO#%sQWO'#EqO#&RQWO'#KPO#&ZQWO,5;[O#&`Q`O'#DjO#&mQ`O'#ESOOQ?Mr,5:l,5:lO%[Q^O,5:lO#&tQWO,5:lO>tQWO,5;VO!A}Q`O,5;VO!BVQ7[O,5;VO:VQ7[O,5;VO#&|QWO,5@]O#'RQ(CYO,5:pOOQO-E<b-E<bO#(XQ?NQO,5;OOCrQ`O,5:oO#(cQ`O,5:oOCrQ`O,5;OO!ArQ?MxO,5:oOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#(pQ?MxO,5;OO#({Q?MxO,5;OO!A}Q`O,5:oOOQO,5;U,5;UO#)ZQ?MxO,5;OPOOO'#IY'#IYP#)oO#@ItO,58|POOO,58|,58|OOOO-E<Y-E<YOOQ?Mr1G.p1G.pOOOO-E<Z-E<ZO#)zQpO,59zOOOO-E<]-E<]OOQ?Mr1G/d1G/dO#*PQrO,5>zO+}Q^O,5>zOOQO,5?Q,5?QO#*ZQ^O'#I`OOQO-E<^-E<^O#*hQWO,5@ZO#*pQrO,5@ZO#*wQWO,5@iOOQ?Mr1G/j1G/jO%[Q^O,5@jO#+PQWO'#IfOOQO-E<d-E<dO#*wQWO,5@iOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0V1G0VO%[Q^O,5@gO#+eQ?MxO,5@gO#+vQ?MxO,5@gO#+}QWO,5@fO9WQWO,5@fO#,VQWO,5@fO#,eQWO'#IiO#+}QWO,5@fOOQ?Mp1G0t1G0tO!(XQ`O,5:rO!(dQ`O,5:rOOQQ,5:t,5:tO#-VQYO,5:tO#-_Q7[O1G2vO9^QWO1G2vOOQ?Mr1G0r1G0rO#-mQ?NdO1G0rO#.rQ?NbO,5;SOOQ?Mr'#GU'#GUO#/`Q?NdO'#JgO!$[Q^O1G0rO#1hQrO'#JrO%[Q^O'#JrO#1rQWO,5:bOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#1wQWO1G0{O#4]Q?NdO1G0|O#4dQ?NdO1G0|O#6zQ?NdO1G0|O#7RQ?NdO1G0|O#9iQ?NdO1G0|O#<PQ?NdO1G0|O#<WQ?NdO1G0|O#<_Q?NdO1G0|O#>uQ?NdO1G0|O#>|Q?NdO1G0|O#AZQ07bO'#CiO#CUQ07bO1G1_O#C]Q07bO'#JnO#CpQ?NdO,5?WOOQ?Mp-E<j-E<jO#E}Q?NdO1G0|O#FzQ?NdO1G0|OOQ?Mr1G0|1G0|O#GzQ7[O'#JwO#HUQWO,5:uO#HZQ?NdO1G1bO#H}Q&jO,5<VO#IVQ&jO,5<WO#I_Q&jO'#FnO#IvQWO'#FmOOQO'#KT'#KTOOQO'#Ij'#IjO#I{Q&jO1G1mOOQ?Mr1G1m1G1mOOOS1G1x1G1xO#J^Q07bO'#JmO#JhQWO,5<aO!(oQ^O,5<aOOOS-E<i-E<iOOQ?Mr1G1k1G1kO#JmQ`O'#KSOOQ?Mr,5<c,5<cO#JuQ`O,5<cO!&_Q7[O'#DQOOOO'#I^'#I^O#JzO!0LbO,59jOOQ?Mr,59j,59jO%[Q^O1G2OO!7eQWO'#InO#KVQ7[O,5<xOOQ?Mr,5<u,5<uO!+hQ7[O'#IqO#KuQ7[O,5=UO!+hQ7[O'#IsO#LhQ7[O,5=WO!&_Q7[O,5=YOOQO1G2Q1G2QO#LrQpO'#CrO#MVQ$ISO'#EoO#NUQ`O'#G`O#NrQpO,5<qO#NyQWO'#KWO9WQWO'#KWO$ XQWO,5<sO!+hQ7[O,5<rO$ ^QWO'#GXO$ oQWO,5<rO$ tQpO'#GUO$!RQpO'#KXO$!]QWO'#KXO!&_Q7[O'#KXO$!bQWO,5<vO$!gQ`O'#GaO!5iQ`O'#GaO$!xQWO'#GcO$!}QWO'#GeO!3SQWO'#GhO$#SQ?MxO'#IpO$#_Q`O,5<zOOQ?Mv,5<z,5<zO$#fQ`O'#GaO$#tQ`O'#GbO$#|Q`O'#GbO$$RQ7[O,5=UO$$cQ7[O,5=WOOQ?Mr,5=Z,5=ZO!+hQ7[O,5@QO!+hQ7[O,5@QO$$sQWO'#IuO$%OQWO,5@PO$%WQWO,59aOOQ?Mr,59f,59fO$%zQ!LSO,59rOOQ?Mr'#Jk'#JkO$&mQ7[O,5<iO$'`Q7[O,5<kO@fQWO,5<mOOQ?Mr,5<n,5<nO$'jQWO,5<tO$'oQ7[O,5<yO$(PQWO'#JzO!$[Q^O1G2PO$(UQWO1G2PO9WQWO'#J}O9WQWO'#EqO%[Q^O'#EqO9WQWO'#IwO$(ZQ?MxO,5@wOOQU1G2z1G2zOOQU1G4[1G4[OOQ?Mr1G/y1G/yOOQ?Mr1G/w1G/wO$*]Q?NdO1G0ROOQU1G2v1G2vO!&_Q7[O1G2vO%[Q^O1G2vO#-bQWO1G2vO$,aQ7[O'#EhOOQ?Mp,5@O,5@OO$,kQ?MxO,5@OOOQU1G.u1G.uO!ArQ?MxO1G.uO!A}Q`O1G.uO!BVQ7[O1G.uO$,|QWO1G0rO$-RQWO'#CiO$-^QWO'#KaO$-fQWO,5=xO$-kQWO'#KaO$-pQWO'#KaO$.OQWO'#I}O$.^QWO,5@zO$.fQrO1G1hOOQ?Mr1G1j1G1jO9^QWO1G3cO@fQWO1G3cO$.mQWO1G3cO$.rQWO1G3cOOQU1G3c1G3cO!DTQWO1G3RO!&_Q7[O1G3OO$.wQWO1G3OOOQU1G3P1G3PO!&_Q7[O1G3PO$.|QWO1G3PO$/UQ`O'#G}OOQU1G3R1G3RO!5iQ`O'#IyO!DYQpO1G3UOOQU1G3U1G3UOOQU,5=o,5=oO$/^Q7[O,5=qO9^QWO,5=qO$!}QWO,5=sO9RQWO,5=sO!A}Q`O,5=sO!BVQ7[O,5=sO:VQ7[O,5=sO$/lQWO'#K_O$/wQWO,5=tOOQU1G.k1G.kO$/|Q?MxO1G.kO@fQWO1G.kO$0XQWO1G.kO9hQ?MxO1G.kO$2aQrO,5@|O$2nQWO,5@|O9WQWO,5@|O$2yQ^O,5={O$3QQWO,5={OOQU1G3e1G3eO`Q^O1G3eOOQU1G3k1G3kOOQU1G3m1G3mO>oQWO1G3oO$3VQ^O1G3qO$7ZQ^O'#HpOOQU1G3t1G3tO$7hQWO'#HvO>tQWO'#HxOOQU1G3z1G3zO$7pQ^O1G3zO9hQ?MxO1G4QOOQU1G4S1G4SOOQ?Mp'#G]'#G]O9hQ?MxO1G4UO9hQ?MxO1G4WO$;wQWO,5@]O!(oQ^O,5;]O9WQWO,5;]O>tQWO,5:UO!(oQ^O,5:UO!A}Q`O,5:UO$;|Q07bO,5:UOOQO,5;],5;]O$<WQ`O'#IaO$<nQWO,5@[OOQ?Mr1G/o1G/oO$<vQ`O'#IgO$=QQWO,5@kOOQ?Mp1G0v1G0vO#!|Q`O,5:UOOQO'#Ic'#IcO$=YQ`O,5:nOOQ?Mv,5:n,5:nO#&wQWO1G0WOOQ?Mr1G0W1G0WO%[Q^O1G0WOOQ?Mr1G0q1G0qO>tQWO1G0qO!A}Q`O1G0qO!BVQ7[O1G0qOOQ?Mp1G5w1G5wO!ArQ?MxO1G0ZOOQO1G0j1G0jO%[Q^O1G0jO$=aQ?MxO1G0jO$=lQ?MxO1G0jO!A}Q`O1G0ZOCrQ`O1G0ZO$=zQ?MxO1G0jOOQO1G0Z1G0ZO$>`Q?NdO1G0jPOOO-E<W-E<WPOOO1G.h1G.hOOOO1G/f1G/fO$>jQpO,5<gO$>rQrO1G4fOOQO1G4l1G4lO%[Q^O,5>zO$>|QWO1G5uO$?UQWO1G6TO$?^QrO1G6UO9WQWO,5?QO$?hQ?NdO1G6RO%[Q^O1G6RO$?xQ?MxO1G6RO$@ZQWO1G6QO$@ZQWO1G6QO9WQWO1G6QO$@cQWO,5?TO9WQWO,5?TOOQO,5?T,5?TO$@wQWO,5?TO$(PQWO,5?TOOQO-E<g-E<gOOQQ1G0^1G0^OOQQ1G0`1G0`O#-YQWO1G0`OOQU7+(b7+(bO!&_Q7[O7+(bO%[Q^O7+(bO$AVQWO7+(bO$AbQ7[O7+(bO$ApQ?NdO,5=UO$CxQ?NdO,5=WO$FQQ?NdO,5=UO$H`Q?NdO,5=WO$JnQ?NdO,59rO$LsQ?NdO,5<iO$N{Q?NdO,5<kO%#TQ?NdO,5<yOOQ?Mr7+&^7+&^O%%cQ?NdO7+&^O%&VQ^O'#IbO%&dQWO,5@^O%&lQrO,5@^OOQ?Mr1G/|1G/|O%&vQWO7+&gOOQ?Mr7+&g7+&gO%&{Q07bO,5:cO%[Q^O7+&yO%'VQ07bO,5:_O%'dQ07bO,5:gO%'nQ07bO,5:iO%'xQ7[O'#IeO%(SQWO,5@cOOQ?Mr1G0a1G0aOOQO1G1q1G1qOOQO1G1r1G1rO%([QtO,5<YO!(oQ^O,5<XOOQO-E<h-E<hOOQ?Mr7+'X7+'XOOOS7+'d7+'dOOOS1G1{1G1{O%(gQWO1G1{OOQ?Mr1G1}1G1}O%(lQpO,59lOOOO-E<[-E<[OOQ?Mr1G/U1G/UO%(sQ?NdO7+'jOOQ?Mr,5?Y,5?YO%)gQpO,5?YOOQ?Mr1G2d1G2dP!&_Q7[O'#InPOQ?Mr-E<l-E<lO%*VQ7[O,5?]OOQ?Mr-E<o-E<oO%*xQ7[O,5?_OOQ?Mr-E<q-E<qO%+SQpO1G2tO%+ZQpO'#CrO%+qQ7[O'#J}O%+xQ^O'#EqOOQ?Mr1G2]1G2]O%,SQWO'#ImO%,hQWO,5@rO%,hQWO,5@rO%,pQWO,5@rO%,{QWO,5@rOOQO1G2_1G2_O%-ZQ7[O1G2^O!+hQ7[O1G2^O%-kQ$ISO'#IoO%-xQWO,5@sO!&_Q7[O,5@sO%.QQpO,5@sOOQ?Mr1G2b1G2bOOQ?Mp,5<{,5<{OOQ?Mp,5<|,5<|O$(PQWO,5<|OCcQWO,5<|O!A}Q`O,5<{OOQO'#Gd'#GdO%.[QWO,5<}OOQ?Mp,5=P,5=PO$(PQWO,5=SOOQO,5?[,5?[OOQO-E<n-E<nOOQ?Mv1G2f1G2fO!5iQ`O,5<{O%.dQWO,5<|O$!xQWO,5<}O%.oQ`O,5<|O!+hQ7[O'#IqO%/`Q7[O1G2pO!+hQ7[O'#IsO%0RQ7[O1G2rO%0]Q7[O1G5lO%0gQ7[O1G5lOOQO,5?a,5?aOOQO-E<s-E<sOOQO1G.{1G.{O!9UQ`O,59tO%[Q^O,59tOOQ?Mr,5<h,5<hO%0tQWO1G2XO!+hQ7[O1G2`O%0yQ?NdO7+'kOOQ?Mr7+'k7+'kO!$[Q^O7+'kO%1mQWO,5;]OOQ?Mp,5?c,5?cOOQ?Mp-E<u-E<uO%1rQpO'#KYO#&wQWO7+(bO4UQrO7+(bO$AYQWO7+(bO%1|Q?NbO'#CiO%2aQ?NbO,5=QO%3RQWO,5=QOOQ?Mp1G5j1G5jOOQU7+$a7+$aO!ArQ?MxO7+$aO!A}Q`O7+$aO!$[Q^O7+&^O%3WQWO'#I|O%3oQWO,5@{OOQO1G3d1G3dO9^QWO,5@{O%3oQWO,5@{O%3wQWO,5@{OOQO,5?i,5?iOOQO-E<{-E<{OOQ?Mr7+'S7+'SO%3|QWO7+(}O9hQ?MxO7+(}O9^QWO7+(}O@fQWO7+(}OOQU7+(m7+(mO%4RQ?NbO7+(jO!&_Q7[O7+(jO%4]QpO7+(kOOQU7+(k7+(kO!&_Q7[O7+(kO%4dQWO'#K^O%4oQWO,5=iOOQO,5?e,5?eOOQO-E<w-E<wOOQU7+(p7+(pO%6RQ`O'#HWOOQU1G3]1G3]O!&_Q7[O1G3]O%[Q^O1G3]O%6YQWO1G3]O%6eQ7[O1G3]O9hQ?MxO1G3_O$!}QWO1G3_O9RQWO1G3_O!A}Q`O1G3_O!BVQ7[O1G3_O%6sQWO'#I{O%7XQWO,5@yO%7aQ`O,5@yOOQ?Mp1G3`1G3`OOQU7+$V7+$VO@fQWO7+$VO9hQ?MxO7+$VO%7lQWO7+$VO%[Q^O1G6hO%[Q^O1G6iO%7qQ?MxO1G6hO%7{Q^O1G3gO%8SQWO1G3gO%8XQ^O1G3gOOQU7+)P7+)PO9hQ?MxO7+)ZO`Q^O7+)]OOQU'#Kd'#KdOOQU'#JO'#JOO%8`Q^O,5>[OOQU,5>[,5>[O%[Q^O'#HqO%8mQWO'#HsOOQU,5>b,5>bO9WQWO,5>bOOQU,5>d,5>dOOQU7+)f7+)fOOQU7+)l7+)lOOQU7+)p7+)pOOQU7+)r7+)rO%8rQ`O1G5wO%9WQ07bO1G0wO%9bQWO1G0wOOQO1G/p1G/pO%9mQ07bO1G/pO>tQWO1G/pO!(oQ^O'#DjOOQO,5>{,5>{OOQO-E<_-E<_OOQO,5?R,5?ROOQO-E<e-E<eO!A}Q`O1G/pOOQO-E<a-E<aOOQ?Mv1G0Y1G0YOOQ?Mr7+%r7+%rO#&wQWO7+%rOOQ?Mr7+&]7+&]O>tQWO7+&]O!A}Q`O7+&]OOQO7+%u7+%uO$>`Q?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%9wQ?MxO7+&UO!ArQ?MxO7+%uO!A}Q`O7+%uO%:SQ?MxO7+&UO%:bQ?NdO7++mO%[Q^O7++mO%:rQWO7++lO%:rQWO7++lOOQO1G4o1G4oO9WQWO1G4oO%:zQWO1G4oOOQQ7+%z7+%zO#&wQWO<<K|O4UQrO<<K|O%;YQWO<<K|OOQU<<K|<<K|O!&_Q7[O<<K|O%[Q^O<<K|O%;bQWO<<K|O%;mQ?NdO,5?]O%=uQ?NdO,5?_O%?}Q?NdO1G2^O%B]Q?NdO1G2pO%DeQ?NdO1G2rO%FmQrO,5>|O%[Q^O,5>|OOQO-E<`-E<`O%FwQWO1G5xOOQ?Mr<<JR<<JRO%GPQ07bO1G0rO%IWQ07bO1G0|O%I_Q07bO1G0|O%K`Q07bO1G0|O%KgQ07bO1G0|O%MhQ07bO1G0|O& iQ07bO1G0|O& pQ07bO1G0|O& wQ07bO1G0|O&#xQ07bO1G0|O&$PQ07bO1G0|O&$WQ?NdO<<JeO&&OQ07bO1G0|O&&{Q07bO1G0|O&'{Q07bO'#JgO&*OQ07bO1G1bO&*]Q07bO1G0RO&*gQ7[O,5?POOQO-E<c-E<cO!(oQ^O'#FpOOQO'#KU'#KUOOQO1G1t1G1tO&*qQWO1G1sO&*vQ07bO,5?WOOOS7+'g7+'gOOOO1G/W1G/WOOQ?Mr1G4t1G4tO!+hQ7[O7+(`O&-WQrO'#CiO&-bQWO,5?XO9WQWO,5?XOOQO-E<k-E<kO&-pQWO1G6^O&-pQWO1G6^O&-xQWO1G6^O&.TQ7[O7+'xO&.eQpO,5?ZO&.oQWO,5?ZO!&_Q7[O,5?ZOOQO-E<m-E<mO&.tQpO1G6_O&/OQWO1G6_OOQ?Mp1G2h1G2hO$(PQWO1G2hOOQ?Mp1G2g1G2gO&/WQWO1G2iO!&_Q7[O1G2iOOQ?Mp1G2n1G2nO!A}Q`O1G2gOCcQWO1G2hO&/]QWO1G2iO&/eQWO1G2hO$!xQWO1G2iO&0XQ7[O,5?]OOQ?Mr-E<p-E<pO&0zQ7[O,5?_OOQ?Mr-E<r-E<rO!+hQ7[O7++WOOQ?Mr1G/`1G/`O&1UQWO1G/`OOQ?Mr7+'s7+'sO&1ZQ7[O7+'zO&1kQ?NdO<<KVOOQ?Mr<<KV<<KVO&2_QWO1G0wO!&_Q7[O'#IvO&2dQWO,5@tO&4fQrO<<K|O!&_Q7[O1G2lOOQU<<G{<<G{O!ArQ?MxO<<G{O&4mQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?h,5?hO&5aQWO,5?hO&5fQWO,5?hOOQO-E<z-E<zO&5tQWO1G6gO&5tQWO1G6gO9^QWO1G6gO@fQWO<<LiOOQU<<Li<<LiO&5|QWO<<LiO9hQ?MxO<<LiOOQU<<LU<<LUO%4RQ?NbO<<LUOOQU<<LV<<LVO%4]QpO<<LVO&6RQ`O'#IxO&6^QWO,5@xO!(oQ^O,5@xOOQU1G3T1G3TO%+xQ^O'#JqOOQO'#Iz'#IzO9hQ?MxO'#IzO&6fQ`O,5=rOOQU,5=r,5=rO&6mQ`O'#EdO&7RQ`O'#GcO&7WQWO7+(wO&7]QWO7+(wOOQU7+(w7+(wO!&_Q7[O7+(wO%[Q^O7+(wO&7eQWO7+(wOOQU7+(y7+(yO9hQ?MxO7+(yO$!}QWO7+(yO9RQWO7+(yO!A}Q`O7+(yO&7pQWO,5?gOOQO-E<y-E<yOOQO'#HZ'#HZO&7{QWO1G6eO9hQ?MxO<<GqOOQU<<Gq<<GqO@fQWO<<GqO&8TQWO7+,SO&8YQWO7+,TO%[Q^O7+,SO%[Q^O7+,TOOQU7+)R7+)RO&8_QWO7+)RO&8dQ^O7+)RO&8kQWO7+)ROOQU<<Lu<<LuOOQU<<Lw<<LwOOQU-E<|-E<|OOQU1G3v1G3vO&8pQWO,5>]OOQU,5>_,5>_O&8uQWO1G3|O9WQWO7+&cO!(oQ^O7+&cOOQO7+%[7+%[O&8zQ07bO1G6UO>tQWO7+%[OOQ?Mr<<I^<<I^OOQ?Mr<<Iw<<IwO>tQWO<<IwOOQO<<Ip<<IpO$>`Q?NdO<<IpO%[Q^O<<IpOOQO<<Ia<<IaO!ArQ?MxO<<IaO&9UQ?MxO<<IpO&9aQ?NdO<= XO&9qQWO<= WOOQO7+*Z7+*ZO9WQWO7+*ZOOQUANAhANAhO&9yQrOANAhO!&_Q7[OANAhO#&wQWOANAhO4UQrOANAhO&:QQWOANAhO%[Q^OANAhO&:YQ?NdO7+'xO&<hQ?NdO,5?]O&>pQ?NdO,5?_O&@xQ?NdO7+'zO&CWQrO1G4hO&CbQ07bO7+&^O&EcQ07bO,5=UO&GgQ07bO,5=WO&GwQ07bO,5=UO&HXQ07bO,5=WO&HiQ07bO,59rO&JlQ07bO,5<iO&LlQ07bO,5<kO&N}Q07bO,5<yO'!pQ07bO7+'jO'!}Q07bO7+'kO'#[QWO,5<[OOQO7+'_7+'_O'#aQ7[O<<KzOOQO1G4s1G4sO'#hQWO1G4sO'#sQWO1G4sO'$RQWO7++xO'$RQWO7++xO!&_Q7[O1G4uO'$ZQpO1G4uO'$eQWO7++yOOQ?Mp7+(S7+(SO'$mQWO7+(TO'$xQpO7+(TOOQ?Mp7+(R7+(RO$(PQWO7+(SO'%PQWO7+(TO!&_Q7[O7+(TOCcQWO7+(SO'%UQWO7+(TO'%^Q7[O<<NrOOQ?Mr7+$z7+$zO'%hQpO,5?bOOQO-E<t-E<tO'%rQ?NbO7+(WOOQUAN=gAN=gO9^QWO1G5SOOQO1G5S1G5SO'&SQWO1G5SO'&XQWO7+,RO'&XQWO7+,RO9hQ?MxOANBTO@fQWOANBTOOQUANBTANBTOOQUANApANApOOQUANAqANAqO'&aQWO,5?dOOQO-E<v-E<vO'&lQ07bO1G6dOOQO,5?f,5?fOOQO-E<x-E<xOOQU1G3^1G3^O%+xQ^O,5<}O'&vQWO,5<}OOQU<<Lc<<LcO!&_Q7[O<<LcO&7WQWO<<LcO'&{QWO<<LcO%[Q^O<<LcOOQU<<Le<<LeO9hQ?MxO<<LeO$!}QWO<<LeO9RQWO<<LeO''TQ`O1G5RO''`QWO7+,POOQUAN=]AN=]O9hQ?MxOAN=]OOQU<= n<= nOOQU<= o<= oO''hQWO<= nO''mQWO<= oOOQU<<Lm<<LmO''rQWO<<LmO''wQ^O<<LmOOQU1G3w1G3wO>tQWO7+)hO'(OQWO<<I}O'(ZQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$>`Q?NdOAN?[OOQOAN>{AN>{O%[Q^OAN?[OOQO<<Mu<<MuOOQUG27SG27SO!&_Q7[OG27SO#&wQWOG27SO'(eQrOG27SO4UQrOG27SO'(lQWOG27SO'(tQ07bO<<JeO')RQ07bO1G2^O'*tQ07bO,5?]O',tQ07bO,5?_O'.tQ07bO1G2pO'0tQ07bO1G2rO'2tQ07bO<<KVO'3RQ07bO<<IxOOQO1G1v1G1vO!+hQ7[OANAfOOQO7+*_7+*_O'3`QWO7+*_O'3kQWO<= dO'3sQpO7+*aOOQ?Mp<<Ko<<KoO$(PQWO<<KoOCcQWO<<KoO'3}QWO<<KoOOQ?Mp<<Kn<<KnO'4YQpO<<KoO$(PQWO<<KnO'4aQWO<<KoO!&_Q7[O<<KoOOQO7+*n7+*nO9^QWO7+*nO'4fQWO<= mOOQUG27oG27oO9hQ?MxOG27oO!(oQ^O1G5OO'4nQWO7+,OO&7WQWOANA}OOQUANA}ANA}O!&_Q7[OANA}O'4vQWOANA}OOQUANBPANBPO9hQ?MxOANBPO$!}QWOANBPOOQO'#H['#H[OOQO7+*m7+*mOOQUG22wG22wOOQUANEYANEYOOQUANEZANEZOOQUANBXANBXO'5OQWOANBXOOQU<<MS<<MSO!(oQ^OAN?iOOQOG24vG24vO$>`Q?NdOG24vO#&wQWOLD,nOOQULD,nLD,nO!&_Q7[OLD,nO'5TQrOLD,nO'5[Q07bO7+'xO'6}Q07bO,5?]O'8}Q07bO,5?_O':}Q07bO7+'zO'<pQ7[OG27QOOQO<<My<<MyOOQ?MpANAZANAZO$(PQWOANAZOCcQWOANAZO'=QQWOANAZOOQ?MpANAYANAYO'=]QpOANAZOOQO<<NY<<NYOOQULD-ZLD-ZO'=dQ07bO7+*jOOQUG27iG27iO&7WQWOG27iO!&_Q7[OG27iOOQUG27kG27kO9hQ?MxOG27kOOQUG27sG27sO'=nQ07bOG25TOOQOLD*bLD*bOOQU!$(!Y!$(!YO#&wQWO!$(!YO!&_Q7[O!$(!YO'=xQ?NdOG27QOOQ?MpG26uG26uO$(PQWOG26uOCcQWOG26uO'@WQWOG26uOOQULD-TLD-TO&7WQWOLD-TOOQULD-VLD-VOOQU!)9Et!)9EtO#&wQWO!)9EtOOQ?MpLD,aLD,aO$(PQWOLD,aOCcQWOLD,aOOQU!$(!o!$(!oOOQU!.K;`!.K;`O'@cQ07bOG27QOOQ?Mp!$( {!$( {O$(PQWO!$( {OOQ?Mp!)9Eg!)9EgO!(oQ^O'#DwO1PQWO'#EUO'BUQrO'#JmO'B]QMnO'#DsO'BdQ^O'#D{O'BkQrO'#CiO'ERQrO'#CiO!(oQ^O'#D}O'EcQ^O,5;WO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O'#IlO'GfQWO,5<gO!(oQ^O,5;bO'GnQ7[O,5;bO'IXQ7[O,5;bO!(oQ^O,5;vO!&_Q7[O'#GjO'GnQ7[O'#GjO!&_Q7[O'#GlO'GnQ7[O'#GlO1SQWO'#DWO1SQWO'#DWO!&_Q7[O'#F}O'GnQ7[O'#F}O!&_Q7[O'#GPO'GnQ7[O'#GPO!&_Q7[O'#G_O'GnQ7[O'#G_O!(oQ^O,5:gO'I`Q`O'#D[O!(oQ^O,5@jO'EcQ^O1G0rO'IjQ07bO'#CiO!(oQ^O1G2OO!&_Q7[O'#IqO'GnQ7[O'#IqO!&_Q7[O'#IsO'GnQ7[O'#IsO'ItQpO'#CrO!&_Q7[O,5<rO'GnQ7[O,5<rO'EcQ^O1G2PO!(oQ^O7+&yO!&_Q7[O1G2^O'GnQ7[O1G2^O!&_Q7[O'#IqO'GnQ7[O'#IqO!&_Q7[O'#IsO'GnQ7[O'#IsO!&_Q7[O1G2`O'GnQ7[O1G2`O'EcQ^O7+'kO'EcQ^O7+&^O!&_Q7[OANAfO'GnQ7[OANAfO'JXQWO'#ElO'J^QWO'#ElO'JfQWO'#F[O'JkQWO'#EvO'JpQWO'#KOO'J{QWO'#J|O'KWQWO,5;WO'K]Q7[O,5<dO'KdQWO'#GWO'KiQWO'#GWO'KnQWO,5<eO'KvQWO,5;WO'LOQ07bO1G1_O'LVQWO,5<rO'L[QWO,5<rO'LaQWO,5<tO'LfQWO,5<tO'LkQWO1G2PO'LpQWO1G0rO'LuQ7[O<<KzO'L|Q7[O<<KzO7eQ7[O'#FzO9RQWO'#FyOAaQWO'#EkO!(oQ^O,5;sO!3SQWO'#GWO!3SQWO'#GWO!3SQWO'#GYO!3SQWO'#GYO!+hQ7[O7+(`O!+hQ7[O7+(`O%+SQpO1G2tO%+SQpO1G2tO!&_Q7[O,5=YO!&_Q7[O,5=Y",
                stateData: "'NQ~O'wOS'xOSTOS'yRQ~OPYOQYOSfOY!VOaqOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!rwO!uxO!y]O#t!PO$V|O%e}O%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO&S!WO&Y!XO&[!YO&^!ZO&`![O&c!]O&i!^O&o!_O&q!`O&s!aO&u!bO&w!cO(OSO(QTO(TUO([VO(j[O(yiO~OWtO~P`OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa!wOp!nO!P!oO!_!yO!`!vO!a!vO!y;QO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O'y!{O~OP]XR]X[]Xa]Xo]X}]X!P]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X'u]X([]X(m]X(t]X(u]X~O!d%PX~P(qO_!}O(Q#PO(R!}O(S#PO~O_#QO(S#PO(T#PO(U#QO~Ou#SO!R#TO(]#TO(^#VO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O;UO(QTO(TUO([VO(j[O(yiO~O!X#ZO!Y#WO!V(cP!V(qP~P+}O!Z#cO~P`OPYOQYOSfOd!jOe!iOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(QTO(TUO([VO(j[O(yiO~Om#mO!X#iO!y]O#f#lO#g#iO(O;VO!h(nP~P.iO!i#oO(O#nO~O!u#sO!y]O%e#tO~O#h#uO~O!d#vO#h#uO~OP$[OR#zO[$cOo$aO}#yO!P#{O!Y$_O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~Oa(aX'u(aX's(aX!h(aX!V(aX![(aX%f(aX!d(aX~P1qO#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX![(bX%f(bX~Oa(bX'u(bX's(bX!V(bX!h(bXs(bX!d(bX~P4UO#]$eO~O$[$hO$^$gO$e$mO~OSfO![$nO$h$oO$j$qO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{%[O!P${O![$|O!f%aO!i$xO#g%bO$V%_O$r%]O$t%^O$w%`O(O$sO(QTO(TUO([$uO(t$}O(u%POg(XP~O!i%cO~O!P%fO![%gO(O%eO~O!d%kO~Oa%lO'u%lO~O}%pO~P%[O(P!lO~P%[O%k%tO~P%[Oh%VO!i%cO(O%eO(P!lO~Oe%{O!i%cO(O%eO~O#s$RO~O}&QO![%}O!i&PO%g&TO(O%eO(P!lO(QTO(TUO`)SP~O!u#sO~O%p&VO!P)OX![)OX(O)OX~O(O&WO~O!r&]O#t!PO%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO~Od&bOe&aO!u&_O%e&`O%x&^O~P;|Od&eOeyO![&dO!r&]O!uxO!y]O#t!PO%e}O%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO~Ob&hO#]&kO%g&fO(P!lO~P=RO!i&lO!r&pO~O!i#oO~O![XO~Oa%lO't&xO'u%lO~Oa%lO't&{O'u%lO~Oa%lO't&}O'u%lO~O's]X!V]Xs]X!h]X&W]X![]X%f]X!d]X~P(qO!_'[O!`'TO!a'TO(P!lO(QTO(TUO~Op'RO!P'QO!X'UO(`'PO!Z(dP!Z(sP~P@YOk'_O![']O(O%eO~Oe'dO!i%cO(O%eO~O}&QO!i&PO~Op!nO!P!oO!y;QO#Q!pO#R!pO#T!pO#U!pO(P!lO(QTO(TUO(`!mO(j!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAtOa%lOh%VO!d#vO!i%cO'u%lO(m'mO~O!m'qO#]'oO~PCSOp!nO!P!oO(QTO(TUO(`!mO(j!sO~O![XOp(hX!P(hX!_(hX!`(hX!a(hX!y(hX#Q(hX#R(hX#S(hX#T(hX#U(hX#X(hX#Y(hX(P(hX(Q(hX(T(hX(`(hX(j(hX~O!`'iO!a'iO(P!lO~PCrO'z'uO'{'uO'|'wO~O_!}O(Q'yO(R!}O(S'yO~O_#QO(S'yO(T'yO(U#QO~Ou#SO!R#TO(]#TO(^'}O~O!X(PO!V'SX!V'YX!Y'SX!Y'YX~P+}O!Y(RO!V(cX~OP$[OR#zO[$cOo$aO}#yO!P#{O!Y(RO!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~O!V(cX~PGfO!V(WO~O!V(pX!Y(pX!d(pX!h(pX(m(pX~O#](pX#h#aX!Z(pX~PIiO#](XO!V(rX!Y(rX~O!Y(YO!V(qX~O!V(]O~O#]$eO~PIiO!Z(^O~P`OR#zO}#yO!P#{O!i#xO([VOP!ka[!kao!ka!Y!ka!m!ka#O!ka#k!ka#l!ka#m!ka#n!ka#o!ka#p!ka#q!ka#r!ka#s!ka#u!ka#w!ka#y!ka#z!ka(m!ka(t!ka(u!ka~Oa!ka'u!ka's!ka!V!ka!h!kas!ka![!ka%f!ka!d!ka~PKPO!h(_O~O!d#vO#](`O(m'mO!Y(oXa(oX'u(oX~O!h(oX~PMlO!P%fO![%gO!y]O#f(eO#g(dO(O%eO~O!Y(fO!h(nX~O!h(hO~O!P%fO![%gO#g(dO(O%eO~OP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O!d#vO!h(bX~P! YOR(jO}(iO!i#xO#P$dO!y!xa!P!xa~O!u!xa%e!xa![!xa#f!xa#g!xa(O!xa~P!#ZO!u(nO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~O#h(tO~O!X(vO!h(fP~P%[O(`(xO(j[O~O!P(zO!i#xO(`(xO(j[O~OP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![!eO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(O)XO(QTO(TUO([VO(j[O(y<xO~O!Y$_Oa$oa'u$oa's$oa!h$oa!V$oa![$oa%f$oa!d$oa~O#t)`O~P!&_Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{%[O!P${O![$|O!f%aO!i$xO#g%bO$V%_O$r%]O$t%^O$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~Og(kP~P!+hO})eO!d)dO![$]X$Y$]X$[$]X$^$]X$e$]X~O!d)dO![(vX$Y(vX$[(vX$^(vX$e(vX~O})eO~P!-qO})eO![(vX$Y(vX$[(vX$^(vX$e(vX~O![)gO$Y)kO$[)fO$^)fO$e)lO~O!X)oO~P!(oO$[$hO$^$gO$e)sO~Ok$xX}$xX!P$xX#P$xX(t$xX(u$xX~OgjXg$xXkjX!YjX#]jX~P!/gOu)uO(])vO(^)xO~Ok*RO})zO!P){O(t$}O(u%PO~Og)yO~P!0kOg*SO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P*UO![*VO!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(QTO(TUO([$uO(t$}O(u%PO~O!X*YO(O*TO!h(zP~P!1YO#h*[O~O!i*]O~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(O*_O(QTO(TUO([$uO(t$}O(u%PO~O!X*bO!V({P~P!3XOo*nO!P*fO!_*lO!`*eO!a*eO!i*]O#X*mO%]*hO(P!lO(`!mO~O!Z*kO~P!4|O#P$dOk(ZX}(ZX!P(ZX(t(ZX(u(ZX!Y(ZX#](ZX~Og(ZX#}(ZX~P!5uOk*sO#]*rOg(YX!Y(YX~O!Y*tOg(XX~O(O&WOg(XP~Op*wO~O!i*|O~O(O(rO~Om+QO!P%fO!X#iO![%gO!y]O#f#lO#g#iO(O%eO!h(nP~O!d#vO#h+RO~O!P%fO!X+TO!Y(YO![%gO(O%eO!V(qP~Op'XO!P+VO!X+UO(QTO(TUO(`(xO~O!Z(sP~P!8uO!Y+WOa)PX'u)PX~OP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~Oa!ga!Y!ga'u!ga's!ga!V!ga!h!gas!ga![!ga%f!ga!d!ga~P!9mOR#zO}#yO!P#{O!i#xO([VOP!oa[!oao!oa!Y!oa!m!oa#O!oa#k!oa#l!oa#m!oa#n!oa#o!oa#p!oa#q!oa#r!oa#s!oa#u!oa#w!oa#y!oa#z!oa(m!oa(t!oa(u!oa~Oa!oa'u!oa's!oa!V!oa!h!oas!oa![!oa%f!oa!d!oa~P!<TOR#zO}#yO!P#{O!i#xO([VOP!qa[!qao!qa!Y!qa!m!qa#O!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#s!qa#u!qa#w!qa#y!qa#z!qa(m!qa(t!qa(u!qa~Oa!qa'u!qa's!qa!V!qa!h!qas!qa![!qa%f!qa!d!qa~P!>kOh%VOk+aO![']O%f+`O~O!d+cOa(WX![(WX'u(WX!Y(WX~Oa%lO![XO'u%lO~Oh%VO!i%cO~Oh%VO!i%cO(O%eO~O!d#vO#h(tO~Ob+nO%g+oO(O+kO(QTO(TUO!Z)TP~O!Y+pO`)SX~O[+tO~O`+uO~O![%}O(O%eO(P!lO`)SP~Oh%VO#]+zO~Oh%VOk+}O![$|O~O![,PO~O},RO![XO~O%k%tO~O!u,WO~Oe,]O~Ob,^O(O#nO(QTO(TUO!Z)RP~Oe%{O~O%g!QO(O&WO~P=RO[,cO`,bO~OPYOQYOSfOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO!fuO!iZO!lYO!mYO!nYO!pvO!uxO!y]O%e}O(QTO(TUO([VO(j[O(yiO~O![!eO!r!gO$V!kO(O!dO~P!EkO`,bOa%lO'u%lO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa,hO!rwO#t!OO%i!OO%j!OO%k!OO~P!HTO!i&lO~O&Y,nO~O![,pO~O&k,rO&m,sOP&haQ&haS&haY&haa&had&hae&ham&hao&hap&haq&haw&hay&ha{&ha!P&ha!T&ha!U&ha![&ha!f&ha!i&ha!l&ha!m&ha!n&ha!p&ha!r&ha!u&ha!y&ha#t&ha$V&ha%e&ha%g&ha%i&ha%j&ha%k&ha%n&ha%p&ha%s&ha%t&ha%v&ha&S&ha&Y&ha&[&ha&^&ha&`&ha&c&ha&i&ha&o&ha&q&ha&s&ha&u&ha&w&ha's&ha(O&ha(Q&ha(T&ha([&ha(j&ha(y&ha!Z&ha&a&hab&ha&f&ha~O(O,xO~Oh!bX!Y!OX!Z!OX!d!OX!d!bX!i!bX#]!OX~O!Y!bX!Z!bX~P# ZO!d,}O#],|Oh(eX!Y#eX!Y(eX!Z#eX!Z(eX!d(eX!i(eX~Oh%VO!d-PO!i%cO!Y!^X!Z!^X~Op!nO!P!oO(QTO(TUO(`!mO~OP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![!eO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(QTO(TUO([VO(j[O(y<xO~O(O;zO~P##_O!Y-TO!Z(dX~O!Z-VO~O!d,}O#],|O!Y#eX!Z#eX~O!Y-WO!Z(sX~O!Z-YO~O!`-ZO!a-ZO(P!lO~P#!|O!Z-^O~P'_Ok-aO![']O~O!V-fO~Op!xa!_!xa!`!xa!a!xa#Q!xa#R!xa#S!xa#T!xa#U!xa#X!xa#Y!xa(P!xa(Q!xa(T!xa(`!xa(j!xa~P!#ZO!m-kO#]-iO~PCSO!`-mO!a-mO(P!lO~PCrOa%lO#]-iO'u%lO~Oa%lO!d#vO#]-iO'u%lO~Oa%lO!d#vO!m-kO#]-iO'u%lO(m'mO~O'z'uO'{'uO'|-rO~Os-sO~O!V'Sa!Y'Sa~P!9mO!X-wO!V'SX!Y'SX~P%[O!Y(RO!V(ca~O!V(ca~PGfO!Y(YO!V(qa~O!P%fO!X-{O![%gO(O%eO!V'YX!Y'YX~O#]-}O!Y(oa!h(oaa(oa'u(oa~O!d#vO~P#+eO!Y(fO!h(na~O!P%fO![%gO#g.RO(O%eO~Om.WO!P%fO!X.TO![%gO!y]O#f.VO#g.TO(O%eO!Y']X!h']X~OR.[O!i#xO~Oh%VOk._O![']O%f.^O~Oa#`i!Y#`i'u#`i's#`i!V#`i!h#`is#`i![#`i%f#`i!d#`i~P!9mOk=UO})zO!P){O(t$}O(u%PO~O#h#[aa#[a#]#[a'u#[a!Y#[a!h#[a![#[a!V#[a~P#.aO#h(ZXP(ZXR(ZX[(ZXa(ZXo(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX'u(ZX([(ZX(m(ZX!h(ZX!V(ZX's(ZXs(ZX![(ZX%f(ZX!d(ZX~P!5uO!Y.lO!h(fX~P!9mO!h.oO~O!V.qO~OP$[OR#zO}#yO!P#{O!i#xO!m$[O([VO[#jia#jio#ji!Y#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#k#ji~P#1|O#k$OO~P#1|OP$[OR#zOo$aO}#yO!P#{O!i#xO!m$[O#k$OO#l$PO#m$PO#n$PO([VO[#jia#ji!Y#ji#O#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#o#ji~P#4kO#o$QO~P#4kOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO([VOa#ji!Y#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#u#ji~P#7YOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO([VO(u#}Oa#ji!Y#ji#y#ji#z#ji'u#ji(m#ji(t#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#w$UO~P#9pO#w#ji~P#9pO#u$SO~P#7YOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO([VO(t#|O(u#}Oa#ji!Y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#y#ji~P#<fO#y$WO~P#<fOP]XR]X[]Xo]X}]X!P]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X!Y]X!Z]X~O#}]X~P#?TOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O#w;`O#y;bO#z;cO([VO(m$YO(t#|O(u#}O~O#}.sO~P#AbO#P$dO#];iO$P;iO#}(bX!Z(bX~P! YOa'`a!Y'`a'u'`a's'`a!h'`a!V'`as'`a!['`a%f'`a!d'`a~P!9mO[#jia#jio#ji!Y#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~OP$[OR#zO}#yO!P#{O!i#xO!m$[O#k$OO#l$PO#m$PO#n$PO([VO(t#ji(u#ji~P#DdOk=UO})zO!P){O(t$}O(u%POP#jiR#ji!i#ji!m#ji#k#ji#l#ji#m#ji#n#ji([#ji~P#DdO!Y.wOg(kX~P!0kOg.yO~Oa$Oi!Y$Oi'u$Oi's$Oi!V$Oi!h$Ois$Oi![$Oi%f$Oi!d$Oi~P!9mO$[.zO$^.zO~O$[.{O$^.{O~O!d)dO#].|O![$bX$Y$bX$[$bX$^$bX$e$bX~O!X.}O~O![)gO$Y/PO$[)fO$^)fO$e/QO~O!Y;dO!Z(aX~P#AbO!Z/RO~O!d)dO$e(vX~O$e/TO~Ou)uO(])vO(^/WO~O!V/[O~P!&_O(t$}Ok%^a}%^a!P%^a(u%^a!Y%^a#]%^a~Og%^a#}%^a~P#K^O(u%POk%`a}%`a!P%`a(t%`a!Y%`a#]%`a~Og%`a#}%`a~P#LPO!YfX!dfX!hfX!h$xX(mfX~P!/gO!X/eO!Y(YO(O/dO!V(qP!V({P~P!1YOo*nO!_*lO!`*eO!a*eO!i*]O#X*mO%]*hO(P!lO~Op'XO!P/fO!X+UO!Z*kO(QTO(TUO(`;wO!Z(sP~P#MjO!h/gO~P#.aO!Y/hO!d#vO(m'mO!h(zX~O!h/mO~O!P%fO!X*YO![%gO(O%eO!h(zP~O#h/oO~O!V$xX!Y$xX!d%PX~P!/gO!Y/pO!V({X~P#.aO!d/rO~O!V/tO~Oh%VOo/xO!d#vO!i%cO(m'mO~O(O/zO~O!d+cO~Oa%lO!Y0OO'u%lO~O!Z0QO~P!4|O!`0RO!a0RO(P!lO(`!mO~O!P0TO(`!mO~O#X0UO~Og%^a!Y%^a#]%^a#}%^a~P!0kOg%`a!Y%`a#]%`a#}%`a~P!0kO(O&WOg'iX!Y'iX~O!Y*tOg(Xa~Og0_O~OR0`O}0`O!P0aO#P$dOkza(tza(uza!Yza#]za~Ogza#}za~P$%]O})zO!P){Ok$qa(t$qa(u$qa!Y$qa#]$qa~Og$qa#}$qa~P$&UO})zO!P){Ok$sa(t$sa(u$sa!Y$sa#]$sa~Og$sa#}$sa~P$&wO#h0dO~Og%Ra!Y%Ra#]%Ra#}%Ra~P!0kO!d#vO~O#h0gO~O!Y+WOa)Pa'u)Pa~OR#zO}#yO!P#{O!i#xO([VOP!oi[!oio!oi!Y!oi!m!oi#O!oi#k!oi#l!oi#m!oi#n!oi#o!oi#p!oi#q!oi#r!oi#s!oi#u!oi#w!oi#y!oi#z!oi(m!oi(t!oi(u!oi~Oa!oi'u!oi's!oi!V!oi!h!ois!oi![!oi%f!oi!d!oi~P$(fOh%VOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(QTO(TUO([$uO(t$}O(u%PO~Om0pO(O0oO~P$*|O!d+cOa(Wa![(Wa'u(Wa!Y(Wa~O#h0vO~O[]X!YfX!ZfX~O!Y0wO!Z)TX~O!Z0yO~O[0zO~Ob0|O(O+kO(QTO(TUO~O![%}O(O%eO`'qX!Y'qX~O!Y+pO`)Sa~O!h1PO~P!9mO[1SO~O`1TO~O#]1WO~Ok1ZO![$|O~O(`(xO!Z)QP~Oh%VOk1dO![1aO%f1cO~O[1nO!Y1lO!Z)RX~O!Z1oO~O`1qOa%lO'u%lO~O(O#nO(QTO(TUO~O#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O#s1tO&W1uOa(bX~P$0dO#]$eO#s1tO&W1uO~Oa1wO~P%[Oa1yO~O&a1|OP&_iQ&_iS&_iY&_ia&_id&_ie&_im&_io&_ip&_iq&_iw&_iy&_i{&_i!P&_i!T&_i!U&_i![&_i!f&_i!i&_i!l&_i!m&_i!n&_i!p&_i!r&_i!u&_i!y&_i#t&_i$V&_i%e&_i%g&_i%i&_i%j&_i%k&_i%n&_i%p&_i%s&_i%t&_i%v&_i&S&_i&Y&_i&[&_i&^&_i&`&_i&c&_i&i&_i&o&_i&q&_i&s&_i&u&_i&w&_i's&_i(O&_i(Q&_i(T&_i([&_i(j&_i(y&_i!Z&_ib&_i&f&_i~Ob2SO!Z2QO&f2RO~P`O![XO!i2UO~O&m,sOP&hiQ&hiS&hiY&hia&hid&hie&him&hio&hip&hiq&hiw&hiy&hi{&hi!P&hi!T&hi!U&hi![&hi!f&hi!i&hi!l&hi!m&hi!n&hi!p&hi!r&hi!u&hi!y&hi#t&hi$V&hi%e&hi%g&hi%i&hi%j&hi%k&hi%n&hi%p&hi%s&hi%t&hi%v&hi&S&hi&Y&hi&[&hi&^&hi&`&hi&c&hi&i&hi&o&hi&q&hi&s&hi&u&hi&w&hi's&hi(O&hi(Q&hi(T&hi([&hi(j&hi(y&hi!Z&hi&a&hib&hi&f&hi~O!V2[O~O!Y!^a!Z!^a~P#AbOp!nO!P!oO!X2bO(`!mO!Y'TX!Z'TX~P@YO!Y-TO!Z(da~O!Y'ZX!Z'ZX~P!8uO!Y-WO!Z(sa~O!Z2iO~P'_Oa%lO#]2rO'u%lO~Oa%lO!d#vO#]2rO'u%lO~Oa%lO!d#vO!m2vO#]2rO'u%lO(m'mO~Oa%lO'u%lO~P!9mO!Y$_Os$oa~O!V'Si!Y'Si~P!9mO!Y(RO!V(ci~O!Y(YO!V(qi~O!V(ri!Y(ri~P!9mO!Y(oi!h(oia(oi'u(oi~P!9mO#]2xO!Y(oi!h(oia(oi'u(oi~O!Y(fO!h(ni~O!P%fO![%gO!y]O#f2}O#g2|O(O%eO~O!P%fO![%gO#g2|O(O%eO~Ok3UO![']O%f3TO~Oh%VOk3UO![']O%f3TO~O#h%^aP%^aR%^a[%^aa%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^as%^a![%^a%f%^a!d%^a~P#K^O#h%`aP%`aR%`a[%`aa%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`as%`a![%`a%f%`a!d%`a~P#LPO#h%^aP%^aR%^a[%^aa%^ao%^a!Y%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^a#]%^as%^a![%^a%f%^a!d%^a~P#.aO#h%`aP%`aR%`a[%`aa%`ao%`a!Y%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`a#]%`as%`a![%`a%f%`a!d%`a~P#.aO#hzaPza[zaazaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza'uza([za(mza!hza!Vza'szasza![za%fza!dza~P$%]O#h$qaP$qaR$qa[$qaa$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa'u$qa([$qa(m$qa!h$qa!V$qa's$qas$qa![$qa%f$qa!d$qa~P$&UO#h$saP$saR$sa[$saa$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa'u$sa([$sa(m$sa!h$sa!V$sa's$sas$sa![$sa%f$sa!d$sa~P$&wO#h%RaP%RaR%Ra[%Raa%Rao%Ra!Y%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra'u%Ra([%Ra(m%Ra!h%Ra!V%Ra's%Ra#]%Ras%Ra![%Ra%f%Ra!d%Ra~P#.aOa#`q!Y#`q'u#`q's#`q!V#`q!h#`qs#`q![#`q%f#`q!d#`q~P!9mO!X3^O!Y'UX!h'UX~P%[O!Y.lO!h(fa~O!Y.lO!h(fa~P!9mO!V3aO~O#}!ka!Z!ka~PKPO#}!ga!Y!ga!Z!ga~P#AbO#}!oa!Z!oa~P!<TO#}!qa!Z!qa~P!>kOg'XX!Y'XX~P!+hO!Y.wOg(ka~OSfO![3uO$c3vO~O!Z3zO~Os3{O~P#.aOa$lq!Y$lq'u$lq's$lq!V$lq!h$lqs$lq![$lq%f$lq!d$lq~P!9mO!V3|O~P#.aO})zO!P){O(u%POk'ea(t'ea!Y'ea#]'ea~Og'ea#}'ea~P%)nO})zO!P){Ok'ga(t'ga(u'ga!Y'ga#]'ga~Og'ga#}'ga~P%*aO(m$YO~P#.aO!VfX!V$xX!YfX!Y$xX!d%PX#]fX~P!/gO(O<QO~P!1YOmkO(O4OO~P.iO!P%fO!X4QO![%gO(O%eO!Y'aX!h'aX~O!Y/hO!h(za~O!Y/hO!d#vO!h(za~O!Y/hO!d#vO(m'mO!h(za~Og$zi!Y$zi#]$zi#}$zi~P!0kO!X4YO!V'cX!Y'cX~P!3XO!Y/pO!V({a~O!Y/pO!V({a~P#.aO!d#vO#s4bO~Oo4eO!d#vO(m'mO~O!P4hO(`!mO~O(t$}Ok%^i}%^i!P%^i(u%^i!Y%^i#]%^i~Og%^i#}%^i~P%.wO(u%POk%`i}%`i!P%`i(t%`i!Y%`i#]%`i~Og%`i#}%`i~P%/jOg(Yi!Y(Yi~P!0kO#]4mOg(Yi!Y(Yi~P!0kO!h4pO~Oa$mq!Y$mq'u$mq's$mq!V$mq!h$mqs$mq![$mq%f$mq!d$mq~P!9mO!V4tO~O!Y4uO![(|X~P#.aOa$xX![$xX%Z]X'u$xX!Y$xX~P!/gO%Z4xOalXklX}lX!PlX![lX'ulX(tlX(ulX!YlX~O%Z4xO~Ob5OO%g5PO(O+kO(QTO(TUO!Y'pX!Z'pX~O!Y0wO!Z)Ta~O[5TO~O`5UO~Oa%lO'u%lO~P#.aO![$|O~P#.aO!Y5^O#]5`O!Z)QX~O!Z5aO~Oo5hOp!nO!P5bO!_!yO!`!vO!a!vO!y;QO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5gO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O!Z5fO~P%4tOk5mO![1aO%f5lO~Oh%VOk5mO![1aO%f5lO~Ob5tO(O#nO(QTO(TUO!Y'oX!Z'oX~O!Y1lO!Z)Ra~O(QTO(TUO(`5vO~O`5zO~O#s5}O&W6OO~PMlO!h6PO~P%[Oa6RO~Oa6RO~P%[Ob2SO!Z6WO&f2RO~P`O!d6YO~O!d6[Oh(ei!Y(ei!Z(ei!d(ei!i(ei~O!Y#ei!Z#ei~P#AbO#]6]O!Y#ei!Z#ei~O!Y!^i!Z!^i~P#AbOa%lO#]6fO'u%lO~Oa%lO!d#vO#]6fO'u%lO~O!Y(oq!h(oqa(oq'u(oq~P!9mO!Y(fO!h(nq~O!P%fO![%gO#g6mO(O%eO~O![']O%f6pO~Ok6tO![']O%f6pO~O#h'eaP'eaR'ea['eaa'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea'u'ea(['ea(m'ea!h'ea!V'ea's'eas'ea!['ea%f'ea!d'ea~P%)nO#h'gaP'gaR'ga['gaa'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga'u'ga(['ga(m'ga!h'ga!V'ga's'gas'ga!['ga%f'ga!d'ga~P%*aO#h$ziP$ziR$zi[$zia$zio$zi!Y$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi'u$zi([$zi(m$zi!h$zi!V$zi's$zi#]$zis$zi![$zi%f$zi!d$zi~P#.aO#h%^iP%^iR%^i[%^ia%^io%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i'u%^i([%^i(m%^i!h%^i!V%^i's%^is%^i![%^i%f%^i!d%^i~P%.wO#h%`iP%`iR%`i[%`ia%`io%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i'u%`i([%`i(m%`i!h%`i!V%`i's%`is%`i![%`i%f%`i!d%`i~P%/jO!Y'Ua!h'Ua~P!9mO!Y.lO!h(fi~O#}#`i!Y#`i!Z#`i~P#AbOP$[OR#zO}#yO!P#{O!i#xO!m$[O([VO[#jio#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#k#ji~P%G^O#k;YO~P%G^OP$[OR#zOo;fO}#yO!P#{O!i#xO!m$[O#k;YO#l;ZO#m;ZO#n;ZO([VO[#ji#O#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#o#ji~P%IfO#o;[O~P%IfOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O([VO#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#u#ji~P%KnOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O([VO(u#}O#y#ji#z#ji#}#ji(m#ji(t#ji!Y#ji!Z#ji~O#w;`O~P%MoO#w#ji~P%MoO#u;^O~P%KnOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O#w;`O([VO(t#|O(u#}O#z#ji#}#ji(m#ji!Y#ji!Z#ji~O#y#ji~P&!OO#y;bO~P&!OOa#{y!Y#{y'u#{y's#{y!V#{y!h#{ys#{y![#{y%f#{y!d#{y~P!9mO[#jio#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji!Y#ji!Z#ji~OP$[OR#zO}#yO!P#{O!i#xO!m$[O#k;YO#l;ZO#m;ZO#n;ZO([VO(t#ji(u#ji~P&$zOk=VO})zO!P){O(t$}O(u%POP#jiR#ji!i#ji!m#ji#k#ji#l#ji#m#ji#n#ji([#ji~P&$zO#P$dOP(ZXR(ZX[(ZXk(ZXo(ZX}(ZX!P(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX#}(ZX([(ZX(m(ZX(t(ZX(u(ZX!Y(ZX!Z(ZX~O#}$Oi!Y$Oi!Z$Oi~P#AbO#}!oi!Z!oi~P$(fOg'Xa!Y'Xa~P!0kO!Z7WO~O!Y'`a!Z'`a~P#AbOP]XR]X[]Xo]X}]X!P]X!V]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!d%WX#s%WX~P&+QO!d#vO(m'mO!Y'aa!h'aa~O!Y/hO!h(zi~O!Y/hO!d#vO!h(zi~Og$zq!Y$zq#]$zq#}$zq~P!0kO!V'ca!Y'ca~P#.aO!d7_O~O!Y/pO!V({i~P#.aO!Y/pO!V({i~O!V7cO~O!d#vO#s7hO~Oo7iO!d#vO(m'mO~O})zO!P){O(u%POk'fa(t'fa!Y'fa#]'fa~Og'fa#}'fa~P&/pO})zO!P){Ok'ha(t'ha(u'ha!Y'ha#]'ha~Og'ha#}'ha~P&0cO!V7lO~Og$|q!Y$|q#]$|q#}$|q~P!0kOa$my!Y$my'u$my's$my!V$my!h$mys$my![$my%f$my!d$my~P!9mO!d6[O~O!Y4uO![(|a~O![']OP$SaR$Sa[$Sao$Sa}$Sa!P$Sa!Y$Sa!i$Sa!m$Sa#O$Sa#k$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#u$Sa#w$Sa#y$Sa#z$Sa([$Sa(m$Sa(t$Sa(u$Sa~O%f6pO~P&2lOa#`y!Y#`y'u#`y's#`y!V#`y!h#`ys#`y![#`y%f#`y!d#`y~P!9mO[7qO~Ob7sO(O+kO(QTO(TUO~O!Y0wO!Z)Ti~O`7wO~O(`(xO!Y'lX!Z'lX~O!Y5^O!Z)Qa~O!Z8QO~P%4tOp!nO!P8RO(QTO(TUO(`!mO(j!sO~O#X8SO~O![1aO~O![1aO%f8UO~Ok8XO![1aO%f8UO~O[8^O!Y'oa!Z'oa~O!Y1lO!Z)Ri~O!h8bO~O!h8cO~O!h8fO~O!h8fO~P%[Oa8hO~O!d8iO~O!h8jO~O!Y(ri!Z(ri~P#AbOa%lO#]8rO'u%lO~O!Y(oy!h(oya(oy'u(oy~P!9mO!Y(fO!h(ny~O%f8uO~P&2lO![']O%f8uO~O#h$zqP$zqR$zq[$zqa$zqo$zq!Y$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq'u$zq([$zq(m$zq!h$zq!V$zq's$zq#]$zqs$zq![$zq%f$zq!d$zq~P#.aO#h'faP'faR'fa['faa'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa'u'fa(['fa(m'fa!h'fa!V'fa's'fas'fa!['fa%f'fa!d'fa~P&/pO#h'haP'haR'ha['haa'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha'u'ha(['ha(m'ha!h'ha!V'ha's'has'ha!['ha%f'ha!d'ha~P&0cO#h$|qP$|qR$|q[$|qa$|qo$|q!Y$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q'u$|q([$|q(m$|q!h$|q!V$|q's$|q#]$|qs$|q![$|q%f$|q!d$|q~P#.aO!Y'Ui!h'Ui~P!9mO#}#`q!Y#`q!Z#`q~P#AbO(t$}OP%^aR%^a[%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a([%^a(m%^a!Y%^a!Z%^a~Ok%^a}%^a!P%^a(u%^a~P&CoO(u%POP%`aR%`a[%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a#}%`a([%`a(m%`a!Y%`a!Z%`a~Ok%`a}%`a!P%`a(t%`a~P&EsOk=VO})zO!P){O(u%PO~P&CoOk=VO})zO!P){O(t$}O~P&EsOR0`O}0`O!P0aO#P$dOPza[zakzaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza#}za([za(mza(tza(uza!Yza!Zza~O})zO!P){OP$qaR$qa[$qak$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa([$qa(m$qa(t$qa(u$qa!Y$qa!Z$qa~O})zO!P){OP$saR$sa[$sak$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa#}$sa([$sa(m$sa(t$sa(u$sa!Y$sa!Z$sa~Ok=VO})zO!P){O(t$}O(u%PO~OP%RaR%Ra[%Rao%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra#}%Ra([%Ra(m%Ra!Y%Ra!Z%Ra~P&NlO#}$lq!Y$lq!Z$lq~P#AbO#}$mq!Y$mq!Z$mq~P#AbO!Z9SO~O#}9TO~P!0kO!d#vO!Y'ai!h'ai~O!d#vO(m'mO!Y'ai!h'ai~O!Y/hO!h(zq~O!V'ci!Y'ci~P#.aO!Y/pO!V({q~Oo9[O!d#vO(m'mO~O!V9]O~P#.aO!V9]O~O!d#vO#s9bO~Og(Yy!Y(Yy~P!0kO!Y'ja!['ja~P#.aOa%Yq![%Yq'u%Yq!Y%Yq~P#.aO[9dO~O!Y0wO!Z)Tq~O#]9hO!Y'la!Z'la~O!Y5^O!Z)Qi~P#AbO!P4hO~O![1aO%f9lO~O(QTO(TUO(`9qO~O!Y1lO!Z)Rq~O!h9tO~O!h9uO~O!h9vO~O!h9vO~P%[O#]9yO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#AbO%f:OO~P&2lO![']O%f:OO~O#}#{y!Y#{y!Z#{y~P#AbOP$ziR$zi[$zio$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi#}$zi([$zi(m$zi!Y$zi!Z$zi~P&NlO})zO!P){O(u%POP'eaR'ea['eak'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(['ea(m'ea(t'ea!Y'ea!Z'ea~O})zO!P){OP'gaR'ga['gak'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga#}'ga(['ga(m'ga(t'ga(u'ga!Y'ga!Z'ga~O(t$}OP%^iR%^i[%^ik%^io%^i}%^i!P%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i([%^i(m%^i(u%^i!Y%^i!Z%^i~O(u%POP%`iR%`i[%`ik%`io%`i}%`i!P%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i#}%`i([%`i(m%`i(t%`i!Y%`i!Z%`i~O#}$my!Y$my!Z$my~P#AbO#}#`y!Y#`y!Z#`y~P#AbO!d#vO!Y'aq!h'aq~O!Y/hO!h(zy~O!V'cq!Y'cq~P#.aOo:YO!d#vO(m'mO~O!V:ZO~P#.aO!V:ZO~O!Y0wO!Z)Ty~O!Y5^O!Z)Qq~O![1aO%f:cO~O!h:fO~O%f:kO~P&2lOP$zqR$zq[$zqo$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq([$zq(m$zq!Y$zq!Z$zq~P&NlO})zO!P){O(u%POP'faR'fa['fak'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(['fa(m'fa(t'fa!Y'fa!Z'fa~O})zO!P){OP'haR'ha['hak'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha#}'ha(['ha(m'ha(t'ha(u'ha!Y'ha!Z'ha~OP$|qR$|q[$|qo$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q#}$|q([$|q(m$|q!Y$|q!Z$|q~P&NlOg%b!Z!Y%b!Z#]%b!Z#}%b!Z~P!0kOo:oO!d#vO(m'mO~O!V:pO~P#.aO!Y'lq!Z'lq~P#AbO!Y#e!Z!Z#e!Z~P#AbO#h%b!ZP%b!ZR%b!Z[%b!Za%b!Zo%b!Z!Y%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z'u%b!Z([%b!Z(m%b!Z!h%b!Z!V%b!Z's%b!Z#]%b!Zs%b!Z![%b!Z%f%b!Z!d%b!Z~P#.aOo:xO!d#vO(m'mO~OP%b!ZR%b!Z[%b!Zo%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z#}%b!Z([%b!Z(m%b!Z!Y%b!Z!Z%b!Z~P&NlOs(aX~P1qO}%pO~P!(oO(P!lO~P!(oO!VfX!YfX#]fX~P&+QOP]XR]X[]Xo]X}]X!P]X!Y]X!YfX!i]X!m]X#O]X#P]X#]]X#]fX#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!dfX!h]X!hfX(mfX~P'BxOP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![XO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(O)XO(QTO(TUO([VO(j[O(y<xO~O!Y;dO!Z$oa~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;oO!P${O![$|O!f=PO!i$xO#g;uO$V%_O$r;qO$t;sO$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~O#t)`O~P'GnOo!bX(m!bX~P# ZO!Z]X!ZfX~P'BxO!VfX!V$xX!YfX!Y$xX#]fX~P!/gO#h;XO~O!d#vO#h;XO~O#];iO~O#s;]O~O#];xO!Y(rX!Z(rX~O#];iO!Y(pX!Z(pX~O#h;yO~Og;{O~P!0kO#h<RO~O#h<SO~O!d#vO#h<TO~O!d#vO#h;yO~O#}<UO~P#AbO#h<VO~O#h<WO~O#h<]O~O#h<^O~O#h<_O~O#h<`O~O#}<aO~P!0kO#}<bO~P!0kO#P#Q#R#T#U#X#f#g#r(y$r$t$w%Z%e%f%g%n%p%s%t%v%x~'yT#l!U'w(P#mp#k#no}'x$['x(O$^(`~",
                goto: "$4Q)XPPPPPP)YPP)]P)nP+O/PPPPP5xPP6`PP<V?mP@QP@QPPP@QPBRP@QP@QP@QPBVPB[PByPGrPPPGvPPPPGvJxPPPKOKzPGvPGvPPNYGvPPPGvPGvP!!aGvP!%v!&{!'UP!'x!'|!'x!+YPPPPPPP!+y!&{PP!,Z!-gP!0jGvGv!0o!3z!8b!8b!<`PPP!<hGvPPPPPPPPPPP!?vP!ATPPGv!BfPGvPGvGvGvGvGvPGv!CxP!GRP!JWP!J[!Jf!Jj!JjP!GOP!Jn!JnP!MsP!MwGvGv!M}##RBV@QP@QP@Q@QP#$_@Q@Q#&j@Q#)Z@Q#+`@Q@Q#,O#.]#.]#.b#.k#.]#.wP#.]P@Q#/a@Q#3S@Q@Q5xPPP#6{PPP#7f#7fP#7fP#7|#7fPP#8SP#7yP#7y#8g#7y#9R#9X5u)]#9[)]P#9c#9c#9cP)]P)]P)]P)]PP)]P#9i#9lP#9l)]P#9pP#9sP)]P)]P)]P)]P)]P)])]PP#9y#:P#:[#:b#:h#:n#:t#;S#;Y#;d#;j#;t#;z#<[#<b#=S#=f#=l#=r#>Q#>g#@V#@e#@l#BR#Ba#C|#D[#Db#Dh#Dn#Dx#EO#EU#E`#Er#ExPPPPPPPPPP#FOPPPPPPP#Fs#Iz#KZ#Kb#KjPPP$!sP$!|$%t$,^$,a$,d$-P$-S$-Z$-cP$-i$-lP$.Y$.^$/U$0d$0i$1PPP$1U$1[$1`P$1c$1g$1k$2a$2x$3a$3e$3h$3k$3q$3t$3x$3|R!|RoqOXst!Z#d%k&o&q&r&t,k,p1|2PY!vQ']-]1a5eQ%rvQ%zyQ&R|Q&g!VS'T!e-TQ'c!iS'i!r!yU*e$|*V*jQ+i%{Q+v&TQ,[&aQ-Z'[Q-e'dQ-m'jQ0R*lQ1k,]R;v;T%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5b5m5}6O6R6f8R8X8h8rS#q];Q!r)Z$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{U*y%[;n;oQ+n%}Q,^&dQ,e&lQ0m+aQ0q+cQ0|+oQ1s,cQ3Q._Q5O0wQ5t1lQ6r3UQ7s5PR8x6t'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{t!nQ!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5e5g$|$ti#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VQ&U|Q'R!eU'X%g*V-WQ+n%}Q,^&dQ0c*|Q0|+oQ1R+uQ1r,bQ1s,cQ5O0wQ5X1TQ5t1lQ5w1nQ5x1qQ7s5PQ7v5UQ8a5zQ9g7wR9r8^rnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR,`&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<z<{[#]WZ#W#Z'U(P!b%hm#h#i#l$x%c%f(Y(d(e(f*U*Y*]+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6[6mQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+h%z%{Q+l%}Q,V&_Q,Z&aS-d'c'dQ.a(nQ0u+iQ0{+oQ0}+pQ1Q+tQ1f,WS1j,[,]Q2n-eQ4}0wQ5R0zQ5W1SQ5s1kQ7r5PQ7u5TQ9c7qR:^9d!O$zi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R!S%wy!i!u%y%z%{'S'b'c'd'h'r*d+h+i-Q-d-e-l/y0u2g2n2u4dQ+b%uQ+{&XQ,O&YQ,Y&aQ.`(mQ1e,VU1i,Z,[,]Q3V.aQ5n1fS5r1j1kQ8]5s#^<|#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vo<};g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bW%Ti%V*t<xS&X!Q&fQ&Y!RQ&Z!SR+y&V$}%Si#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VT)v$u)wV*y%[;n;oW'X!e%g*V-WS(y#y#zQ+]%pQ+s&QS.Y(i(jQ1[,PQ4n0`R7{5^'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{$i$^c#Y#e%o%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)Y)[)^)c)m+^+r-R-p-u-z-|.k.n.r.t.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4r4{6_6e6j6y6z7T7U7}8l8p8z9Q9R9{:`:g;R<oT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q'V!eR2c-Tv!nQ!e!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5e5gU*d$|*V*jS/y*e*lQ0S*mQ1^,RQ4d0RR4g0UnqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&v!^Q's!xS(o#u;XQ+f%xQ,T&[Q,U&^Q-b'aQ-o'lS.j(t;yS0f+R<TQ0s+gQ1`,SQ2T,rQ2V,sQ2_-OQ2l-cQ2o-gS4s0g<_Q4y0tS4|0v<`Q6^2aQ6b2mQ6g2tQ7p4zQ8m6`Q8n6cQ8q6hR9x8j$d$]c#Y#e%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)Y)[)^)c)m+^+r-R-p-u-z-|.k.n.r.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4r4{6_6e6j6y6z7T7U7}8l8p8z9Q9R9{:`:g;R<oS(k#p'fQ({#zS+[%o.tS.Z(j(lR3O.['OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{S#q];QQ&q!XQ&r!YQ&t![Q&u!]R1{,nQ'^!hQ+_%uQ-`'`S.](m+bQ2j-_W3S.`.a0l0nQ6a2kW6n3P3R3V4wU8t6o6q6sU9}8v8w8yS:i9|:PQ:t:jR:z:uU!wQ']-]T5c1a5e!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,k,p.S1|2P]!pQ!r']-]1a5eT#q];Q%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rS(y#y#zS.Y(i(j!s<f$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{U$fd)Z,eS(l#p'fU*q%R(s3pU0b*x.f7PQ4w0mQ6o3QQ8w6rR:P8xm!tQ!r!v!y!z']'i'j'k-]-m1a5e5gQ'q!uS(b#g1vS-k'h'tQ/k*XQ/w*dQ2v-nQ4U/lS4_/x0SQ7Z4PS7f4e4gQ9V7[Q9Z7cQ9`7iS:X9[9]S:n:Y:ZS:w:o:pR:}:xQ#wbQ'p!uS(a#g1vS(c#m+QQ+S%dQ+d%vQ+j%|U-j'h'q'tQ.O(bQ/j*XQ/v*dQ/|*gQ0r+eQ1g,XS2s-k-nQ2{.WS4T/k/lS4^/w0SQ4a/{Q4c/}Q5p1hQ6i2vQ7Y4PQ7^4US7b4_4gQ7g4fQ8Z5qS9U7Z7[Q9Y7cQ9^7fQ9a7jQ9o8[Q:V9VS:W9Z9]Q:[9`Q:e9pS:m:X:ZS:v:n:pQ:|:wQ;O:}Q<i<dQ<t<mR<u<nV!wQ']-]%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rS#wz!j!r<c$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{R<i<z%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*d+h+i-Q-d-e-l/y0u2g2n2u4dS%|z!jQ+e%wQ,X&aW1h,Y,Z,[,]U5q1i1j1kS8[5r5sQ9p8]!r<d$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q<m<yR<n<z%OeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rY#bWZ#W#Z(P!b%hm#h#i#l$x%c%f(Y(d(e(f*U*Y*]+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6[6mQ,f&l!p<e$Z$n)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{R<h'UU'Y!e%g*VR2e-W%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5b5m5}6O6R6f8R8X8h8r!r)Z$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q,e&lQ0m+aQ3Q._Q6r3UR8x6t!b$Tc#Y%o(O(U(p(u)V)W)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;R!P;_)Y)m-R.t2]2`3b3k3l3q3y6_6z7T7U7}8l8z9Q9R:`:g<o!f$Vc#Y%o(O(U(p(u)S)T)V)W)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;R!T;a)Y)m-R.t2]2`3b3h3i3k3l3q3y6_6z7T7U7}8l8z9Q9R:`:g<o!^$Zc#Y%o(O(U(p(u)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;RQ3}/cz<{)Y)m-R.t2]2`3b3q3y6_6z7T7U7}8l8z9Q9R:`:g<oQ=Q=SR=R=T'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{S$oh$pR3v.|'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{T$kf$qQ$ifS)f$l)jR)r$qT$jf$qT)h$l)j'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{T$oh$pQ$rhR)q$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8r!s<y$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{#elOPXZst!Z!`!o#S#d#o#{$n%k&h&k&l&o&q&r&t&x'Q'_(z)o+V+a,h,k,p-a._.}/f0a1d1t1u1w1y1|2P2R3U3u5b5m5}6O6R6t8R8X8h!O%Ri$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R#^(s#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=VQ*}%`Q/Y)zo3p;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!O$yi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=RQ*^$zU*g$|*V*jQ+O%aQ/}*h#^<k#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn<l;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bQ<p<|Q<q<}Q<r=OR<s=P!O%Ri$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R#^(s#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vo3p;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bnoOXst!Z#d%k&o&q&r&t,k,p1|2PS*a${*UQ,y&{Q,z&}R4X/p$|%Si#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VQ+|&YQ1Y,OQ5[1XR7z5]V*i$|*V*jU*i$|*V*jT5d1a5eU/{*f/f5bS4f0T8RR7j4hQ+d%vQ/|*gQ0r+eQ1g,XQ5p1hQ8Z5qQ9o8[R:e9p!O%Oi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=Rr)}$v)a*O*p+P/n0Z0[3s4V4q7X7k:U<j<v<wS0V*o0W#^;j#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn;k;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!`;|(q)_*W*`.b.e.i/U/Z/c/s0k1V1X3Y4W4[5Z5]6u6x7`7d7m7o9X9_:]:l=S=T`;}3o6{7O7S8{:Q:T:{S<X.d3ZT<Y6}9O!O%Qi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=Rv*P$v)a*Q*o+P/_/n0Z0[3s4V4i4q7X7k:U<j<v<wS0X*p0Y#^;l#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn;m;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!d<O(q)_*W*`.c.d.i/U/Z/c/s0k1V1X3W3Y4W4[5Z5]6u6v6x7`7d7m7o9X9_:]:l=S=Td<P3o6|6}7S8{8|:Q:R:T:{S<Z.e3[T<[7O9PrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ&c!UR,h&lrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR&c!UQ,Q&ZR1U+ysnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ1b,VS5k1e1fU8T5i5j5nS9k8V8WS:a9j9mQ:q:bR:y:rQ&j!VR,a&fR5w1nS&O|&TR0}+pQ&o!WR,k&pR,q&uT1},p2PR,u&vQ,t&vR2W,uQ'v!{R-q'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)w$uR/V)wQ#UVR'|#UQ#XWU(S#X(T-xQ(T#YR-x(UQ-U'VR2d-UQ.m(uS3_.m3`R3`.nQ-]']R2h-]Y!rQ']-]1a5eR'g!rQ.x)aR3t.xU#_W%f*UU(Z#_([-yQ([#`R-y(VQ-X'YR2f-Xt`OXst!V!Z#d%k&f&h&o&q&r&t,k,p1|2PS#hZ%cU#r`#h.SR.S(fQ(g#jQ.P(cW.X(g.P2y6kQ2y.QR6k2zQ)j$lR/O)jQ$phR)p$pQ$`cU)]$`-t;eQ-t;RR;e)mQ/i*XW4R/i4S7]9WU4S/j/k/lS7]4T4UR9W7^$Z)|$v(q)_)a*W*`*o*p*z*{+P.d.e.g.h.i/U/Z/_/a/c/n/s0Z0[0k1V1X3W3X3Y3o3s4V4W4[4i4k4q5Z5]6u6v6w6x6}7O7Q7R7S7X7`7d7k7m7o8{8|8}9X9_:Q:R:S:T:U:]:l:{<j<v<w=S=TQ/q*`U4Z/q4]7aQ4]/sR7a4[S*j$|*VR0P*jr*O$v)a*o*p+P/n0Z0[3s4V4q7X7k:U<j<v<w!`.b(q)_*W*`.d.e.i/U/Z/c/s0k1V1X3Y4W4[5Z5]6u6x7`7d7m7o9X9_:]:l=S=TU/`*O.b6{a6{3o6}7O7S8{:Q:T:{Q0W*oQ3Z.dU4j0W3Z9OR9O6}v*Q$v)a*o*p+P/_/n0Z0[3s4V4i4q7X7k:U<j<v<w!d.c(q)_*W*`.d.e.i/U/Z/c/s0k1V1X3W3Y4W4[5Z5]6u6v6x7`7d7m7o9X9_:]:l=S=TU/b*Q.c6|e6|3o6}7O7S8{8|:Q:R:T:{Q0Y*pQ3[.eU4l0Y3[9PR9P7OQ*u%UR0^*uQ4v0kR7n4vQ+X%iR0j+XQ5_1[S7|5_9iR9i7}Q,S&[R1_,SQ5e1aR8P5eQ1m,^S5u1m8_R8_5wQ0x+lW5Q0x5S7t9eQ5S0{Q7t5RR9e7uQ+q&OR1O+qQ2P,pR6V2PYrOXst#dQ&s!ZQ+Z%kQ,j&oQ,l&qQ,m&rQ,o&tQ1z,kS1},p2PR6U1|Q%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Y%jQ+f%xQ+x&UQ,`&jQ,w&yW-h'h'p'q'tQ-o'lQ0O*iQ0s+gS1p,a,dQ2X,vQ2Y,yQ2Z,zQ2o-gW2q-j-k-n-pQ4y0tQ5V1RQ5Y1VQ5o1gQ5y1rQ6T1{U6d2p2s2vQ6g2tQ7p4zQ7x5XQ7y5ZQ8O5dQ8Y5pQ8`5xS8o6e6iQ8q6hQ9f7vQ9n8ZQ9s8aQ9z8pQ:_9gQ:d9oQ:h9{R:s:eQ%xyQ'a!iQ'l!uU+g%y%z%{Q-O'SU-c'b'c'dS-g'h'rQ/u*dS0t+h+iQ2a-QS2m-d-eQ2t-lQ4`/yQ4z0uQ6`2gQ6c2nQ6h2uR7e4dS$wi<xR*v%VU%Ui%V<xR0]*tQ$viS(q#v+cS)_$b$cQ)a$dQ*W$xS*`${*UQ*o%OQ*p%QQ*z%]Q*{%^Q+P%bQ.d;jQ.e;lQ.g;pQ.h;rQ.i;tQ/U)uS/Z){/]Q/_)}Q/a*PQ/c*RQ/n*[S/s*b/eQ0Z*rQ0[*sh0k+`.^1c3T5l6p8U8u9l:O:c:kQ1V+zQ1X+}Q3W;|Q3X<OQ3Y<RS3o;g;hQ3s.wQ4V/oQ4W/pQ4[/rQ4i0VQ4k0XQ4q0dQ5Z1WQ5]1ZQ6u<VQ6v<XQ6w<ZQ6x<]Q6};kQ7O;mQ7Q;qQ7R;sQ7S;uQ7X3}Q7`4YQ7d4bQ7k4mQ7m4uQ7o4xQ8{<SQ8|;}Q8}<PQ9X7_Q9_7hQ:Q<WQ:R<YQ:S<[Q:T<^Q:U9TQ:]9bQ:l<aQ:{<bQ<j<xQ<v=QQ<w=RQ=S=UR=T=VQ*x%[Q.f;nR7P;onpOXst!Z#d%k&o&q&r&t,k,p1|2PQ!fPS#fZ#oQ&y!`U'e!o5b8RQ'{#SQ(|#{Q)n$nS,d&h&kQ,i&lQ,v&xQ,{'QQ-_'_Q.p(zQ/S)oS0h+V/fQ0n+aQ1x,hQ2k-aQ3R._Q3x.}Q4o0aQ5j1dQ5{1tQ5|1uQ6Q1wQ6S1yQ6X2RQ6s3UQ7V3uQ8W5mQ8d5}Q8e6OQ8g6RQ8y6tQ9m8XR9w8h#YcOPXZst!Z!`!o#d#o#{%k&h&k&l&o&q&r&t&x'Q'_(z+V+a,h,k,p-a._/f0a1d1t1u1w1y1|2P2R3U5b5m5}6O6R6t8R8X8hQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)Y$ZQ)[$_Q)^$aQ)c$eW)m$n)o.}3uQ+^%rQ+r&PS-R'U2bQ-p'oS-u(P-wQ-z(XQ-|(`Q.k(tQ.n(vQ.r;PQ.t;SQ.u;TQ.v;WQ/X)yQ0e+RQ2],|Q2`-PQ2p-iQ2w-}Q3].lQ3b;XQ3c;YQ3d;ZQ3e;[Q3f;]Q3g;^Q3h;_Q3i;`Q3j;aQ3k;bQ3l;cQ3m.sQ3n;fQ3q;iQ3r;vQ3y;dQ4r0gQ4{0vQ6_;xQ6e2rQ6j2xQ6y3^Q6z;yQ7T;{Q7U<TQ7}5`Q8l6]Q8p6fQ8z<UQ9Q<_Q9R<`Q9{8rQ:`9hQ:g9yQ;R#SR<o<{R#[WR'W!el!tQ!r!v!y!z']'i'j'k-]-m1a5e5gS'S!e-TS-Q'T'[R2g-ZR(w#xQ!fQT-[']-]]!qQ!r']-]1a5eQ#p]R'f;QR)b$dY!uQ']-]1a5eQ'h!rS'r!v!yS't!z5gS-l'i'jQ-n'kR2u-mT#kZ%cS#jZ%cS%im,gU(c#h#i#lS.Q(d(eQ.U(fQ0i+WQ2z.RU2{.S.T.VS6l2|2}R8s6md#^W#W#Z%f(P(Y*U+T-{/er#gZm#h#i#l%c(d(e(f+W.R.S.T.V2|2}6mS*X$x*]Q/l*YQ1v,gQ2^,}Q4P/hQ6Z2UQ7[4QQ8k6[T<g'U+UV#aW%f*UU#`W%f*US(Q#W(YU(V#Z+T/eS-S'U+UT-v(P-{V'Z!e%g*VQ$lfR)t$qT)i$l)jR3w.|T*Z$x*]T*c${*UQ0l+`Q3P.^Q5i1cQ6q3TQ8V5lQ8v6pQ9j8UQ9|8uQ:b9lQ:j:OQ:r:cR:u:knqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&i!VR,`&ftmOXst!U!V!Z#d%k&f&o&q&r&t,k,p1|2PR,g&lT%jm,gR1],PR,_&dQ&S|R+w&TR+m%}T&m!W&pT&n!W&pT2O,p2P",
                nodeNames: "\u26a0 ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
                maxTerm: 376,
                context: o,
                nodeProps: [["isolate", -8, 5, 6, 14, 34, 36, 48, 50, 52, ""], ["group", -26, 9, 17, 19, 65, 204, 208, 212, 213, 215, 218, 221, 231, 233, 239, 241, 243, 245, 248, 254, 260, 262, 264, 266, 268, 270, 271, "Statement", -34, 13, 14, 29, 32, 33, 39, 48, 51, 52, 54, 59, 67, 69, 73, 77, 79, 81, 82, 107, 108, 117, 118, 135, 138, 140, 141, 142, 143, 144, 146, 147, 166, 167, 169, "Expression", -23, 28, 30, 34, 38, 40, 42, 171, 173, 175, 176, 178, 179, 180, 182, 183, 184, 186, 187, 188, 198, 200, 202, 203, "Type", -3, 85, 100, 106, "ClassItem"], ["openedBy", 23, "<", 35, "InterpolationStart", 53, "[", 57, "{", 70, "(", 159, "JSXStartCloseTag"], ["closedBy", 24, ">", 37, "InterpolationEnd", 47, "]", 58, "}", 71, ")", 164, "JSXEndTag"]],
                propSources: [d],
                skippedNodes: [0, 5, 6, 274],
                repeatNodeCount: 37,
                tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Rp(U!b'w0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(S#S$h&j'x0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Rp(U!b'x0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!m),Q(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(Q':f$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(U!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Rp(U!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Rp(U!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(U!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(U!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(RpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(RpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Rp(U!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(j%1l(Rp(U!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Rp(U!b$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Rp(U!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Rp(U!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(u+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(T';W$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(RpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!i/.^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!h!Lf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Rp(U!b(P%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Rp(U!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Rp(U!bo+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Rp(U!b}.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Rp(U!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(U!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(U!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(U!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(U!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(U!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(U!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Rp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Rp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Rp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Rp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(RpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(RpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Rp(U!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Rp(U!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Rp(U!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Rp(U!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Rp(U!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Rp(U!b'y0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Rp(U!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(U!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(U!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(RpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(RpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Rp(U!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$h&j#})Lv(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#O-<U(Rp(U!b(y7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#p(Ch$e#|$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(m(Ct$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!y$Ip$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!P0,v$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!V#)l$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Rp(U!b([+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Rp(U!b(O,2j$^#t(`$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Rp(U!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X![#Hb(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(t+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z(Kd$?V_!Z(Cds`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!n7`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Rp(U!b'w0/l$[#t(O,2j(`$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Rp(U!b'x0/l$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
                tokenizers: [s, l, u, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, O, new i.uC("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOu~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(^~~", 141, 335), new i.uC("j~RQYZXz{^~^O'{~~aP!P!Qd~iO'|~~", 25, 318)],
                topRules: {
                    Script: [0, 7],
                    SingleExpression: [1, 272],
                    SingleClassItem: [2, 273]
                },
                dialects: {
                    jsx: 0,
                    ts: 14725
                },
                dynamicPrecedences: {
                    77: 1,
                    79: 1,
                    91: 1,
                    167: 1,
                    196: 1
                },
                specialized: [{
                    term: 322,
                    get: e => h[e] || -1
                }, {
                    term: 338,
                    get: e => f[e] || -1
                }, {
                    term: 92,
                    get: e => p[e] || -1
                }],
                tokenPrec: 14749
            })
    }
    ,
    5178: (e, t, n) => {
        n.d(t, {
            Aj: () => w,
            Lu: () => f,
            U1: () => X,
            uC: () => h
        });
        var i = n(45615);
        class r {
            constructor(e, t, n, i, r, a, o, O, s) {
                let l = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0
                    , c = arguments.length > 10 ? arguments[10] : void 0;
                this.p = e,
                    this.stack = t,
                    this.state = n,
                    this.reducePos = i,
                    this.pos = r,
                    this.score = a,
                    this.buffer = o,
                    this.bufferBase = O,
                    this.curContext = s,
                    this.lookAhead = l,
                    this.parent = c
            }
            toString() {
                return `[${this.stack.filter(((e, t) => t % 3 == 0)).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`
            }
            static start(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                    , i = e.parser.context;
                return new r(e, [], t, n, n, 0, [], 0, i ? new a(i, i.start) : null, 0, null)
            }
            get context() {
                return this.curContext ? this.curContext.context : null
            }
            pushState(e, t) {
                this.stack.push(this.state, t, this.bufferBase + this.buffer.length),
                    this.state = e
            }
            reduce(e) {
                var t;
                let n = e >> 19
                    , i = 65535 & e
                    , { parser: r } = this.p
                    , a = this.reducePos < this.pos - 25;
                a && this.setLookAhead(this.pos);
                let o = r.dynamicPrecedence(i);
                if (o && (this.score += o),
                    0 == n)
                    return this.pushState(r.getGoto(this.state, i, !0), this.reducePos),
                        i < r.minRepeatTerm && this.storeNode(i, this.reducePos, this.reducePos, a ? 8 : 4, !0),
                        void this.reduceContext(i, this.reducePos);
                let O = this.stack.length - 3 * (n - 1) - (262144 & e ? 6 : 0)
                    , s = O ? this.stack[O - 2] : this.p.ranges[0].from
                    , l = this.reducePos - s;
                l >= 2e3 && !(null === (t = this.p.parser.nodeSet.types[i]) || void 0 === t ? void 0 : t.isAnonymous) && (s == this.p.lastBigReductionStart ? (this.p.bigReductionCount++,
                    this.p.lastBigReductionSize = l) : this.p.lastBigReductionSize < l && (this.p.bigReductionCount = 1,
                        this.p.lastBigReductionStart = s,
                        this.p.lastBigReductionSize = l));
                let c = O ? this.stack[O - 1] : 0
                    , u = this.bufferBase + this.buffer.length - c;
                if (i < r.minRepeatTerm || 131072 & e) {
                    let e = r.stateFlag(this.state, 1) ? this.pos : this.reducePos;
                    this.storeNode(i, s, e, u + 4, !0)
                }
                if (262144 & e)
                    this.state = this.stack[O];
                else {
                    let e = this.stack[O - 3];
                    this.state = r.getGoto(e, i, !0)
                }
                for (; this.stack.length > O;)
                    this.stack.pop();
                this.reduceContext(i, s)
            }
            storeNode(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 4
                    , r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                if (0 == e && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
                    let e = this
                        , i = this.buffer.length;
                    if (0 == i && e.parent && (i = e.bufferBase - e.parent.bufferBase,
                        e = e.parent),
                        i > 0 && 0 == e.buffer[i - 4] && e.buffer[i - 1] > -1) {
                        if (t == n)
                            return;
                        if (e.buffer[i - 2] >= t)
                            return void (e.buffer[i - 2] = n)
                    }
                }
                if (r && this.pos != n) {
                    let r = this.buffer.length;
                    if (r > 0 && 0 != this.buffer[r - 4]) {
                        let e = !1;
                        for (let t = r; t > 0 && this.buffer[t - 2] > n; t -= 4)
                            if (this.buffer[t - 1] >= 0) {
                                e = !0;
                                break
                            }
                        if (e)
                            for (; r > 0 && this.buffer[r - 2] > n;)
                                this.buffer[r] = this.buffer[r - 4],
                                    this.buffer[r + 1] = this.buffer[r - 3],
                                    this.buffer[r + 2] = this.buffer[r - 2],
                                    this.buffer[r + 3] = this.buffer[r - 1],
                                    r -= 4,
                                    i > 4 && (i -= 4)
                    }
                    this.buffer[r] = e,
                        this.buffer[r + 1] = t,
                        this.buffer[r + 2] = n,
                        this.buffer[r + 3] = i
                } else
                    this.buffer.push(e, t, n, i)
            }
            shift(e, t, n, i) {
                if (131072 & e)
                    this.pushState(65535 & e, this.pos);
                else if (0 == (262144 & e)) {
                    let r = e
                        , { parser: a } = this.p;
                    (i > this.pos || t <= a.maxNode) && (this.pos = i,
                        a.stateFlag(r, 1) || (this.reducePos = i)),
                        this.pushState(r, n),
                        this.shiftContext(t, n),
                        t <= a.maxNode && this.buffer.push(t, n, i, 4)
                } else
                    this.pos = i,
                        this.shiftContext(t, n),
                        t <= this.p.parser.maxNode && this.buffer.push(t, n, i, 4)
            }
            apply(e, t, n, i) {
                65536 & e ? this.reduce(e) : this.shift(e, t, n, i)
            }
            useNode(e, t) {
                let n = this.p.reused.length - 1;
                (n < 0 || this.p.reused[n] != e) && (this.p.reused.push(e),
                    n++);
                let i = this.pos;
                this.reducePos = this.pos = i + e.length,
                    this.pushState(t, i),
                    this.buffer.push(n, i, this.reducePos, -1),
                    this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)))
            }
            split() {
                let e = this
                    , t = e.buffer.length;
                for (; t > 0 && e.buffer[t - 2] > e.reducePos;)
                    t -= 4;
                let n = e.buffer.slice(t)
                    , i = e.bufferBase + t;
                for (; e && i == e.bufferBase;)
                    e = e.parent;
                return new r(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, n, i, this.curContext, this.lookAhead, e)
            }
            recoverByDelete(e, t) {
                let n = e <= this.p.parser.maxNode;
                n && this.storeNode(e, this.pos, t, 4),
                    this.storeNode(0, this.pos, t, n ? 8 : 4),
                    this.pos = this.reducePos = t,
                    this.score -= 190
            }
            canShift(e) {
                for (let t = new o(this); ;) {
                    let n = this.p.parser.stateSlot(t.state, 4) || this.p.parser.hasAction(t.state, e);
                    if (0 == n)
                        return !1;
                    if (0 == (65536 & n))
                        return !0;
                    t.reduce(n)
                }
            }
            recoverByInsert(e) {
                if (this.stack.length >= 300)
                    return [];
                let t = this.p.parser.nextStates(this.state);
                if (t.length > 8 || this.stack.length >= 120) {
                    let n = [];
                    for (let i, r = 0; r < t.length; r += 2)
                        (i = t[r + 1]) != this.state && this.p.parser.hasAction(i, e) && n.push(t[r], i);
                    if (this.stack.length < 120)
                        for (let e = 0; n.length < 8 && e < t.length; e += 2) {
                            let i = t[e + 1];
                            n.some(((e, t) => 1 & t && e == i)) || n.push(t[e], i)
                        }
                    t = n
                }
                let n = [];
                for (let i = 0; i < t.length && n.length < 4; i += 2) {
                    let e = t[i + 1];
                    if (e == this.state)
                        continue;
                    let r = this.split();
                    r.pushState(e, this.pos),
                        r.storeNode(0, r.pos, r.pos, 4, !0),
                        r.shiftContext(t[i], this.pos),
                        r.reducePos = this.pos,
                        r.score -= 200,
                        n.push(r)
                }
                return n
            }
            forceReduce() {
                let { parser: e } = this.p
                    , t = e.stateSlot(this.state, 5);
                if (0 == (65536 & t))
                    return !1;
                if (!e.validAction(this.state, t)) {
                    let n = t >> 19
                        , i = 65535 & t
                        , r = this.stack.length - 3 * n;
                    if (r < 0 || e.getGoto(this.stack[r], i, !1) < 0) {
                        let e = this.findForcedReduction();
                        if (null == e)
                            return !1;
                        t = e
                    }
                    this.storeNode(0, this.pos, this.pos, 4, !0),
                        this.score -= 100
                }
                return this.reducePos = this.pos,
                    this.reduce(t),
                    !0
            }
            findForcedReduction() {
                let { parser: e } = this.p
                    , t = []
                    , n = (i, r) => {
                        if (!t.includes(i))
                            return t.push(i),
                                e.allActions(i, (t => {
                                    if (393216 & t)
                                        ;
                                    else if (65536 & t) {
                                        let n = (t >> 19) - r;
                                        if (n > 1) {
                                            let i = 65535 & t
                                                , r = this.stack.length - 3 * n;
                                            if (r >= 0 && e.getGoto(this.stack[r], i, !1) >= 0)
                                                return n << 19 | 65536 | i
                                        }
                                    } else {
                                        let e = n(t, r + 1);
                                        if (null != e)
                                            return e
                                    }
                                }
                                ))
                    }
                    ;
                return n(this.state, 0)
            }
            forceAll() {
                for (; !this.p.parser.stateFlag(this.state, 2);)
                    if (!this.forceReduce()) {
                        this.storeNode(0, this.pos, this.pos, 4, !0);
                        break
                    }
                return this
            }
            get deadEnd() {
                if (3 != this.stack.length)
                    return !1;
                let { parser: e } = this.p;
                return 65535 == e.data[e.stateSlot(this.state, 1)] && !e.stateSlot(this.state, 4)
            }
            restart() {
                this.storeNode(0, this.pos, this.pos, 4, !0),
                    this.state = this.stack[0],
                    this.stack.length = 0
            }
            sameState(e) {
                if (this.state != e.state || this.stack.length != e.stack.length)
                    return !1;
                for (let t = 0; t < this.stack.length; t += 3)
                    if (this.stack[t] != e.stack[t])
                        return !1;
                return !0
            }
            get parser() {
                return this.p.parser
            }
            dialectEnabled(e) {
                return this.p.parser.dialect.flags[e]
            }
            shiftContext(e, t) {
                this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(t)))
            }
            reduceContext(e, t) {
                this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(t)))
            }
            emitContext() {
                let e = this.buffer.length - 1;
                (e < 0 || -3 != this.buffer[e]) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3)
            }
            emitLookAhead() {
                let e = this.buffer.length - 1;
                (e < 0 || -4 != this.buffer[e]) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4)
            }
            updateContext(e) {
                if (e != this.curContext.context) {
                    let t = new a(this.curContext.tracker, e);
                    t.hash != this.curContext.hash && this.emitContext(),
                        this.curContext = t
                }
            }
            setLookAhead(e) {
                e > this.lookAhead && (this.emitLookAhead(),
                    this.lookAhead = e)
            }
            close() {
                this.curContext && this.curContext.tracker.strict && this.emitContext(),
                    this.lookAhead > 0 && this.emitLookAhead()
            }
        }
        class a {
            constructor(e, t) {
                this.tracker = e,
                    this.context = t,
                    this.hash = e.strict ? e.hash(t) : 0
            }
        }
        class o {
            constructor(e) {
                this.start = e,
                    this.state = e.state,
                    this.stack = e.stack,
                    this.base = this.stack.length
            }
            reduce(e) {
                let t = 65535 & e
                    , n = e >> 19;
                0 == n ? (this.stack == this.start.stack && (this.stack = this.stack.slice()),
                    this.stack.push(this.state, 0, 0),
                    this.base += 3) : this.base -= 3 * (n - 1);
                let i = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0);
                this.state = i
            }
        }
        class O {
            constructor(e, t, n) {
                this.stack = e,
                    this.pos = t,
                    this.index = n,
                    this.buffer = e.buffer,
                    0 == this.index && this.maybeNext()
            }
            static create(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.bufferBase + e.buffer.length;
                return new O(e, t, t - e.bufferBase)
            }
            maybeNext() {
                let e = this.stack.parent;
                null != e && (this.index = this.stack.bufferBase - e.bufferBase,
                    this.stack = e,
                    this.buffer = e.buffer)
            }
            get id() {
                return this.buffer[this.index - 4]
            }
            get start() {
                return this.buffer[this.index - 3]
            }
            get end() {
                return this.buffer[this.index - 2]
            }
            get size() {
                return this.buffer[this.index - 1]
            }
            next() {
                this.index -= 4,
                    this.pos -= 4,
                    0 == this.index && this.maybeNext()
            }
            fork() {
                return new O(this.stack, this.pos, this.index)
            }
        }
        function s(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Uint16Array;
            if ("string" != typeof e)
                return e;
            let n = null;
            for (let i = 0, r = 0; i < e.length;) {
                let a = 0;
                for (; ;) {
                    let t = e.charCodeAt(i++)
                        , n = !1;
                    if (126 == t) {
                        a = 65535;
                        break
                    }
                    t >= 92 && t--,
                        t >= 34 && t--;
                    let r = t - 32;
                    if (r >= 46 && (r -= 46,
                        n = !0),
                        a += r,
                        n)
                        break;
                    a *= 46
                }
                n ? n[r++] = a : n = new t(a)
            }
            return n
        }
        class l {
            constructor() {
                this.start = -1,
                    this.value = -1,
                    this.end = -1,
                    this.extended = -1,
                    this.lookAhead = 0,
                    this.mask = 0,
                    this.context = 0
            }
        }
        const c = new l;
        class u {
            constructor(e, t) {
                this.input = e,
                    this.ranges = t,
                    this.chunk = "",
                    this.chunkOff = 0,
                    this.chunk2 = "",
                    this.chunk2Pos = 0,
                    this.next = -1,
                    this.token = c,
                    this.rangeIndex = 0,
                    this.pos = this.chunkPos = t[0].from,
                    this.range = t[0],
                    this.end = t[t.length - 1].to,
                    this.readNext()
            }
            resolveOffset(e, t) {
                let n = this.range
                    , i = this.rangeIndex
                    , r = this.pos + e;
                for (; r < n.from;) {
                    if (!i)
                        return null;
                    let e = this.ranges[--i];
                    r -= n.from - e.to,
                        n = e
                }
                for (; t < 0 ? r > n.to : r >= n.to;) {
                    if (i == this.ranges.length - 1)
                        return null;
                    let e = this.ranges[++i];
                    r += e.from - n.to,
                        n = e
                }
                return r
            }
            clipPos(e) {
                if (e >= this.range.from && e < this.range.to)
                    return e;
                for (let t of this.ranges)
                    if (t.to > e)
                        return Math.max(e, t.from);
                return this.end
            }
            peek(e) {
                let t, n, i = this.chunkOff + e;
                if (i >= 0 && i < this.chunk.length)
                    t = this.pos + e,
                        n = this.chunk.charCodeAt(i);
                else {
                    let i = this.resolveOffset(e, 1);
                    if (null == i)
                        return -1;
                    if (t = i,
                        t >= this.chunk2Pos && t < this.chunk2Pos + this.chunk2.length)
                        n = this.chunk2.charCodeAt(t - this.chunk2Pos);
                    else {
                        let e = this.rangeIndex
                            , i = this.range;
                        for (; i.to <= t;)
                            i = this.ranges[++e];
                        this.chunk2 = this.input.chunk(this.chunk2Pos = t),
                            t + this.chunk2.length > i.to && (this.chunk2 = this.chunk2.slice(0, i.to - t)),
                            n = this.chunk2.charCodeAt(0)
                    }
                }
                return t >= this.token.lookAhead && (this.token.lookAhead = t + 1),
                    n
            }
            acceptToken(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                    , n = t ? this.resolveOffset(t, -1) : this.pos;
                if (null == n || n < this.token.start)
                    throw new RangeError("Token end out of bounds");
                this.token.value = e,
                    this.token.end = n
            }
            acceptTokenTo(e, t) {
                this.token.value = e,
                    this.token.end = t
            }
            getChunk() {
                if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                    let { chunk: e, chunkPos: t } = this;
                    this.chunk = this.chunk2,
                        this.chunkPos = this.chunk2Pos,
                        this.chunk2 = e,
                        this.chunk2Pos = t,
                        this.chunkOff = this.pos - this.chunkPos
                } else {
                    this.chunk2 = this.chunk,
                        this.chunk2Pos = this.chunkPos;
                    let e = this.input.chunk(this.pos)
                        , t = this.pos + e.length;
                    this.chunk = t > this.range.to ? e.slice(0, this.range.to - this.pos) : e,
                        this.chunkPos = this.pos,
                        this.chunkOff = 0
                }
            }
            readNext() {
                return this.chunkOff >= this.chunk.length && (this.getChunk(),
                    this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff)
            }
            advance() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                for (this.chunkOff += e; this.pos + e >= this.range.to;) {
                    if (this.rangeIndex == this.ranges.length - 1)
                        return this.setDone();
                    e -= this.range.to - this.pos,
                        this.range = this.ranges[++this.rangeIndex],
                        this.pos = this.range.from
                }
                return this.pos += e,
                    this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1),
                    this.readNext()
            }
            setDone() {
                return this.pos = this.chunkPos = this.end,
                    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1],
                    this.chunk = "",
                    this.next = -1
            }
            reset(e, t) {
                if (t ? (this.token = t,
                    t.start = e,
                    t.lookAhead = e + 1,
                    t.value = t.extended = -1) : this.token = c,
                    this.pos != e) {
                    if (this.pos = e,
                        e == this.end)
                        return this.setDone(),
                            this;
                    for (; e < this.range.from;)
                        this.range = this.ranges[--this.rangeIndex];
                    for (; e >= this.range.to;)
                        this.range = this.ranges[++this.rangeIndex];
                    e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = "",
                        this.chunkOff = 0),
                        this.readNext()
                }
                return this
            }
            read(e, t) {
                if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
                    return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
                if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
                    return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
                if (e >= this.range.from && t <= this.range.to)
                    return this.input.read(e, t);
                let n = "";
                for (let i of this.ranges) {
                    if (i.from >= t)
                        break;
                    i.to > e && (n += this.input.read(Math.max(i.from, e), Math.min(i.to, t)))
                }
                return n
            }
        }
        class d {
            constructor(e, t) {
                this.data = e,
                    this.id = t
            }
            token(e, t) {
                let { parser: n } = t.p;
                p(this.data, e, t, this.id, n.data, n.tokenPrecTable)
            }
        }
        d.prototype.contextual = d.prototype.fallback = d.prototype.extend = !1;
        class h {
            constructor(e, t, n) {
                this.precTable = t,
                    this.elseToken = n,
                    this.data = "string" == typeof e ? s(e) : e
            }
            token(e, t) {
                let n = e.pos
                    , i = 0;
                for (; ;) {
                    let n = e.next < 0
                        , r = e.resolveOffset(1, 1);
                    if (p(this.data, e, t, 0, this.data, this.precTable),
                        e.token.value > -1)
                        break;
                    if (null == this.elseToken)
                        return;
                    if (n || i++,
                        null == r)
                        break;
                    e.reset(r, e.token)
                }
                i && (e.reset(n, e.token),
                    e.acceptToken(this.elseToken, i))
            }
        }
        h.prototype.contextual = d.prototype.fallback = d.prototype.extend = !1;
        class f {
            constructor(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                this.token = e,
                    this.contextual = !!t.contextual,
                    this.fallback = !!t.fallback,
                    this.extend = !!t.extend
            }
        }
        function p(e, t, n, i, r, a) {
            let o = 0
                , O = 1 << i
                , { dialect: s } = n.p.parser;
            e: for (; 0 != (O & e[o]);) {
                let n = e[o + 1];
                for (let u = o + 3; u < n; u += 2)
                    if ((e[u + 1] & O) > 0) {
                        let n = e[u];
                        if (s.allows(n) && (-1 == t.token.value || t.token.value == n || g(n, t.token.value, r, a))) {
                            t.acceptToken(n);
                            break
                        }
                    }
                let i = t.next
                    , l = 0
                    , c = e[o + 2];
                if (!(t.next < 0 && c > l && 65535 == e[n + 3 * c - 3])) {
                    for (; l < c;) {
                        let r = l + c >> 1
                            , a = n + r + (r << 1)
                            , O = e[a]
                            , s = e[a + 1] || 65536;
                        if (i < O)
                            c = r;
                        else {
                            if (!(i >= s)) {
                                o = e[a + 2],
                                    t.advance();
                                continue e
                            }
                            l = r + 1
                        }
                    }
                    break
                }
                o = e[n + 3 * c - 1]
            }
        }
        function m(e, t, n) {
            for (let i, r = t; 65535 != (i = e[r]); r++)
                if (i == n)
                    return r - t;
            return -1
        }
        function g(e, t, n, i) {
            let r = m(n, i, t);
            return r < 0 || m(n, i, e) < r
        }
        const Q = "undefined" != typeof process && {
            NODE_ENV: "production",
            PUBLIC_URL: "/share",
            WDS_SOCKET_HOST: void 0,
            WDS_SOCKET_PATH: void 0,
            WDS_SOCKET_PORT: void 0,
            FAST_REFRESH: !0,
            CRAFT_ENV: "user",
            CRAFT_DOMAIN: "craft.do",
            CRAFT_SUBDOMAIN: "docs.craft.do",
            IS_PROD_DOMAIN: !0,
            RECAPTCHA_SITE_KEY: "6LevyzYrAAAAADucbfp2vgGc-3YUFcRMKgma5_11"
        } && /\bparse\b/.test({
            NODE_ENV: "production",
            PUBLIC_URL: "/share",
            WDS_SOCKET_HOST: void 0,
            WDS_SOCKET_PATH: void 0,
            WDS_SOCKET_PORT: void 0,
            FAST_REFRESH: !0,
            CRAFT_ENV: "user",
            CRAFT_DOMAIN: "craft.do",
            CRAFT_SUBDOMAIN: "docs.craft.do",
            IS_PROD_DOMAIN: !0,
            RECAPTCHA_SITE_KEY: "6LevyzYrAAAAADucbfp2vgGc-3YUFcRMKgma5_11"
        }.LOG);
        let $ = null;
        function b(e, t, n) {
            let r = e.cursor(i.Qj.IncludeAnonymous);
            for (r.moveTo(t); ;)
                if (!(n < 0 ? r.childBefore(t) : r.childAfter(t)))
                    for (; ;) {
                        if ((n < 0 ? r.to < t : r.from > t) && !r.type.isError)
                            return n < 0 ? Math.max(0, Math.min(r.to - 1, t - 25)) : Math.min(e.length, Math.max(r.from + 1, t + 25));
                        if (n < 0 ? r.prevSibling() : r.nextSibling())
                            break;
                        if (!r.parent())
                            return n < 0 ? 0 : e.length
                    }
        }
        class y {
            constructor(e, t) {
                this.fragments = e,
                    this.nodeSet = t,
                    this.i = 0,
                    this.fragment = null,
                    this.safeFrom = -1,
                    this.safeTo = -1,
                    this.trees = [],
                    this.start = [],
                    this.index = [],
                    this.nextFragment()
            }
            nextFragment() {
                let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
                if (e) {
                    for (this.safeFrom = e.openStart ? b(e.tree, e.from + e.offset, 1) - e.offset : e.from,
                        this.safeTo = e.openEnd ? b(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length;)
                        this.trees.pop(),
                            this.start.pop(),
                            this.index.pop();
                    this.trees.push(e.tree),
                        this.start.push(-e.offset),
                        this.index.push(0),
                        this.nextStart = this.safeFrom
                } else
                    this.nextStart = 1e9
            }
            nodeAt(e) {
                if (e < this.nextStart)
                    return null;
                for (; this.fragment && this.safeTo <= e;)
                    this.nextFragment();
                if (!this.fragment)
                    return null;
                for (; ;) {
                    let t = this.trees.length - 1;
                    if (t < 0)
                        return this.nextFragment(),
                            null;
                    let n = this.trees[t]
                        , r = this.index[t];
                    if (r == n.children.length) {
                        this.trees.pop(),
                            this.start.pop(),
                            this.index.pop();
                        continue
                    }
                    let a = n.children[r]
                        , o = this.start[t] + n.positions[r];
                    if (o > e)
                        return this.nextStart = o,
                            null;
                    if (a instanceof i.PH) {
                        if (o == e) {
                            if (o < this.safeFrom)
                                return null;
                            let e = o + a.length;
                            if (e <= this.safeTo) {
                                let t = a.prop(i.uY.lookAhead);
                                if (!t || e + t < this.fragment.to)
                                    return a
                            }
                        }
                        this.index[t]++,
                            o + a.length >= Math.max(this.safeFrom, e) && (this.trees.push(a),
                                this.start.push(o),
                                this.index.push(0))
                    } else
                        this.index[t]++,
                            this.nextStart = o + a.length
                }
            }
        }
        class S {
            constructor(e, t) {
                this.stream = t,
                    this.tokens = [],
                    this.mainToken = null,
                    this.actions = [],
                    this.tokens = e.tokenizers.map((e => new l))
            }
            getActions(e) {
                let t = 0
                    , n = null
                    , { parser: i } = e.p
                    , { tokenizers: r } = i
                    , a = i.stateSlot(e.state, 3)
                    , o = e.curContext ? e.curContext.hash : 0
                    , O = 0;
                for (let s = 0; s < r.length; s++) {
                    if (0 == (1 << s & a))
                        continue;
                    let i = r[s]
                        , l = this.tokens[s];
                    if ((!n || i.fallback) && ((i.contextual || l.start != e.pos || l.mask != a || l.context != o) && (this.updateCachedToken(l, i, e),
                        l.mask = a,
                        l.context = o),
                        l.lookAhead > l.end + 25 && (O = Math.max(l.lookAhead, O)),
                        0 != l.value)) {
                        let r = t;
                        if (l.extended > -1 && (t = this.addActions(e, l.extended, l.end, t)),
                            t = this.addActions(e, l.value, l.end, t),
                            !i.extend && (n = l,
                                t > r))
                            break
                    }
                }
                for (; this.actions.length > t;)
                    this.actions.pop();
                return O && e.setLookAhead(O),
                    n || e.pos != this.stream.end || (n = new l,
                        n.value = e.p.parser.eofTerm,
                        n.start = n.end = e.pos,
                        t = this.addActions(e, n.value, n.end, t)),
                    this.mainToken = n,
                    this.actions
            }
            getMainToken(e) {
                if (this.mainToken)
                    return this.mainToken;
                let t = new l
                    , { pos: n, p: i } = e;
                return t.start = n,
                    t.end = Math.min(n + 1, i.stream.end),
                    t.value = n == i.stream.end ? i.parser.eofTerm : 0,
                    t
            }
            updateCachedToken(e, t, n) {
                let i = this.stream.clipPos(n.pos);
                if (t.token(this.stream.reset(i, e), n),
                    e.value > -1) {
                    let { parser: t } = n.p;
                    for (let i = 0; i < t.specialized.length; i++)
                        if (t.specialized[i] == e.value) {
                            let r = t.specializers[i](this.stream.read(e.start, e.end), n);
                            if (r >= 0 && n.p.parser.dialect.allows(r >> 1)) {
                                0 == (1 & r) ? e.value = r >> 1 : e.extended = r >> 1;
                                break
                            }
                        }
                } else
                    e.value = 0,
                        e.end = this.stream.clipPos(i + 1)
            }
            putAction(e, t, n, i) {
                for (let r = 0; r < i; r += 3)
                    if (this.actions[r] == e)
                        return i;
                return this.actions[i++] = e,
                    this.actions[i++] = t,
                    this.actions[i++] = n,
                    i
            }
            addActions(e, t, n, i) {
                let { state: r } = e
                    , { parser: a } = e.p
                    , { data: o } = a;
                for (let O = 0; O < 2; O++)
                    for (let e = a.stateSlot(r, O ? 2 : 1); ; e += 3) {
                        if (65535 == o[e]) {
                            if (1 != o[e + 1]) {
                                0 == i && 2 == o[e + 1] && (i = this.putAction(_(o, e + 2), t, n, i));
                                break
                            }
                            e = _(o, e + 2)
                        }
                        o[e] == t && (i = this.putAction(_(o, e + 1), t, n, i))
                    }
                return i
            }
        }
        class P {
            constructor(e, t, n, i) {
                this.parser = e,
                    this.input = t,
                    this.ranges = i,
                    this.recovering = 0,
                    this.nextStackID = 9812,
                    this.minStackPos = 0,
                    this.reused = [],
                    this.stoppedAt = null,
                    this.lastBigReductionStart = -1,
                    this.lastBigReductionSize = 0,
                    this.bigReductionCount = 0,
                    this.stream = new u(t, i),
                    this.tokens = new S(e, this.stream),
                    this.topTerm = e.top[1];
                let { from: a } = i[0];
                this.stacks = [r.start(this, e.top[0], a)],
                    this.fragments = n.length && this.stream.end - a > 4 * e.bufferLength ? new y(n, e.nodeSet) : null
            }
            get parsedPos() {
                return this.minStackPos
            }
            advance() {
                let e, t, n = this.stacks, i = this.minStackPos, r = this.stacks = [];
                if (this.bigReductionCount > 300 && 1 == n.length) {
                    let [e] = n;
                    for (; e.forceReduce() && e.stack.length && e.stack[e.stack.length - 2] >= this.lastBigReductionStart;)
                        ;
                    this.bigReductionCount = this.lastBigReductionSize = 0
                }
                for (let a = 0; a < n.length; a++) {
                    let o = n[a];
                    for (; ;) {
                        if (this.tokens.mainToken = null,
                            o.pos > i)
                            r.push(o);
                        else {
                            if (this.advanceStack(o, r, n))
                                continue;
                            {
                                e || (e = [],
                                    t = []),
                                    e.push(o);
                                let n = this.tokens.getMainToken(o);
                                t.push(n.value, n.end)
                            }
                        }
                        break
                    }
                }
                if (!r.length) {
                    let t = e && function (e) {
                        let t = null;
                        for (let n of e) {
                            let e = n.p.stoppedAt;
                            (n.pos == n.p.stream.end || null != e && n.pos > e) && n.p.parser.stateFlag(n.state, 2) && (!t || t.score < n.score) && (t = n)
                        }
                        return t
                    }(e);
                    if (t)
                        return Q && console.log("Finish with " + this.stackID(t)),
                            this.stackToTree(t);
                    if (this.parser.strict)
                        throw Q && e && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")),
                        new SyntaxError("No parse at " + i);
                    this.recovering || (this.recovering = 5)
                }
                if (this.recovering && e) {
                    let n = null != this.stoppedAt && e[0].pos > this.stoppedAt ? e[0] : this.runRecovery(e, t, r);
                    if (n)
                        return Q && console.log("Force-finish " + this.stackID(n)),
                            this.stackToTree(n.forceAll())
                }
                if (this.recovering) {
                    let e = 1 == this.recovering ? 1 : 3 * this.recovering;
                    if (r.length > e)
                        for (r.sort(((e, t) => t.score - e.score)); r.length > e;)
                            r.pop();
                    r.some((e => e.reducePos > i)) && this.recovering--
                } else if (r.length > 1) {
                    e: for (let e = 0; e < r.length - 1; e++) {
                        let t = r[e];
                        for (let n = e + 1; n < r.length; n++) {
                            let i = r[n];
                            if (t.sameState(i) || t.buffer.length > 500 && i.buffer.length > 500) {
                                if (!((t.score - i.score || t.buffer.length - i.buffer.length) > 0)) {
                                    r.splice(e--, 1);
                                    continue e
                                }
                                r.splice(n--, 1)
                            }
                        }
                    }
                    r.length > 12 && r.splice(12, r.length - 12)
                }
                this.minStackPos = r[0].pos;
                for (let a = 1; a < r.length; a++)
                    r[a].pos < this.minStackPos && (this.minStackPos = r[a].pos);
                return null
            }
            stopAt(e) {
                if (null != this.stoppedAt && this.stoppedAt < e)
                    throw new RangeError("Can't move stoppedAt forward");
                this.stoppedAt = e
            }
            advanceStack(e, t, n) {
                let r = e.pos
                    , { parser: a } = this
                    , o = Q ? this.stackID(e) + " -> " : "";
                if (null != this.stoppedAt && r > this.stoppedAt)
                    return e.forceReduce() ? e : null;
                if (this.fragments) {
                    let t = e.curContext && e.curContext.tracker.strict
                        , n = t ? e.curContext.hash : 0;
                    for (let O = this.fragments.nodeAt(r); O;) {
                        let r = this.parser.nodeSet.types[O.type.id] == O.type ? a.getGoto(e.state, O.type.id) : -1;
                        if (r > -1 && O.length && (!t || (O.prop(i.uY.contextHash) || 0) == n))
                            return e.useNode(O, r),
                                Q && console.log(o + this.stackID(e) + ` (via reuse of ${a.getName(O.type.id)})`),
                                !0;
                        if (!(O instanceof i.PH) || 0 == O.children.length || O.positions[0] > 0)
                            break;
                        let s = O.children[0];
                        if (!(s instanceof i.PH && 0 == O.positions[0]))
                            break;
                        O = s
                    }
                }
                let O = a.stateSlot(e.state, 4);
                if (O > 0)
                    return e.reduce(O),
                        Q && console.log(o + this.stackID(e) + ` (via always-reduce ${a.getName(65535 & O)})`),
                        !0;
                if (e.stack.length >= 8400)
                    for (; e.stack.length > 6e3 && e.forceReduce();)
                        ;
                let s = this.tokens.getActions(e);
                for (let i = 0; i < s.length;) {
                    let O = s[i++]
                        , l = s[i++]
                        , c = s[i++]
                        , u = i == s.length || !n
                        , d = u ? e : e.split()
                        , h = this.tokens.mainToken;
                    if (d.apply(O, l, h ? h.start : d.pos, c),
                        Q && console.log(o + this.stackID(d) + ` (via ${0 == (65536 & O) ? "shift" : `reduce of ${a.getName(65535 & O)}`} for ${a.getName(l)} @ ${r}${d == e ? "" : ", split"})`),
                        u)
                        return !0;
                    d.pos > r ? t.push(d) : n.push(d)
                }
                return !1
            }
            advanceFully(e, t) {
                let n = e.pos;
                for (; ;) {
                    if (!this.advanceStack(e, null, null))
                        return !1;
                    if (e.pos > n)
                        return v(e, t),
                            !0
                }
            }
            runRecovery(e, t, n) {
                let i = null
                    , r = !1;
                for (let a = 0; a < e.length; a++) {
                    let o = e[a]
                        , O = t[a << 1]
                        , s = t[1 + (a << 1)]
                        , l = Q ? this.stackID(o) + " -> " : "";
                    if (o.deadEnd) {
                        if (r)
                            continue;
                        if (r = !0,
                            o.restart(),
                            Q && console.log(l + this.stackID(o) + " (restarted)"),
                            this.advanceFully(o, n))
                            continue
                    }
                    let c = o.split()
                        , u = l;
                    for (let e = 0; c.forceReduce() && e < 10; e++) {
                        if (Q && console.log(u + this.stackID(c) + " (via force-reduce)"),
                            this.advanceFully(c, n))
                            break;
                        Q && (u = this.stackID(c) + " -> ")
                    }
                    for (let e of o.recoverByInsert(O))
                        Q && console.log(l + this.stackID(e) + " (via recover-insert)"),
                            this.advanceFully(e, n);
                    this.stream.end > o.pos ? (s == o.pos && (s++,
                        O = 0),
                        o.recoverByDelete(O, s),
                        Q && console.log(l + this.stackID(o) + ` (via recover-delete ${this.parser.getName(O)})`),
                        v(o, n)) : (!i || i.score < o.score) && (i = o)
                }
                return i
            }
            stackToTree(e) {
                return e.close(),
                    i.PH.build({
                        buffer: O.create(e),
                        nodeSet: this.parser.nodeSet,
                        topID: this.topTerm,
                        maxBufferLength: this.parser.bufferLength,
                        reused: this.reused,
                        start: this.ranges[0].from,
                        length: e.pos - this.ranges[0].from,
                        minRepeatType: this.parser.minRepeatTerm
                    })
            }
            stackID(e) {
                let t = ($ || ($ = new WeakMap)).get(e);
                return t || $.set(e, t = String.fromCodePoint(this.nextStackID++)),
                    t + e
            }
        }
        function v(e, t) {
            for (let n = 0; n < t.length; n++) {
                let i = t[n];
                if (i.pos == e.pos && i.sameState(e))
                    return void (t[n].score < e.score && (t[n] = e))
            }
            t.push(e)
        }
        class x {
            constructor(e, t, n) {
                this.source = e,
                    this.flags = t,
                    this.disabled = n
            }
            allows(e) {
                return !this.disabled || 0 == this.disabled[e]
            }
        }
        const k = e => e;
        class w {
            constructor(e) {
                this.start = e.start,
                    this.shift = e.shift || k,
                    this.reduce = e.reduce || k,
                    this.reuse = e.reuse || k,
                    this.hash = e.hash || (() => 0),
                    this.strict = !1 !== e.strict
            }
        }
        class X extends i.iX {
            constructor(e) {
                if (super(),
                    this.wrappers = [],
                    14 != e.version)
                    throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);
                let t = e.nodeNames.split(" ");
                this.minRepeatTerm = t.length;
                for (let i = 0; i < e.repeatNodeCount; i++)
                    t.push("");
                let n = Object.keys(e.topRules).map((t => e.topRules[t][1]))
                    , r = [];
                for (let i = 0; i < t.length; i++)
                    r.push([]);
                function a(e, t, n) {
                    r[e].push([t, t.deserialize(String(n))])
                }
                if (e.nodeProps)
                    for (let O of e.nodeProps) {
                        let e = O[0];
                        "string" == typeof e && (e = i.uY[e]);
                        for (let t = 1; t < O.length;) {
                            let n = O[t++];
                            if (n >= 0)
                                a(n, e, O[t++]);
                            else {
                                let i = O[t + -n];
                                for (let r = -n; r > 0; r--)
                                    a(O[t++], e, i);
                                t++
                            }
                        }
                    }
                this.nodeSet = new i.fI(t.map(((t, a) => i.Z6.define({
                    name: a >= this.minRepeatTerm ? void 0 : t,
                    id: a,
                    props: r[a],
                    top: n.indexOf(a) > -1,
                    error: 0 == a,
                    skipped: e.skippedNodes && e.skippedNodes.indexOf(a) > -1
                })))),
                    e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)),
                    this.strict = !1,
                    this.bufferLength = i.cF;
                let o = s(e.tokenData);
                this.context = e.context,
                    this.specializerSpecs = e.specialized || [],
                    this.specialized = new Uint16Array(this.specializerSpecs.length);
                for (let i = 0; i < this.specializerSpecs.length; i++)
                    this.specialized[i] = this.specializerSpecs[i].term;
                this.specializers = this.specializerSpecs.map(T),
                    this.states = s(e.states, Uint32Array),
                    this.data = s(e.stateData),
                    this.goto = s(e.goto),
                    this.maxTerm = e.maxTerm,
                    this.tokenizers = e.tokenizers.map((e => "number" == typeof e ? new d(o, e) : e)),
                    this.topRules = e.topRules,
                    this.dialects = e.dialects || {},
                    this.dynamicPrecedences = e.dynamicPrecedences || null,
                    this.tokenPrecTable = e.tokenPrec,
                    this.termNames = e.termNames || null,
                    this.maxNode = this.nodeSet.types.length - 1,
                    this.dialect = this.parseDialect(),
                    this.top = this.topRules[Object.keys(this.topRules)[0]]
            }
            createParse(e, t, n) {
                let i = new P(this, e, t, n);
                for (let r of this.wrappers)
                    i = r(i, e, t, n);
                return i
            }
            getGoto(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                    , i = this.goto;
                if (t >= i[0])
                    return -1;
                for (let r = i[t + 1]; ;) {
                    let t = i[r++]
                        , a = 1 & t
                        , o = i[r++];
                    if (a && n)
                        return o;
                    for (let n = r + (t >> 1); r < n; r++)
                        if (i[r] == e)
                            return o;
                    if (a)
                        return -1
                }
            }
            hasAction(e, t) {
                let n = this.data;
                for (let i = 0; i < 2; i++)
                    for (let r, a = this.stateSlot(e, i ? 2 : 1); ; a += 3) {
                        if (65535 == (r = n[a])) {
                            if (1 != n[a + 1]) {
                                if (2 == n[a + 1])
                                    return _(n, a + 2);
                                break
                            }
                            r = n[a = _(n, a + 2)]
                        }
                        if (r == t || 0 == r)
                            return _(n, a + 1)
                    }
                return 0
            }
            stateSlot(e, t) {
                return this.states[6 * e + t]
            }
            stateFlag(e, t) {
                return (this.stateSlot(e, 0) & t) > 0
            }
            validAction(e, t) {
                return !!this.allActions(e, (e => e == t || null))
            }
            allActions(e, t) {
                let n = this.stateSlot(e, 4)
                    , i = n ? t(n) : void 0;
                for (let r = this.stateSlot(e, 1); null == i; r += 3) {
                    if (65535 == this.data[r]) {
                        if (1 != this.data[r + 1])
                            break;
                        r = _(this.data, r + 2)
                    }
                    i = t(_(this.data, r + 1))
                }
                return i
            }
            nextStates(e) {
                let t = [];
                for (let n = this.stateSlot(e, 1); ; n += 3) {
                    if (65535 == this.data[n]) {
                        if (1 != this.data[n + 1])
                            break;
                        n = _(this.data, n + 2)
                    }
                    if (0 == (1 & this.data[n + 2])) {
                        let e = this.data[n + 1];
                        t.some(((t, n) => 1 & n && t == e)) || t.push(this.data[n], e)
                    }
                }
                return t
            }
            configure(e) {
                let t = Object.assign(Object.create(X.prototype), this);
                if (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)),
                    e.top) {
                    let n = this.topRules[e.top];
                    if (!n)
                        throw new RangeError(`Invalid top rule name ${e.top}`);
                    t.top = n
                }
                return e.tokenizers && (t.tokenizers = this.tokenizers.map((t => {
                    let n = e.tokenizers.find((e => e.from == t));
                    return n ? n.to : t
                }
                ))),
                    e.specializers && (t.specializers = this.specializers.slice(),
                        t.specializerSpecs = this.specializerSpecs.map(((n, i) => {
                            let r = e.specializers.find((e => e.from == n.external));
                            if (!r)
                                return n;
                            let a = Object.assign(Object.assign({}, n), {
                                external: r.to
                            });
                            return t.specializers[i] = T(a),
                                a
                        }
                        ))),
                    e.contextTracker && (t.context = e.contextTracker),
                    e.dialect && (t.dialect = this.parseDialect(e.dialect)),
                    null != e.strict && (t.strict = e.strict),
                    e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)),
                    null != e.bufferLength && (t.bufferLength = e.bufferLength),
                    t
            }
            hasWrappers() {
                return this.wrappers.length > 0
            }
            getName(e) {
                return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e)
            }
            get eofTerm() {
                return this.maxNode + 1
            }
            get topNode() {
                return this.nodeSet.types[this.top[1]]
            }
            dynamicPrecedence(e) {
                let t = this.dynamicPrecedences;
                return null == t ? 0 : t[e] || 0
            }
            parseDialect(e) {
                let t = Object.keys(this.dialects)
                    , n = t.map((() => !1));
                if (e)
                    for (let r of e.split(" ")) {
                        let e = t.indexOf(r);
                        e >= 0 && (n[e] = !0)
                    }
                let i = null;
                for (let r = 0; r < t.length; r++)
                    if (!n[r])
                        for (let e, n = this.dialects[t[r]]; 65535 != (e = this.data[n++]);)
                            (i || (i = new Uint8Array(this.maxTerm + 1)))[e] = 1;
                return new x(e, n, i)
            }
            static deserialize(e) {
                return new X(e)
            }
        }
        function _(e, t) {
            return e[t] | e[t + 1] << 16
        }
        function T(e) {
            if (e.external) {
                let t = e.extend ? 1 : 0;
                return (n, i) => e.external(n, i) << 1 | t
            }
            return e.get
        }
    }
    ,
    9347: (e, t, n) => {
        n.d(t, {
            E: () => Ze,
            Fd: () => A,
            Fz: () => ze,
            K3: () => de,
            Xp: () => fe,
            Z3: () => We,
            zT: () => qe
        });
        var i, r = n(45615), a = n(14462);
        class o {
            static create(e, t, n, i, r) {
                return new o(e, t, n, i + (i << 8) + e + (t << 4) | 0, r, [], [])
            }
            constructor(e, t, n, i, a, o, O) {
                this.type = e,
                    this.value = t,
                    this.from = n,
                    this.hash = i,
                    this.end = a,
                    this.children = o,
                    this.positions = O,
                    this.hashProp = [[r.uY.contextHash, i]]
            }
            addChild(e, t) {
                e.prop(r.uY.contextHash) != this.hash && (e = new r.PH(e.type, e.children, e.positions, e.length, this.hashProp)),
                    this.children.push(e),
                    this.positions.push(t)
            }
            toTree(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.end
                    , n = this.children.length - 1;
                return n >= 0 && (t = Math.max(t, this.positions[n] + this.children[n].length + this.from)),
                    new r.PH(e.types[this.type], this.children, this.positions, t - this.from).balance({
                        makeTree: (e, t, n) => new r.PH(r.Z6.none, e, t, n, this.hashProp)
                    })
            }
        }
        !function (e) {
            e[e.Document = 1] = "Document",
                e[e.CodeBlock = 2] = "CodeBlock",
                e[e.FencedCode = 3] = "FencedCode",
                e[e.Blockquote = 4] = "Blockquote",
                e[e.HorizontalRule = 5] = "HorizontalRule",
                e[e.BulletList = 6] = "BulletList",
                e[e.OrderedList = 7] = "OrderedList",
                e[e.ListItem = 8] = "ListItem",
                e[e.ATXHeading1 = 9] = "ATXHeading1",
                e[e.ATXHeading2 = 10] = "ATXHeading2",
                e[e.ATXHeading3 = 11] = "ATXHeading3",
                e[e.ATXHeading4 = 12] = "ATXHeading4",
                e[e.ATXHeading5 = 13] = "ATXHeading5",
                e[e.ATXHeading6 = 14] = "ATXHeading6",
                e[e.SetextHeading1 = 15] = "SetextHeading1",
                e[e.SetextHeading2 = 16] = "SetextHeading2",
                e[e.HTMLBlock = 17] = "HTMLBlock",
                e[e.LinkReference = 18] = "LinkReference",
                e[e.Paragraph = 19] = "Paragraph",
                e[e.CommentBlock = 20] = "CommentBlock",
                e[e.ProcessingInstructionBlock = 21] = "ProcessingInstructionBlock",
                e[e.Escape = 22] = "Escape",
                e[e.Entity = 23] = "Entity",
                e[e.HardBreak = 24] = "HardBreak",
                e[e.Emphasis = 25] = "Emphasis",
                e[e.StrongEmphasis = 26] = "StrongEmphasis",
                e[e.Link = 27] = "Link",
                e[e.Image = 28] = "Image",
                e[e.InlineCode = 29] = "InlineCode",
                e[e.HTMLTag = 30] = "HTMLTag",
                e[e.Comment = 31] = "Comment",
                e[e.ProcessingInstruction = 32] = "ProcessingInstruction",
                e[e.Autolink = 33] = "Autolink",
                e[e.HeaderMark = 34] = "HeaderMark",
                e[e.QuoteMark = 35] = "QuoteMark",
                e[e.ListMark = 36] = "ListMark",
                e[e.LinkMark = 37] = "LinkMark",
                e[e.EmphasisMark = 38] = "EmphasisMark",
                e[e.CodeMark = 39] = "CodeMark",
                e[e.CodeText = 40] = "CodeText",
                e[e.CodeInfo = 41] = "CodeInfo",
                e[e.LinkTitle = 42] = "LinkTitle",
                e[e.LinkLabel = 43] = "LinkLabel",
                e[e.URL = 44] = "URL"
        }(i || (i = {}));
        class O {
            constructor(e, t) {
                this.start = e,
                    this.content = t,
                    this.marks = [],
                    this.parsers = []
            }
        }
        class s {
            constructor() {
                this.text = "",
                    this.baseIndent = 0,
                    this.basePos = 0,
                    this.depth = 0,
                    this.markers = [],
                    this.pos = 0,
                    this.indent = 0,
                    this.next = -1
            }
            forward() {
                this.basePos > this.pos && this.forwardInner()
            }
            forwardInner() {
                let e = this.skipSpace(this.basePos);
                this.indent = this.countIndent(e, this.pos, this.indent),
                    this.pos = e,
                    this.next = e == this.text.length ? -1 : this.text.charCodeAt(e)
            }
            skipSpace(e) {
                return d(this.text, e)
            }
            reset(e) {
                for (this.text = e,
                    this.baseIndent = this.basePos = this.pos = this.indent = 0,
                    this.forwardInner(),
                    this.depth = 1; this.markers.length;)
                    this.markers.pop()
            }
            moveBase(e) {
                this.basePos = e,
                    this.baseIndent = this.countIndent(e, this.pos, this.indent)
            }
            moveBaseColumn(e) {
                this.baseIndent = e,
                    this.basePos = this.findColumn(e)
            }
            addMarker(e) {
                this.markers.push(e)
            }
            countIndent(e) {
                let t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                for (let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0; n < e; n++)
                    t += 9 == this.text.charCodeAt(n) ? 4 - t % 4 : 1;
                return t
            }
            findColumn(e) {
                let t = 0;
                for (let n = 0; t < this.text.length && n < e; t++)
                    n += 9 == this.text.charCodeAt(t) ? 4 - n % 4 : 1;
                return t
            }
            scrub() {
                if (!this.baseIndent)
                    return this.text;
                let e = "";
                for (let t = 0; t < this.basePos; t++)
                    e += " ";
                return e + this.text.slice(this.basePos)
            }
        }
        function l(e, t, n) {
            if (n.pos == n.text.length || e != t.block && n.indent >= t.stack[n.depth + 1].value + n.baseIndent)
                return !0;
            if (n.indent >= n.baseIndent + 4)
                return !1;
            let r = (e.type == i.OrderedList ? $ : Q)(n, t, !1);
            return r > 0 && (e.type != i.BulletList || m(n, t, !1) < 0) && n.text.charCodeAt(n.pos + r - 1) == e.value
        }
        const c = {
            [i.Blockquote]: (e, t, n) => 62 == n.next && (n.markers.push(L(i.QuoteMark, t.lineStart + n.pos, t.lineStart + n.pos + 1)),
                n.moveBase(n.pos + (u(n.text.charCodeAt(n.pos + 1)) ? 2 : 1)),
                e.end = t.lineStart + n.text.length,
                !0),
            [i.ListItem]: (e, t, n) => !(n.indent < n.baseIndent + e.value && n.next > -1) && (n.moveBaseColumn(n.baseIndent + e.value),
                !0),
            [i.OrderedList]: l,
            [i.BulletList]: l,
            [i.Document]: () => !0
        };
        function u(e) {
            return 32 == e || 9 == e || 10 == e || 13 == e
        }
        function d(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            for (; t < e.length && u(e.charCodeAt(t));)
                t++;
            return t
        }
        function h(e, t, n) {
            for (; t > n && u(e.charCodeAt(t - 1));)
                t--;
            return t
        }
        function f(e) {
            if (96 != e.next && 126 != e.next)
                return -1;
            let t = e.pos + 1;
            for (; t < e.text.length && e.text.charCodeAt(t) == e.next;)
                t++;
            if (t < e.pos + 3)
                return -1;
            if (96 == e.next)
                for (let n = t; n < e.text.length; n++)
                    if (96 == e.text.charCodeAt(n))
                        return -1;
            return t
        }
        function p(e) {
            return 62 != e.next ? -1 : 32 == e.text.charCodeAt(e.pos + 1) ? 2 : 1
        }
        function m(e, t, n) {
            if (42 != e.next && 45 != e.next && 95 != e.next)
                return -1;
            let i = 1;
            for (let r = e.pos + 1; r < e.text.length; r++) {
                let t = e.text.charCodeAt(r);
                if (t == e.next)
                    i++;
                else if (!u(t))
                    return -1
            }
            return n && 45 == e.next && y(e) > -1 && e.depth == t.stack.length || i < 3 ? -1 : 1
        }
        function g(e, t) {
            for (let n = e.stack.length - 1; n >= 0; n--)
                if (e.stack[n].type == t)
                    return !0;
            return !1
        }
        function Q(e, t, n) {
            return 45 != e.next && 43 != e.next && 42 != e.next || e.pos != e.text.length - 1 && !u(e.text.charCodeAt(e.pos + 1)) || !(!n || g(t, i.BulletList) || e.skipSpace(e.pos + 2) < e.text.length) ? -1 : 1
        }
        function $(e, t, n) {
            let r = e.pos
                , a = e.next;
            for (; a >= 48 && a <= 57;) {
                if (r++,
                    r == e.text.length)
                    return -1;
                a = e.text.charCodeAt(r)
            }
            return r == e.pos || r > e.pos + 9 || 46 != a && 41 != a || r < e.text.length - 1 && !u(e.text.charCodeAt(r + 1)) || n && !g(t, i.OrderedList) && (e.skipSpace(r + 1) == e.text.length || r > e.pos + 1 || 49 != e.next) ? -1 : r + 1 - e.pos
        }
        function b(e) {
            if (35 != e.next)
                return -1;
            let t = e.pos + 1;
            for (; t < e.text.length && 35 == e.text.charCodeAt(t);)
                t++;
            if (t < e.text.length && 32 != e.text.charCodeAt(t))
                return -1;
            let n = t - e.pos;
            return n > 6 ? -1 : n
        }
        function y(e) {
            if (45 != e.next && 61 != e.next || e.indent >= e.baseIndent + 4)
                return -1;
            let t = e.pos + 1;
            for (; t < e.text.length && e.text.charCodeAt(t) == e.next;)
                t++;
            let n = t;
            for (; t < e.text.length && u(e.text.charCodeAt(t));)
                t++;
            return t == e.text.length ? n : -1
        }
        const S = /^[ \t]*$/
            , P = /-->/
            , v = /\?>/
            , x = [[/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i], [/^\s*<!--/, P], [/^\s*<\?/, v], [/^\s*<![A-Z]/, />/], [/^\s*<!\[CDATA\[/, /\]\]>/], [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, S], [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, S]];
        function k(e, t, n) {
            if (60 != e.next)
                return -1;
            let i = e.text.slice(e.pos);
            for (let r = 0, a = x.length - (n ? 1 : 0); r < a; r++)
                if (x[r][0].test(i))
                    return r;
            return -1
        }
        function w(e, t) {
            let n = e.countIndent(t, e.pos, e.indent)
                , i = e.countIndent(e.skipSpace(t), t, n);
            return i >= n + 5 ? n + 1 : i
        }
        function X(e, t, n) {
            let r = e.length - 1;
            r >= 0 && e[r].to == t && e[r].type == i.CodeText ? e[r].to = n : e.push(L(i.CodeText, t, n))
        }
        const _ = {
            LinkReference: void 0,
            IndentedCode(e, t) {
                let n = t.baseIndent + 4;
                if (t.indent < n)
                    return !1;
                let r = t.findColumn(n)
                    , a = e.lineStart + r
                    , o = e.lineStart + t.text.length
                    , O = []
                    , s = [];
                for (X(O, a, o); e.nextLine() && t.depth >= e.stack.length;)
                    if (t.pos == t.text.length) {
                        X(s, e.lineStart - 1, e.lineStart);
                        for (let e of t.markers)
                            s.push(e)
                    } else {
                        if (t.indent < n)
                            break;
                        {
                            if (s.length) {
                                for (let e of s)
                                    e.type == i.CodeText ? X(O, e.from, e.to) : O.push(e);
                                s = []
                            }
                            X(O, e.lineStart - 1, e.lineStart);
                            for (let e of t.markers)
                                O.push(e);
                            o = e.lineStart + t.text.length;
                            let n = e.lineStart + t.findColumn(t.baseIndent + 4);
                            n < o && X(O, n, o)
                        }
                    }
                return s.length && (s = s.filter((e => e.type != i.CodeText)),
                    s.length && (t.markers = s.concat(t.markers))),
                    e.addNode(e.buffer.writeElements(O, -a).finish(i.CodeBlock, o - a), a),
                    !0
            },
            FencedCode(e, t) {
                let n = f(t);
                if (n < 0)
                    return !1;
                let r = e.lineStart + t.pos
                    , a = t.next
                    , o = n - t.pos
                    , O = t.skipSpace(n)
                    , s = h(t.text, t.text.length, O)
                    , l = [L(i.CodeMark, r, r + o)];
                O < s && l.push(L(i.CodeInfo, e.lineStart + O, e.lineStart + s));
                for (let c = !0; e.nextLine() && t.depth >= e.stack.length; c = !1) {
                    let n = t.pos;
                    if (t.indent - t.baseIndent < 4)
                        for (; n < t.text.length && t.text.charCodeAt(n) == a;)
                            n++;
                    if (n - t.pos >= o && t.skipSpace(n) == t.text.length) {
                        for (let e of t.markers)
                            l.push(e);
                        l.push(L(i.CodeMark, e.lineStart + t.pos, e.lineStart + n)),
                            e.nextLine();
                        break
                    }
                    {
                        c || X(l, e.lineStart - 1, e.lineStart);
                        for (let e of t.markers)
                            l.push(e);
                        let n = e.lineStart + t.basePos
                            , i = e.lineStart + t.text.length;
                        n < i && X(l, n, i)
                    }
                }
                return e.addNode(e.buffer.writeElements(l, -r).finish(i.FencedCode, e.prevLineEnd() - r), r),
                    !0
            },
            Blockquote(e, t) {
                let n = p(t);
                return !(n < 0) && (e.startContext(i.Blockquote, t.pos),
                    e.addNode(i.QuoteMark, e.lineStart + t.pos, e.lineStart + t.pos + 1),
                    t.moveBase(t.pos + n),
                    null)
            },
            HorizontalRule(e, t) {
                if (m(t, e, !1) < 0)
                    return !1;
                let n = e.lineStart + t.pos;
                return e.nextLine(),
                    e.addNode(i.HorizontalRule, n),
                    !0
            },
            BulletList(e, t) {
                let n = Q(t, e, !1);
                if (n < 0)
                    return !1;
                e.block.type != i.BulletList && e.startContext(i.BulletList, t.basePos, t.next);
                let r = w(t, t.pos + 1);
                return e.startContext(i.ListItem, t.basePos, r - t.baseIndent),
                    e.addNode(i.ListMark, e.lineStart + t.pos, e.lineStart + t.pos + n),
                    t.moveBaseColumn(r),
                    null
            },
            OrderedList(e, t) {
                let n = $(t, e, !1);
                if (n < 0)
                    return !1;
                e.block.type != i.OrderedList && e.startContext(i.OrderedList, t.basePos, t.text.charCodeAt(t.pos + n - 1));
                let r = w(t, t.pos + n);
                return e.startContext(i.ListItem, t.basePos, r - t.baseIndent),
                    e.addNode(i.ListMark, e.lineStart + t.pos, e.lineStart + t.pos + n),
                    t.moveBaseColumn(r),
                    null
            },
            ATXHeading(e, t) {
                let n = b(t);
                if (n < 0)
                    return !1;
                let r = t.pos
                    , a = e.lineStart + r
                    , o = h(t.text, t.text.length, r)
                    , O = o;
                for (; O > r && t.text.charCodeAt(O - 1) == t.next;)
                    O--;
                O != o && O != r && u(t.text.charCodeAt(O - 1)) || (O = t.text.length);
                let s = e.buffer.write(i.HeaderMark, 0, n).writeElements(e.parser.parseInline(t.text.slice(r + n + 1, O), a + n + 1), -a);
                O < t.text.length && s.write(i.HeaderMark, O - r, o - r);
                let l = s.finish(i.ATXHeading1 - 1 + n, t.text.length - r);
                return e.nextLine(),
                    e.addNode(l, a),
                    !0
            },
            HTMLBlock(e, t) {
                let n = k(t, 0, !1);
                if (n < 0)
                    return !1;
                let r = e.lineStart + t.pos
                    , a = x[n][1]
                    , o = []
                    , O = a != S;
                for (; !a.test(t.text) && e.nextLine();) {
                    if (t.depth < e.stack.length) {
                        O = !1;
                        break
                    }
                    for (let e of t.markers)
                        o.push(e)
                }
                O && e.nextLine();
                let s = a == P ? i.CommentBlock : a == v ? i.ProcessingInstructionBlock : i.HTMLBlock
                    , l = e.prevLineEnd();
                return e.addNode(e.buffer.writeElements(o, -r).finish(s, l - r), r),
                    !0
            },
            SetextHeading: void 0
        };
        class T {
            constructor(e) {
                this.stage = 0,
                    this.elts = [],
                    this.pos = 0,
                    this.start = e.start,
                    this.advance(e.content)
            }
            nextLine(e, t, n) {
                if (-1 == this.stage)
                    return !1;
                let i = n.content + "\n" + t.scrub()
                    , r = this.advance(i);
                return r > -1 && r < i.length && this.complete(e, n, r)
            }
            finish(e, t) {
                return (2 == this.stage || 3 == this.stage) && d(t.content, this.pos) == t.content.length && this.complete(e, t, t.content.length)
            }
            complete(e, t, n) {
                return e.addLeafElement(t, L(i.LinkReference, this.start, this.start + n, this.elts)),
                    !0
            }
            nextStage(e) {
                return e ? (this.pos = e.to - this.start,
                    this.elts.push(e),
                    this.stage++,
                    !0) : (!1 === e && (this.stage = -1),
                        !1)
            }
            advance(e) {
                for (; ;) {
                    if (-1 == this.stage)
                        return -1;
                    if (0 == this.stage) {
                        if (!this.nextStage(ae(e, this.pos, this.start, !0)))
                            return -1;
                        if (58 != e.charCodeAt(this.pos))
                            return this.stage = -1;
                        this.elts.push(L(i.LinkMark, this.pos + this.start, this.pos + this.start + 1)),
                            this.pos++
                    } else {
                        if (1 != this.stage) {
                            if (2 == this.stage) {
                                let t = d(e, this.pos)
                                    , n = 0;
                                if (t > this.pos) {
                                    let i = re(e, t, this.start);
                                    if (i) {
                                        let t = z(e, i.to - this.start);
                                        t > 0 && (this.nextStage(i),
                                            n = t)
                                    }
                                }
                                return n || (n = z(e, this.pos)),
                                    n > 0 && n < e.length ? n : -1
                            }
                            return z(e, this.pos)
                        }
                        if (!this.nextStage(ie(e, d(e, this.pos), this.start)))
                            return -1
                    }
                }
            }
        }
        function z(e, t) {
            for (; t < e.length; t++) {
                let n = e.charCodeAt(t);
                if (10 == n)
                    break;
                if (!u(n))
                    return -1
            }
            return t
        }
        class R {
            nextLine(e, t, n) {
                let r = t.depth < e.stack.length ? -1 : y(t)
                    , a = t.next;
                if (r < 0)
                    return !1;
                let o = L(i.HeaderMark, e.lineStart + t.pos, e.lineStart + r);
                return e.nextLine(),
                    e.addLeafElement(n, L(61 == a ? i.SetextHeading1 : i.SetextHeading2, n.start, e.prevLineEnd(), [...e.parser.parseInline(n.content, n.start), o])),
                    !0
            }
            finish() {
                return !1
            }
        }
        const W = {
            LinkReference: (e, t) => 91 == t.content.charCodeAt(0) ? new T(t) : null,
            SetextHeading: () => new R
        }
            , Z = [(e, t) => b(t) >= 0, (e, t) => f(t) >= 0, (e, t) => p(t) >= 0, (e, t) => Q(t, e, !0) >= 0, (e, t) => $(t, e, !0) >= 0, (e, t) => m(t, e, !0) >= 0, (e, t) => k(t, 0, !0) >= 0]
            , q = {
                text: "",
                end: 0
            };
        class U {
            constructor(e, t, n, r) {
                this.parser = e,
                    this.input = t,
                    this.ranges = r,
                    this.line = new s,
                    this.atEnd = !1,
                    this.reusePlaceholders = new Map,
                    this.stoppedAt = null,
                    this.rangeI = 0,
                    this.to = r[r.length - 1].to,
                    this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = r[0].from,
                    this.block = o.create(i.Document, 0, this.lineStart, 0, 0),
                    this.stack = [this.block],
                    this.fragments = n.length ? new le(n, t) : null,
                    this.readLine()
            }
            get parsedPos() {
                return this.absoluteLineStart
            }
            advance() {
                if (null != this.stoppedAt && this.absoluteLineStart > this.stoppedAt)
                    return this.finish();
                let { line: e } = this;
                for (; ;) {
                    for (let t = 0; ;) {
                        let n = e.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
                        for (; t < e.markers.length && (!n || e.markers[t].from < n.end);) {
                            let n = e.markers[t++];
                            this.addNode(n.type, n.from, n.to)
                        }
                        if (!n)
                            break;
                        this.finishContext()
                    }
                    if (e.pos < e.text.length)
                        break;
                    if (!this.nextLine())
                        return this.finish()
                }
                if (this.fragments && this.reuseFragment(e.basePos))
                    return null;
                e: for (; ;) {
                    for (let t of this.parser.blockParsers)
                        if (t) {
                            let n = t(this, e);
                            if (0 != n) {
                                if (1 == n)
                                    return null;
                                e.forward();
                                continue e
                            }
                        }
                    break
                }
                let t = new O(this.lineStart + e.pos, e.text.slice(e.pos));
                for (let n of this.parser.leafBlockParsers)
                    if (n) {
                        let e = n(this, t);
                        e && t.parsers.push(e)
                    }
                e: for (; this.nextLine() && e.pos != e.text.length;) {
                    if (e.indent < e.baseIndent + 4)
                        for (let n of this.parser.endLeafBlock)
                            if (n(this, e, t))
                                break e;
                    for (let n of t.parsers)
                        if (n.nextLine(this, e, t))
                            return null;
                    t.content += "\n" + e.scrub();
                    for (let n of e.markers)
                        t.marks.push(n)
                }
                return this.finishLeaf(t),
                    null
            }
            stopAt(e) {
                if (null != this.stoppedAt && this.stoppedAt < e)
                    throw new RangeError("Can't move stoppedAt forward");
                this.stoppedAt = e
            }
            reuseFragment(e) {
                if (!this.fragments.moveTo(this.absoluteLineStart + e, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
                    return !1;
                let t = this.fragments.takeNodes(this);
                return !!t && (this.absoluteLineStart += t,
                    this.lineStart = ce(this.absoluteLineStart, this.ranges),
                    this.moveRangeI(),
                    this.absoluteLineStart < this.to ? (this.lineStart++,
                        this.absoluteLineStart++,
                        this.readLine()) : (this.atEnd = !0,
                            this.readLine()),
                    !0)
            }
            get depth() {
                return this.stack.length
            }
            parentType() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.depth - 1;
                return this.parser.nodeSet.types[this.stack[e].type]
            }
            nextLine() {
                return this.lineStart += this.line.text.length,
                    this.absoluteLineEnd >= this.to ? (this.absoluteLineStart = this.absoluteLineEnd,
                        this.atEnd = !0,
                        this.readLine(),
                        !1) : (this.lineStart++,
                            this.absoluteLineStart = this.absoluteLineEnd + 1,
                            this.moveRangeI(),
                            this.readLine(),
                            !0)
            }
            moveRangeI() {
                for (; this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to;)
                    this.rangeI++,
                        this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from)
            }
            scanLine(e) {
                let t = q;
                if (t.end = e,
                    e >= this.to)
                    t.text = "";
                else if (t.text = this.lineChunkAt(e),
                    t.end += t.text.length,
                    this.ranges.length > 1) {
                    let e = this.absoluteLineStart
                        , n = this.rangeI;
                    for (; this.ranges[n].to < t.end;) {
                        n++;
                        let i = this.ranges[n].from
                            , r = this.lineChunkAt(i);
                        t.end = i + r.length,
                            t.text = t.text.slice(0, this.ranges[n - 1].to - e) + r,
                            e = t.end - t.text.length
                    }
                }
                return t
            }
            readLine() {
                let { line: e } = this
                    , { text: t, end: n } = this.scanLine(this.absoluteLineStart);
                for (this.absoluteLineEnd = n,
                    e.reset(t); e.depth < this.stack.length; e.depth++) {
                    let t = this.stack[e.depth]
                        , n = this.parser.skipContextMarkup[t.type];
                    if (!n)
                        throw new Error("Unhandled block context " + i[t.type]);
                    if (!n(t, this, e))
                        break;
                    e.forward()
                }
            }
            lineChunkAt(e) {
                let t, n = this.input.chunk(e);
                if (this.input.lineChunks)
                    t = "\n" == n ? "" : n;
                else {
                    let e = n.indexOf("\n");
                    t = e < 0 ? n : n.slice(0, e)
                }
                return e + t.length > this.to ? t.slice(0, this.to - e) : t
            }
            prevLineEnd() {
                return this.atEnd ? this.lineStart : this.lineStart - 1
            }
            startContext(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                this.block = o.create(e, n, this.lineStart + t, this.block.hash, this.lineStart + this.line.text.length),
                    this.stack.push(this.block)
            }
            startComposite(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                this.startContext(this.parser.getNodeType(e), t, n)
            }
            addNode(e, t, n) {
                "number" == typeof e && (e = new r.PH(this.parser.nodeSet.types[e], G, G, (null !== n && void 0 !== n ? n : this.prevLineEnd()) - t)),
                    this.block.addChild(e, t - this.block.from)
            }
            addElement(e) {
                this.block.addChild(e.toTree(this.parser.nodeSet), e.from - this.block.from)
            }
            addLeafElement(e, t) {
                this.addNode(this.buffer.writeElements(Oe(t.children, e.marks), -t.from).finish(t.type, t.to - t.from), t.from)
            }
            finishContext() {
                let e = this.stack.pop()
                    , t = this.stack[this.stack.length - 1];
                t.addChild(e.toTree(this.parser.nodeSet), e.from - t.from),
                    this.block = t
            }
            finish() {
                for (; this.stack.length > 1;)
                    this.finishContext();
                return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart))
            }
            addGaps(e) {
                return this.ranges.length > 1 ? Y(this.ranges, 0, e.topNode, this.ranges[0].from, this.reusePlaceholders) : e
            }
            finishLeaf(e) {
                for (let n of e.parsers)
                    if (n.finish(this, e))
                        return;
                let t = Oe(this.parser.parseInline(e.content, e.start), e.marks);
                this.addNode(this.buffer.writeElements(t, -e.start).finish(i.Paragraph, e.content.length), e.start)
            }
            elt(e, t, n, i) {
                return "string" == typeof e ? L(this.parser.getNodeType(e), t, n, i) : new N(e, t)
            }
            get buffer() {
                return new I(this.parser.nodeSet)
            }
        }
        function Y(e, t, n, i, a) {
            let o = e[t].to
                , O = []
                , s = []
                , l = n.from + i;
            function c(n, r) {
                for (; r ? n >= o : n > o;) {
                    let r = e[t + 1].from - o;
                    i += r,
                        n += r,
                        t++,
                        o = e[t].to
                }
            }
            for (let r = n.firstChild; r; r = r.nextSibling) {
                c(r.from + i, !0);
                let n, u = r.from + i, d = a.get(r.tree);
                d ? n = d : r.to + i > o ? (n = Y(e, t, r, i, a),
                    c(r.to + i, !1)) : n = r.toTree(),
                    O.push(n),
                    s.push(u - l)
            }
            return c(n.to + i, !1),
                new r.PH(n.type, O, s, n.to + i - l, n.tree ? n.tree.propValues : void 0)
        }
        class A extends r.iX {
            constructor(e, t, n, i, r, a, o, O, s) {
                super(),
                    this.nodeSet = e,
                    this.blockParsers = t,
                    this.leafBlockParsers = n,
                    this.blockNames = i,
                    this.endLeafBlock = r,
                    this.skipContextMarkup = a,
                    this.inlineParsers = o,
                    this.inlineNames = O,
                    this.wrappers = s,
                    this.nodeTypes = Object.create(null);
                for (let l of e.types)
                    this.nodeTypes[l.name] = l.id
            }
            createParse(e, t, n) {
                let i = new U(this, e, t, n);
                for (let r of this.wrappers)
                    i = r(i, e, t, n);
                return i
            }
            configure(e) {
                let t = E(e);
                if (!t)
                    return this;
                let { nodeSet: n, skipContextMarkup: o } = this
                    , O = this.blockParsers.slice()
                    , s = this.leafBlockParsers.slice()
                    , l = this.blockNames.slice()
                    , c = this.inlineParsers.slice()
                    , u = this.inlineNames.slice()
                    , d = this.endLeafBlock.slice()
                    , h = this.wrappers;
                if (V(t.defineNodes)) {
                    o = Object.assign({}, o);
                    let e, O = n.types.slice();
                    for (let n of t.defineNodes) {
                        let { name: t, block: s, composite: l, style: c } = "string" == typeof n ? {
                            name: n
                        } : n;
                        if (O.some((e => e.name == t)))
                            continue;
                        l && (o[O.length] = (e, t, n) => l(t, n, e.value));
                        let u = O.length
                            , d = l ? ["Block", "BlockContext"] : s ? u >= i.ATXHeading1 && u <= i.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"] : void 0;
                        O.push(r.Z6.define({
                            id: u,
                            name: t,
                            props: d && [[r.uY.group, d]]
                        })),
                            c && (e || (e = {}),
                                Array.isArray(c) || c instanceof a.vw ? e[t] = c : Object.assign(e, c))
                    }
                    n = new r.fI(O),
                        e && (n = n.extend((0,
                            a.pn)(e)))
                }
                if (V(t.props) && (n = n.extend(...t.props)),
                    V(t.remove))
                    for (let i of t.remove) {
                        let e = this.blockNames.indexOf(i)
                            , t = this.inlineNames.indexOf(i);
                        e > -1 && (O[e] = s[e] = void 0),
                            t > -1 && (c[t] = void 0)
                    }
                if (V(t.parseBlock))
                    for (let i of t.parseBlock) {
                        let e = l.indexOf(i.name);
                        if (e > -1)
                            O[e] = i.parse,
                                s[e] = i.leaf;
                        else {
                            let e = i.before ? j(l, i.before) : i.after ? j(l, i.after) + 1 : l.length - 1;
                            O.splice(e, 0, i.parse),
                                s.splice(e, 0, i.leaf),
                                l.splice(e, 0, i.name)
                        }
                        i.endLeaf && d.push(i.endLeaf)
                    }
                if (V(t.parseInline))
                    for (let i of t.parseInline) {
                        let e = u.indexOf(i.name);
                        if (e > -1)
                            c[e] = i.parse;
                        else {
                            let e = i.before ? j(u, i.before) : i.after ? j(u, i.after) + 1 : u.length - 1;
                            c.splice(e, 0, i.parse),
                                u.splice(e, 0, i.name)
                        }
                    }
                return t.wrap && (h = h.concat(t.wrap)),
                    new A(n, O, s, l, d, o, c, u, h)
            }
            getNodeType(e) {
                let t = this.nodeTypes[e];
                if (null == t)
                    throw new RangeError(`Unknown node type '${e}'`);
                return t
            }
            parseInline(e, t) {
                let n = new oe(this, e, t);
                e: for (let i = t; i < n.end;) {
                    let e = n.char(i);
                    for (let t of this.inlineParsers)
                        if (t) {
                            let r = t(n, e, i);
                            if (r >= 0) {
                                i = r;
                                continue e
                            }
                        }
                    i++
                }
                return n.resolveMarkers(0)
            }
        }
        function V(e) {
            return null != e && e.length > 0
        }
        function E(e) {
            if (!Array.isArray(e))
                return e;
            if (0 == e.length)
                return null;
            let t = E(e[0]);
            if (1 == e.length)
                return t;
            let n = E(e.slice(1));
            if (!n || !t)
                return t || n;
            let i = (e, t) => (e || G).concat(t || G)
                , r = t.wrap
                , a = n.wrap;
            return {
                props: i(t.props, n.props),
                defineNodes: i(t.defineNodes, n.defineNodes),
                parseBlock: i(t.parseBlock, n.parseBlock),
                parseInline: i(t.parseInline, n.parseInline),
                remove: i(t.remove, n.remove),
                wrap: r ? a ? (e, t, n, i) => r(a(e, t, n, i), t, n, i) : r : a
            }
        }
        function j(e, t) {
            let n = e.indexOf(t);
            if (n < 0)
                throw new RangeError(`Position specified relative to unknown parser ${t}`);
            return n
        }
        let C = [r.Z6.none];
        for (let Ye, Ae = 1; Ye = i[Ae]; Ae++)
            C[Ae] = r.Z6.define({
                id: Ae,
                name: Ye,
                props: Ae >= i.Escape ? [] : [[r.uY.group, Ae in c ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
                top: "Document" == Ye
            });
        const G = [];
        class I {
            constructor(e) {
                this.nodeSet = e,
                    this.content = [],
                    this.nodes = []
            }
            write(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                return this.content.push(e, t, n, 4 + 4 * i),
                    this
            }
            writeElements(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                for (let n of e)
                    n.writeTo(this, t);
                return this
            }
            finish(e, t) {
                return r.PH.build({
                    buffer: this.content,
                    nodeSet: this.nodeSet,
                    reused: this.nodes,
                    topID: e,
                    length: t
                })
            }
        }
        class D {
            constructor(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : G;
                this.type = e,
                    this.from = t,
                    this.to = n,
                    this.children = i
            }
            writeTo(e, t) {
                let n = e.content.length;
                e.writeElements(this.children, t),
                    e.content.push(this.type, this.from + t, this.to + t, e.content.length + 4 - n)
            }
            toTree(e) {
                return new I(e).writeElements(this.children, -this.from).finish(this.type, this.to - this.from)
            }
        }
        class N {
            constructor(e, t) {
                this.tree = e,
                    this.from = t
            }
            get to() {
                return this.from + this.tree.length
            }
            get type() {
                return this.tree.type.id
            }
            get children() {
                return G
            }
            writeTo(e, t) {
                e.nodes.push(this.tree),
                    e.content.push(e.nodes.length - 1, this.from + t, this.to + t, -1)
            }
            toTree() {
                return this.tree
            }
        }
        function L(e, t, n, i) {
            return new D(e, t, n, i)
        }
        const M = {
            resolve: "Emphasis",
            mark: "EmphasisMark"
        }
            , F = {
                resolve: "Emphasis",
                mark: "EmphasisMark"
            }
            , B = {}
            , H = {};
        class K {
            constructor(e, t, n, i) {
                this.type = e,
                    this.from = t,
                    this.to = n,
                    this.side = i
            }
        }
        const J = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
        let ee = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
        try {
            ee = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u")
        } catch (Ue) { }
        const te = {
            Escape(e, t, n) {
                if (92 != t || n == e.end - 1)
                    return -1;
                let r = e.char(n + 1);
                for (let a = 0; a < 32; a++)
                    if (J.charCodeAt(a) == r)
                        return e.append(L(i.Escape, n, n + 2));
                return -1
            },
            Entity(e, t, n) {
                if (38 != t)
                    return -1;
                let r = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(e.slice(n + 1, n + 31));
                return r ? e.append(L(i.Entity, n, n + 1 + r[0].length)) : -1
            },
            InlineCode(e, t, n) {
                if (96 != t || n && 96 == e.char(n - 1))
                    return -1;
                let r = n + 1;
                for (; r < e.end && 96 == e.char(r);)
                    r++;
                let a = r - n
                    , o = 0;
                for (; r < e.end; r++)
                    if (96 == e.char(r)) {
                        if (o++,
                            o == a && 96 != e.char(r + 1))
                            return e.append(L(i.InlineCode, n, r + 1, [L(i.CodeMark, n, n + a), L(i.CodeMark, r + 1 - a, r + 1)]))
                    } else
                        o = 0;
                return -1
            },
            HTMLTag(e, t, n) {
                if (60 != t || n == e.end - 1)
                    return -1;
                let r = e.slice(n + 1, e.end)
                    , a = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(r);
                if (a)
                    return e.append(L(i.Autolink, n, n + 1 + a[0].length, [L(i.LinkMark, n, n + 1), L(i.URL, n + 1, n + a[0].length), L(i.LinkMark, n + a[0].length, n + 1 + a[0].length)]));
                let o = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(r);
                if (o)
                    return e.append(L(i.Comment, n, n + 1 + o[0].length));
                let O = /^\?[^]*?\?>/.exec(r);
                if (O)
                    return e.append(L(i.ProcessingInstruction, n, n + 1 + O[0].length));
                let s = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(r);
                return s ? e.append(L(i.HTMLTag, n, n + 1 + s[0].length)) : -1
            },
            Emphasis(e, t, n) {
                if (95 != t && 42 != t)
                    return -1;
                let i = n + 1;
                for (; e.char(i) == t;)
                    i++;
                let r = e.slice(n - 1, n)
                    , a = e.slice(i, i + 1)
                    , o = ee.test(r)
                    , O = ee.test(a)
                    , s = /\s|^$/.test(r)
                    , l = /\s|^$/.test(a)
                    , c = !l && (!O || s || o)
                    , u = !s && (!o || l || O)
                    , d = c && (42 == t || !u || o)
                    , h = u && (42 == t || !c || O);
                return e.append(new K(95 == t ? M : F, n, i, (d ? 1 : 0) | (h ? 2 : 0)))
            },
            HardBreak(e, t, n) {
                if (92 == t && 10 == e.char(n + 1))
                    return e.append(L(i.HardBreak, n, n + 2));
                if (32 == t) {
                    let t = n + 1;
                    for (; 32 == e.char(t);)
                        t++;
                    if (10 == e.char(t) && t >= n + 2)
                        return e.append(L(i.HardBreak, n, t + 1))
                }
                return -1
            },
            Link: (e, t, n) => 91 == t ? e.append(new K(B, n, n + 1, 1)) : -1,
            Image: (e, t, n) => 33 == t && 91 == e.char(n + 1) ? e.append(new K(H, n, n + 2, 1)) : -1,
            LinkEnd(e, t, n) {
                if (93 != t)
                    return -1;
                for (let r = e.parts.length - 1; r >= 0; r--) {
                    let t = e.parts[r];
                    if (t instanceof K && (t.type == B || t.type == H)) {
                        if (!t.side || e.skipSpace(t.to) == n && !/[(\[]/.test(e.slice(n + 1, n + 2)))
                            return e.parts[r] = null,
                                -1;
                        let a = e.takeContent(r)
                            , o = e.parts[r] = ne(e, a, t.type == B ? i.Link : i.Image, t.from, n + 1);
                        if (t.type == B)
                            for (let t = 0; t < r; t++) {
                                let n = e.parts[t];
                                n instanceof K && n.type == B && (n.side = 0)
                            }
                        return o.to
                    }
                }
                return -1
            }
        };
        function ne(e, t, n, r, a) {
            let { text: o } = e
                , O = e.char(a)
                , s = a;
            if (t.unshift(L(i.LinkMark, r, r + (n == i.Image ? 2 : 1))),
                t.push(L(i.LinkMark, a - 1, a)),
                40 == O) {
                let n, r = e.skipSpace(a + 1), O = ie(o, r - e.offset, e.offset);
                O && (r = e.skipSpace(O.to),
                    r != O.to && (n = re(o, r - e.offset, e.offset),
                        n && (r = e.skipSpace(n.to)))),
                    41 == e.char(r) && (t.push(L(i.LinkMark, a, a + 1)),
                        s = r + 1,
                        O && t.push(O),
                        n && t.push(n),
                        t.push(L(i.LinkMark, r, s)))
            } else if (91 == O) {
                let n = ae(o, a - e.offset, e.offset, !1);
                n && (t.push(n),
                    s = n.to)
            }
            return L(n, r, s, t)
        }
        function ie(e, t, n) {
            if (60 == e.charCodeAt(t)) {
                for (let r = t + 1; r < e.length; r++) {
                    let a = e.charCodeAt(r);
                    if (62 == a)
                        return L(i.URL, t + n, r + 1 + n);
                    if (60 == a || 10 == a)
                        return !1
                }
                return null
            }
            {
                let r = 0
                    , a = t;
                for (let t = !1; a < e.length; a++) {
                    let n = e.charCodeAt(a);
                    if (u(n))
                        break;
                    if (t)
                        t = !1;
                    else if (40 == n)
                        r++;
                    else if (41 == n) {
                        if (!r)
                            break;
                        r--
                    } else
                        92 == n && (t = !0)
                }
                return a > t ? L(i.URL, t + n, a + n) : a == e.length && null
            }
        }
        function re(e, t, n) {
            let r = e.charCodeAt(t);
            if (39 != r && 34 != r && 40 != r)
                return !1;
            let a = 40 == r ? 41 : r;
            for (let o = t + 1, O = !1; o < e.length; o++) {
                let r = e.charCodeAt(o);
                if (O)
                    O = !1;
                else {
                    if (r == a)
                        return L(i.LinkTitle, t + n, o + 1 + n);
                    92 == r && (O = !0)
                }
            }
            return null
        }
        function ae(e, t, n, r) {
            for (let a = !1, o = t + 1, O = Math.min(e.length, o + 999); o < O; o++) {
                let O = e.charCodeAt(o);
                if (a)
                    a = !1;
                else {
                    if (93 == O)
                        return !r && L(i.LinkLabel, t + n, o + 1 + n);
                    if (r && !u(O) && (r = !1),
                        91 == O)
                        return !1;
                    92 == O && (a = !0)
                }
            }
            return null
        }
        class oe {
            constructor(e, t, n) {
                this.parser = e,
                    this.text = t,
                    this.offset = n,
                    this.parts = []
            }
            char(e) {
                return e >= this.end ? -1 : this.text.charCodeAt(e - this.offset)
            }
            get end() {
                return this.offset + this.text.length
            }
            slice(e, t) {
                return this.text.slice(e - this.offset, t - this.offset)
            }
            append(e) {
                return this.parts.push(e),
                    e.to
            }
            addDelimiter(e, t, n, i, r) {
                return this.append(new K(e, t, n, (i ? 1 : 0) | (r ? 2 : 0)))
            }
            get hasOpenLink() {
                for (let e = this.parts.length - 1; e >= 0; e--) {
                    let t = this.parts[e];
                    if (t instanceof K && (t.type == B || t.type == H))
                        return !0
                }
                return !1
            }
            addElement(e) {
                return this.append(e)
            }
            resolveMarkers(e) {
                for (let n = e; n < this.parts.length; n++) {
                    let t = this.parts[n];
                    if (!(t instanceof K && t.type.resolve && 2 & t.side))
                        continue;
                    let i, r = t.type == M || t.type == F, a = t.to - t.from, o = n - 1;
                    for (; o >= e; o--) {
                        let e = this.parts[o];
                        if (e instanceof K && 1 & e.side && e.type == t.type && !(r && (1 & t.side || 2 & e.side) && (e.to - e.from + a) % 3 == 0 && ((e.to - e.from) % 3 || a % 3))) {
                            i = e;
                            break
                        }
                    }
                    if (!i)
                        continue;
                    let O = t.type.resolve
                        , s = []
                        , l = i.from
                        , c = t.to;
                    if (r) {
                        let e = Math.min(2, i.to - i.from, a);
                        l = i.to - e,
                            c = t.from + e,
                            O = 1 == e ? "Emphasis" : "StrongEmphasis"
                    }
                    i.type.mark && s.push(this.elt(i.type.mark, l, i.to));
                    for (let e = o + 1; e < n; e++)
                        this.parts[e] instanceof D && s.push(this.parts[e]),
                            this.parts[e] = null;
                    t.type.mark && s.push(this.elt(t.type.mark, t.from, c));
                    let u = this.elt(O, l, c, s);
                    this.parts[o] = r && i.from != l ? new K(i.type, i.from, l, i.side) : null,
                        (this.parts[n] = r && t.to != c ? new K(t.type, c, t.to, t.side) : null) ? this.parts.splice(n, 0, u) : this.parts[n] = u
                }
                let t = [];
                for (let n = e; n < this.parts.length; n++) {
                    let e = this.parts[n];
                    e instanceof D && t.push(e)
                }
                return t
            }
            findOpeningDelimiter(e) {
                for (let t = this.parts.length - 1; t >= 0; t--) {
                    let n = this.parts[t];
                    if (n instanceof K && n.type == e)
                        return t
                }
                return null
            }
            takeContent(e) {
                let t = this.resolveMarkers(e);
                return this.parts.length = e,
                    t
            }
            skipSpace(e) {
                return d(this.text, e - this.offset) + this.offset
            }
            elt(e, t, n, i) {
                return "string" == typeof e ? L(this.parser.getNodeType(e), t, n, i) : new N(e, t)
            }
        }
        function Oe(e, t) {
            if (!t.length)
                return e;
            if (!e.length)
                return t;
            let n = e.slice()
                , i = 0;
            for (let r of t) {
                for (; i < n.length && n[i].to < r.to;)
                    i++;
                if (i < n.length && n[i].from < r.from) {
                    let e = n[i];
                    e instanceof D && (n[i] = new D(e.type, e.from, e.to, Oe(e.children, [r])))
                } else
                    n.splice(i++, 0, r)
            }
            return n
        }
        const se = [i.CodeBlock, i.ListItem, i.OrderedList, i.BulletList];
        class le {
            constructor(e, t) {
                this.fragments = e,
                    this.input = t,
                    this.i = 0,
                    this.fragment = null,
                    this.fragmentEnd = -1,
                    this.cursor = null,
                    e.length && (this.fragment = e[this.i++])
            }
            nextFragment() {
                this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null,
                    this.cursor = null,
                    this.fragmentEnd = -1
            }
            moveTo(e, t) {
                for (; this.fragment && this.fragment.to <= e;)
                    this.nextFragment();
                if (!this.fragment || this.fragment.from > (e ? e - 1 : 0))
                    return !1;
                if (this.fragmentEnd < 0) {
                    let e = this.fragment.to;
                    for (; e > 0 && "\n" != this.input.read(e - 1, e);)
                        e--;
                    this.fragmentEnd = e ? e - 1 : 0
                }
                let n = this.cursor;
                n || (n = this.cursor = this.fragment.tree.cursor(),
                    n.firstChild());
                let i = e + this.fragment.offset;
                for (; n.to <= i;)
                    if (!n.parent())
                        return !1;
                for (; ;) {
                    if (n.from >= i)
                        return this.fragment.from <= t;
                    if (!n.childAfter(i))
                        return !1
                }
            }
            matches(e) {
                let t = this.cursor.tree;
                return t && t.prop(r.uY.contextHash) == e
            }
            takeNodes(e) {
                let t = this.cursor
                    , n = this.fragment.offset
                    , a = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0)
                    , o = e.absoluteLineStart
                    , O = o
                    , s = e.block.children.length
                    , l = O
                    , c = s;
                for (; ;) {
                    if (t.to - n > a) {
                        if (t.type.isAnonymous && t.firstChild())
                            continue;
                        break
                    }
                    let o = ce(t.from - n, e.ranges);
                    if (t.to - n <= e.ranges[e.rangeI].to)
                        e.addNode(t.tree, o);
                    else {
                        let n = new r.PH(e.parser.nodeSet.types[i.Paragraph], [], [], 0, e.block.hashProp);
                        e.reusePlaceholders.set(n, t.tree),
                            e.addNode(n, o)
                    }
                    if (t.type.is("Block") && (se.indexOf(t.type.id) < 0 ? (O = t.to - n,
                        s = e.block.children.length) : (O = l,
                            s = c,
                            l = t.to - n,
                            c = e.block.children.length)),
                        !t.nextSibling())
                        break
                }
                for (; e.block.children.length > s;)
                    e.block.children.pop(),
                        e.block.positions.pop();
                return O - o
            }
        }
        function ce(e, t) {
            let n = e;
            for (let i = 1; i < t.length; i++) {
                let r = t[i - 1].to
                    , a = t[i].from;
                r < e && (n -= a - r)
            }
            return n
        }
        const ue = (0,
            a.pn)({
                "Blockquote/...": a._A.quote,
                HorizontalRule: a._A.contentSeparator,
                "ATXHeading1/... SetextHeading1/...": a._A.heading1,
                "ATXHeading2/... SetextHeading2/...": a._A.heading2,
                "ATXHeading3/...": a._A.heading3,
                "ATXHeading4/...": a._A.heading4,
                "ATXHeading5/...": a._A.heading5,
                "ATXHeading6/...": a._A.heading6,
                "Comment CommentBlock": a._A.comment,
                Escape: a._A.escape,
                Entity: a._A.character,
                "Emphasis/...": a._A.emphasis,
                "StrongEmphasis/...": a._A.strong,
                "Link/... Image/...": a._A.link,
                "OrderedList/... BulletList/...": a._A.list,
                "BlockQuote/...": a._A.quote,
                "InlineCode CodeText": a._A.monospace,
                "URL Autolink": a._A.url,
                "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": a._A.processingInstruction,
                "CodeInfo LinkLabel": a._A.labelName,
                LinkTitle: a._A.string,
                Paragraph: a._A.content
            })
            , de = new A(new r.fI(C).extend(ue), Object.keys(_).map((e => _[e])), Object.keys(_).map((e => W[e])), Object.keys(_), Z, c, Object.keys(te).map((e => te[e])), Object.keys(te), []);
        function he(e, t, n) {
            let i = [];
            for (let r = e.firstChild, a = t; ; r = r.nextSibling) {
                let e = r ? r.from : n;
                if (e > a && i.push({
                    from: a,
                    to: e
                }),
                    !r)
                    break;
                a = r.to
            }
            return i
        }
        function fe(e) {
            let { codeParser: t, htmlParser: n } = e
                , a = (0,
                    r.$g)(((e, r) => {
                        let a = e.type.id;
                        if (!t || a != i.CodeBlock && a != i.FencedCode) {
                            if (n && (a == i.HTMLBlock || a == i.HTMLTag))
                                return {
                                    parser: n,
                                    overlay: he(e.node, e.from, e.to)
                                }
                        } else {
                            let n = "";
                            if (a == i.FencedCode) {
                                let t = e.node.getChild(i.CodeInfo);
                                t && (n = r.read(t.from, t.to))
                            }
                            let o = t(n);
                            if (o)
                                return {
                                    parser: o,
                                    overlay: e => e.type.id == i.CodeText
                                }
                        }
                        return null
                    }
                    ));
            return {
                wrap: a
            }
        }
        const pe = {
            resolve: "Strikethrough",
            mark: "StrikethroughMark"
        }
            , me = {
                defineNodes: [{
                    name: "Strikethrough",
                    style: {
                        "Strikethrough/...": a._A.strikethrough
                    }
                }, {
                    name: "StrikethroughMark",
                    style: a._A.processingInstruction
                }],
                parseInline: [{
                    name: "Strikethrough",
                    parse(e, t, n) {
                        if (126 != t || 126 != e.char(n + 1) || 126 == e.char(n + 2))
                            return -1;
                        let i = e.slice(n - 1, n)
                            , r = e.slice(n + 2, n + 3)
                            , a = /\s|^$/.test(i)
                            , o = /\s|^$/.test(r)
                            , O = ee.test(i)
                            , s = ee.test(r);
                        return e.addDelimiter(pe, n, n + 2, !o && (!s || a || O), !a && (!O || o || s))
                    },
                    after: "Emphasis"
                }]
            };
        function ge(e, t) {
            let n = arguments.length > 3 ? arguments[3] : void 0
                , i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0
                , r = 0
                , a = !0
                , o = -1
                , O = -1
                , s = !1
                , l = () => {
                    n.push(e.elt("TableCell", i + o, i + O, e.parser.parseInline(t.slice(o, O), i + o)))
                }
                ;
            for (let c = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0; c < t.length; c++) {
                let u = t.charCodeAt(c);
                124 != u || s ? (s || 32 != u && 9 != u) && (o < 0 && (o = c),
                    O = c + 1) : ((!a || o > -1) && r++,
                        a = !1,
                        n && (o > -1 && l(),
                            n.push(e.elt("TableDelimiter", c + i, c + i + 1))),
                        o = O = -1),
                    s = !s && 92 == u
            }
            return o > -1 && (r++,
                n && l()),
                r
        }
        function Qe(e, t) {
            for (let n = t; n < e.length; n++) {
                let t = e.charCodeAt(n);
                if (124 == t)
                    return !0;
                92 == t && n++
            }
            return !1
        }
        const $e = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
        class be {
            constructor() {
                this.rows = null
            }
            nextLine(e, t, n) {
                if (null == this.rows) {
                    let i;
                    if (this.rows = !1,
                        (45 == t.next || 58 == t.next || 124 == t.next) && $e.test(i = t.text.slice(t.pos))) {
                        let r = [];
                        ge(e, n.content, 0, r, n.start) == ge(e, i, t.pos) && (this.rows = [e.elt("TableHeader", n.start, n.start + n.content.length, r), e.elt("TableDelimiter", e.lineStart + t.pos, e.lineStart + t.text.length)])
                    }
                } else if (this.rows) {
                    let n = [];
                    ge(e, t.text, t.pos, n, e.lineStart),
                        this.rows.push(e.elt("TableRow", e.lineStart + t.pos, e.lineStart + t.text.length, n))
                }
                return !1
            }
            finish(e, t) {
                return !!this.rows && (e.addLeafElement(t, e.elt("Table", t.start, t.start + t.content.length, this.rows)),
                    !0)
            }
        }
        const ye = {
            defineNodes: [{
                name: "Table",
                block: !0
            }, {
                name: "TableHeader",
                style: {
                    "TableHeader/...": a._A.heading
                }
            }, "TableRow", {
                name: "TableCell",
                style: a._A.content
            }, {
                name: "TableDelimiter",
                style: a._A.processingInstruction
            }],
            parseBlock: [{
                name: "Table",
                leaf: (e, t) => Qe(t.content, 0) ? new be : null,
                endLeaf(e, t, n) {
                    if (n.parsers.some((e => e instanceof be)) || !Qe(t.text, t.basePos))
                        return !1;
                    let i = e.scanLine(e.absoluteLineEnd + 1).text;
                    return $e.test(i) && ge(e, t.text, t.basePos) == ge(e, i, t.basePos)
                },
                before: "SetextHeading"
            }]
        };
        class Se {
            nextLine() {
                return !1
            }
            finish(e, t) {
                return e.addLeafElement(t, e.elt("Task", t.start, t.start + t.content.length, [e.elt("TaskMarker", t.start, t.start + 3), ...e.parser.parseInline(t.content.slice(3), t.start + 3)])),
                    !0
            }
        }
        const Pe = {
            defineNodes: [{
                name: "Task",
                block: !0,
                style: a._A.list
            }, {
                name: "TaskMarker",
                style: a._A.atom
            }],
            parseBlock: [{
                name: "TaskList",
                leaf: (e, t) => /^\[[ xX]\][ \t]/.test(t.content) && "ListItem" == e.parentType().name ? new Se : null,
                after: "SetextHeading"
            }]
        }
            , ve = /(www\.)|(https?:\/\/)|([\w.+-]+@)|(mailto:|xmpp:)/gy
            , xe = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy
            , ke = /[\w-]+\.[\w-]+($|\/)/
            , we = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy
            , Xe = /\/[a-zA-Z\d@.]+/gy;
        function _e(e, t, n, i) {
            let r = 0;
            for (let a = t; a < n; a++)
                e[a] == i && r++;
            return r
        }
        function Te(e, t) {
            we.lastIndex = t;
            let n = we.exec(e);
            if (!n)
                return -1;
            let i = n[0][n[0].length - 1];
            return "_" == i || "-" == i ? -1 : t + n[0].length - ("." == i ? 1 : 0)
        }
        const ze = [ye, Pe, me, {
            parseInline: [{
                name: "Autolink",
                parse(e, t, n) {
                    let i = n - e.offset;
                    ve.lastIndex = i;
                    let r = ve.exec(e.text)
                        , a = -1;
                    if (!r)
                        return -1;
                    if (r[1] || r[2]) {
                        if (a = function (e, t) {
                            xe.lastIndex = t;
                            let n = xe.exec(e);
                            if (!n || ke.exec(n[0])[0].indexOf("_") > -1)
                                return -1;
                            let i = t + n[0].length;
                            for (; ;) {
                                let n, r = e[i - 1];
                                if (/[?!.,:*_~]/.test(r) || ")" == r && _e(e, t, i, ")") > _e(e, t, i, "("))
                                    i--;
                                else {
                                    if (";" != r || !(n = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(e.slice(t, i))))
                                        break;
                                    i = t + n.index
                                }
                            }
                            return i
                        }(e.text, i + r[0].length),
                            a > -1 && e.hasOpenLink) {
                            a = i + /([^\[\]]|\[[^\]]*\])*/.exec(e.text.slice(i, a))[0].length
                        }
                    } else
                        r[3] ? a = Te(e.text, i) : (a = Te(e.text, i + r[0].length),
                            a > -1 && "xmpp:" == r[0] && (Xe.lastIndex = a,
                                r = Xe.exec(e.text),
                                r && (a = r.index + r[0].length)));
                    return a < 0 ? -1 : (e.addElement(e.elt("URL", n, a + e.offset)),
                        a + e.offset)
                }
            }]
        }];
        function Re(e, t, n) {
            return (i, r, a) => {
                if (r != e || i.char(a + 1) == e)
                    return -1;
                let o = [i.elt(n, a, a + 1)];
                for (let O = a + 1; O < i.end; O++) {
                    let r = i.char(O);
                    if (r == e)
                        return i.addElement(i.elt(t, a, O + 1, o.concat(i.elt(n, O, O + 1))));
                    if (92 == r && o.push(i.elt("Escape", O, 2 + O++)),
                        u(r))
                        break
                }
                return -1
            }
        }
        const We = {
            defineNodes: [{
                name: "Superscript",
                style: a._A.special(a._A.content)
            }, {
                name: "SuperscriptMark",
                style: a._A.processingInstruction
            }],
            parseInline: [{
                name: "Superscript",
                parse: Re(94, "Superscript", "SuperscriptMark")
            }]
        }
            , Ze = {
                defineNodes: [{
                    name: "Subscript",
                    style: a._A.special(a._A.content)
                }, {
                    name: "SubscriptMark",
                    style: a._A.processingInstruction
                }],
                parseInline: [{
                    name: "Subscript",
                    parse: Re(126, "Subscript", "SubscriptMark")
                }]
            }
            , qe = {
                defineNodes: [{
                    name: "Emoji",
                    style: a._A.character
                }],
                parseInline: [{
                    name: "Emoji",
                    parse(e, t, n) {
                        let i;
                        return 58 == t && (i = /^[a-zA-Z_0-9]+:/.exec(e.slice(n + 1, e.end))) ? e.addElement(e.elt("Emoji", n, n + 1 + i[0].length)) : -1
                    }
                }]
            }
    }
    ,
    47090: (e, t, n) => {
        n.d(t, {
            K: () => x
        });
        var i = n(5178)
            , r = n(14462);
        const a = 10
            , o = new Set([25, 49, 50, 263, 65, 130, 56, 57, 238, 62, 63, 72, 73, 77, 60, 61, 151, 152, 155, 112]);
        function O(e) {
            return e == a || 13 == e
        }
        function s(e) {
            return e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102
        }
        const l = new i.Lu(((e, t) => {
            let n;
            if (e.next < 0)
                e.acceptToken(199);
            else if (t.context.flags & u)
                O(e.next) && e.acceptToken(198, 1);
            else if (((n = e.peek(-1)) < 0 || O(n)) && t.canShift(197)) {
                let t = 0;
                for (; 32 == e.next || 9 == e.next;)
                    e.advance(),
                        t++;
                e.next != a && 13 != e.next && 35 != e.next || e.acceptToken(197, -t)
            } else
                O(e.next) && e.acceptToken(196, 1)
        }
        ), {
            contextual: !0
        })
            , c = new i.Lu(((e, t) => {
                let n = t.context;
                if (n.flags)
                    return;
                let i = e.peek(-1);
                if (i == a || 13 == i) {
                    let t = 0
                        , i = 0;
                    for (; ;) {
                        if (32 == e.next)
                            t++;
                        else {
                            if (9 != e.next)
                                break;
                            t += 8 - t % 8
                        }
                        e.advance(),
                            i++
                    }
                    t != n.indent && e.next != a && 13 != e.next && 35 != e.next && (t < n.indent ? e.acceptToken(195, -i) : e.acceptToken(194))
                }
            }
            ))
            , u = 1
            , d = 4
            , h = 8
            , f = 16
            , p = 32;
        function m(e, t, n) {
            this.parent = e,
                this.indent = t,
                this.flags = n,
                this.hash = (e ? e.hash + e.hash << 8 : 0) + t + (t << 4) + n + (n << 6)
        }
        const g = new m(null, 0, 0);
        const Q = new Map([[241, 0], [242, d], [243, h], [244, h | d], [245, f], [246, f | d], [247, f | h], [248, f | h | d], [249, p], [250, p | d], [251, p | h], [252, p | h | d], [253, p | f], [254, p | f | d], [255, p | f | h], [256, p | f | h | d]].map((e => {
            let [t, n] = e;
            return [t, 2 | n]
        }
        )))
            , $ = new i.Aj({
                start: g,
                reduce: (e, t, n, i) => e.flags & u && o.has(t) || (71 == t || 72 == t) && 2 & e.flags ? e.parent : e,
                shift: (e, t, n, i) => 194 == t ? new m(e, function (e) {
                    let t = 0;
                    for (let n = 0; n < e.length; n++)
                        t += 9 == e.charCodeAt(n) ? 8 - t % 8 : 1;
                    return t
                }(i.read(i.pos, n.pos)), 0) : 195 == t ? e.parent : 24 == t || 55 == t || 59 == t || 3 == t ? new m(e, 0, u) : Q.has(t) ? new m(e, 0, Q.get(t) | e.flags & u) : e,
                hash: e => e.hash
            })
            , b = new i.Lu((e => {
                for (let t = 0; t < 5; t++) {
                    if (e.next != "print".charCodeAt(t))
                        return;
                    e.advance()
                }
                if (!/\w/.test(String.fromCharCode(e.next)))
                    for (let t = 0; ; t++) {
                        let n = e.peek(t);
                        if (32 != n && 9 != n)
                            return void (40 != n && 46 != n && n != a && 13 != n && 35 != n && e.acceptToken(1))
                    }
            }
            ))
            , y = new i.Lu(((e, t) => {
                let { flags: n } = t.context
                    , i = n & d ? 34 : 39
                    , r = (n & h) > 0
                    , o = !(n & f)
                    , O = (n & p) > 0
                    , s = e.pos;
                for (; !(e.next < 0);)
                    if (O && 123 == e.next) {
                        if (123 != e.peek(1)) {
                            if (e.pos == s)
                                return void e.acceptToken(3, 1);
                            break
                        }
                        e.advance(2)
                    } else {
                        if (o && 92 == e.next) {
                            if (e.pos == s) {
                                e.advance();
                                let t = e.next;
                                return t >= 0 && (e.advance(),
                                    S(e, t)),
                                    void e.acceptToken(2)
                            }
                            break
                        }
                        if (e.next == i && (!r || e.peek(1) == i && e.peek(2) == i)) {
                            if (e.pos == s)
                                return void e.acceptToken(201, r ? 3 : 1);
                            break
                        }
                        if (e.next == a) {
                            if (r)
                                e.advance();
                            else if (e.pos == s)
                                return void e.acceptToken(201);
                            break
                        }
                        e.advance()
                    }
                e.pos > s && e.acceptToken(200)
            }
            ));
        function S(e, t) {
            if (111 == t)
                for (let n = 0; n < 2 && e.next >= 48 && e.next <= 55; n++)
                    e.advance();
            else if (120 == t)
                for (let n = 0; n < 2 && s(e.next); n++)
                    e.advance();
            else if (117 == t)
                for (let n = 0; n < 4 && s(e.next); n++)
                    e.advance();
            else if (85 == t)
                for (let n = 0; n < 8 && s(e.next); n++)
                    e.advance();
            else if (78 == t && 123 == e.next) {
                for (e.advance(); e.next >= 0 && 125 != e.next && 39 != e.next && 34 != e.next && e.next != a;)
                    e.advance();
                125 == e.next && e.advance()
            }
        }
        const P = (0,
            r.pn)({
                'async "*" "**" FormatConversion FormatSpec': r._A.modifier,
                "for while if elif else try except finally return raise break continue with pass assert await yield match case": r._A.controlKeyword,
                "in not and or is del": r._A.operatorKeyword,
                "from def class global nonlocal lambda": r._A.definitionKeyword,
                import: r._A.moduleKeyword,
                "with as print": r._A.keyword,
                Boolean: r._A.bool,
                None: r._A.null,
                VariableName: r._A.variableName,
                "CallExpression/VariableName": r._A.function(r._A.variableName),
                "FunctionDefinition/VariableName": r._A.function(r._A.definition(r._A.variableName)),
                "ClassDefinition/VariableName": r._A.definition(r._A.className),
                PropertyName: r._A.propertyName,
                "CallExpression/MemberExpression/PropertyName": r._A.function(r._A.propertyName),
                Comment: r._A.lineComment,
                Number: r._A.number,
                String: r._A.string,
                FormatString: r._A.special(r._A.string),
                Escape: r._A.escape,
                UpdateOp: r._A.updateOperator,
                "ArithOp!": r._A.arithmeticOperator,
                BitOp: r._A.bitwiseOperator,
                CompareOp: r._A.compareOperator,
                AssignOp: r._A.definitionOperator,
                Ellipsis: r._A.punctuation,
                At: r._A.meta,
                "( )": r._A.paren,
                "[ ]": r._A.squareBracket,
                "{ }": r._A.brace,
                ".": r._A.derefOperator,
                ", ;": r._A.separator
            })
            , v = {
                __proto__: null,
                await: 44,
                or: 54,
                and: 56,
                in: 60,
                not: 62,
                is: 64,
                if: 70,
                else: 72,
                lambda: 76,
                yield: 94,
                from: 96,
                async: 102,
                for: 104,
                None: 162,
                True: 164,
                False: 164,
                del: 178,
                pass: 182,
                break: 186,
                continue: 190,
                return: 194,
                raise: 202,
                import: 206,
                as: 208,
                global: 212,
                nonlocal: 214,
                assert: 218,
                type: 223,
                elif: 236,
                while: 240,
                try: 246,
                except: 248,
                finally: 250,
                with: 254,
                def: 258,
                class: 268,
                match: 279,
                case: 285
            }
            , x = i.U1.deserialize({
                version: 14,
                states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5QQdO'#DoOOQS,5:Y,5:YO5eQdO'#HdOOQS,5:],5:]O5rQ!fO,5:]O5wQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8gQdO,59bO8lQdO,59bO8sQdO,59jO8zQdO'#HTO:QQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:iQdO,59aO'vQdO,59aO:wQdO,59aOOQS,59y,59yO:|QdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;[QdO,5:QO;aQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;rQdO,5:UO;wQdO,5:WOOOW'#Fy'#FyO;|OWO,5:aOOQS,5:a,5:aO<XQdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<iOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<wQtO,5:iO?iQtO,5=`O@SQ#xO,5=`O@sQtO,5=`OOQS,5:},5:}OA[QeO'#GWOBnQdO,5;^OOQV,5=^,5=^OByQtO'#IPOChQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCpQtO,59]OEwQtO,59iOFbQdO'#HVOFmQdO'#HVO1XQdO'#HVOFxQdO'#DTOGQQdO,59mOGVQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGtQdO'#GPOHUQdO,58|OHUQdO,58|O*xQdO,5:oOHdQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHwQdO,5;OOIYQdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOInQtO,5;QOI|QdO,5;QOJRQdO'#IQOOQS,5;T,5;TOJaQdO'#H|OOQS,5;W,5;WOJrQdO,5;YO4iQdO,5;`O4iQdO,5;cOJzQtO'#ITO'vQdO'#ITOKUQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOKZQeO'#EuOLgQgO,5;fO!!hQdO'#IUO4iQdO,5;jO!!sQdO,5;lO!!{QdO,5;qO!#WQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#_OSO,5=[P!#dOdO,5=[O!&XQtO1G.jO!&`QtO1G.jO!)PQtO1G.jO!)ZQtO1G.jO!+tQtO1G.jO!,XQtO1G.jO!,lQdO'#HcO!,zQtO'#GuO0rQdO'#HcO!-UQdO'#HbOOQS,5:Z,5:ZO!-^QdO,5:ZO!-cQdO'#HeO!-nQdO'#HeO!.RQdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/RQtO1G.|O!/YQtO1G.|O1lQdO1G.|O!/uQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!/|QdO1G/eO!0^QdO1G/eO!0fQdO1G/fO'vQdO'#H[O!0kQdO'#H[O!0pQtO1G.{O!1QQdO,59iO!2WQdO,5=zO!2hQdO,5=zO!2pQdO1G/mO!2uQtO1G/mOOQS1G/l1G/lO!3VQdO,5=uO!3|QdO,5=uO0rQdO1G/qO!4kQdO1G/sO!4pQtO1G/sO!5QQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5bQdO'#HxO0rQdO'#HxO!5sQdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6RQ#xO1G2zO!6rQtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7ZQtO,5>kOOQS1G1`1G1`O!7xQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!7}QdO'#FrO!8YQdO,59oO!8bQdO1G/XO!8lQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9]QdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9nQdO1G.hOOQS1G0Z1G0ZO!9|QdO,5=wO!:^QdO,5=wO0rQdO1G0jO0rQdO1G0jO!:oQdO,5>jO!;QQdO,5>jO1XQdO,5>jO!;cQdO,5>iOOQS-E:R-E:RO!;hQdO1G0lO!;sQdO1G0lO!;xQdO,5>lO!<WQdO,5>lO!<fQdO,5>hO!<|QdO,5>hO!=_QdO'#EpO0rQdO1G0tO!=jQdO1G0tO!=oQgO1G0zO!AmQgO1G0}O!EhQdO,5>oO!ErQdO,5>oO!EzQtO,5>oO0rQdO1G1PO!FUQdO1G1PO4iQdO1G1UO!!sQdO1G1WOOQV,5;a,5;aO!FZQfO,5;aO!F`QgO1G1QO!JaQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JqQdO,5>pO!KOQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KWQdO'#FSO!KiQ!fO1G1WO!KqQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!KvQdO1G1]O!LOQdO'#F^OOQV1G1b1G1bO!#WQtO1G1bPOOO1G2v1G2vP!LTOSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LYQdO,5=|O!LmQdO,5=|OOQS1G/u1G/uO!LuQdO,5>PO!MVQdO,5>PO!M_QdO,5>PO!MrQdO,5>PO!NSQdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8bQdO7+$pO# uQdO1G.|O# |QdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!TQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!eQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!jQdO7+%PO#!rQdO7+%QO#!wQdO1G3fOOQS7+%X7+%XO##XQdO1G3fO##aQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##fQdO1G3aOOQS-E9q-E9qO#$]QdO7+%]OOQS7+%_7+%_O#$kQdO1G3aO#%YQdO7+%_O#%_QdO1G3gO#%oQdO1G3gO#%wQdO7+%]O#%|QdO,5>dO#&gQdO,5>dO#&gQdO,5>dOOQS'#Dx'#DxO#&xO&jO'#DzO#'TO`O'#HyOOOW1G3}1G3}O#'YQdO1G3}O#'bQdO1G3}O#'mQ#xO7+(fO#(^QtO1G2UP#(wQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)UQdO,5=`O#)oQdO,5=`O#*QQtO,5<aO#*eQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#*uQdO7+&UO#+TQdO,5<nO#+iQdO1G4UOOQS-E:Q-E:QO#+zQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,]QdO7+&WOOQS,5<p,5<pO#,hQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#,vQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-^QdO'#EqO#-iQdO'#IRO#-qQdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#-vQgO7+&fO!JdQdO'#GXO4iQdO7+&fO4iQdO7+&iO#1tQtO,5<tO'vQdO,5<tO#2OQdO1G4ZOOQS-E:W-E:WO#2YQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KiQ!fO7+&rO!KqQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2bQdO,5<uO!JdQdO,5<uOOQV7+&l7+&lO#2mQgO7+&lO#6hQdO,5<vO#6sQdO1G4[OOQS-E:Y-E:YO#7QQdO1G4[O#7YQdO'#IWO#7hQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#7sQdO'#IVOOQS,5;n,5;nO#7{QdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8QQfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8VQdO1G3iOOQS,5<c,5<cO#8eQdO1G3hOOQS-E9u-E9uO#8xQdO,5<dO#9TQdO,5<dO#9hQdO1G3kOOQS-E9v-E9vO#9xQdO1G3kO#:QQdO1G3kO#:bQdO1G3kO#9xQdO1G3kOOQS<<H[<<H[O#:mQtO1G1zOOQS<<Hk<<HkP#:zQdO'#FtO8sQdO1G3bO#;XQdO1G3bO#;^QdO<<HkOOQS<<Hl<<HlO#;nQdO7+)QOOQS<<Hs<<HsO#<OQtO1G1yP#<oQdO'#FsO#<|QdO7+)RO#=^QdO7+)RO#=fQdO<<HwO#=kQdO7+({OOQS<<Hy<<HyO#>bQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>gQdO1G4OOOQS-E9y-E9yO#?QQdO1G4OO<XQdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?cO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?nQdO7+)iO#?vQdO1G2zO#@aQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#@rQdO7+)pO#ATQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#AfQdO,5>mO#AtQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#A|QtO1G2`P#BWQdO'#GYO#B_QdO7+)uO#BiQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KiQ!fO<<J^O#FdQgO7+&gOOQV<<JW<<JWO#FnQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JiQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#JtQdO7+)vO#KRQdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KZQdO,5>rOOQS,5>r,5>rO#KfQdO,5>qO#KwQdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LPQdO1G1dOOQS7+)T7+)TP#LUQdO'#FwO#LfQdO1G2OO#LyQdO1G2OO#MZQdO1G2OP#MfQdO'#FxO#MsQdO7+)VO#NTQdO7+)VO#NTQdO7+)VO#N]QdO7+)VO#NmQdO7+(|O8sQdO7+(|OOQSAN>VAN>VO$ WQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$ hQtO1G1|P$ rQdO'#FvOOQS1G2R1G2RP$!PQdO'#F{O$!^QdO7+)jO$!wQdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#VQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$#pQdO<<M[OOQS,5<q,5<qO$$RQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$aQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$([QdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$(iQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$(zQfO7+'OO$)VQdO'#F_O$*^QdO7+'jO$*nQdO7+'jOOQS7+'j7+'jO$*yQdO<<LqO$+ZQdO<<LqO$+ZQdO<<LqO$+cQdO'#H^OOQS<<Lh<<LhO$+mQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,WQdO1G4RO$,`QdO1G4RP!=_QdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$,kQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-_QtO'#FaOOQS'#Fc'#FcO$-oQdO'#FbO$.aQdO'#FbOOQS'#Fb'#FbO$.fQdO'#IYO$)VQdO'#FiO$)VQdO'#FiO$.}QdO'#FjO$)VQdO'#FkO$/UQdO'#IZOOQS'#IZ'#IZO$/sQdO,5;yOOQS<<KU<<KUO$/{QdO<<KUO$0]QdOANB]O$0mQdOANB]O$0uQdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1`QdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$1wQdO7+)mOOQVLD*wLD*wOOQVANARANARO5rQ!fO'#GaO$2PQtO,5<SO$)VQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$2qQdO,5;|O$2vQdO,5;|OOQS'#Fg'#FgO$)VQdO'#G`O$3hQdO,5<QO$4SQdO,5>tO$4dQdO,5>tO1XQdO,5<PO$4uQdO,5<TO$4zQdO,5<TO$)VQdO'#I[O$5PQdO'#I[O$5UQdO,5<UOOQS,5<V,5<VO'vQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5ZQdOG27wO$5kQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$5pQtO'#FaO$5wQdO'#I]O$6VQdO'#I]O$6_QdO,5<XOOQS1G1h1G1hO$6dQdO1G1hO$6iQdO,5<zOOQS-E:^-E:^O$7TQdO,5=OO$7lQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$7|QdO,5>vO$)VQdO,5>vOOQS1G1p1G1pO$8[QtO,5<[OOQU7+'P7+'PO$+cQdO1G/iO$)VQdO,5<YO$8cQdO,5>wO$8jQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)VQdO'#GdO$8rQdO1G4bO$8|QdO1G4bO$9UQdO1G4bOOQS7+%T7+%TO$9dQdO1G1tO$9rQtO'#FaO$9yQdO,5<}OOQS,5<},5<}O$:XQdO1G4cOOQS-E:a-E:aO$)VQdO,5<|O$:`QdO,5<|O$:eQdO7+)|OOQS-E:`-E:`O$:oQdO7+)|O$)VQdO,5<ZP$)VQdO'#GcO$:wQdO1G2hO$)VQdO1G2hP$;VQdO'#GbO$;^QdO<<MhO$;hQdO1G1uO$;vQdO7+(SO8sQdO'#C}O8sQdO,59bO8sQdO,59bO8sQdO,59bO$<UQtO,5=`O8sQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<iQdO'#GOO'vQdO'#GtO$<vQdO,59bO$<{QdO,59bO$=SQdO,59mO$=XQdO1G/UO1sQdO'#DRO8sQdO,59j",
                stateData: "$=r~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PE`O%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO~OS'iO%['hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#lO%kWi~P!#lOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&gO%mWi%nWi~P!&gOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)eOVWi_Wi%qWi%rWi%sWi~P!)eO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.WOlji~P!.WOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/aOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PE`OV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!N_Olji~P!N_OV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/aOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/aO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$,yO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)cOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/aOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)VOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$,yOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)VOz/zO#[/OO%j.yO!['Oa~O{$da~P%SOg'Pa~P$)VOz0SOg'Pa~Oa0UO!['Oi~P$)cOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$,yO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)VO{0^O~Oa0UO!['Oq~P$)cOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)cOa0UO!['Oy~P$)cO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/aO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
                goto: "!=l'QPPPPPP'RP'Z*s+]+v,b,}-kP.YP'Z.y.y'ZPPP'Z2cPPPPPP2c5VPP5VP7g7p=xPP={>m>pPP'Z'ZPP?PPP'Z'ZPP'Z'Z'Z'Z'Z?T?}'ZP@QP@WD_G{HPPHSH^Hb'ZPPPHeHn'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHtIQIYPIaIgPIaPIaIaPPPIaPKuPLOLYL`KuPIaLiPIaPLpLvPLzM`M}NhLzLzNnN{LzLzLzLz! a! g! j! o! r! |!!S!!`!!r!!x!#S!#Y!#v!#|!$S!$^!$d!$j!$|!%W!%^!%d!%n!%t!%z!&Q!&W!&^!&h!&n!&x!'O!'X!'_!'n!'v!(Q!(XPPPPPPPPPPP!(_!(b!(h!(q!({!)WPPPPPPPPPPPP!-z!/`!3`!6pPP!6x!7X!7b!8Z!8Q!8d!8j!8m!8p!8s!8{!9lPPPPPPPPPPPPPPPPP!9o!9s!9yP!:_!:c!:o!:x!;U!;l!;o!;r!;x!<O!<U!<XP!<a!<j!=f!=i]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r}!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!P!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!R!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!T!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!V!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!X!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!]!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&cVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0r%mXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s![!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aR,^*RX#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&bQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QQ/q/VR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uR.S-fhUOn#d#g$j%|&_'w(p(r)t,P%S!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!]!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
                nodeNames: "\u26a0 print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
                maxTerm: 277,
                context: $,
                nodeProps: [["isolate", -5, 4, 71, 72, 73, 77, ""], ["group", -15, 6, 85, 87, 88, 90, 92, 94, 96, 98, 99, 100, 102, 105, 108, 110, "Statement Statement", -22, 8, 18, 21, 25, 40, 49, 50, 56, 57, 60, 61, 62, 63, 64, 67, 70, 71, 72, 79, 80, 81, 82, "Expression", -10, 114, 116, 119, 121, 122, 126, 128, 133, 135, 138, "Statement", -9, 143, 144, 147, 148, 150, 151, 152, 153, 154, "Pattern"], ["openedBy", 23, "(", 54, "[", 58, "{"], ["closedBy", 24, ")", 55, "]", 59, "}"]],
                propSources: [P],
                skippedNodes: [0, 4],
                repeatNodeCount: 34,
                tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
                tokenizers: [b, c, l, y, 0, 1, 2, 3, 4],
                topRules: {
                    Script: [0, 5]
                },
                specialized: [{
                    term: 221,
                    get: e => v[e] || -1
                }],
                tokenPrec: 7652
            })
    }
    ,
    68197: (e, t, n) => {
        n.d(t, {
            K: () => Q
        });
        var i = n(5178)
            , r = n(14462);
        function a(e) {
            return 45 == e || 46 == e || 58 == e || e >= 65 && e <= 90 || 95 == e || e >= 97 && e <= 122 || e >= 161
        }
        let o = null
            , O = null
            , s = 0;
        function l(e, t) {
            let n = e.pos + t;
            if (O == e && s == n)
                return o;
            for (; 9 == (i = e.peek(t)) || 10 == i || 13 == i || 32 == i;)
                t++;
            var i;
            let r = "";
            for (; ;) {
                let n = e.peek(t);
                if (!a(n))
                    break;
                r += String.fromCharCode(n),
                    t++
            }
            return O = e,
                s = n,
                o = r || null
        }
        function c(e, t) {
            this.name = e,
                this.parent = t,
                this.hash = t ? t.hash : 0;
            for (let n = 0; n < e.length; n++)
                this.hash += (this.hash << 4) + e.charCodeAt(n) + (e.charCodeAt(n) << 8)
        }
        const u = new i.Aj({
            start: null,
            shift: (e, t, n, i) => 1 == t ? new c(l(i, 1) || "", e) : e,
            reduce: (e, t) => 11 == t && e ? e.parent : e,
            reuse(e, t, n, i) {
                let r = t.type.id;
                return 1 == r || 13 == r ? new c(l(i, 1) || "", e) : e
            },
            hash: e => e ? e.hash : 0,
            strict: !1
        })
            , d = new i.Lu(((e, t) => {
                if (60 == e.next)
                    if (e.advance(),
                        47 == e.next) {
                        e.advance();
                        let n = l(e, 0);
                        if (!n)
                            return e.acceptToken(5);
                        if (t.context && n == t.context.name)
                            return e.acceptToken(2);
                        for (let i = t.context; i; i = i.parent)
                            if (i.name == n)
                                return e.acceptToken(3, -2);
                        e.acceptToken(4)
                    } else if (33 != e.next && 63 != e.next)
                        return e.acceptToken(1)
            }
            ), {
                contextual: !0
            });
        function h(e, t) {
            return new i.Lu((n => {
                let i = 0
                    , r = t.charCodeAt(0);
                e: for (; !(n.next < 0); n.advance(),
                    i++)
                    if (n.next == r) {
                        for (let e = 1; e < t.length; e++)
                            if (n.peek(e) != t.charCodeAt(e))
                                continue e;
                        break
                    }
                i && n.acceptToken(e)
            }
            ))
        }
        const f = h(35, "--\x3e")
            , p = h(36, "?>")
            , m = h(37, "]]>")
            , g = (0,
                r.pn)({
                    Text: r._A.content,
                    "StartTag StartCloseTag EndTag SelfCloseEndTag": r._A.angleBracket,
                    TagName: r._A.tagName,
                    "MismatchedCloseTag/TagName": [r._A.tagName, r._A.invalid],
                    AttributeName: r._A.attributeName,
                    AttributeValue: r._A.attributeValue,
                    Is: r._A.definitionOperator,
                    "EntityReference CharacterReference": r._A.character,
                    Comment: r._A.blockComment,
                    ProcessingInst: r._A.processingInstruction,
                    DoctypeDecl: r._A.documentMeta,
                    Cdata: r._A.special(r._A.string)
                })
            , Q = i.U1.deserialize({
                version: 14,
                states: ",SOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DS'#DSOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C{'#C{O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C|'#C|O$dOrO,59^OOOP,59^,59^OOOS'#C}'#C}O$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6y-E6yOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6z-E6zOOOP1G.x1G.xOOOS-E6{-E6{OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'jO!bO,59eOOOO-E6w-E6wO'xOpO1G.uO'xOpO1G.uOOOP1G.u1G.uO(QOpO7+$fOOOP7+$f7+$fO(YO!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(eO#tO'#CnOOOO1G.q1G.qO(sOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO({O#tO,59YOOOO,59Y,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.t",
                stateData: ")Z~OPQOSVOTWOVWOWWOXWOiXOxPO}TO!PUO~OuZOw]O~O^`Oy^O~OPQOQcOSVOTWOVWOWWOXWOxPO}TO!PUO~ORdO~P!SOseO|gO~OthO!OjO~O^lOy^O~OuZOwoO~O^qOy^O~O[vO`sOdwOy^O~ORyO~P!SO^{Oy^O~OseO|}O~OthO!O!PO~O^!QOy^O~O[!SOy^O~O[!VO`sOd!WOy^O~Oa!YOy^O~Oy^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oy^O~O[!_Oy^O~O[!aOy^O~O[!cO`sOd!dOy^O~O[!cO`sOd!dO~Oa!eOy^O~Oy^Oz!gO~Oy^O[ma`madma~O[!jOy^O~O[!kOy^O~O[!lO`sOd!mO~OW!pOX!pOz!rO{!pO~O[!sOy^O~OW!pOX!pOz!vO{!pO~O",
                goto: "%[wPPPPPPPPPPxxP!OP!UPP!_!iP!oxxxP!u!{#R$Z$j$p$v$|PPPP%SXWORYbXRORYb_t`qru!T!U!bQ!h!YS!o!e!fR!t!nQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!i!nQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!i!]R!n!eQu`S!UqrU![u!U!bR!b!TQ!q!gR!u!qQbRRxbQfTR|fQiUR!OiSXOYTaRb",
                nodeNames: "\u26a0 StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
                maxTerm: 47,
                context: u,
                nodeProps: [["closedBy", 1, "SelfCloseEndTag EndTag", 13, "CloseTag MissingCloseTag"], ["openedBy", 12, "StartTag StartCloseTag", 19, "OpenTag", 20, "StartTag"], ["isolate", -6, 13, 18, 19, 21, 22, 24, ""]],
                propSources: [g],
                skippedNodes: [0],
                repeatNodeCount: 8,
                tokenData: "Jy~R!XOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs'ssv$nvw(Zw}$n}!O,^!O!P$n!P!Q.m!Q![$n![!]0V!]!^$n!^!_3h!_!`El!`!aF_!a!bGQ!b!c$n!c!}0V!}#P$n#P#QHj#Q#R$n#R#S0V#S#T$n#T#o0V#o%W$n%W%o0V%o%p$n%p&a0V&a&b$n&b1p0V1p4U$n4U4d0V4d4e$n4e$IS0V$IS$I`$n$I`$Ib0V$Ib$Kh$n$Kh%#t0V%#t&/x$n&/x&Et0V&Et&FV$n&FV;'S0V;'S;:j3b;:j;=`&e<%l?&r$n?&r?Ah0V?Ah?BY$n?BY?Mn0V?MnO$nX$uWVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nP%dTVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_P%vP;=`<%l%_W&OT{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yW&bP;=`<%l%yX&hP;=`<%l$n_&t_VP{WyUOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ'zTzYVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_~(^ast)c![!]*g!c!}*g#R#S*g#T#o*g%W%o*g%p&a*g&b1p*g4U4d*g4e$IS*g$I`$Ib*g$Kh%#t*g&/x&Et*g&FV;'S*g;'S;:j,W?&r?Ah*g?BY?Mn*g~)fQ!Q![)l#l#m)z~)oQ!Q![)l!]!^)u~)zOX~~)}R!Q![*W!c!i*W#T#Z*W~*ZS!Q![*W!]!^)u!c!i*W#T#Z*W~*jg}!O*g!O!P*g!Q![*g![!]*g!]!^,R!c!}*g#R#S*g#T#o*g$}%O*g%W%o*g%p&a*g&b1p*g1p4U*g4U4d*g4e$IS*g$I`$Ib*g$Je$Jg*g$Kh%#t*g&/x&Et*g&FV;'S*g;'S;:j,W?&r?Ah*g?BY?Mn*g~,WOW~~,ZP;=`<%l*gZ,eYVP{WOr$nrs%_sv$nw}$n}!O-T!O!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ-[YVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a-z!a;'S$n;'S;=`&e<%lO$nZ.TW|QVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n].tYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a/d!a;'S$n;'S;=`&e<%lO$n]/mWdSVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_0b!O`S^QVP{WOr$nrs%_sv$nw}$n}!O0V!O!P0V!P!Q$n!Q![0V![!]0V!]!^$n!^!_%y!_!c$n!c!}0V!}#R$n#R#S0V#S#T$n#T#o0V#o$}$n$}%O0V%O%W$n%W%o0V%o%p$n%p&a0V&a&b$n&b1p0V1p4U0V4U4d0V4d4e$n4e$IS0V$IS$I`$n$I`$Ib0V$Ib$Je$n$Je$Jg0V$Jg$Kh$n$Kh%#t0V%#t&/x$n&/x&Et0V&Et&FV$n&FV;'S0V;'S;:j3b;:j;=`&e<%l?&r$n?&r?Ah0V?Ah?BY$n?BY?Mn0V?MnO$n_3eP;=`<%l0VX3mW{WOq%yqr4Vsv%yw!a%y!a!bEU!b;'S%y;'S;=`&_<%lO%yX4[]{WOr%ysv%yw}%y}!O5T!O!f%y!f!g6V!g!}%y!}#O;f#O#W%y#W#XAr#X;'S%y;'S;=`&_<%lO%yX5YV{WOr%ysv%yw}%y}!O5o!O;'S%y;'S;=`&_<%lO%yX5vT}P{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX6[V{WOr%ysv%yw!q%y!q!r6q!r;'S%y;'S;=`&_<%lO%yX6vV{WOr%ysv%yw!e%y!e!f7]!f;'S%y;'S;=`&_<%lO%yX7bV{WOr%ysv%yw!v%y!v!w7w!w;'S%y;'S;=`&_<%lO%yX7|V{WOr%ysv%yw!{%y!{!|8c!|;'S%y;'S;=`&_<%lO%yX8hV{WOr%ysv%yw!r%y!r!s8}!s;'S%y;'S;=`&_<%lO%yX9SV{WOr%ysv%yw!g%y!g!h9i!h;'S%y;'S;=`&_<%lO%yX9nX{WOr9irs:Zsv9ivw:Zw!`9i!`!a:x!a;'S9i;'S;=`;`<%lO9iP:^TO!`:Z!`!a:m!a;'S:Z;'S;=`:r<%lO:ZP:rOiPP:uP;=`<%l:ZX;PTiP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX;cP;=`<%l9iX;kX{WOr%ysv%yw!e%y!e!f<W!f#V%y#V#W?f#W;'S%y;'S;=`&_<%lO%yX<]V{WOr%ysv%yw!f%y!f!g<r!g;'S%y;'S;=`&_<%lO%yX<wV{WOr%ysv%yw!c%y!c!d=^!d;'S%y;'S;=`&_<%lO%yX=cV{WOr%ysv%yw!v%y!v!w=x!w;'S%y;'S;=`&_<%lO%yX=}V{WOr%ysv%yw!c%y!c!d>d!d;'S%y;'S;=`&_<%lO%yX>iV{WOr%ysv%yw!}%y!}#O?O#O;'S%y;'S;=`&_<%lO%yX?VT{WxPOr%ysv%yw;'S%y;'S;=`&_<%lO%yX?kV{WOr%ysv%yw#W%y#W#X@Q#X;'S%y;'S;=`&_<%lO%yX@VV{WOr%ysv%yw#T%y#T#U@l#U;'S%y;'S;=`&_<%lO%yX@qV{WOr%ysv%yw#h%y#h#iAW#i;'S%y;'S;=`&_<%lO%yXA]V{WOr%ysv%yw#T%y#T#U>d#U;'S%y;'S;=`&_<%lO%yXAwV{WOr%ysv%yw#c%y#c#dB^#d;'S%y;'S;=`&_<%lO%yXBcV{WOr%ysv%yw#V%y#V#WBx#W;'S%y;'S;=`&_<%lO%yXB}V{WOr%ysv%yw#h%y#h#iCd#i;'S%y;'S;=`&_<%lO%yXCiV{WOr%ysv%yw#m%y#m#nDO#n;'S%y;'S;=`&_<%lO%yXDTV{WOr%ysv%yw#d%y#d#eDj#e;'S%y;'S;=`&_<%lO%yXDoV{WOr%ysv%yw#X%y#X#Y9i#Y;'S%y;'S;=`&_<%lO%yXE]T!PP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yZEuWaQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_FhW[UVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZGXYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aGw!a;'S$n;'S;=`&e<%lO$nZHQW!OQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZHqYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_#P$n#P#QIa#Q;'S$n;'S;=`&e<%lO$nZIhYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aJW!a;'S$n;'S;=`&e<%lO$nZJaWwQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n",
                tokenizers: [d, f, p, m, 0, 1, 2, 3],
                topRules: {
                    Document: [0, 6]
                },
                tokenPrec: 0
            })
    }
    ,
    63079: (e, t, n) => {
        n.d(t, {
            G: () => o
        });
        const i = "undefined" == typeof Symbol ? "__\u037c" : Symbol.for("\u037c")
            , r = "undefined" == typeof Symbol ? "__styleSet" + Math.floor(1e8 * Math.random()) : Symbol("styleSet")
            , a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : {};
        class o {
            constructor(e, t) {
                this.rules = [];
                let { finish: n } = t || {};
                function i(e) {
                    return /^@/.test(e) ? [e] : e.split(/,\s*/)
                }
                function r(e, t, a, o) {
                    let O = []
                        , s = /^@(\w+)\b/.exec(e[0])
                        , l = s && "keyframes" == s[1];
                    if (s && null == t)
                        return a.push(e[0] + ";");
                    for (let n in t) {
                        let o = t[n];
                        if (/&/.test(n))
                            r(n.split(/,\s*/).map((t => e.map((e => t.replace(/&/, e))))).reduce(((e, t) => e.concat(t))), o, a);
                        else if (o && "object" == typeof o) {
                            if (!s)
                                throw new RangeError("The value of a property (" + n + ") should be a primitive value.");
                            r(i(n), o, O, l)
                        } else
                            null != o && O.push(n.replace(/_.*/, "").replace(/[A-Z]/g, (e => "-" + e.toLowerCase())) + ": " + o + ";")
                    }
                    (O.length || l) && a.push((!n || s || o ? e : e.map(n)).join(", ") + " {" + O.join(" ") + "}")
                }
                for (let a in e)
                    r(i(a), e[a], this.rules)
            }
            getRules() {
                return this.rules.join("\n")
            }
            static newName() {
                let e = a[i] || 1;
                return a[i] = e + 1,
                    "\u037c" + e.toString(36)
            }
            static mount(e, t, n) {
                let i = e[r]
                    , a = n && n.nonce;
                i ? a && i.setNonce(a) : i = new s(e, a),
                    i.mount(Array.isArray(t) ? t : [t], e)
            }
        }
        let O = new Map;
        class s {
            constructor(e, t) {
                let n = e.ownerDocument || e
                    , i = n.defaultView;
                if (!e.head && e.adoptedStyleSheets && i.CSSStyleSheet) {
                    let t = O.get(n);
                    if (t)
                        return e[r] = t;
                    this.sheet = new i.CSSStyleSheet,
                        O.set(n, this)
                } else
                    this.styleTag = n.createElement("style"),
                        t && this.styleTag.setAttribute("nonce", t);
                this.modules = [],
                    e[r] = this
            }
            mount(e, t) {
                let n = this.sheet
                    , i = 0
                    , r = 0;
                for (let a = 0; a < e.length; a++) {
                    let t = e[a]
                        , o = this.modules.indexOf(t);
                    if (o < r && o > -1 && (this.modules.splice(o, 1),
                        r--,
                        o = -1),
                        -1 == o) {
                        if (this.modules.splice(r++, 0, t),
                            n)
                            for (let e = 0; e < t.rules.length; e++)
                                n.insertRule(t.rules[e], i++)
                    } else {
                        for (; r < o;)
                            i += this.modules[r++].rules.length;
                        i += t.rules.length,
                            r++
                    }
                }
                if (n)
                    t.adoptedStyleSheets.indexOf(this.sheet) < 0 && (t.adoptedStyleSheets = [this.sheet, ...t.adoptedStyleSheets]);
                else {
                    let e = "";
                    for (let t = 0; t < this.modules.length; t++)
                        e += this.modules[t].getRules() + "\n";
                    this.styleTag.textContent = e;
                    let n = t.head || t;
                    this.styleTag.parentNode != n && n.insertBefore(this.styleTag, n.firstChild)
                }
            }
            setNonce(e) {
                this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e)
            }
        }
    }
}]);
//# sourceMappingURL=962.17ccdb75.chunk.js.map
