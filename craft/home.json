[
  {
    "title": "春江花月夜",
    "type": "Life",
    "description": "春江潮水连海平，海上明月共潮生。滟滟随波千万里，何处春江无月明。江流宛转绕芳甸，月照花林皆似霰。空里流霜不觉飞，汀上白沙看不见。江天一色无纤尘，皎皎空中孤月轮。江畔何人初见月？江月何年初照人？人生代代无穷已，江月年年望相似。不知江月待何人，但见长江送流水。白云一片去悠悠，青枫浦上不胜愁。谁家今夜扁舟子，何处相思明月楼？可怜楼上月徘徊，应照离人妆镜台。玉户帘中卷不去，捣衣砧上拂还来。此时相望不相闻，愿逐月华流照君。鸿雁长飞光不度，鱼龙潜跃水成文。昨夜闲潭梦落花，可怜春半不还家。江水流春去欲尽，江潭落月复西斜。斜月沉沉藏海雾，碣石潇湘无限路。不知乘月几人归，落月摇情满江树。",
    "uuid": "V6s6ezPayx3C1b",
    "tag": "",
    "protected": "",
    "index": 1,
    "info": ""
  },
  {
    "title": "C#-垃圾回收机制(GC)",
    "type": "Area",
    "description": "什么是GC官网中有这么一句话：The garbage collector is a common language runtime component that controls the allocation and release of managed memory。垃圾回收机制（Garba...",
    "uuid": "tOkBVPQllrhM1f",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "C#-值类型vs引用类型",
    "type": "Area",
    "description": "分为托管资源和非托管资源：托管资源指的是.NET可以自动进行回收的资源，主要是指托管堆上分配的内存资源。托管资源的回收工作是不需要人工干预的，由.NET运行库在合适时机调用垃圾回收器进行回收。非托管资源指的是.NET不知道如何回收的资源，最常见的一类非托管资源是包装操作系统资源的对象，例如：文...",
    "uuid": "oHxuKtJhSwkD8H",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "C#-内存管理(Stack和Heap)",
    "type": "Area",
    "description": "每个线程对应一个stack，线程创建的时候CLR为其创建这个stack，stack主要作用是记录函数的执行情况。值类型变量（函数的参数、局部变量 等非成员变量）都分配在stack中，引用类型的对象分配在heap中，在stack中保存heap对象的引用指针。GC只负责heap对象的释放，heap...",
    "uuid": "OVYywPTtdjKbyD",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "C#-CLR、内存分配与内存回收",
    "type": "Area",
    "description": "CLRCLR：即公共语言运行时(Common Language Runtime)，是中间语言（IL）的运行时环境，负责将编译生成的MSIL编译成计算机可以识别的机器码，负责资源管理（内存分配和垃圾回收等）。可能有人会提问：为什么不直接编译成机器码，而要先编译成IL，然后在编译成机器码呢？原因是...",
    "uuid": "vdHw6tbQWx90Sp",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "C#-异步编程",
    "type": "Area",
    "description": "什么是异步同步和异步主要用于修饰方法。当一个方法被调用时，调用者需要等待该方法执行完毕并返回才能继续执行，我们称这个方法是同步方法；当一个方法被调用时立即返回，并获取一个线程执行该方法内部的业务，调用者不用等待该方法执行完毕，我们称这个方法为异步方法。Thread < ThreadPoll <...",
    "uuid": "qmJXVvVjdzgjCu",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "C#-线程同步",
    "type": "Area",
    "description": "简介本章介绍在C#中实现线程同步的几种方法。因为多个线程同时访问共享数据时，可能会造成共享数据的损坏，从而导致与预期的结果不相符。为了解决这个问题，所以需要用到线程同步，也被俗称为“加锁”。但是加锁绝对不对提高性能，最多也就是不增不减，要实现性能不增不减还得靠高质量的同步源语(Synchron...",
    "uuid": "kjtJYDtFUsLs3A",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "C#-资源类型(托管资源和非托管资源)",
    "type": "Area",
    "description": "分为托管资源和非托管资源：托管资源指的是.NET可以自动进行回收的资源，主要是指托管堆上分配的内存资源。托管资源的回收工作是不需要人工干预的，由.NET运行库在合适时机调用垃圾回收器进行回收。非托管资源指的是.NET不知道如何回收的资源，最常见的一类非托管资源是包装操作系统资源的对象，例如：文...",
    "uuid": "IjRjAuCRgKQhAg",
    "tag": "C#",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-MVVM",
    "type": "Area",
    "description": "MVVM介绍其实就是：Model 、view、viewmodel三个的简称，就像MVC一样。model就是模型。view就是视图。viewmodel就是和view进行绑定的。MVVM示意图如下所示：安装MvvmLight插件MVVM开发步骤主要通过MVVM实现数据的CRUD【增删改查】基础操作...",
    "uuid": "fm6kLcZVtL3fDG",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-命令(ICommand)",
    "type": "Area",
    "description": "使用Command可以实现UI层跟业务层分离，不必在UI层定义事件方法，近而减少耦合。开发示例界面展示_UI层<Window x:Class=\"WpfCommand.MainWindow\" xmlns=\"http://schemas.microsoft.com/winfx/20...",
    "uuid": "A7PXa5y00KFCR9",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-通知更改INotifyPropertyChanged",
    "type": "Area",
    "description": "有两种方式简单方式-在赋值的时候调用PropertyChangednamespace wpfApp1 { public class MainViewModel:INotifyPropertyChanged { public MyCommand ShowComma...",
    "uuid": "OBXgbgk9fuqa31",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-绑定",
    "type": "Area",
    "description": "开发示例-前端ui",
    "uuid": "zAGu0lauz8p3kT",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-依赖属性",
    "type": "Area",
    "description": "依赖属性介绍wpf提供了一组服务，这些服务可用于扩展公共语言运行时 (CLR) 属性的功能。 这些服务通常统称为 wpf 属性系统。 由 wpf 属性系统支持的属性称为依赖属性。为什么要使用依赖属性场景一：一个界面有100个按钮，每个按钮有100个属性，那么系统需要为10000个属性分配内存，...",
    "uuid": "ZOJ5cFryf3iLnI",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-路由事件",
    "type": "Area",
    "description": "什么是路由事件简单说，路由事件可以沿着视觉树VisualTree进行传递，在这视觉树中的所有对象都可以收到这个事件。前提是添加了检测。什么是逻辑树LogicalTree简单理解：逻辑树就是我们在xaml中写的布局逻辑如xaml代码： 　　<StackPanel Orienta...",
    "uuid": "0WKhXjVNl9EmLe",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-模板",
    "type": "Area",
    "description": "两类模板控件模板（ControlTemplate）是算法内容的表现形式，一个控件怎么组织其内部的结构才能让它更符合业务逻辑，让用户操作更舒服，都是由她控制的。它决定了控件长什么样子，并让程序员有机会在控件原有的内部逻辑基础上扩展自己的逻辑。数据模板（DataTemplate）是数据内容的表现形...",
    "uuid": "iZxVUavNssNnrx",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "WPF-Invoke与BeginInvoke的区别",
    "type": "Area",
    "description": "在wpf多线程编程中，经常要在工作线程中更新界面显示，Invoke和BeginInvoke即是为了解决此类问题。在wpf多线程编程模型中，通过Dispatcher调度程序，来管理UI工作项队列，并拥有应用程序主线程，在大多数wpf应用程序中，只存在一个用户界面线程和一个调度器。在非UI线程更新...",
    "uuid": "t8kKYowbSdsh9Y",
    "tag": "WPF",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "网络协议-SOCKET",
    "type": "Area",
    "description": "分层介绍以下是各层功能描述：物理层协议：负责0、1 比特流（0/1序列）与电压的高低、逛的闪灭之间的转换。规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性；该层为上层协议提供了一个传输数据的物理媒体，只是说明标准。在这一层，数据的单位称为比特（bit）（注：bit和...",
    "uuid": "mbTQpcwVt6SAPH",
    "tag": "SOCKET",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "Modbus-RTU通信模式",
    "type": "Area",
    "description": "通信格式RTU模式下，每一个字符传送格式，在该模式下发送一个字符需要11位二进制。位说明起始位1位数据数据长度8位，低位先发送校验位1位(有校验)，0位(无校验)停止位1位(有校验)，2位(无校验)波特率用户自选选数据格式帧结构帧结构 = 起始位(1位) + 地址码(1位) + 功能码(1位)...",
    "uuid": "AiN6ToE36ZPaWv",
    "tag": "",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "排序算法",
    "type": "Area",
    "description": "介绍冒泡排序:时间复杂度O(n2),空间复杂度O(1),稳定。选择排序:时间复杂度O(n2),空间复杂度O(1),不稳定。插入排序:时间复杂度O(n2),空间复杂度O(1),稳定。快速排序:时间复杂度O(nlogn),空间复杂度O(logn),不稳定。归并排序:时间复杂度O(nlogn),空间...",
    "uuid": "vv6N0g3Xi0r2es",
    "tag": "算法",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "QT-信号槽机制",
    "type": "Area",
    "description": "QT-信号槽机制QT 中的信号和槽机制是一种事件驱动的编程模型，用于在对象之间进行通信。信号是一种特殊的函数，当某个事件发生时会被发射出去，槽是一种函数，用于接收信号并执行相应的操作。使用信号和槽机制需要以下步骤：定义信号：在类中声明一个信号，例如：signals: void butt...",
    "uuid": "gJFOcxTiyccVkV",
    "tag": "QT",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "QT-MVC 模式",
    "type": "Area",
    "description": "什么是MVC模式？Qt中的MVC（Model-View-Controller）模式是一种设计模式，用于实现 GUI 应用程序的分层和模块化开发。MVC 分为三个组件：模型（Model）、视图（View）和控制器（Controller）。模型（Model）：模型是应用程序中数据的表示，用于管理数...",
    "uuid": "NBKeRjs9kv28AA",
    "tag": "QT",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "Windows消息机制",
    "type": "Area",
    "description": "Windows 是一个事件驱动的操作系统。事件驱动围绕着消息的产生与处理展开，事件驱动是靠消息循环机制来实现的。也可以理解为消息是一种报告有关事件发生的通知，消息是Windows 操作系统的灵魂。在屏幕显示一个窗口一般是以下几个步骤：得到应用程序的句柄（GetMouduleHandle，一个程...",
    "uuid": "447ppcrp4aOUXn",
    "tag": "C++,windows",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "Windbg的使用",
    "type": "Area",
    "description": "首先，需要在编译时启用调试信息（/Zi 或 /ZI）和禁用优化（/Od），以便生成可调试的程序。打开Windbg，并在File菜单中选择Open Executable，选择被调试的可执行文件。在Windbg中输入以下命令，启用符号路径...",
    "uuid": "tMIUUWsTFbsipO",
    "tag": "C++,windows",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "SignalR的使用",
    "type": "Area",
    "description": "1. 先定义通用的类`CommonHub`\n2. 页面前端代码\n3. 页面后台代码调用",
    "uuid": "fsRYCbzmEd6dZz",
    "tag": "C#,web",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "魔方总结",
    "type": "Life",
    "description": "拼好白面并对齐底层中间块中间块：Ｒ'ＵＦ'Ｕ'角块：Ｒ'Ｄ'ＲＤ拼好白面底层和中间层公式１：ＦＵＦＵＦＵ'Ｆ'Ｕ'Ｆ'公式２：Ｒ'Ｕ'Ｒ'Ｕ'Ｒ'ＵＲＵＲ拼好顶层黄色十字ＦＲＵＲ'Ｕ'Ｆ'拼好顶面黄色放置：黄色十字面非白色块的个数对应“２后４左”小鱼１：Ｒ'Ｕ'ＲＵ'Ｒ'Ｕ2Ｒ，侧面黄色在左，...",
    "uuid": "pgGqKLPzGHPunP",
    "tag": "",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "Windows技巧",
    "type": "Resource",
    "description": "Win10 关闭下载目录的分组显示win10 1903 以后的版本, 下载目录会始终用分组+按时间排序方式显示, 是因为微软给下载目录单独设置了一个目录模板想修改成自己要的显示风格就只能改注册表的模板了",
    "uuid": "rlsIR7h4VqSB3K",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "windows部署hexo",
    "type": "Resource",
    "description": "下载并安装node.js，官网地址：Node.js — 在任何地方运行 JavaScript (nodejs.org)下载并安装git，官网地址：Git - Downloads (git-scm.com)用管理员打开cmd，执行//1.检查node-v是否安装成功，成功后会提示v20.16.0...",
    "uuid": "N4F84UwshOFgzy",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "hexo常用命令",
    "type": "Resource",
    "description": "用于安装 hexo 博客框架npm install -g hexo-cli用于创建并初始化\"blog\"目录hexo init blog用新建一篇文章hexo new title该用于生成静态文件hexo g用于启动本地服务器hexo s注：可以添加一些参数-p 选项，指定服务器端口，默...",
    "uuid": "gPcCCvoxmqDvj9",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "hexo更换markdown渲染器",
    "type": "Resource",
    "description": "先卸载原来的，默认的为“hexo-renderer-marked”npm un hexo-renderer-marked --save再安装新的npm i hexo-renderer-markdown-it-plus --save最后安装新的渲染器的依赖npm i markdown-it-ch...",
    "uuid": "aHQgxNI1ukAppJ",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "frp-内网穿透",
    "type": "Resource",
    "description": "安装包地址Releases · fatedier/frp服务器端（Ubuntu）下载📎frp_0.48.0_linux_amd64.tar.gzwget https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_...",
    "uuid": "JbXT4NQ0zOjAPk",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "scrcpy-Android投屏",
    "type": "Resource",
    "description": "介绍scrcpy就是通过adb调试的方式来将手机屏幕投到电脑上，并可以通过电脑控制您的Android设备。它可以通过USB连接，也可以通过Wifi连接（类似于隔空投屏），而且不需要任何root权限，不需要在手机里安装任何程序。scrcpy同时适用于GNU / Linux，Windows和mac...",
    "uuid": "Jvy2Xvh1Y6lEwN",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "mac上编译.net core",
    "type": "Resource",
    "description": "mac上安装.net8下载下图中的安装包，并安装 或者/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install --cask dotn...",
    "uuid": "VwXd24AuhB8SMY",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "Matlab使用",
    "type": "Resource",
    "description": "matlab5.3_lite单文件（win）📎matlab5.3chs.zipMatlab 变量变量命名原则：以字母或者下划线开头(很少用下划线打头啊)；后面可以跟字母、数字和下划线；变量名区分字母的大小写.Matlab 语句的通常形式变量 = 表达式;表达式是用运算符将有关运算量连接起来的...",
    "uuid": "R8PtGIk1X9ZnOV",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "Linux 操作记录",
    "type": "Resource",
    "description": "ubuntu 设置中文环境：修改步骤检查当前环境：执行echo $LANG注：如果屏幕显示en_US.UTF-8，说明是英语环境(有中文字符文件时会乱码)，需要切换到中文环境，中文环境下会显示zh_CN.UTF-8。安装中文语言包：执行apt-get update && apt-get install language-...",
    "uuid": "90sbOr1jp7G9GG",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "在netlify上部署云函数",
    "type": "Resource",
    "description": "推送代码到github上安装node.js执行语句npm install mysql2根目录新建netlify.toml文件和functions目录下hello.js和mysql.js文件[build] functions = \"functions\"const mysql = require...",
    "uuid": "0X5fpdmmi3aSJ9",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "npm常用命令",
    "type": "Resource",
    "description": "查看镜像源 npm config get registry更换为淘宝源npm config set registry https://registry.npmmirror.comnpm/、yarn等对比特性npmYarnTinyBun速度较慢快更快非常快锁文件package-lock.jsony...",
    "uuid": "2wUvbSDESECSA2",
    "tag": "tool",
    "protected": "",
    "index": "",
    "info": ""
  },
  {
    "title": "FQ脚本",
    "type": "Resource",
    "description": "常用的科学脚本",
    "uuid": "kQpYKLlonwgTng",
    "tag": "",
    "protected": true,
    "index": "",
    "info": ""
  },
  {
    "title": "周报 2025",
    "type": "Project",
    "description": "2025年工作的周报",
    "uuid": "YsozJFrT3k5y9O",
    "tag": "",
    "protected": true,
    "index": 999,
    "info": ""
  }
]